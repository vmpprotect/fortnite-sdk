#pragma once

// Dumped with <3 by android1337
// Version: ++Fortnite+Release-31.00-CL-35447195
// Package: Engine
// Current Base + Text VA: 0x0
// WARNING: Memory::va_text is 0, ufunctions will show current addresses

namespace SDK
{

	// Class Engine.Actor
	// Inherited from UObject
	// Size: 0x268 (0x290 - 0x28)
	class AActor : public UObject	
	{
	public:
		FActorTickFunction PrimaryActorTick; // 0x28(0x30)
		bool bNetTemporary : 1; // 0x58:0(0x1)
		unsigned char UnknownBit20 : 1; // 0x58:1(0x1) UNKNOWN PROPERTY
		bool bOnlyRelevantToOwner : 1; // 0x58:2(0x1)
		bool bAlwaysRelevant : 1; // 0x58:3(0x1)
		bool bReplicateMovement : 1; // 0x58:4(0x1)
		bool bCallPreReplication : 1; // 0x58:5(0x1)
		bool bCallPreReplicationForReplay : 1; // 0x58:6(0x1)
		bool bHidden : 1; // 0x58:7(0x1)
		bool bTearOff : 1; // 0x59:0(0x1)
		bool bForceNetAddressable : 1; // 0x59:1(0x1)
		bool bExchangedRoles : 1; // 0x59:2(0x1)
		bool bNetLoadOnClient : 1; // 0x59:3(0x1)
		bool bNetUseOwnerRelevancy : 1; // 0x59:4(0x1)
		bool bRelevantForNetworkReplays : 1; // 0x59:5(0x1)
		bool bRelevantForLevelBounds : 1; // 0x59:6(0x1)
		bool bReplayRewindable : 1; // 0x59:7(0x1)
		bool bAllowTickBeforeBeginPlay : 1; // 0x5A:0(0x1)
		bool bAutoDestroyWhenFinished : 1; // 0x5A:1(0x1)
		bool bCanBeDamaged : 1; // 0x5A:2(0x1)
		bool bBlockInput : 1; // 0x5A:3(0x1)
		bool bCollideWhenPlacing : 1; // 0x5A:4(0x1)
		bool bFindCameraComponentWhenViewTarget : 1; // 0x5A:5(0x1)
		bool bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x5A:6(0x1)
		bool bIgnoresOriginShifting : 1; // 0x5A:7(0x1)
		bool bEnableAutoLODGeneration : 1; // 0x5B:0(0x1)
		bool bIsEditorOnlyActor : 1; // 0x5B:1(0x1)
		unsigned char UnknownBit21 : 1; // 0x5B:2(0x1) UNKNOWN PROPERTY
		bool bReplicates : 1; // 0x5B:3(0x1)
		bool bCanBeInCluster : 1; // 0x5B:4(0x1)
		bool bAllowReceiveTickEventOnDedicatedServer : 1; // 0x5B:5(0x1)
		unsigned char UnknownBit22 : 1; // 0x5B:6(0x1) UNKNOWN PROPERTY
		bool bReplicateUsingRegisteredSubObjectList : 1; // 0x5B:7(0x1)
		unsigned char UnknownBit23 : 1; // 0x5C:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit24 : 1; // 0x5C:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit25 : 1; // 0x5C:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit26 : 1; // 0x5C:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit27 : 1; // 0x5C:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit28 : 1; // 0x5C:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit29 : 1; // 0x5C:6(0x1) UNKNOWN PROPERTY
		bool bActorEnableCollision : 1; // 0x5C:7(0x1)
		bool bActorIsBeingDestroyed : 1; // 0x5D:0(0x1)
		unsigned char UnknownBit30 : 1; // 0x5D:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit31 : 1; // 0x5D:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit32 : 1; // 0x5D:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit33 : 1; // 0x5D:4(0x1) UNKNOWN PROPERTY
		bool bAsyncPhysicsTickEnabled : 1; // 0x5D:5(0x1)
		EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x5E(0x1)
		EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5F(0x1)
		TEnumAsByte RemoteRole; // 0x60(0x1)
		unsigned char UnknownData34_6[0x3]; // 0x61(0x3) UNKNOWN PROPERTY
		float InitialLifeSpan; // 0x64(0x4)
		float CustomTimeDilation; // 0x68(0x4)
		int32_t RayTracingGroupId; // 0x6C(0x4)
		FRepAttachment AttachmentReplication; // 0x70(0x60)
		FRepMovement ReplicatedMovement; // 0xD0(0x70)
		AActor Owner; // 0x140(0x8)
		FName NetDriverName; // 0x148(0x4)
		TEnumAsByte Role; // 0x14C(0x1)
		TEnumAsByte NetDormancy; // 0x14D(0x1)
		ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x14E(0x1)
		TEnumAsByte AutoReceiveInput; // 0x14F(0x1)
		int32_t InputPriority; // 0x150(0x4)
		unsigned char UnknownData35_6[0x4]; // 0x154(0x4) UNKNOWN PROPERTY
		UInputComponent InputComponent; // 0x158(0x8)
		int32_t NetTag; // 0x160(0x4)
		float NetCullDistanceSquared; // 0x164(0x4)
		float NetUpdateFrequency; // 0x168(0x4)
		float MinNetUpdateFrequency; // 0x16C(0x4)
		float NetPriority; // 0x170(0x4)
		EPhysicsReplicationMode PhysicsReplicationMode; // 0x174(0x1)
		unsigned char UnknownData36_6[0xB]; // 0x175(0xB) UNKNOWN PROPERTY
		APawn Instigator; // 0x180(0x8)
		TArray Children; // 0x188(0x10)
		USceneComponent RootComponent; // 0x198(0x8)
		unsigned char UnknownData37_6[0x8]; // 0x1A0(0x8) UNKNOWN PROPERTY
		TArray Layers; // 0x1A8(0x10)
		TWeakObjectPtr ParentComponent; // 0x1B8(0x8)
		unsigned char UnknownData38_6[0x10]; // 0x1C0(0x10) UNKNOWN PROPERTY
		TArray Tags; // 0x1D0(0x10)
		FMulticastSparseDelegate OnTakeAnyDamage; // 0x1E0(0x1)
		FMulticastSparseDelegate OnTakePointDamage; // 0x1E1(0x1)
		FMulticastSparseDelegate OnTakeRadialDamage; // 0x1E2(0x1)
		FMulticastSparseDelegate OnActorBeginOverlap; // 0x1E3(0x1)
		FMulticastSparseDelegate OnActorEndOverlap; // 0x1E4(0x1)
		FMulticastSparseDelegate OnBeginCursorOver; // 0x1E5(0x1)
		FMulticastSparseDelegate OnEndCursorOver; // 0x1E6(0x1)
		FMulticastSparseDelegate OnClicked; // 0x1E7(0x1)
		FMulticastSparseDelegate OnReleased; // 0x1E8(0x1)
		FMulticastSparseDelegate OnInputTouchBegin; // 0x1E9(0x1)
		FMulticastSparseDelegate OnInputTouchEnd; // 0x1EA(0x1)
		FMulticastSparseDelegate OnInputTouchEnter; // 0x1EB(0x1)
		FMulticastSparseDelegate OnInputTouchLeave; // 0x1EC(0x1)
		FMulticastSparseDelegate OnActorHit; // 0x1ED(0x1)
		FMulticastSparseDelegate OnDestroyed; // 0x1EE(0x1)
		FMulticastSparseDelegate OnEndPlay; // 0x1EF(0x1)
		unsigned char UnknownData39_6[0x80]; // 0x1F0(0x80) UNKNOWN PROPERTY
		TArray InstanceComponents; // 0x270(0x10)
		TArray BlueprintCreatedComponents; // 0x280(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Actor");
			return ret;
		}

		bool WasRecentlyRendered(float Tolerance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4124998D0
		void UserConstructionScript(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4124997F0
		void TearOff(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412499710
		void SetTickGroup(TEnumAsByte NewTickGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412499630
		void SetTickableWhenPaused(bool bTickableWhenPaused); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412499550
		void SetReplicates(bool bInReplicates); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF412499470
		void SetReplicateMovement(bool bInReplicateMovement); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412499390
		void SetRayTracingGroupId(int32_t InRaytracingGroupId); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4124992B0
		void SetPhysicsReplicationMode(EPhysicsReplicationMode ReplicationMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4124991D0
		void SetOwner(AActor NewOwner); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4124990F0
		void SetNetUpdateFrequency(float Frequency); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412499010
		void SetNetDormancy(TEnumAsByte NewDormancy); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF412498F30
		void SetNetCullDistanceSquared(float DistanceSq); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498E50
		void SetMinNetUpdateFrequency(float MinFrequency); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498D70
		void SetLifeSpan(float InLifespan); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498C90
		void SetAutoDestroyWhenFinished(bool bVal); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498BB0
		void SetActorTickInterval(float TickInterval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498AD0
		void SetActorTickEnabled(bool bEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4124989F0
		void SetActorScale3D(FVector NewScale3D); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF412498910
		void SetActorRelativeScale3D(FVector NewRelativeScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF412498830
		void SetActorHiddenInGame(bool bNewHidden); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498750
		void SetActorEnableCollision(bool bNewActorEnableCollision); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498670
		void RemoveTickPrerequisiteComponent(UActorComponent PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412498590
		void RemoveTickPrerequisiteActor(AActor PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4124984B0
		void ReceiveTick(float DeltaSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4124983D0
		void ReceiveRadialDamage(float DamageReceived, UDamageType DamageType, FVector Origin, FHitResult& HitInfo, AController InstigatedBy, AActor DamageCauser); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF4124982F0
		void ReceivePointDamage(float Damage, UDamageType DamageType, FVector HitLocation, FVector HitNormal, UPrimitiveComponent HitComponent, FName BoneName, FVector ShotFromDirection, AController InstigatedBy, AActor DamageCauser, FHitResult& HitInfo); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF412498210
		void ReceiveHit(UPrimitiveComponent MyComp, AActor Other, UPrimitiveComponent OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // Flags: RequiredAPI|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF412478130
		void ReceiveEndPlay(TEnumAsByte EndPlayReason); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF412478050
		void ReceiveDestroyed(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477F70
		void ReceiveBeginPlay(); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF412477E90
		void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477DB0
		void ReceiveAnyDamage(float Damage, UDamageType DamageType, AController InstigatedBy, AActor DamageCauser); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 0x7FF412477CD0
		void ReceiveActorOnReleased(FKey ButtonReleased); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477BF0
		void ReceiveActorOnInputTouchLeave(TEnumAsByte FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477B10
		void ReceiveActorOnInputTouchEnter(TEnumAsByte FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477A30
		void ReceiveActorOnInputTouchEnd(TEnumAsByte FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477950
		void ReceiveActorOnInputTouchBegin(TEnumAsByte FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477870
		void ReceiveActorOnClicked(FKey ButtonPressed); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477790
		void ReceiveActorEndOverlap(AActor OtherActor); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4124776B0
		void ReceiveActorEndCursorOver(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4124775D0
		void ReceiveActorBeginOverlap(AActor OtherActor); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4124774F0
		void ReceiveActorBeginCursorOver(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412477410
		void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412437330
		void OnRep_ReplicateMovement(); // Flags: RequiredAPI|Native|Public 0x7FF412437250
		void OnRep_ReplicatedMovement(); // Flags: RequiredAPI|Native|Public 0x7FF412437170
		void OnRep_Owner(); // Flags: RequiredAPI|Native|Protected 0x7FF412437090
		void OnRep_Instigator(); // Flags: RequiredAPI|Native|Public 0x7FF412436FB0
		void OnRep_AttachmentReplication(); // Flags: RequiredAPI|Native|Public 0x7FF412436ED0
		void MakeNoise(float Loudness, APawn NoiseInstigator, FVector NoiseLocation, float MaxRange, FName tag); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 0x7FF412436DF0
		bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF412436D10
		bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF412436C30
		bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF412436B50
		void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF412416A70
		void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF412416990
		void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4124168B0
		bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4124167D0
		bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4124166F0
		void K2_OnReset(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412416610
		void K2_OnEndViewTarget(APlayerController PC); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412416530
		void K2_OnBecomeViewTarget(APlayerController PC); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412416450
		USceneComponent K2_GetRootComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412416370
		TArray K2_GetComponentsByClass(UClass ComponentClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412416290
		FRotator K2_GetActorRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4124161B0
		FVector K2_GetActorLocation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4124160D0
		void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412415FF0
		void K2_DestroyActor(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412415F10
		bool K2_AttachToComponent(USceneComponent Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412415E30
		bool K2_AttachToActor(AActor ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412415D50
		void K2_AttachRootComponentToActor(AActor InParentActor, FName InSocketName, TEnumAsByte AttachLocationType, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF412415C70
		void K2_AttachRootComponentTo(USceneComponent InParent, FName InSocketName, TEnumAsByte AttachLocationType, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123F5B90
		void K2_AddActorWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F5AB0
		void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F59D0
		void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F58F0
		void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F5810
		void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F5730
		void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F5650
		void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123F5570
		bool IsOverlappingActor(AActor Other); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F5490
		bool IsChildActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F53B0
		bool IsActorTickEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F52D0
		bool IsActorBeingDestroyed(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F51F0
		bool HasAuthority(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F5110
		float GetVerticalDistanceTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F5030
		FVector GetVelocity(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4F50
		FTransform GetTransform(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4E70
		bool GetTickableWhenPaused(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123F4D90
		float GetSquaredHorizontalDistanceTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4CB0
		float GetSquaredDistanceTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4BD0
		float GetResimulationThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4AF0
		TEnumAsByte GetRemoteRole(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4A10
		int32_t GetRayTracingGroupId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4930
		EPhysicsReplicationMode GetPhysicsReplicationMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123F4850
		UChildActorComponent GetParentComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4770
		AActor GetParentActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4690
		AActor GetOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F45B0
		void GetOverlappingComponents(TArray& OverlappingComponents); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4123F44D0
		void GetOverlappingActors(TArray& OverlappingActors, UClass ClassFilter); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4123F43F0
		float GetNetUpdateFrequency(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4310
		float GetNetCullDistanceSquared(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4230
		float GetMinNetUpdateFrequency(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4150
		TEnumAsByte GetLocalRole(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F4070
		float GetLifeSpan(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3F90
		FTransform GetLevelTransform(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3EB0
		ULevel GetLevel(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3DD0
		AController GetInstigatorController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3CF0
		APawn GetInstigator(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3C10
		FVector GetInputVectorAxisValue(FKey InputAxisKey); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3B30
		float GetInputAxisValue(FName InputAxisName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3A50
		float GetInputAxisKeyValue(FKey InputAxisKey); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3970
		float GetHorizontalDotProductTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3890
		float GetHorizontalDistanceTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F37B0
		float GetGameTimeSinceCreation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F36D0
		float GetDotProductTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F35F0
		float GetDistanceTo(AActor OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3510
		TArray GetComponentsByTag(UClass ComponentClass, FName tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3430
		TArray GetComponentsByInterface(UClass Interface); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3350
		UActorComponent GetComponentByClass(UClass ComponentClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3270
		FName GetAttachParentSocketName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F3190
		AActor GetAttachParentActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F30B0
		void GetAttachedActors(TArray& OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2FD0
		void GetAllChildActors(TArray& ChildActors, bool bIncludeDescendants); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2EF0
		FVector GetActorUpVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2E10
		float GetActorTimeDilation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2D30
		float GetActorTickInterval(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2C50
		FVector GetActorScale3D(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2B70
		FVector GetActorRightVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F2A90
		FVector GetActorRelativeScale3D(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F29B0
		FVector GetActorForwardVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123F28D0
		void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123B27F0
		bool GetActorEnableCollision(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123B2710
		void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4123B2630
		void ForceNetUpdate(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B2550
		void FlushNetDormancy(); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF4123B2470
		void FinishAddComponent(UActorComponent Component, bool bManualAttachment, FTransform& RelativeTransform); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123B2390
		UActorComponent FindComponentByTag(UClass ComponentClass, FName tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123B22B0
		void EnableInput(APlayerController PlayerController); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B21D0
		void DisableInput(APlayerController PlayerController); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B20F0
		void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B2010
		void CreateInputComponent(UClass InputComponentToCreate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B1F30
		bool CanTriggerResimulation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123B1E50
		void AddTickPrerequisiteComponent(UActorComponent PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B1D70
		void AddTickPrerequisiteActor(AActor PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4123B1C90
		UActorComponent AddComponentByClass(UClass Class, bool bManualAttachment, FTransform& RelativeTransform, bool bDeferredFinish); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123B1BB0
		UActorComponent AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, UObject ComponentTemplateContext, bool bDeferredFinish); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4123B1AD0
		bool ActorHasTag(FName tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4123B19F0
	};


	// Class Engine.HUD
	// Inherited from AActor -> UObject
	// Size: 0xF0 (0x380 - 0x290)
	class AHUD : public AActor	
	{
	public:
		APlayerController PlayerOwner; // 0x290(0x8)
		bool bLostFocusPaused : 1; // 0x298:0(0x1)
		bool bShowHUD : 1; // 0x298:1(0x1)
		bool bShowDebugInfo : 1; // 0x298:2(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x299(0x3) UNKNOWN PROPERTY
		int32_t CurrentTargetIndex; // 0x29C(0x4)
		bool bShowHitBoxDebugInfo : 1; // 0x2A0:0(0x1)
		bool bShowOverlays : 1; // 0x2A0:1(0x1)
		bool bEnableDebugTextShadow : 1; // 0x2A0:2(0x1)
		unsigned char UnknownData05_5[0x7]; // 0x2A1(0x7) UNKNOWN PROPERTY
		TArray PostRenderedActors; // 0x2A8(0x10)
		unsigned char UnknownData06_6[0x8]; // 0x2B8(0x8) UNKNOWN PROPERTY
		TArray DebugDisplay; // 0x2C0(0x10)
		TArray ToggledDebugCategories; // 0x2D0(0x10)
		UCanvas Canvas; // 0x2E0(0x8)
		UCanvas DebugCanvas; // 0x2E8(0x8)
		TArray DebugTextList; // 0x2F0(0x10)
		UClass ShowDebugTargetDesiredClass; // 0x300(0x8)
		AActor ShowDebugTargetActor; // 0x308(0x8)
		unsigned char UnknownData07_7[0x70]; // 0x310(0x70) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HUD");
			return ret;
		}

		void ShowHUD(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF4145298B8
		void ShowDebugToggleSubCategory(FName category); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF4145297D8
		void ShowDebugForReticleTargetToggle(UClass DesiredClass); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF4145296F8
		void ShowDebug(FName DebugType); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414529618
		void RemoveDebugText(AActor SrcActor, bool bLeaveDurationText); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF414529538
		void RemoveAllDebugStrings(); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF414529458
		void ReceiveHitBoxRelease(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 0x7FF414529378
		void ReceiveHitBoxEndCursorOver(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 0x7FF414529298
		void ReceiveHitBoxClick(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 0x7FF4145291B8
		void ReceiveHitBoxBeginCursorOver(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 0x7FF4145290D8
		void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent 0x7FF414528FF8
		FVector Project(FVector Location, bool bClampToZeroPlane); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414528F18
		void PreviousDebugTarget(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414528E38
		void NextDebugTarget(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414528D58
		void GetTextSize(FString Text, float& OutWidth, float& OutHeight, UFont Font, float Scale); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414528C78
		APlayerController GetOwningPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414528B98
		APawn GetOwningPawn(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414528AB8
		void GetActorsInSelectionRectangle(UClass ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145289D8
		void DrawTextureSimple(UTexture Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145288F8
		void DrawTexture(UTexture Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414528818
		void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, UFont Font, float Scale, bool bScalePosition); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414528738
		void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414528658
		void DrawMaterialTriangle(UMaterialInterface Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414528578
		void DrawMaterialSimple(UMaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414528498
		void DrawMaterial(UMaterialInterface Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145283B8
		void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145282D8
		void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145281F8
		void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414528118
		void AddDebugText(FString DebugText, AActor SrcActor, float duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont InFont, float FontScale, bool bDrawShadow); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 0x7FF414528038
	};


	// Class Engine.ActorComponent
	// Inherited from UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UActorComponent : public UObject	
	{
	public:
		unsigned char UnknownData13_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FActorComponentTickFunction PrimaryComponentTick; // 0x30(0x30)
		TArray ComponentTags; // 0x60(0x10)
		TArray AssetUserData; // 0x70(0x10)
		unsigned char UnknownData14_6[0x4]; // 0x80(0x4) UNKNOWN PROPERTY
		int32_t UCSSerializationIndex; // 0x84(0x4)
		unsigned char UnknownBit15 : 1; // 0x88:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit16 : 1; // 0x88:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit17 : 1; // 0x88:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit18 : 1; // 0x88:3(0x1) UNKNOWN PROPERTY
		bool bNetAddressable : 1; // 0x88:4(0x1)
		bool bReplicateUsingRegisteredSubObjectList : 1; // 0x88:5(0x1)
		bool bReplicates : 1; // 0x88:6(0x1)
		unsigned char UnknownData19_3[0x1]; // 0x89(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit20 : 1; // 0x8A:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit21 : 1; // 0x8A:1(0x1) UNKNOWN PROPERTY
		bool bAutoActivate : 1; // 0x8A:2(0x1)
		bool bIsActive : 1; // 0x8A:3(0x1)
		bool bEditableWhenInherited : 1; // 0x8A:4(0x1)
		unsigned char UnknownBit22 : 1; // 0x8A:5(0x1) UNKNOWN PROPERTY
		bool bCanEverAffectNavigation : 1; // 0x8A:6(0x1)
		unsigned char UnknownBit23 : 1; // 0x8A:7(0x1) UNKNOWN PROPERTY
		bool bIsEditorOnly : 1; // 0x8B:0(0x1)
		unsigned char UnknownData24_5[0x1]; // 0x8C(0x1) UNKNOWN PROPERTY
		EComponentCreationMethod CreationMethod; // 0x8D(0x1)
		FMulticastSparseDelegate OnComponentActivated; // 0x8E(0x1)
		FMulticastSparseDelegate OnComponentDeactivated; // 0x8F(0x1)
		unsigned char UnknownData25_7[0x10]; // 0x90(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorComponent");
			return ret;
		}

		void ToggleActive(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA1408
		void SetTickGroup(TEnumAsByte NewTickGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA12C0
		void SetTickableWhenPaused(bool bTickableWhenPaused); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA11E0
		void SetIsReplicated(bool ShouldReplicate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA1100
		void SetComponentTickIntervalAndCooldown(float TickInterval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA1020
		void SetComponentTickInterval(float TickInterval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0F40
		void SetComponentTickEnabled(bool bEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0E60
		void SetAutoActivate(bool bNewAutoActivate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0D80
		void SetActive(bool bNewActive, bool bReset); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0CA0
		void RemoveTickPrerequisiteComponent(UActorComponent PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0BC0
		void RemoveTickPrerequisiteActor(AActor PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0AE0
		void ReceiveTick(float DeltaSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FA0A00
		void ReceiveEndPlay(TEnumAsByte EndPlayReason); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FA08B8
		void ReceiveBeginPlay(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FA07D8
		void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FA06F8
		void OnRep_IsActive(); // Flags: RequiredAPI|Native|Public 0x7FF410FA0618
		void K2_DestroyComponent(UObject Object); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA0538
		bool IsComponentTickEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA0458
		bool IsBeingDestroyed(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA0378
		bool IsActive(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA0298
		AActor GetOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA01B8
		float GetComponentTickInterval(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA00D8
		void Deactivate(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410F9FFF8
		bool ComponentHasTag(FName tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410F9FF18
		void AddTickPrerequisiteComponent(UActorComponent PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410F9FE38
		void AddTickPrerequisiteActor(AActor PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410F9FD58
		void Activate(bool bReset); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410F9FC78
	};


	// Class Engine.Info
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class AInfo : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Info");
			return ret;
		}
	};


	// Class Engine.PlayerState
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xB8 (0x348 - 0x290)
	class APlayerState : public AInfo	
	{
	public:
		float Score; // 0x290(0x4)
		int32_t PlayerId; // 0x294(0x4)
		char CompressedPing; // 0x298(0x1)
		unsigned char UnknownData07_6[0x1]; // 0x299(0x1) UNKNOWN PROPERTY
		bool bShouldUpdateReplicatedPing : 1; // 0x29A:0(0x1)
		bool bIsSpectator : 1; // 0x29A:1(0x1)
		bool bOnlySpectator : 1; // 0x29A:2(0x1)
		bool bIsABot : 1; // 0x29A:3(0x1)
		unsigned char UnknownBit08 : 1; // 0x29A:4(0x1) UNKNOWN PROPERTY
		bool bIsInactive : 1; // 0x29A:5(0x1)
		bool bFromPreviousLevel : 1; // 0x29A:6(0x1)
		unsigned char UnknownData09_5[0x1]; // 0x29B(0x1) UNKNOWN PROPERTY
		int32_t StartTime; // 0x29C(0x4)
		UClass EngineMessageClass; // 0x2A0(0x8)
		unsigned char UnknownData10_6[0x8]; // 0x2A8(0x8) UNKNOWN PROPERTY
		FString SavedNetworkAddress; // 0x2B0(0x10)
		FUniqueNetIdRepl UniqueID; // 0x2C0(0x30)
		unsigned char UnknownData11_6[0x8]; // 0x2F0(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnPawnSet; // 0x2F8(0x10)
		APawn PawnPrivate; // 0x308(0x8)
		unsigned char UnknownData12_6[0x18]; // 0x310(0x18) UNKNOWN PROPERTY
		FString PlayerNamePrivate; // 0x328(0x10)
		unsigned char UnknownData13_7[0x10]; // 0x338(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerState");
			return ret;
		}

		void ReceiveOverrideWith(APlayerState OldPlayerState); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF413E377A0
		void ReceiveCopyProperties(APlayerState NewPlayerState); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF413E376C0
		void OnRep_UniqueId(); // Flags: RequiredAPI|Native|Public 0x7FF413E375E0
		void OnRep_Score(); // Flags: RequiredAPI|Native|Public 0x7FF413E37500
		void OnRep_PlayerName(); // Flags: RequiredAPI|Native|Public 0x7FF413E37420
		void OnRep_PlayerId(); // Flags: RequiredAPI|Native|Public 0x7FF413E37340
		void OnRep_bIsInactive(); // Flags: RequiredAPI|Native|Public 0x7FF413E37260
		void OnPawnPrivateDestroyed(AActor InActor); // Flags: Final|RequiredAPI|Native|Private 0x7FF413E37180
		bool IsSpectator(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E370A0
		bool IsOnlyASpectator(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36FC0
		bool IsABot(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36EE0
		float GetScore(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36E00
		FString GetPlayerName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36D20
		int32_t GetPlayerId(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36C40
		APlayerController GetPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36B60
		float GetPingInMilliseconds(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E36A80
		APawn GetPawn(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E369A0
		char GetCompressedPing(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E368C0
		FUniqueNetIdRepl BP_GetUniqueId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413E367E0
	};


	// Class Engine.Controller
	// Inherited from AActor -> UObject
	// Size: 0x98 (0x328 - 0x290)
	class AController : public AActor	
	{
	public:
		unsigned char UnknownData06_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		APlayerState PlayerState; // 0x298(0x8)
		unsigned char UnknownData07_6[0x8]; // 0x2A0(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x2A8(0x10)
		FMulticastInlineDelegate OnPossessedPawnChanged; // 0x2B8(0x10)
		FName StateName; // 0x2C8(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x2CC(0x4) UNKNOWN PROPERTY
		APawn Pawn; // 0x2D0(0x8)
		unsigned char UnknownData09_6[0x8]; // 0x2D8(0x8) UNKNOWN PROPERTY
		ACharacter Character; // 0x2E0(0x8)
		USceneComponent TransformComponent; // 0x2E8(0x8)
		unsigned char UnknownData10_6[0x18]; // 0x2F0(0x18) UNKNOWN PROPERTY
		FRotator ControlRotation; // 0x308(0x18)
		bool bAttachToPawn : 1; // 0x320:0(0x1)
		unsigned char UnknownData11_7[0x7]; // 0x321(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Controller");
			return ret;
		}

		void UnPossess(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310EB00
		void StopMovement(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310EA20
		void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41310E940
		void SetIgnoreMoveInput(bool bNewMoveInput); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310E860
		void SetIgnoreLookInput(bool bNewLookInput); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310E780
		void SetControlRotation(FRotator& NewRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41310E6A0
		void ResetIgnoreMoveInput(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310E5C0
		void ResetIgnoreLookInput(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310E4E0
		void ResetIgnoreInputFlags(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310E400
		void ReceiveUnPossess(APawn UnpossessedPawn); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF41310E320
		void ReceivePossess(APawn PossessedPawn); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF41310E240
		void ReceiveInstigatedAnyDamage(float Damage, UDamageType DamageType, AActor DamagedActor, AActor DamageCauser); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 0x7FF41310E160
		void Possess(APawn InPawn); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF41310E080
		void OnRep_PlayerState(); // Flags: RequiredAPI|Native|Public 0x7FF41310DFA0
		void OnRep_Pawn(); // Flags: RequiredAPI|Native|Public 0x7FF41310DEC0
		bool LineOfSightTo(AActor Other, FVector ViewPoint, bool bAlternateChecks); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41310DDE0
		APawn K2_GetPawn(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310DD00
		bool IsPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310DC20
		bool IsMoveInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310DB40
		bool IsLookInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310DA60
		bool IsLocalPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310D980
		bool IsLocalController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310D8A0
		AActor GetViewTarget(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41310D7C0
		void GetPlayerViewPoint(FVector& Location, FRotator& Rotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41310D6E0
		FRotator GetDesiredRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41310D600
		FRotator GetControlRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41310D520
		void ClientSetRotation(FRotator NewRotation, bool bResetCamera); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 0x7FF41310D440
		void ClientSetLocation(FVector NewLocation, FRotator NewRotation); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 0x7FF41310D360
	};


	// Class Engine.PlayerController
	// Inherited from AController -> AActor -> UObject
	// Size: 0x520 (0x848 - 0x328)
	class APlayerController : public AController	
	{
	public:
		unsigned char UnknownData25_3[0x8]; // 0x328(0x8) UNKNOWN PROPERTY
		UPlayer Player; // 0x330(0x8)
		APawn AcknowledgedPawn; // 0x338(0x8)
		AHUD MyHUD; // 0x340(0x8)
		APlayerCameraManager PlayerCameraManager; // 0x348(0x8)
		UClass PlayerCameraManagerClass; // 0x350(0x8)
		bool bAutoManageActiveCameraTarget; // 0x358(0x1)
		unsigned char UnknownData26_6[0x7]; // 0x359(0x7) UNKNOWN PROPERTY
		FRotator TargetViewRotation; // 0x360(0x18)
		unsigned char UnknownData27_6[0x18]; // 0x378(0x18) UNKNOWN PROPERTY
		float SmoothTargetViewRotationSpeed; // 0x390(0x4)
		unsigned char UnknownData28_6[0x4]; // 0x394(0x4) UNKNOWN PROPERTY
		TArray HiddenActors; // 0x398(0x10)
		TArray HiddenPrimitiveComponents; // 0x3A8(0x10)
		unsigned char UnknownData29_6[0x4]; // 0x3B8(0x4) UNKNOWN PROPERTY
		float LastSpectatorStateSynchTime; // 0x3BC(0x4)
		FVector LastSpectatorSyncLocation; // 0x3C0(0x18)
		FRotator LastSpectatorSyncRotation; // 0x3D8(0x18)
		int32_t ClientCap; // 0x3F0(0x4)
		unsigned char UnknownData30_6[0x4]; // 0x3F4(0x4) UNKNOWN PROPERTY
		UCheatManager CheatManager; // 0x3F8(0x8)
		UClass CheatClass; // 0x400(0x8)
		UPlayerInput PlayerInput; // 0x408(0x8)
		TArray ActiveForceFeedbackEffects; // 0x410(0x10)
		unsigned char UnknownData31_6[0x80]; // 0x420(0x80) UNKNOWN PROPERTY
		unsigned char UnknownBit32 : 1; // 0x4A0:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit33 : 1; // 0x4A0:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit34 : 1; // 0x4A0:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit35 : 1; // 0x4A0:3(0x1) UNKNOWN PROPERTY
		bool bPlayerIsWaiting : 1; // 0x4A0:4(0x1)
		unsigned char UnknownData36_5[0x3]; // 0x4A1(0x3) UNKNOWN PROPERTY
		char NetPlayerIndex; // 0x4A4(0x1)
		unsigned char UnknownData37_6[0x5B]; // 0x4A5(0x5B) UNKNOWN PROPERTY
		UNetConnection PendingSwapConnection; // 0x500(0x8)
		UNetConnection NetConnection; // 0x508(0x8)
		unsigned char UnknownData38_6[0x18]; // 0x510(0x18) UNKNOWN PROPERTY
		float InputYawScale; // 0x528(0x4)
		float InputPitchScale; // 0x52C(0x4)
		float InputRollScale; // 0x530(0x4)
		bool bShowMouseCursor : 1; // 0x534:0(0x1)
		bool bEnableClickEvents : 1; // 0x534:1(0x1)
		bool bEnableTouchEvents : 1; // 0x534:2(0x1)
		bool bEnableMouseOverEvents : 1; // 0x534:3(0x1)
		bool bEnableTouchOverEvents : 1; // 0x534:4(0x1)
		bool bForceFeedbackEnabled : 1; // 0x534:5(0x1)
		bool bEnableMotionControls : 1; // 0x534:6(0x1)
		bool bEnableStreamingSource : 1; // 0x534:7(0x1)
		bool bStreamingSourceShouldActivate : 1; // 0x535:0(0x1)
		bool bStreamingSourceShouldBlockOnSlowStreaming : 1; // 0x535:1(0x1)
		unsigned char UnknownData39_5[0x2]; // 0x536(0x2) UNKNOWN PROPERTY
		EStreamingSourcePriority StreamingSourcePriority; // 0x538(0x1)
		unsigned char UnknownData40_6[0x3]; // 0x539(0x3) UNKNOWN PROPERTY
		FColor StreamingSourceDebugColor; // 0x53C(0x4)
		TArray StreamingSourceShapes; // 0x540(0x10)
		float ForceFeedbackScale; // 0x550(0x4)
		unsigned char UnknownData41_6[0x4]; // 0x554(0x4) UNKNOWN PROPERTY
		TArray ClickEventKeys; // 0x558(0x10)
		TEnumAsByte DefaultMouseCursor; // 0x568(0x1)
		TEnumAsByte CurrentMouseCursor; // 0x569(0x1)
		TEnumAsByte DefaultClickTraceChannel; // 0x56A(0x1)
		TEnumAsByte CurrentClickTraceChannel; // 0x56B(0x1)
		float HitResultTraceDistance; // 0x56C(0x4)
		uint16_t SeamlessTravelCount; // 0x570(0x2)
		uint16_t LastCompletedSeamlessTravelCount; // 0x572(0x2)
		unsigned char UnknownData42_6[0x84]; // 0x574(0x84) UNKNOWN PROPERTY
		UInputComponent InactiveStateInputComponent; // 0x5F8(0x8)
		unsigned char UnknownBit43 : 1; // 0x600:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit44 : 1; // 0x600:1(0x1) UNKNOWN PROPERTY
		bool bShouldPerformFullTickWhenPaused : 1; // 0x600:2(0x1)
		unsigned char UnknownData45_5[0x17]; // 0x601(0x17) UNKNOWN PROPERTY
		UTouchInterface CurrentTouchInterface; // 0x618(0x8)
		UClass OverridePlayerInputClass; // 0x620(0x8)
		unsigned char UnknownData46_6[0x78]; // 0x628(0x78) UNKNOWN PROPERTY
		ASpectatorPawn SpectatorPawn; // 0x6A0(0x8)
		unsigned char UnknownData47_6[0x4]; // 0x6A8(0x4) UNKNOWN PROPERTY
		bool bIsLocalPlayerController; // 0x6AC(0x1)
		unsigned char UnknownData48_6[0x3]; // 0x6AD(0x3) UNKNOWN PROPERTY
		FVector SpawnLocation; // 0x6B0(0x18)
		unsigned char UnknownData49_7[0x180]; // 0x6C8(0x180) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerController");
			return ret;
		}

		bool WasInputKeyJustReleased(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4131F7B60
		bool WasInputKeyJustPressed(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4131B7A80
		void ToggleSpeaking(bool bInSpeaking); // Flags: RequiredAPI|Exec|Native|Public 0x7FF4131B79A0
		void TestServerLevelVisibilityChange(FName PackageName, FName Filename); // Flags: Final|RequiredAPI|Exec|Native|Private 0x7FF4131B78C0
		void SwitchLevel(FString URL); // Flags: RequiredAPI|Exec|Native|Public 0x7FF4131B77E0
		bool StreamingSourceShouldBlockOnSlowStreaming(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4131B7700
		bool StreamingSourceShouldActivate(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4131B7620
		void StopHapticEffect(EControllerHand Hand); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4131B7540
		void StartFire(char FireModeNum); // Flags: RequiredAPI|Exec|Native|Public 0x7FF4131B7460
		void SetVirtualJoystickVisibility(bool bVisible); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4131B7380
		void SetViewTargetWithBlend(AActor NewViewTarget, float BlendTime, TEnumAsByte BlendFunc, float BlendExp, bool bLockOutgoing); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4131B72A0
		void SetName(FString S); // Flags: RequiredAPI|Exec|Native|Public 0x7FF4131B71C0
		void SetMouseLocation(int32_t X, int32_t Y); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4131970E0
		void SetMouseCursorWidget(TEnumAsByte Cursor, UUserWidget CursorWidget); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413157000
		void SetMotionControlsEnabled(bool bEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156F20
		void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156E40
		void SetDisableHaptics(bool bNewDisabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156D60
		void SetDeprecatedInputYawScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156C80
		void SetDeprecatedInputRollScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156BA0
		void SetDeprecatedInputPitchScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156AC0
		void SetControllerLightColor(FColor Color); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4131569E0
		void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF413156900
		void SetAudioListenerOverride(USceneComponent AttachToComponent, FVector Location, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF413156820
		void SetAudioListenerAttenuationOverride(USceneComponent AttachToComponent, FVector AttenuationLocationOVerride); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF413156740
		void ServerViewSelf(FViewTargetTransitionParams TransitionParams); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF413156660
		void ServerViewPrevPlayer(); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF413156580
		void ServerViewNextPlayer(); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF4131564A0
		void ServerVerifyViewTarget(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF4131563C0
		void ServerUpdateMultipleLevelsVisibility(TArray LevelVisibilities); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF4131562E0
		void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413156140
		void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF413156060
		void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155F80
		void ServerUnblockPlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155EA0
		void ServerToggleAILogging(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155DC0
		void ServerShortTimeout(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155CE0
		void ServerSetSpectatorWaiting(bool bWaiting); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155C00
		void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 0x7FF413155B20
		void ServerSendLatestAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer 0x7FF413155A40
		void ServerRestartPlayer(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155960
		void ServerRecvClientInputFrame(int32_t RecvClientInputFrame, TArray Data); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer 0x7FF413155880
		void ServerPause(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF4131557A0
		void ServerNotifyLoadedWorld(FName WorldPackageName); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF4131556C0
		void ServerMutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF4131555E0
		void ServerExecRPC(FString Msg); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155500
		void ServerExec(FString Msg); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF413155420
		void ServerCheckClientPossessionReliable(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155340
		void ServerCheckClientPossession(); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF413155260
		void ServerChangeName(FString S); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413155180
		void ServerCamera(FName NewMode); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF4131550A0
		void ServerBlockPlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413154FC0
		void ServerAcknowledgePossession(APawn P); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF413154EE0
		void SendToConsole(FString Command); // Flags: RequiredAPI|Exec|Native|Public 0x7FF413154E00
		void RestartLevel(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF413154D20
		void ResetControllerLightColor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413154C40
		bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413154B60
		void PlayHapticEffect(UHapticFeedbackEffect_Base HapticEffect, EControllerHand Hand, float Scale, bool bLoop); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413154A80
		void PlayDynamicForceFeedback(float Intensity, float duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte Action, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4131549A0
		void Pause(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF4131548C0
		void OnServerStartedVisualLogger(bool bIsLogging); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4131547E0
		void LocalTravel(FString URL); // Flags: RequiredAPI|Exec|Native|Public 0x7FF413154700
		void K2_ClientPlayForceFeedback(UForceFeedbackEffect ForceFeedbackEffect, FName tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413154620
		bool IsStreamingSourceEnabled(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413154540
		bool IsInputKeyDown(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413154460
		void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413154380
		void GetStreamingSourceShapes(TArray& OutShapes); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4131541E0
		EStreamingSourcePriority GetStreamingSourcePriority(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413154100
		void GetStreamingSourceLocationAndRotation(FVector& OutLocation, FRotator& OutRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413154020
		ASpectatorPawn GetSpectatorPawn(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413153F40
		FPlatformUserId GetPlatformUserId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413153E60
		UClass GetOverridePlayerInputClass(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413153D80
		bool GetMousePosition(float& LocationX, float& LocationY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413153CA0
		FVector GetInputVectorKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413153BC0
		void GetInputTouchState(TEnumAsByte FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133AE0
		void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133A00
		void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413133920
		float GetInputKeyTimeDown(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413133840
		void GetInputAnalogStickState(TEnumAsByte WhichStick, float& StickX, float& StickY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133760
		float GetInputAnalogKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413133680
		AHUD GetHUD(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4131335A0
		bool GetHitResultUnderFingerForObjects(TEnumAsByte FingerIndex, TArray& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4131334C0
		bool GetHitResultUnderFingerByChannel(TEnumAsByte FingerIndex, TEnumAsByte TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4131333E0
		bool GetHitResultUnderFinger(TEnumAsByte FingerIndex, TEnumAsByte TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133300
		bool GetHitResultUnderCursorForObjects(TArray& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133220
		bool GetHitResultUnderCursorByChannel(TEnumAsByte TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133140
		bool GetHitResultUnderCursor(TEnumAsByte TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413133060
		FVector GetFocalLocation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413132F80
		float GetDeprecatedInputYawScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413132EA0
		float GetDeprecatedInputRollScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413132DC0
		float GetDeprecatedInputPitchScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413132CE0
		void FOV(float NewFOV); // Flags: RequiredAPI|Exec|Native|Public 0x7FF413132C00
		void EnableCheats(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF413132B20
		bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413132A40
		bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413132960
		void ConsoleKey(FKey Key); // Flags: RequiredAPI|Exec|Native|Public 0x7FF413132880
		void ClientWasKicked(FText KickReason); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4131327A0
		void ClientVoiceHandshakeComplete(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4131326C0
		void ClientUpdateMultipleLevelsStreamingStatus(TArray LevelStatuses); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413132520
		void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex, FNetLevelVisibilityTransactionId TransactionId, bool bNewShouldBlockOnUnload); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413132440
		void ClientUnmutePlayers(TArray PlayerIds); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413132360
		void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413132280
		void ClientTravelInternal(FString URL, TEnumAsByte TravelType, bool bSeamless, FGuid MapPackageGuid); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 0x7FF4131321A0
		void ClientTravel(FString URL, TEnumAsByte TravelType, bool bSeamless, FGuid MapPackageGuid); // Flags: Final|RequiredAPI|Native|Public|HasDefaults 0x7FF4131320C0
		void ClientTeamMessage(APlayerState SenderPlayerState, FString S, FName Type, float MsgLifeTime); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111FE0
		void ClientStopForceFeedback(UForceFeedbackEffect ForceFeedbackEffect, FName tag); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 0x7FF413111F00
		void ClientStopCameraShakesFromSource(UCameraShakeSourceComponent SourceComponent, bool bImmediately); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413111E20
		void ClientStopCameraShake(UClass Shake, bool bImmediately); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 0x7FF413111D40
		void ClientStartOnlineSession(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111C60
		void ClientStartCameraShakeFromSource(UClass Shake, UCameraShakeSourceComponent SourceComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413111B80
		void ClientStartCameraShake(UClass Shake, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 0x7FF413111AA0
		void ClientSpawnGenericCameraLensEffect(UClass LensEffectEmitterClass); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient|BlueprintCallable 0x7FF4131119C0
		void ClientSpawnCameraLensEffect(UClass LensEffectEmitterClass); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient 0x7FF4131118E0
		void ClientSetViewTarget(AActor A, FViewTargetTransitionParams TransitionParams); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111740
		void ClientSetupNetworkPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111660
		void ClientSetSpectatorWaiting(bool bWaiting); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111580
		void ClientSetHUD(UClass NewHUDClass); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 0x7FF4131114A0
		void ClientSetForceMipLevelsToBeResident(UMaterialInterface Material, float ForceDuration, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4131113C0
		void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4131112E0
		void ClientSetCameraMode(FName NewCamMode); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111200
		void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 0x7FF413111120
		void ClientSetBlockOnAsyncLoading(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413111040
		void ClientReturnToMainMenuWithTextReason(FText ReturnReason); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110F60
		void ClientRetryClientRestart(APawn NewPawn); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110E80
		void ClientRestart(APawn NewPawn); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110DA0
		void ClientReset(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110CC0
		void ClientRepObjRef(UObject Object); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110BE0
		void ClientRecvServerAckFrameDebug(char NumBuffered, float TargetNumBufferedCmds); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient 0x7FF413110B00
		void ClientRecvServerAckFrame(int32_t LastProcessedInputFrame, int32_t RecvServerFrameNumber, int8_t TimeDilation); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient 0x7FF413110A20
		void ClientReceiveLocalizedMessage(UClass Message, int32_t SWITCH, APlayerState RelatedPlayerState, APlayerState RelatedPlayerState, UObject OptionalObject); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110940
		void ClientPrestreamTextures(AActor ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110860
		void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110780
		void ClientPlaySoundAtLocation(USoundBase Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 0x7FF4131106A0
		void ClientPlaySound(USoundBase Sound, float VolumeMultiplier, float PitchMultiplier); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient 0x7FF4131105C0
		void ClientPlayForceFeedback_Internal(UForceFeedbackEffect ForceFeedbackEffect, FForceFeedbackParameters Params); // Flags: Final|RequiredAPI|Net|Native|Event|Private|NetClient 0x7FF413110420
		void ClientMutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110340
		void ClientMessage(FString S, FName Type, float MsgLifeTime); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110260
		void ClientIgnoreMoveInput(bool bIgnore); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF413110180
		void ClientIgnoreLookInput(bool bIgnore); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4131100A0
		void ClientGotoState(FName NewState); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310FFC0
		void ClientGameEnded(AActor EndGameFocus, bool bIsWinner); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310FEE0
		void ClientForceGarbageCollection(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310FE00
		void ClientFlushLevelStreaming(); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310FD20
		void ClientEndOnlineSession(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310FC40
		void ClientEnableNetworkVoice(bool bEnable); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310FB60
		void ClientCorrectionAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp); // Flags: Final|RequiredAPI|Net|Native|Event|Private|NetClient 0x7FF41310F9C0
		void ClientCommitMapChange(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310F8E0
		void ClientClearCameraLensEffects(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 0x7FF41310F800
		void ClientCapBandwidth(int32_t Cap); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310F720
		void ClientCancelPendingMapChange(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310F640
		void ClientAddTextureStreamingLoc(FVector InLoc, float duration, bool bOverrideLocation); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 0x7FF41310F560
		void ClientAckUpdateLevelVisibility(FName PackageName, FNetLevelVisibilityTransactionId TransactionId, bool bClientAckCanMakeVisible); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF41310F3C0
		void ClientAckTimeDilation(float TimeDilation, int32_t ServerStep); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient 0x7FF41310F2E0
		void ClearAudioListenerOverride(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310F200
		void ClearAudioListenerAttenuationOverride(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310F120
		bool CanRestartPlayer(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310F040
		void Camera(FName NewMode); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41310EF60
		void AddYawInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310EE80
		void AddRollInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310EDA0
		void AddPitchInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310ECC0
		void ActivateTouchInterface(UTouchInterface NewTouchInterface); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41310EBE0
	};


	// Class Engine.Subsystem
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USubsystem : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Subsystem");
			return ret;
		}
	};


	// Class Engine.WorldSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UWorldSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldSubsystem");
			return ret;
		}
	};


	// Class Engine.NavigationObjectBase
	// Inherited from AActor -> UObject
	// Size: 0x28 (0x2B8 - 0x290)
	class ANavigationObjectBase : public AActor	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		UCapsuleComponent CapsuleComponent; // 0x298(0x8)
		UBillboardComponent GoodSprite; // 0x2A0(0x8)
		UBillboardComponent BadSprite; // 0x2A8(0x8)
		bool bIsPIEPlayerStart : 1; // 0x2B0:0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x2B1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationObjectBase");
			return ret;
		}
	};


	// Class Engine.PlayerStart
	// Inherited from ANavigationObjectBase -> AActor -> UObject
	// Size: 0x8 (0x2C0 - 0x2B8)
	class APlayerStart : public ANavigationObjectBase	
	{
	public:
		FName PlayerStartTag; // 0x2B8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x2BC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerStart");
			return ret;
		}
	};


	// Class Engine.Pawn
	// Inherited from AActor -> UObject
	// Size: 0x80 (0x310 - 0x290)
	class APawn : public AActor	
	{
	public:
		unsigned char UnknownData07_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		bool bUseControllerRotationPitch : 1; // 0x298:0(0x1)
		bool bUseControllerRotationYaw : 1; // 0x298:1(0x1)
		bool bUseControllerRotationRoll : 1; // 0x298:2(0x1)
		bool bCanAffectNavigationGeneration : 1; // 0x298:3(0x1)
		unsigned char UnknownBit08 : 1; // 0x298:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x298:5(0x1) UNKNOWN PROPERTY
		bool bIsLocalViewTarget : 1; // 0x298:6(0x1)
		unsigned char UnknownData10_5[0x3]; // 0x299(0x3) UNKNOWN PROPERTY
		float BaseEyeHeight; // 0x29C(0x4)
		TEnumAsByte AutoPossessPlayer; // 0x2A0(0x1)
		EAutoPossessAI AutoPossessAI; // 0x2A1(0x1)
		char RemoteViewPitch; // 0x2A2(0x1)
		unsigned char UnknownData11_6[0x5]; // 0x2A3(0x5) UNKNOWN PROPERTY
		UClass AIControllerClass; // 0x2A8(0x8)
		APlayerState PlayerState; // 0x2B0(0x8)
		AController LastHitBy; // 0x2B8(0x8)
		AController Controller; // 0x2C0(0x8)
		AController PreviousController; // 0x2C8(0x8)
		unsigned char UnknownData12_6[0x4]; // 0x2D0(0x4) UNKNOWN PROPERTY
		FMulticastSparseDelegate ReceiveControllerChangedDelegate; // 0x2D4(0x1)
		FMulticastSparseDelegate ReceiveRestartedDelegate; // 0x2D5(0x1)
		unsigned char UnknownData13_6[0x2]; // 0x2D6(0x2) UNKNOWN PROPERTY
		FVector ControlInputVector; // 0x2D8(0x18)
		FVector LastControlInputVector; // 0x2F0(0x18)
		UClass OverrideInputComponentClass; // 0x308(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Pawn");
			return ret;
		}

		void SpawnDefaultController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41265E948
		void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41265E868
		void ReceiveUnpossessed(AController OldController); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 0x7FF41265E788
		void ReceiveRestarted(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41265E6A8
		void ReceivePossessed(AController NewController); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 0x7FF41265E5C8
		void ReceiveControllerChanged(AController OldController, AController NewController); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41265E4E8
		void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, AActor NoiseMaker); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 0x7FF41265E408
		void OnRep_PlayerState(); // Flags: RequiredAPI|Native|Public 0x7FF41265E328
		void OnRep_Controller(); // Flags: RequiredAPI|Native|Public 0x7FF41265E248
		bool IsPlayerControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265E168
		bool IsPawnControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265E088
		bool IsMoveInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265DFA8
		bool IsLocallyViewed(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265DEC8
		bool IsLocallyControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265DDE8
		bool IsControlled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265DD08
		bool IsBotControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265DC28
		FPlatformUserId GetPlatformUserId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265DB48
		FVector GetPendingMovementInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41265DA68
		UClass GetOverrideInputComponentClass(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265D988
		FVector GetNavAgentLocation(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41265D8A8
		UPawnMovementComponent GetMovementComponent(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265D7C8
		AActor GetMovementBaseActor(APawn Pawn); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41265D6E8
		APlayerController GetLocalViewingPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265D608
		FVector GetLastMovementInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41265D528
		FRotator GetControlRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41265D448
		AController GetController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41265D368
		FRotator GetBaseAimRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41265D288
		void DetachFromControllerPendingDestroy(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41265D1A8
		FVector ConsumeMovementInputVector(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41265D0C8
		void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41265CFE8
		void AddControllerYawInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41265CF08
		void AddControllerRollInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41265CE28
		void AddControllerPitchInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41263CD48
	};


	// Class Engine.BlueprintFunctionLibrary
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintFunctionLibrary : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintFunctionLibrary");
			return ret;
		}
	};


	// Class Engine.SceneComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x180 (0x220 - 0xA0)
	class USceneComponent : public UActorComponent	
	{
	public:
		unsigned char UnknownData05_3[0x8]; // 0xA0(0x8) UNKNOWN PROPERTY
		TWeakObjectPtr PhysicsVolume; // 0xA8(0x8)
		USceneComponent AttachParent; // 0xB0(0x8)
		FName AttachSocketName; // 0xB8(0x4)
		unsigned char UnknownData06_6[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY
		TArray AttachChildren; // 0xC0(0x10)
		TArray ClientAttachedChildren; // 0xD0(0x10)
		unsigned char UnknownData07_6[0x40]; // 0xE0(0x40) UNKNOWN PROPERTY
		FVector RelativeLocation; // 0x120(0x18)
		FRotator RelativeRotation; // 0x138(0x18)
		FVector RelativeScale3D; // 0x150(0x18)
		FVector ComponentVelocity; // 0x168(0x18)
		bool bComponentToWorldUpdated : 1; // 0x180:0(0x1)
		unsigned char UnknownBit08 : 1; // 0x180:1(0x1) UNKNOWN PROPERTY
		bool bAbsoluteLocation : 1; // 0x180:2(0x1)
		bool bAbsoluteRotation : 1; // 0x180:3(0x1)
		bool bAbsoluteScale : 1; // 0x180:4(0x1)
		bool bVisible : 1; // 0x180:5(0x1)
		bool bShouldBeAttached : 1; // 0x180:6(0x1)
		bool bShouldSnapLocationWhenAttached : 1; // 0x180:7(0x1)
		bool bShouldSnapRotationWhenAttached : 1; // 0x181:0(0x1)
		bool bShouldSnapScaleWhenAttached : 1; // 0x181:1(0x1)
		bool bShouldUpdatePhysicsVolume : 1; // 0x181:2(0x1)
		bool bHiddenInGame : 1; // 0x181:3(0x1)
		bool bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x181:4(0x1)
		bool bUseAttachParentBound : 1; // 0x181:5(0x1)
		bool bComputeFastLocalBounds : 1; // 0x181:6(0x1)
		bool bComputeBoundsOnceForGame : 1; // 0x181:7(0x1)
		bool bComputedBoundsOnceForGame : 1; // 0x182:0(0x1)
		bool bIsNotRenderAttachmentRoot : 1; // 0x182:1(0x1)
		TEnumAsByte Mobility; // 0x183(0x1)
		TEnumAsByte DetailMode; // 0x184(0x1)
		FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x185(0x1)
		unsigned char UnknownData09_7[0x9A]; // 0x186(0x9A) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneComponent");
			return ret;
		}

		void ToggleVisibility(bool bPropagateToChildren); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4110257D0
		void SetWorldScale3D(FVector NewScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110256F0
		void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Flags: Final|Native|Public|BlueprintCallable 0x7FF411025610
		void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411025530
		void SetRelativeScale3D(FVector NewScale3D); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025450
		void SetMobility(TEnumAsByte NewMobility); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF411025308
		void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Flags: Final|Native|Public|BlueprintCallable 0x7FF411025228
		void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411025148
		void ResetRelativeTransform(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411025068
		void OnRep_Visibility(bool OldValue); // Flags: Final|RequiredAPI|Native|Private 0x7FF411024F88
		void OnRep_Transform(); // Flags: Final|RequiredAPI|Native|Private 0x7FF411024EA8
		void OnRep_AttachSocketName(); // Flags: Final|RequiredAPI|Native|Private 0x7FF411024DC8
		void OnRep_AttachParent(); // Flags: Final|RequiredAPI|Native|Private 0x7FF411024CE8
		void OnRep_AttachChildren(); // Flags: Final|RequiredAPI|Native|Private 0x7FF411024C08
		void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411024B28
		void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411024A48
		void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411024968
		void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411024888
		void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4110247A8
		void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4110246C8
		void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4110245E8
		void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411024508
		FTransform K2_GetComponentToWorld(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411024428
		FVector K2_GetComponentScale(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411024348
		FRotator K2_GetComponentRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411024268
		FVector K2_GetComponentLocation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411024188
		void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411024040
		bool K2_AttachToComponent(USceneComponent Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411023EF8
		bool K2_AttachTo(USceneComponent InParent, FName InSocketName, TEnumAsByte AttachType, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411023DB0
		void K2_AddWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023CD0
		void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023BF0
		void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023B10
		void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023A30
		void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023950
		void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023870
		void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411023790
		void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4110236B0
		void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4110235D0
		bool IsVisible(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110234F0
		bool IsSimulatingPhysics(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411023410
		bool IsAnySimulatingPhysics(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411023330
		FVector GetUpVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411023250
		FTransform GetSocketTransform(FName InSocketName, TEnumAsByte TransformSpace); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411023108
		FRotator GetSocketRotation(FName InSocketName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411023028
		FQuat GetSocketQuaternion(FName InSocketName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411022F48
		FVector GetSocketLocation(FName InSocketName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411022E68
		bool GetShouldUpdatePhysicsVolume(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411022D88
		FVector GetRightVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411022CA8
		FTransform GetRelativeTransform(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411022BC8
		APhysicsVolume GetPhysicsVolume(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411022AE8
		void GetParentComponents(TArray& Parents); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF411022A08
		int32_t GetNumChildrenComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411022928
		FVector GetForwardVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411022848
		FVector GetComponentVelocity(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411022768
		void GetChildrenComponents(bool bIncludeAllDescendants, TArray& Children); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF411022688
		USceneComponent GetChildComponent(int32_t ChildIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110225A8
		FName GetAttachSocketName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110224C8
		USceneComponent GetAttachParent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110223E8
		TArray GetAllSocketNames(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411022308
		bool DoesSocketExist(FName InSocketName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411022228
		void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF411022148
	};


	// Class Engine.PrimitiveComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x2B0 (0x4D0 - 0x220)
	class UPrimitiveComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData18_3[0x18]; // 0x220(0x18) UNKNOWN PROPERTY
		float MinDrawDistance; // 0x238(0x4)
		float LDMaxDrawDistance; // 0x23C(0x4)
		float CachedMaxDrawDistance; // 0x240(0x4)
		TEnumAsByte DepthPriorityGroup; // 0x244(0x1)
		TEnumAsByte ViewOwnerDepthPriorityGroup; // 0x245(0x1)
		TEnumAsByte IndirectLightingCacheQuality; // 0x246(0x1)
		ELightmapType LightmapType; // 0x247(0x1)
		EHLODBatchingPolicy HLODBatchingPolicy; // 0x248(0x1)
		EShadowCacheInvalidationBehavior ShadowCacheInvalidationBehavior; // 0x249(0x1)
		bool bEnableAutoLODGeneration : 1; // 0x24A:0(0x1)
		bool bIsActorTextureStreamingBuiltData : 1; // 0x24A:1(0x1)
		bool bIsValidTextureStreamingBuiltData : 1; // 0x24A:2(0x1)
		bool bNeverDistanceCull : 1; // 0x24A:3(0x1)
		unsigned char UnknownBit19 : 1; // 0x24A:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit20 : 1; // 0x24A:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit21 : 1; // 0x24A:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit22 : 1; // 0x24A:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit23 : 1; // 0x24B:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit24 : 1; // 0x24B:1(0x1) UNKNOWN PROPERTY
		bool bAlwaysCreatePhysicsState : 1; // 0x24B:2(0x1)
		bool bGenerateOverlapEvents : 1; // 0x24B:3(0x1)
		bool bMultiBodyOverlap : 1; // 0x24B:4(0x1)
		bool bTraceComplexOnMove : 1; // 0x24B:5(0x1)
		bool bReturnMaterialOnMove : 1; // 0x24B:6(0x1)
		bool bUseViewOwnerDepthPriorityGroup : 1; // 0x24B:7(0x1)
		bool bAllowCullDistanceVolume : 1; // 0x24C:0(0x1)
		bool bVisibleInReflectionCaptures : 1; // 0x24C:1(0x1)
		bool bVisibleInRealTimeSkyCaptures : 1; // 0x24C:2(0x1)
		bool bVisibleInRayTracing : 1; // 0x24C:3(0x1)
		bool bRenderInMainPass : 1; // 0x24C:4(0x1)
		bool bRenderInDepthPass : 1; // 0x24C:5(0x1)
		bool bReceivesDecals : 1; // 0x24C:6(0x1)
		bool bHoldout : 1; // 0x24C:7(0x1)
		bool bOwnerNoSee : 1; // 0x24D:0(0x1)
		bool bOnlyOwnerSee : 1; // 0x24D:1(0x1)
		bool bTreatAsBackgroundForOcclusion : 1; // 0x24D:2(0x1)
		bool bUseAsOccluder : 1; // 0x24D:3(0x1)
		bool bSelectable : 1; // 0x24D:4(0x1)
		bool bWantsEditorEffects : 1; // 0x24D:5(0x1)
		bool bForceMipStreaming : 1; // 0x24D:6(0x1)
		bool bHasPerInstanceHitProxies : 1; // 0x24D:7(0x1)
		bool CastShadow : 1; // 0x24E:0(0x1)
		bool bEmissiveLightSource : 1; // 0x24E:1(0x1)
		bool bAffectDynamicIndirectLighting : 1; // 0x24E:2(0x1)
		bool bAffectIndirectLightingWhileHidden : 1; // 0x24E:3(0x1)
		bool bAffectDistanceFieldLighting : 1; // 0x24E:4(0x1)
		bool bCastDynamicShadow : 1; // 0x24E:5(0x1)
		bool bCastStaticShadow : 1; // 0x24E:6(0x1)
		bool bCastVolumetricTranslucentShadow : 1; // 0x24E:7(0x1)
		bool bCastContactShadow : 1; // 0x24F:0(0x1)
		bool bSelfShadowOnly : 1; // 0x24F:1(0x1)
		bool bCastFarShadow : 1; // 0x24F:2(0x1)
		bool bCastInsetShadow : 1; // 0x24F:3(0x1)
		bool bCastCinematicShadow : 1; // 0x24F:4(0x1)
		bool bCastHiddenShadow : 1; // 0x24F:5(0x1)
		bool bCastShadowAsTwoSided : 1; // 0x24F:6(0x1)
		bool bLightAsIfStatic : 1; // 0x24F:7(0x1)
		bool bLightAttachmentsAsGroup : 1; // 0x250:0(0x1)
		bool bExcludeFromLightAttachmentGroup : 1; // 0x250:1(0x1)
		bool bReceiveMobileCSMShadows : 1; // 0x250:2(0x1)
		bool bSingleSampleShadowFromStationaryLights : 1; // 0x250:3(0x1)
		bool bIgnoreRadialImpulse : 1; // 0x250:4(0x1)
		bool bIgnoreRadialForce : 1; // 0x250:5(0x1)
		bool bApplyImpulseOnDamage : 1; // 0x250:6(0x1)
		bool bReplicatePhysicsToAutonomousProxy : 1; // 0x250:7(0x1)
		bool bFillCollisionUnderneathForNavmesh : 1; // 0x251:0(0x1)
		bool AlwaysLoadOnClient : 1; // 0x251:1(0x1)
		bool AlwaysLoadOnServer : 1; // 0x251:2(0x1)
		bool bUseEditorCompositing : 1; // 0x251:3(0x1)
		bool bIsBeingMovedByEditor : 1; // 0x251:4(0x1)
		bool bRenderCustomDepth : 1; // 0x251:5(0x1)
		bool bVisibleInSceneCaptureOnly : 1; // 0x251:6(0x1)
		bool bHiddenInSceneCapture : 1; // 0x251:7(0x1)
		bool bRayTracingFarField : 1; // 0x252:0(0x1)
		bool bIsFirstPerson : 1; // 0x252:1(0x1)
		unsigned char UnknownBit25 : 1; // 0x252:2(0x1) UNKNOWN PROPERTY
		bool bHasNoStreamableTextures : 1; // 0x252:3(0x1)
		bool bStaticWhenNotMoveable : 1; // 0x252:4(0x1)
		unsigned char UnknownData26_5[0x1]; // 0x253(0x1) UNKNOWN PROPERTY
		TEnumAsByte bHasCustomNavigableGeometry; // 0x254(0x1)
		unsigned char UnknownData27_6[0x1]; // 0x255(0x1) UNKNOWN PROPERTY
		TEnumAsByte CanCharacterStepUpOn; // 0x256(0x1)
		FLightingChannels LightingChannels; // 0x257(0x1)
		unsigned char UnknownData28_6[0x18]; // 0x258(0x18) UNKNOWN PROPERTY
		int32_t RayTracingGroupId; // 0x270(0x4)
		int32_t VisibilityId; // 0x274(0x4)
		int32_t CustomDepthStencilValue; // 0x278(0x4)
		ERayTracingGroupCullingPriority RayTracingGroupCullingPriority; // 0x27C(0x1)
		ERendererStencilMask CustomDepthStencilWriteMask; // 0x27D(0x1)
		char ExcludeFromHLODLevels; // 0x27E(0x1)
		unsigned char UnknownData29_6[0x1]; // 0x27F(0x1) UNKNOWN PROPERTY
		FCustomPrimitiveData CustomPrimitiveData; // 0x280(0x10)
		FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x290(0x10)
		unsigned char UnknownData30_6[0x8]; // 0x2A0(0x8) UNKNOWN PROPERTY
		int32_t TranslucencySortPriority; // 0x2A8(0x4)
		float TranslucencySortDistanceOffset; // 0x2AC(0x4)
		TArray RuntimeVirtualTextures; // 0x2B0(0x10)
		int8_t VirtualTextureLodBias; // 0x2C0(0x1)
		int8_t VirtualTextureCullMips; // 0x2C1(0x1)
		int8_t VirtualTextureMinCoverage; // 0x2C2(0x1)
		ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x2C3(0x1)
		unsigned char UnknownData31_6[0x8]; // 0x2C4(0x8) UNKNOWN PROPERTY
		float BoundsScale; // 0x2CC(0x4)
		unsigned char UnknownData32_6[0x30]; // 0x2D0(0x30) UNKNOWN PROPERTY
		TArray MoveIgnoreActors; // 0x300(0x10)
		TArray MoveIgnoreComponents; // 0x310(0x10)
		unsigned char UnknownData33_6[0x10]; // 0x320(0x10) UNKNOWN PROPERTY
		FBodyInstance BodyInstance; // 0x330(0x170)
		FMulticastSparseDelegate OnComponentHit; // 0x4A0(0x1)
		FMulticastSparseDelegate OnComponentBeginOverlap; // 0x4A1(0x1)
		FMulticastSparseDelegate OnComponentEndOverlap; // 0x4A2(0x1)
		FMulticastSparseDelegate OnComponentWake; // 0x4A3(0x1)
		FMulticastSparseDelegate OnComponentSleep; // 0x4A4(0x1)
		unsigned char UnknownData34_6[0x1]; // 0x4A5(0x1) UNKNOWN PROPERTY
		FMulticastSparseDelegate OnComponentPhysicsStateChanged; // 0x4A6(0x1)
		FMulticastSparseDelegate OnBeginCursorOver; // 0x4A7(0x1)
		FMulticastSparseDelegate OnEndCursorOver; // 0x4A8(0x1)
		FMulticastSparseDelegate OnClicked; // 0x4A9(0x1)
		FMulticastSparseDelegate OnReleased; // 0x4AA(0x1)
		FMulticastSparseDelegate OnInputTouchBegin; // 0x4AB(0x1)
		FMulticastSparseDelegate OnInputTouchEnd; // 0x4AC(0x1)
		FMulticastSparseDelegate OnInputTouchEnter; // 0x4AD(0x1)
		FMulticastSparseDelegate OnInputTouchLeave; // 0x4AE(0x1)
		unsigned char UnknownData35_6[0x11]; // 0x4AF(0x11) UNKNOWN PROPERTY
		UPrimitiveComponent LODParentPrimitive; // 0x4C0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrimitiveComponent");
			return ret;
		}

		bool WasRecentlyRendered(float Tolerance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41102E350
		void WakeRigidBody(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102E270
		void WakeAllRigidBodies(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102E190
		void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41102E0B0
		void SetVisibleInSceneCaptureOnly(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102DFD0
		void SetVisibleInRayTracing(bool bNewVisibleInRayTracing); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102DEF0
		void SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102DE10
		void SetVectorParameterForCustomPrimitiveData(FName ParameterName, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102DD30
		void SetUseMACD(bool InUseMACD, FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102DC50
		void SetUseCCD(bool InUseCCD, FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102DB70
		void SetUpdateKinematicFromSimulation(bool bUpdateKinematicFromSimulation); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102DA90
		void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D9B0
		void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D8D0
		void SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D7F0
		void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D710
		void SetSimulatePhysics(bool bSimulate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D630
		void SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D550
		void SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D470
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D390
		void SetRenderInDepthPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D2B0
		void SetRenderCustomDepth(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D1D0
		void SetReceivesDecals(bool bNewReceivesDecals); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D0F0
		void SetPhysMaterialOverride(UPhysicalMaterial NewPhysMaterial); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102D010
		void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102CF30
		void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41102CE50
		void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102CD70
		void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102CC90
		void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102CBB0
		void SetOwnerNoSee(bool bNewOwnerNoSee); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102CAD0
		void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C9F0
		void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C910
		void SetMaxDepenetrationVelocity(FName BoneName, float InMaxDepenetrationVelocity); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C830
		void SetMaterialByName(FName MaterialSlotName, UMaterialInterface Material); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C750
		void SetMaterial(int32_t ElementIndex, UMaterialInterface Material); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C670
		void SetMassScale(FName BoneName, float InMassScale); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C590
		void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C4B0
		void SetLinearDamping(float InDamping); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C3D0
		void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C2F0
		void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C210
		void SetIsFirstPerson(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102C130
		void SetIgnoreBoundsForEditorFocus(bool bIgnore); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41102C050
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102BF70
		void SetHiddenInSceneCapture(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102BE90
		void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102BDB0
		void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102BCD0
		void SetExcludeForSpecificHLODLevels(TArray& InExcludeForSpecificHLODLevels); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable 0x7FF41102BBF0
		void SetExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel, bool bExcluded); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102BB10
		void SetEnableGravity(bool bGravityEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102BA30
		void SetEmissiveLightSource(bool NewEmissiveLightSource); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102B950
		void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102B870
		void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102B790
		void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102B6B0
		void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102B5D0
		void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102B4F0
		void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102B410
		void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102B330
		void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102B250
		void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102B108
		void SetCustomDepthStencilValue(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102B028
		void SetCullDistance(float NewCullDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102AF48
		void SetConstraintMode(TEnumAsByte ConstraintMode); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102AE00
		void SetCollisionResponseToChannel(TEnumAsByte Channel, TEnumAsByte NewResponse); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102AD20
		void SetCollisionResponseToAllChannels(TEnumAsByte NewResponse); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102AC40
		void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102AB60
		void SetCollisionObjectType(TEnumAsByte Channel); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102AA80
		void SetCollisionEnabled(TEnumAsByte NewType); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A9A0
		void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102A8C0
		void SetCastShadow(bool NewCastShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A7E0
		void SetCastInsetShadow(bool bInCastInsetShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A700
		void SetCastHiddenShadow(bool NewCastHiddenShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A620
		void SetCastContactShadow(bool bInCastContactShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A540
		void SetBoundsScale(float NewBoundsScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A460
		void SetAngularDamping(float InDamping); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A380
		void SetAllUseMACD(bool InUseMACD); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A2A0
		void SetAllUseCCD(bool InUseCCD); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102A1C0
		void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102A0E0
		void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41102A000
		void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411029F20
		void SetAllMassScale(float InMassScale); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF411029E40
		void SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411029D60
		void SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411029C80
		void SetAffectDistanceFieldLighting(bool NewAffectDistanceFieldLighting); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411029BA0
		FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411029AC0
		void PutRigidBodyToSleep(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4110299E0
		bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411029900
		bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411029820
		bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF411029740
		bool K2_IsQueryCollisionEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411029660
		bool K2_IsPhysicsCollisionEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411029580
		bool K2_IsCollisionEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110294A0
		bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4110293C0
		bool IsOverlappingComponent(UPrimitiveComponent OtherComp); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110292E0
		bool IsOverlappingActor(AActor Other); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411029200
		bool IsMaterialSlotNameValid(FName MaterialSlotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411029120
		bool IsGravityEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411029040
		bool IsExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411028EF8
		bool IsAnyRigidBodyAwake(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF411028E18
		void InvalidateLumenSurfaceCache(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411028D38
		void IgnoreComponentWhenMoving(UPrimitiveComponent Component, bool bShouldIgnore); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411028C58
		void IgnoreActorWhenMoving(AActor Actor, bool bShouldIgnore); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411028B78
		FWalkableSlopeOverride GetWalkableSlopeOverride(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411028970
		bool GetUpdateKinematicFromSimulation(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411028890
		bool GetStaticWhenNotMoveable(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110287B0
		FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110286D0
		FVector GetPhysicsLinearVelocity(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110285F0
		FVector GetPhysicsAngularVelocityInRadians(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411028510
		FVector GetPhysicsAngularVelocityInDegrees(FName BoneName); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411028430
		void GetOverlappingComponents(TArray& OutOverlappingComponents); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF411028350
		void GetOverlappingActors(TArray& OverlappingActors, UClass ClassFilter); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF411028270
		int32_t GetNumMaterials(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411028190
		float GetMaxDepenetrationVelocity(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4110280B0
		TArray GetMaterialSlotNames(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027FD0
		int32_t GetMaterialIndex(FName MaterialSlotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027EF0
		UMaterialInterface GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF411027E10
		UMaterialInterface GetMaterialByName(FName MaterialSlotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027D30
		UMaterialInterface GetMaterial(int32_t ElementIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027C50
		float GetMassScale(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027B70
		float GetMass(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027A90
		float GetLinearDamping(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110279B0
		FVector GetInertiaTensor(FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4110278D0
		bool GetIgnoreBoundsForEditorFocus(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4110277F0
		bool GetGenerateOverlapEvents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027710
		TArray GetExcludeForSpecificHLODLevels(); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 0x7FF411027630
		int32_t GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027550
		int32_t GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027470
		TEnumAsByte GetCollisionResponseToChannel(TEnumAsByte Channel); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027328
		FName GetCollisionProfileName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027248
		TEnumAsByte GetCollisionObjectType(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411027100
		TEnumAsByte GetCollisionEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411026FB8
		float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411026ED8
		FVector GetCenterOfMass(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF411026DF8
		FBodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(FName BoneName, bool bGetWelded, int32_t Index); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411026C58
		float GetAngularDamping(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411026B78
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(int32_t ElementIndex, UMaterialInterface SourceMaterial, FName OptionalName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF411026A98
		UMaterialInstanceDynamic CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, UMaterialInterface Parent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4110269B8
		UMaterialInstanceDynamic CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4110268D8
		TArray CopyArrayOfMoveIgnoreComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4110267F8
		TArray CopyArrayOfMoveIgnoreActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411026718
		void ClearMoveIgnoreComponents(); // Flags: Final|Native|Public|BlueprintCallable 0x7FF411026638
		void ClearMoveIgnoreActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF411026558
		bool CanCharacterStepUp(APawn Pawn); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF411026478
		bool AllowHLODLevelsExclusion(); // Flags: Final|Native|Private|Const 0x7FF411026398
		void AddVelocityChangeImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110262B8
		void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110261D8
		void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110260F8
		void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte Falloff, bool bVelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411026018
		void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte Falloff, bool bAccelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025F38
		void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025E58
		void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025D78
		void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025C98
		void AddForceAtLocation(FVector Force, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025BB8
		void AddForce(FVector Force, FName BoneName, bool bAccelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025AD8
		void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4110259F8
		void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable 0x7FF411025918
	};


	// Class Engine.MeshComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x38 (0x500 - 0x4C8)
	class UMeshComponent : public UPrimitiveComponent	
	{
	public:
		TArray OverrideMaterials; // 0x4C8(0x10)
		UMaterialInterface OverlayMaterial; // 0x4D8(0x8)
		float OverlayMaterialMaxDrawDistance; // 0x4E0(0x4)
		bool bEnableMaterialParameterCaching : 1; // 0x4E4:0(0x1)
		unsigned char UnknownData01_7[0x13]; // 0x4E5(0x13) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshComponent");
			return ret;
		}

		void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41102F418
		void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102F338
		void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102F258
		void SetOverlayMaterial(UMaterialInterface NewOverlayMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102F178
		void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102F098
		bool PrestreamMeshLODs(float Seconds); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41102EFB8
		float GetOverlayMaterialMaxDrawDistance(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41102EED8
		UMaterialInterface GetOverlayMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41102EDF8
		TArray GetMaterials(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41102ED18
	};


	// Class Engine.StaticMeshComponent
	// Inherited from UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x98 (0x590 - 0x4F8)
	class UStaticMeshComponent : public UMeshComponent	
	{
	public:
		int32_t ForcedLodModel; // 0x4F8(0x4)
		int32_t MinLOD; // 0x4FC(0x4)
		int32_t SubDivisionStepSize; // 0x500(0x4)
		FColor WireframeColorOverride; // 0x504(0x4)
		UStaticMesh StaticMesh; // 0x508(0x8)
		int32_t WorldPositionOffsetDisableDistance; // 0x510(0x4)
		bool bForceNaniteForMasked : 1; // 0x514:0(0x1)
		bool bDisallowNanite : 1; // 0x514:1(0x1)
		bool bForceDisableNanite : 1; // 0x514:2(0x1)
		bool bEvaluateWorldPositionOffset : 1; // 0x514:3(0x1)
		bool bWorldPositionOffsetWritesVelocity : 1; // 0x514:4(0x1)
		bool bEvaluateWorldPositionOffsetInRayTracing : 1; // 0x514:5(0x1)
		unsigned char UnknownBit05 : 1; // 0x514:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0x514:7(0x1) UNKNOWN PROPERTY
		bool bOverrideWireframeColor : 1; // 0x515:0(0x1)
		bool bOverrideMinLOD : 1; // 0x515:1(0x1)
		bool bOverrideNavigationExport : 1; // 0x515:2(0x1)
		bool bForceNavigationObstacle : 1; // 0x515:3(0x1)
		bool bDisallowMeshPaintPerInstance : 1; // 0x515:4(0x1)
		bool bMeshPaintTexture : 1; // 0x515:5(0x1)
		bool bIgnoreInstanceForTextureStreaming : 1; // 0x515:6(0x1)
		bool bOverrideLightMapRes : 1; // 0x515:7(0x1)
		bool bCastDistanceFieldIndirectShadow : 1; // 0x516:0(0x1)
		bool bOverrideDistanceFieldSelfShadowBias : 1; // 0x516:1(0x1)
		bool bUseSubDivisions : 1; // 0x516:2(0x1)
		bool bUseDefaultCollision : 1; // 0x516:3(0x1)
		bool bSortTriangles : 1; // 0x516:4(0x1)
		bool bReverseCulling : 1; // 0x516:5(0x1)
		unsigned char UnknownData07_5[0x1]; // 0x517(0x1) UNKNOWN PROPERTY
		UTexture MeshPaintTexture; // 0x518(0x8)
		UTexture MeshPaintTextureOverride; // 0x520(0x8)
		int32_t OverriddenLightMapRes; // 0x528(0x4)
		float DistanceFieldIndirectShadowMinVisibility; // 0x52C(0x4)
		float DistanceFieldSelfShadowBias; // 0x530(0x4)
		float StreamingDistanceMultiplier; // 0x534(0x4)
		float NanitePixelProgrammableDistance; // 0x538(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x53C(0x4) UNKNOWN PROPERTY
		TArray LODData; // 0x540(0x10)
		TArray StreamingTextureData; // 0x550(0x10)
		FLightmassPrimitiveSettings LightmassSettings; // 0x560(0x18)
		unsigned char UnknownData09_7[0x18]; // 0x578(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshComponent");
			return ret;
		}

		void UpdateInitialEvaluateWorldPositionOffset(); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4140A5B38
		void SetWorldPositionOffsetDisableDistance(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A5A58
		bool SetStaticMesh(UStaticMesh NewMesh); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A5978
		void SetReverseCulling(bool ReverseCulling); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A5898
		void SetForcedLodModel(int32_t NewForcedLodModel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A57B8
		void SetForceDisableNanite(bool bInForceDisableNanite); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A56D8
		void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A55F8
		void SetEvaluateWorldPositionOffset(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A5518
		void SetDistanceFieldSelfShadowBias(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4140A5438
		void OnRep_StaticMesh(UStaticMesh OldStaticMesh); // Flags: Final|RequiredAPI|Native|Public 0x7FF4140A5358
		void GetLocalBounds(FVector& Min, FVector& Max); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4140A5278
		bool GetInitialEvaluateWorldPositionOffset(); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4140A5198
	};


	// Class Engine.InstancedStaticMeshComponent
	// Inherited from UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x350 (0x8E0 - 0x590)
	class UInstancedStaticMeshComponent : public UStaticMeshComponent	
	{
	public:
		unsigned char UnknownData04_3[0x8]; // 0x590(0x8) UNKNOWN PROPERTY
		TArray PerInstanceSMData; // 0x598(0x10)
		TArray PerInstancePrevTransform; // 0x5A8(0x10)
		FBox NavigationBounds; // 0x5B8(0x38)
		FTransform PreviousComponentTransform; // 0x5F0(0x60)
		int32_t NumCustomDataFloats; // 0x650(0x4)
		int32_t InstancingRandomSeed; // 0x654(0x4)
		TArray PerInstanceSMCustomData; // 0x658(0x10)
		TArray AdditionalRandomSeeds; // 0x668(0x10)
		float InstanceLODDistanceScale; // 0x678(0x4)
		int32_t InstanceStartCullDistance; // 0x67C(0x4)
		int32_t InstanceEndCullDistance; // 0x680(0x4)
		bool bUseGpuLodSelection : 1; // 0x684:0(0x1)
		bool bInheritPerInstanceData : 1; // 0x684:1(0x1)
		bool bDisableCollision : 1; // 0x684:2(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x685(0x3) UNKNOWN PROPERTY
		TArray InstanceReorderTable; // 0x688(0x10)
		unsigned char UnknownData06_6[0xB0]; // 0x698(0xB0) UNKNOWN PROPERTY
		int32_t NumPendingLightmaps; // 0x748(0x4)
		unsigned char UnknownData07_6[0x184]; // 0x74C(0x184) UNKNOWN PROPERTY
		TArray CachedMappings; // 0x8D0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InstancedStaticMeshComponent");
			return ret;
		}

		bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41449B858
		void SetNumCustomDataFloats(int32_t InNumCustomDataFloats); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449B778
		void SetLODDistanceScale(float InLODDistanceScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449B698
		bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449B5B8
		void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449B4D8
		bool RemoveInstances(TArray& InstancesToRemove); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41449B3F8
		bool RemoveInstance(int32_t InstanceIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449B318
		bool IsValidInstance(int32_t InstanceIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449B238
		float GetLODDistanceScale(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449B158
		bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41449B078
		TArray GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41449AF98
		TArray GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41449AEB8
		int32_t GetInstanceCount(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449ADD8
		void GetCullDistances(int32_t& OutStartCullDistance, int32_t& OutEndCullDistance); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41449ACF8
		void ClearInstances(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449AC18
		bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41449AB38
		bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41449AA58
		int32_t AddInstanceWorldSpace(FTransform& WorldTransform); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41449A978
		TArray AddInstances(TArray& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace, bool bUpdateNavigation); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41449A898
		int32_t AddInstance(FTransform& InstanceTransform, bool bWorldSpace); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41449A7B8
	};


	// Class Engine.HierarchicalInstancedStaticMeshComponent
	// Inherited from UInstancedStaticMeshComponent -> UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x1A0 (0xA80 - 0x8E0)
	class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent	
	{
	public:
		unsigned char UnknownData06_3[0x10]; // 0x8E0(0x10) UNKNOWN PROPERTY
		bool bUseTranslatedInstanceSpace : 1; // 0x8F0:0(0x1)
		unsigned char UnknownData07_5[0x7]; // 0x8F1(0x7) UNKNOWN PROPERTY
		FVector TranslatedInstanceSpaceOrigin; // 0x8F8(0x18)
		TArray SortedInstances; // 0x910(0x10)
		int32_t NumBuiltInstances; // 0x920(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x924(0x4) UNKNOWN PROPERTY
		FBox BuiltInstanceBounds; // 0x928(0x38)
		FBox UnbuiltInstanceBounds; // 0x960(0x38)
		TArray UnbuiltInstanceBoundsList; // 0x998(0x10)
		bool bEnableDensityScaling : 1; // 0x9A8:0(0x1)
		unsigned char UnknownData09_5[0x7]; // 0x9A9(0x7) UNKNOWN PROPERTY
		int32_t OcclusionLayerNumNodes; // 0x9B0(0x4)
		unsigned char UnknownData10_6[0x4]; // 0x9B4(0x4) UNKNOWN PROPERTY
		FBoxSphereBounds CacheMeshExtendedBounds; // 0x9B8(0x38)
		int32_t InstanceCountToRender; // 0x9F0(0x4)
		unsigned char UnknownData11_7[0x84]; // 0x9F4(0x84) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HierarchicalInstancedStaticMeshComponent");
			return ret;
		}
	};


	// Class Engine.PartitionActor
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class APartitionActor : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PartitionActor");
			return ret;
		}
	};


	// Class Engine.ISMPartitionActor
	// Inherited from APartitionActor -> AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AISMPartitionActor : public APartitionActor	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x290(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ISMPartitionActor");
			return ret;
		}
	};


	// Class Engine.StaticMeshActor
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AStaticMeshActor : public AActor	
	{
	public:
		UStaticMeshComponent StaticMeshComponent; // 0x290(0x8)
		bool bStaticMeshReplicateMovement; // 0x298(0x1)
		EPhysicsReplicationMode StaticMeshPhysicsReplicationMode; // 0x299(0x1)
		ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x29A(0x1)
		unsigned char UnknownData01_7[0x5]; // 0x29B(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshActor");
			return ret;
		}

		void SetMobility(TEnumAsByte InMobility); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449BBD8
	};


	// Class Engine.Brush
	// Inherited from AActor -> UObject
	// Size: 0x38 (0x2C8 - 0x290)
	class ABrush : public AActor	
	{
	public:
		TEnumAsByte BrushType; // 0x290(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x291(0x3) UNKNOWN PROPERTY
		FColor BrushColor; // 0x294(0x4)
		int32_t PolyFlags; // 0x298(0x4)
		bool bColored : 1; // 0x29C:0(0x1)
		bool bSolidWhenSelected : 1; // 0x29C:1(0x1)
		bool bPlaceableFromClassBrowser : 1; // 0x29C:2(0x1)
		bool bNotForClientOrServer : 1; // 0x29C:3(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x29D(0x3) UNKNOWN PROPERTY
		UModel Brush; // 0x2A0(0x8)
		UBrushComponent BrushComponent; // 0x2A8(0x8)
		unsigned char UnknownData05_7[0x18]; // 0x2B0(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Brush");
			return ret;
		}
	};


	// Class Engine.Volume
	// Inherited from ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AVolume : public ABrush	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Volume");
			return ret;
		}
	};


	// Class Engine.StreamableRenderAsset
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class UStreamableRenderAsset : public UObject	
	{
	public:
		unsigned char UnknownData03_3[0x18]; // 0x28(0x18) UNKNOWN PROPERTY
		double ForceMipLevelsToBeResidentTimestamp; // 0x40(0x8)
		int32_t NumCinematicMipLevels; // 0x48(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY
		FPerQualityLevelInt NoRefStreamingLODBias; // 0x50(0x68)
		int32_t StreamingIndex; // 0xB8(0x4)
		bool NeverStream : 1; // 0xBC:0(0x1)
		bool bGlobalForceMipLevelsToBeResident : 1; // 0xBC:1(0x1)
		bool bHasStreamingUpdatePending : 1; // 0xBC:2(0x1)
		bool bForceMiplevelsToBeResident : 1; // 0xBC:3(0x1)
		bool bIgnoreStreamingMipBias : 1; // 0xBC:4(0x1)
		bool bUseCinematicMipLevels : 1; // 0xBC:5(0x1)
		unsigned char UnknownData05_7[0xB]; // 0xBD(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamableRenderAsset");
			return ret;
		}

		void SetForceMipLevelsToBeResident(float Seconds, int32_t CinematicLODGroupMask); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449CAB8
	};


	// Class Engine.MaterialInterface
	// Inherited from UObject
	// Size: 0x90 (0xB8 - 0x28)
	class UMaterialInterface : public UObject	
	{
	public:
		unsigned char UnknownData04_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		USubsurfaceProfile SubsurfaceProfile; // 0x38(0x8)
		TArray SpecularProfiles; // 0x40(0x10)
		UNeuralProfile NeuralProfile; // 0x50(0x8)
		unsigned char UnknownData05_6[0x20]; // 0x58(0x20) UNKNOWN PROPERTY
		FLightmassMaterialInterfaceSettings LightmassSettings; // 0x78(0x10)
		TArray TextureStreamingData; // 0x88(0x10)
		TArray AssetUserData; // 0x98(0x10)
		unsigned char UnknownData06_6[0x4]; // 0xA8(0x4) UNKNOWN PROPERTY
		bool bIncludedInBaseGame : 1; // 0xAC:0(0x1)
		unsigned char UnknownData07_7[0xB]; // 0xAD(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInterface");
			return ret;
		}

		void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449D6F8
		UPhysicalMaterialMask GetPhysicalMaterialMask(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449D618
		UPhysicalMaterial GetPhysicalMaterialFromMap(int32_t Index); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449D538
		UPhysicalMaterial GetPhysicalMaterial(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449D458
		FMaterialParameterInfo GetParameterInfo(TEnumAsByte Association, FName ParameterName, UMaterialFunctionInterface LayerFunction); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449D378
		UMaterialInterface GetNaniteOverideMaterial(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449D298
		TEnumAsByte GetBlendMode(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449D1B8
		UMaterial GetBaseMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41449D0D8
	};


	// Class Engine.MaterialInstance
	// Inherited from UMaterialInterface -> UObject
	// Size: 0x1F0 (0x2A8 - 0xB8)
	class UMaterialInstance : public UMaterialInterface	
	{
	public:
		UPhysicalMaterial PhysMaterial; // 0xB8(0x8)
		UPhysicalMaterial PhysicalMaterialMap; // 0xC0(0x40)
		UMaterialInterface Parent; // 0x100(0x8)
		FMaterialOverrideNanite NaniteOverrideMaterial; // 0x108(0x30)
		bool bHasStaticPermutationResource : 1; // 0x138:0(0x1)
		bool bOverrideSubsurfaceProfile : 1; // 0x138:1(0x1)
		bool bOverrideBlendableLocation : 1; // 0x138:2(0x1)
		bool bOverrideBlendablePriority : 1; // 0x138:3(0x1)
		unsigned char UnknownData04_5[0x2]; // 0x139(0x2) UNKNOWN PROPERTY
		TEnumAsByte BlendableLocationOverride; // 0x13B(0x1)
		int32_t BlendablePriorityOverride; // 0x13C(0x4)
		unsigned char UnknownData05_6[0x20]; // 0x140(0x20) UNKNOWN PROPERTY
		TArray ScalarParameterValues; // 0x160(0x10)
		TArray VectorParameterValues; // 0x170(0x10)
		TArray DoubleVectorParameterValues; // 0x180(0x10)
		TArray TextureParameterValues; // 0x190(0x10)
		TArray TextureCollectionParameterValues; // 0x1A0(0x10)
		TArray RuntimeVirtualTextureParameterValues; // 0x1B0(0x10)
		TArray SparseVolumeTextureParameterValues; // 0x1C0(0x10)
		TArray FontParameterValues; // 0x1D0(0x10)
		TArray UserSceneTextureOverrides; // 0x1E0(0x10)
		FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x1F0(0x20)
		unsigned char UnknownData06_6[0x8]; // 0x210(0x8) UNKNOWN PROPERTY
		FStaticParameterSetRuntimeData StaticParametersRuntime; // 0x218(0x60)
		unsigned char UnknownData07_7[0x30]; // 0x278(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstance");
			return ret;
		}
	};


	// Class Engine.MaterialInstanceConstant
	// Inherited from UMaterialInstance -> UMaterialInterface -> UObject
	// Size: 0x8 (0x2B0 - 0x2A8)
	class UMaterialInstanceConstant : public UMaterialInstance	
	{
	public:
		UPhysicalMaterialMask PhysMaterialMask; // 0x2A8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceConstant");
			return ret;
		}

		FLinearColor K2_GetVectorParameterValue(FName ParameterName); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable 0x7FF41449D998
		UTexture K2_GetTextureParameterValue(FName ParameterName); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41449D8B8
		float K2_GetScalarParameterValue(FName ParameterName); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41449D7D8
	};


	// Class Engine.MaterialExpression
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UMaterialExpression : public UObject	
	{
	public:
		int32_t MaterialExpressionEditorX; // 0x28(0x4)
		int32_t MaterialExpressionEditorY; // 0x2C(0x4)
		UEdGraphNode GraphNode; // 0x30(0x8)
		UMaterialExpression SubgraphExpression; // 0x38(0x8)
		unsigned char UnknownData05_6[0x10]; // 0x40(0x10) UNKNOWN PROPERTY
		FGuid MaterialExpressionGuid; // 0x50(0x10)
		UMaterial Material; // 0x60(0x8)
		UMaterialFunction Function; // 0x68(0x8)
		FString Desc; // 0x70(0x10)
		unsigned char UnknownData06_6[0x4]; // 0x80(0x4) UNKNOWN PROPERTY
		bool bRealtimePreview : 1; // 0x84:0(0x1)
		bool bNeedToUpdatePreview : 1; // 0x84:1(0x1)
		unsigned char UnknownData07_3[0x3]; // 0x85(0x3) UNKNOWN PROPERTY
		bool bIsParameterExpression : 1; // 0x88:0(0x1)
		unsigned char UnknownData08_3[0x3]; // 0x89(0x3) UNKNOWN PROPERTY
		bool bCommentBubbleVisible : 1; // 0x8C:0(0x1)
		bool bShowOutputNameOnPin : 1; // 0x8C:1(0x1)
		bool bShowMaskColorsOnPin : 1; // 0x8C:2(0x1)
		bool bHidePreviewWindow : 1; // 0x8C:3(0x1)
		bool bCollapsed : 1; // 0x8C:4(0x1)
		bool bShaderInputData : 1; // 0x8C:5(0x1)
		bool bShowInputs : 1; // 0x8C:6(0x1)
		bool bShowOutputs : 1; // 0x8C:7(0x1)
		unsigned char UnknownData09_5[0x3]; // 0x8D(0x3) UNKNOWN PROPERTY
		TArray MenuCategories; // 0x90(0x10)
		TArray Outputs; // 0xA0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpression");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCustomOutput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCustomOutput : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCustomOutput");
			return ret;
		}
	};


	// Class Engine.HLODBuilder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHLODBuilder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODBuilder");
			return ret;
		}
	};


	// Class Engine.TickableWorldSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UTickableWorldSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x30(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TickableWorldSubsystem");
			return ret;
		}
	};


	// Class Engine.AssetUserData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAssetUserData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetUserData");
			return ret;
		}
	};


	// Class Engine.TextureMipDataProviderFactory
	// Inherited from UAssetUserData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UTextureMipDataProviderFactory : public UAssetUserData	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureMipDataProviderFactory");
			return ret;
		}
	};


	// Class Engine.TextureAllMipDataProviderFactory
	// Inherited from UTextureMipDataProviderFactory -> UAssetUserData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UTextureAllMipDataProviderFactory : public UTextureMipDataProviderFactory	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureAllMipDataProviderFactory");
			return ret;
		}
	};


	// Class Engine.DynamicSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UDynamicSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DynamicSubsystem");
			return ret;
		}
	};


	// Class Engine.EngineSubsystem
	// Inherited from UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UEngineSubsystem : public UDynamicSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineSubsystem");
			return ret;
		}
	};


	// Class Engine.EngineCustomTimeStep
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineCustomTimeStep : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineCustomTimeStep");
			return ret;
		}
	};


	// Class Engine.TimecodeProvider
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UTimecodeProvider : public UObject	
	{
	public:
		float FrameDelay; // 0x28(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TimecodeProvider");
			return ret;
		}

		Ftimecode GetTimecode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449E878
		ETimecodeProviderSynchronizationState GetSynchronizationState(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449E798
		FQualifiedFrameTime GetQualifiedFrameTime(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449E6B8
		FFrameRate GetFrameRate(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449E5D8
		Ftimecode GetDelayedTimecode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449E4F8
		FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41449E418
		bool FetchTimecode(FQualifiedFrameTime& OutFrameTime); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF41449E338
		void FetchAndUpdate(); // Flags: Native|Public|BlueprintCallable 0x7FF41449E258
	};


	// Class Engine.EdGraphNode
	// Inherited from UObject
	// Size: 0x70 (0x98 - 0x28)
	class UEdGraphNode : public UObject	
	{
	public:
		unsigned char UnknownData05_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TArray DeprecatedPins; // 0x38(0x10)
		int32_t NodePosX; // 0x48(0x4)
		int32_t NodePosY; // 0x4C(0x4)
		int32_t NodeWidth; // 0x50(0x4)
		int32_t NodeHeight; // 0x54(0x4)
		TEnumAsByte AdvancedPinDisplay; // 0x58(0x1)
		ENodeEnabledState EnabledState; // 0x59(0x1)
		unsigned char UnknownData06_6[0x1]; // 0x5A(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x5B:0(0x1) UNKNOWN PROPERTY
		bool bDisplayAsDisabled : 1; // 0x5B:1(0x1)
		bool bUserSetEnabledState : 1; // 0x5B:2(0x1)
		bool bIsIntermediateNode : 1; // 0x5B:3(0x1)
		bool bHasCompilerMessage : 1; // 0x5B:4(0x1)
		unsigned char UnknownData08_5[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY
		FString NodeComment; // 0x60(0x10)
		int32_t ErrorType; // 0x70(0x4)
		unsigned char UnknownData09_6[0x4]; // 0x74(0x4) UNKNOWN PROPERTY
		FString ErrorMsg; // 0x78(0x10)
		FGuid NodeGUID; // 0x88(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphNode");
			return ret;
		}
	};


	// Class Engine.EdGraph
	// Inherited from UObject
	// Size: 0x38 (0x60 - 0x28)
	class UEdGraph : public UObject	
	{
	public:
		UClass Schema; // 0x28(0x8)
		TArray Nodes; // 0x30(0x10)
		bool bEditable : 1; // 0x40:0(0x1)
		bool bAllowDeletion : 1; // 0x40:1(0x1)
		bool bAllowRenaming : 1; // 0x40:2(0x1)
		unsigned char UnknownData01_7[0x1F]; // 0x41(0x1F) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraph");
			return ret;
		}
	};


	// Class Engine.DebugDrawComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x58 (0x520 - 0x4C8)
	class UDebugDrawComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x4C8(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugDrawComponent");
			return ret;
		}
	};


	// Class Engine.AnimNotify
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnimNotify : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify");
			return ret;
		}

		bool Received_Notify(USkeletalMeshComponent MeshComp, UAnimSequenceBase Animation, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const 0x7FF4144A8B38
		FString GetNotifyName(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF4144A8A58
		float GetDefaultTriggerWeightThreshold(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF4144A8978
	};


	// Class Engine.AnimNotifyState
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAnimNotifyState : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState");
			return ret;
		}

		bool Received_NotifyTick(USkeletalMeshComponent MeshComp, UAnimSequenceBase Animation, float FrameDeltaTime, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const 0x7FF4144A8F98
		bool Received_NotifyEnd(USkeletalMeshComponent MeshComp, UAnimSequenceBase Animation, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const 0x7FF4144A8EB8
		bool Received_NotifyBegin(USkeletalMeshComponent MeshComp, UAnimSequenceBase Animation, float TotalDuration, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const 0x7FF4144A8DD8
		FString GetNotifyName(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF4144A8CF8
		float GetDefaultTriggerWeightThreshold(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF4144A8C18
	};


	// Class Engine.SkinnedMeshComponent
	// Inherited from UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x368 (0x860 - 0x4F8)
	class USkinnedMeshComponent : public UMeshComponent	
	{
	public:
		unsigned char UnknownData22_3[0x8]; // 0x4F8(0x8) UNKNOWN PROPERTY
		USkeletalMesh SkeletalMesh; // 0x500(0x8)
		USkinnedAsset SkinnedAsset; // 0x508(0x8)
		TWeakObjectPtr LeaderPoseComponent; // 0x510(0x8)
		TArray SkinCacheUsage; // 0x518(0x10)
		bool bSetMeshDeformer; // 0x528(0x1)
		unsigned char UnknownData23_6[0x7]; // 0x529(0x7) UNKNOWN PROPERTY
		UMeshDeformer MeshDeformer; // 0x530(0x8)
		UMeshDeformerInstanceSettings MeshDeformerInstanceSettings; // 0x538(0x8)
		FMeshDeformerInstanceSet MeshDeformerInstances; // 0x540(0x20)
		unsigned char UnknownData24_6[0x180]; // 0x560(0x180) UNKNOWN PROPERTY
		UPhysicsAsset PhysicsAssetOverride; // 0x6E0(0x8)
		int32_t ForcedLodModel; // 0x6E8(0x4)
		unsigned char UnknownData25_6[0x4]; // 0x6EC(0x4) UNKNOWN PROPERTY
		int32_t MinLodModel; // 0x6F0(0x4)
		unsigned char UnknownData26_6[0x8]; // 0x6F4(0x8) UNKNOWN PROPERTY
		float StreamingDistanceMultiplier; // 0x6FC(0x4)
		unsigned char UnknownData27_6[0x8]; // 0x700(0x8) UNKNOWN PROPERTY
		TArray LODInfo; // 0x708(0x10)
		unsigned char UnknownData28_6[0x24]; // 0x718(0x24) UNKNOWN PROPERTY
		EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x73C(0x1)
		unsigned char UnknownData29_6[0x1]; // 0x73D(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit30 : 1; // 0x73E:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit31 : 1; // 0x73E:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit32 : 1; // 0x73E:2(0x1) UNKNOWN PROPERTY
		bool bOverrideMinLOD : 1; // 0x73E:3(0x1)
		bool bUseBoundsFromLeaderPoseComponent : 1; // 0x73E:4(0x1)
		bool bIncludeComponentLocationIntoBounds : 1; // 0x73E:5(0x1)
		bool bForceWireframe : 1; // 0x73E:6(0x1)
		bool bDisableMorphTarget : 1; // 0x73E:7(0x1)
		bool bHideSkin : 1; // 0x73F:0(0x1)
		bool bPerBoneMotionBlur : 1; // 0x73F:1(0x1)
		bool bComponentUseFixedSkelBounds : 1; // 0x73F:2(0x1)
		bool bConsiderAllBodiesForBounds : 1; // 0x73F:3(0x1)
		bool bSyncAttachParentLOD : 1; // 0x73F:4(0x1)
		bool bCanHighlightSelectedSections : 1; // 0x73F:5(0x1)
		bool bRecentlyRendered : 1; // 0x73F:6(0x1)
		bool bCastCapsuleDirectShadow : 1; // 0x73F:7(0x1)
		bool bCastCapsuleIndirectShadow : 1; // 0x740:0(0x1)
		bool bCPUSkinning : 1; // 0x740:1(0x1)
		bool bEnableUpdateRateOptimizations : 1; // 0x740:2(0x1)
		bool bDisplayDebugUpdateRateOptimizations : 1; // 0x740:3(0x1)
		bool bRenderStatic : 1; // 0x740:4(0x1)
		bool bIgnoreLeaderPoseComponentLOD : 1; // 0x740:5(0x1)
		unsigned char UnknownBit33 : 1; // 0x740:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit34 : 1; // 0x740:7(0x1) UNKNOWN PROPERTY
		bool bCachedLocalBoundsUpToDate : 1; // 0x741:0(0x1)
		bool bCachedWorldSpaceBoundsUpToDate : 1; // 0x741:1(0x1)
		unsigned char UnknownBit35 : 1; // 0x741:2(0x1) UNKNOWN PROPERTY
		bool bForceMeshObjectUpdate : 1; // 0x741:3(0x1)
		unsigned char UnknownBit36 : 1; // 0x741:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit37 : 1; // 0x741:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit38 : 1; // 0x741:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit39 : 1; // 0x741:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit40 : 1; // 0x742:0(0x1) UNKNOWN PROPERTY
		bool bFollowerShouldTickPose : 1; // 0x742:1(0x1)
		unsigned char UnknownData41_5[0x1]; // 0x743(0x1) UNKNOWN PROPERTY
		float CapsuleIndirectShadowMinVisibility; // 0x744(0x4)
		unsigned char UnknownData42_6[0x40]; // 0x748(0x40) UNKNOWN PROPERTY
		FBoxSphereBounds CachedWorldOrLocalSpaceBounds; // 0x788(0x38)
		FMatrix CachedWorldToLocalTransform; // 0x7C0(0x80)
		unsigned char UnknownData43_7[0x20]; // 0x840(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkinnedMeshComponent");
			return ret;
		}

		void UnsetMeshDeformer(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6158
		void UnloadSkinWeightProfile(FName InProfileName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6078
		void UnHideBoneByName(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5F98
		void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F5EB8
		void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144F5DD8
		void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5CF8
		void ShowAllMaterialSections(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5C18
		void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144F5B38
		void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray& VertexColors); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144F5A58
		bool SetSkinWeightProfile(FName InProfileName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5978
		void SetSkinWeightOverride(int32_t LODIndex, TArray& SkinWeights); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144F5898
		void SetSkinnedAssetAndUpdate(USkinnedAsset NewMesh, bool bReinitPose); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F57B8
		void SetRenderStatic(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F56D8
		void SetPreSkinningOffsets(int32_t LODIndex, TArray Offsets); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144F55F8
		void SetPostSkinningOffsets(int32_t LODIndex, TArray Offsets); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144F5518
		void SetPhysicsAsset(UPhysicsAsset NewPhysicsAsset, bool bForceReInit); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5438
		void SetMinLOD(int32_t InNewMinLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5358
		void SetMeshDeformer(UMeshDeformer InMeshDeformer); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5278
		void SetLeaderPoseComponent(USkinnedMeshComponent NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F5198
		void SetForcedLOD(int32_t InNewForcedLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F50B8
		void SetCastCapsuleIndirectShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F4FD8
		void SetCastCapsuleDirectShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F4EF8
		void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F4E18
		void OverrideMinLOD(int32_t InNewMinLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F4D38
		bool IsUsingSkinWeightProfile(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4C58
		bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F4B78
		bool IsBoneHiddenByName(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F4A98
		void HideBoneByName(FName BoneName, TEnumAsByte PhysBodyOption); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F49B8
		int32_t GetVertexOffsetUsage(int32_t LODIndex); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F48D8
		bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144F47F8
		FName GetSocketBoneName(FName InSocketName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4718
		USkinnedAsset GetSkinnedAsset(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4638
		USkeletalMesh GetSkeletalMesh_DEPRECATED(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4558
		FTransform GetRefPoseTransform(int32_t BoneIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4478
		FVector GetRefPosePosition(int32_t BoneIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4398
		int32_t GetPredictedLODLevel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F42B8
		FName GetParentBone(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F41D8
		int32_t GetNumLODs(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F40F8
		int32_t GetNumBones(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F4018
		UMeshDeformerInstance GetMeshDeformerInstance(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3F38
		int32_t GetForcedLOD(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3E58
		FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3D78
		FName GetCurrentSkinWeightProfileName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3C98
		FTransform GetBoneTransform(FName InBoneName, TEnumAsByte TransformSpace); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3BB8
		FName GetBoneName(int32_t BoneIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3AD8
		int32_t GetBoneIndex(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F39F8
		FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3918
		void ClearVertexColorOverride(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F3838
		void ClearSkinWeightProfile(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F3758
		void ClearSkinWeightOverride(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F3678
		bool BoneIsChildOf(FName BoneName, FName ParentBoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F3598
	};


	// Class Engine.SkeletalMeshComponent
	// Inherited from USkinnedMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x6A0 (0xF00 - 0x860)
	class USkeletalMeshComponent : public USkinnedMeshComponent	
	{
	public:
		UAnimBlueprintGeneratedClass AnimBlueprintGeneratedClass; // 0x860(0x8)
		UClass AnimClass; // 0x868(0x8)
		UAnimInstance AnimScriptInstance; // 0x870(0x8)
		UAnimInstance PostProcessAnimInstance; // 0x878(0x8)
		FSingleAnimationPlayData AnimationData; // 0x880(0x18)
		unsigned char UnknownData24_6[0x10]; // 0x898(0x10) UNKNOWN PROPERTY
		FVector RootBoneTranslation; // 0x8A8(0x18)
		FVector LineCheckBoundsScale; // 0x8C0(0x18)
		unsigned char UnknownData25_6[0x20]; // 0x8D8(0x20) UNKNOWN PROPERTY
		TArray LinkedInstances; // 0x8F8(0x10)
		unsigned char UnknownData26_6[0x10]; // 0x908(0x10) UNKNOWN PROPERTY
		TArray CachedBoneSpaceTransforms; // 0x918(0x10)
		TArray CachedComponentSpaceTransforms; // 0x928(0x10)
		unsigned char UnknownData27_6[0xA0]; // 0x938(0xA0) UNKNOWN PROPERTY
		float GlobalAnimRateScale; // 0x9D8(0x4)
		TEnumAsByte KinematicBonesUpdateType; // 0x9DC(0x1)
		TEnumAsByte PhysicsTransformUpdateMode; // 0x9DD(0x1)
		unsigned char UnknownData28_6[0x1]; // 0x9DE(0x1) UNKNOWN PROPERTY
		TEnumAsByte AnimationMode; // 0x9DF(0x1)
		unsigned char UnknownData29_6[0x1]; // 0x9E0(0x1) UNKNOWN PROPERTY
		bool bDisablePostProcessBlueprint : 1; // 0x9E1:0(0x1)
		unsigned char UnknownBit30 : 1; // 0x9E1:1(0x1) UNKNOWN PROPERTY
		bool bUpdateOverlapsOnAnimationFinalize : 1; // 0x9E1:2(0x1)
		unsigned char UnknownBit31 : 1; // 0x9E1:3(0x1) UNKNOWN PROPERTY
		bool bHasValidBodies : 1; // 0x9E1:4(0x1)
		bool bBlendPhysics : 1; // 0x9E1:5(0x1)
		bool bEnablePhysicsOnDedicatedServer : 1; // 0x9E1:6(0x1)
		bool bUpdateMeshWhenKinematic : 1; // 0x9E1:7(0x1)
		bool bUpdateJointsFromAnimation : 1; // 0x9E2:0(0x1)
		bool bAllowClothActors : 1; // 0x9E2:1(0x1)
		bool bDisableClothSimulation : 1; // 0x9E2:2(0x1)
		unsigned char UnknownData32_3[0x5]; // 0x9E3(0x5) UNKNOWN PROPERTY
		bool bDisableRigidBodyAnimNode : 1; // 0x9E8:0(0x1)
		bool bAllowAnimCurveEvaluation : 1; // 0x9E8:1(0x1)
		unsigned char UnknownBit33 : 1; // 0x9E8:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit34 : 1; // 0x9E8:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit35 : 1; // 0x9E8:4(0x1) UNKNOWN PROPERTY
		bool bCollideWithEnvironment : 1; // 0x9E8:5(0x1)
		bool bCollideWithAttachedChildren : 1; // 0x9E8:6(0x1)
		bool bForceCollisionUpdate : 1; // 0x9E8:7(0x1)
		unsigned char UnknownData36_5[0x3]; // 0x9E9(0x3) UNKNOWN PROPERTY
		float ClothVelocityScale; // 0x9EC(0x4)
		bool bResetAfterTeleport : 1; // 0x9F0:0(0x1)
		unsigned char UnknownBit37 : 1; // 0x9F0:1(0x1) UNKNOWN PROPERTY
		bool bDeferKinematicBoneUpdate : 1; // 0x9F0:2(0x1)
		bool bNoSkeletonUpdate : 1; // 0x9F0:3(0x1)
		bool bPauseAnims : 1; // 0x9F0:4(0x1)
		bool bUseRefPoseOnInitAnim : 1; // 0x9F0:5(0x1)
		bool bEnablePerPolyCollision : 1; // 0x9F0:6(0x1)
		bool bForceRefpose : 1; // 0x9F0:7(0x1)
		bool bOnlyAllowAutonomousTickPose : 1; // 0x9F1:0(0x1)
		bool bIsAutonomousTickPose : 1; // 0x9F1:1(0x1)
		bool bOldForceRefPose : 1; // 0x9F1:2(0x1)
		bool bShowPrePhysBones : 1; // 0x9F1:3(0x1)
		bool bRequiredBonesUpToDate : 1; // 0x9F1:4(0x1)
		bool bAnimTreeInitialised : 1; // 0x9F1:5(0x1)
		bool bEnableLineCheckWithBounds : 1; // 0x9F1:6(0x1)
		bool bPropagateCurvesToFollowers : 1; // 0x9F1:7(0x1)
		bool bSkipKinematicUpdateWhenInterpolating : 1; // 0x9F2:0(0x1)
		bool bSkipBoundsUpdateWhenInterpolating : 1; // 0x9F2:1(0x1)
		unsigned char UnknownBit38 : 1; // 0x9F2:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit39 : 1; // 0x9F2:3(0x1) UNKNOWN PROPERTY
		bool bNeedsQueuedAnimEventsDispatched : 1; // 0x9F2:4(0x1)
		unsigned char UnknownData40_5[0x1]; // 0x9F3(0x1) UNKNOWN PROPERTY
		uint16_t CachedAnimCurveUidVersion; // 0x9F4(0x2)
		unsigned char UnknownData41_6[0x2]; // 0x9F6(0x2) UNKNOWN PROPERTY
		float ClothBlendWeight; // 0x9F8(0x4)
		bool bWaitForParallelClothTask; // 0x9FC(0x1)
		bool bFilteredAnimCurvesIsAllowList; // 0x9FD(0x1)
		uint16_t CachedMeshCurveMetaDataVersion; // 0x9FE(0x2)
		TArray FilteredAnimCurves; // 0xA00(0x10)
		UBodySetup BodySetup; // 0xA10(0x8)
		unsigned char UnknownData42_6[0x4]; // 0xA18(0x4) UNKNOWN PROPERTY
		float ClothMaxDistanceScale; // 0xA1C(0x4)
		FMulticastInlineDelegate OnConstraintBroken; // 0xA20(0x10)
		FMulticastInlineDelegate OnPlasticDeformation; // 0xA30(0x10)
		UClass ClothingSimulationFactory; // 0xA40(0x8)
		unsigned char UnknownData43_6[0xF8]; // 0xA48(0xF8) UNKNOWN PROPERTY
		float TeleportDistanceThreshold; // 0xB40(0x4)
		float TeleportRotationThreshold; // 0xB44(0x4)
		unsigned char UnknownData44_6[0x98]; // 0xB48(0x98) UNKNOWN PROPERTY
		UClothingSimulationInteractor ClothingInteractor; // 0xBE0(0x8)
		unsigned char UnknownData45_6[0xB8]; // 0xBE8(0xB8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAnimInitialized; // 0xCA0(0x10)
		unsigned char UnknownData46_6[0x240]; // 0xCB0(0x240) UNKNOWN PROPERTY
		uint32_t LastPoseTickFrame; // 0xEF0(0x4)
		unsigned char UnknownData47_7[0x4]; // 0xEF4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshComponent");
			return ret;
		}

		void UnlinkAnimClassLayers(UClass InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D758
		void UnbindClothFromLeaderPoseComponent(bool bRestoreSimulationSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D678
		void ToggleDisablePostProcessBlueprint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D598
		void TermBodiesBelow(FName ParentBoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D4B8
		void SuspendClothingSimulation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D3D8
		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D2F8
		void SnapshotPose(FPoseSnapshot& Snapshot); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451D218
		void SetUpdateClothInEditor(bool NewUpdateState); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D138
		void SetUpdateAnimationInEditor(bool NewUpdateState); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451D058
		void SetTeleportRotationThreshold(float Threshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451CF78
		void SetTeleportDistanceThreshold(float Threshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451CE98
		void SetSkeletalMeshAsset(USkeletalMesh NewMesh); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41451CDB8
		void SetPosition(float InPos, bool bFireNotifies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451CCD8
		void SetPlayRate(float Rate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451CBF8
		void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451CB18
		void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451CA38
		void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C958
		void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C878
		void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C798
		void SetEnableBodyGravity(bool bEnableGravity, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C6B8
		void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C5D8
		void SetDisableAnimCurves(bool bInDisableAnimCurves); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C4F8
		void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C418
		void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C338
		void SetClothMaxDistanceScale(float Scale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C258
		void SetBodySimulatePhysics(FName& InBoneName, bool bSimulate); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451C178
		void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451C098
		void SetAnimClass(UClass NewClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451BFB8
		void SetAnimationMode(TEnumAsByte InAnimationMode, bool bForceInitAnimScriptInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451BED8
		void SetAnimation(UAnimationAsset NewAnimToPlay); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451BDF8
		void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451BD18
		void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451BC38
		void SetAllowedAnimCurvesEvaluation(TArray& List, bool bAllow); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451BB58
		void SetAllowClothActors(bool bInAllow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451BA78
		void SetAllowAnimCurveEvaluation(bool bInAllow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B998
		void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B8B8
		void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B7D8
		void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B6F8
		void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B618
		void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B538
		void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451B458
		void SetAllBodiesBelowPhysicsDisabled(FName& InBoneName, bool bDisabled, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451B378
		void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451B298
		void SetAllBodiesBelowLinearVelocity(FName& InBoneName, FVector& LinearVelocity, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451B1B8
		void ResumeClothingSimulation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451B0D8
		void ResetClothTeleportMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AFF8
		void ResetAnimInstanceDynamics(ETeleportType InTeleportType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AF18
		void ResetAllowedAnimCurveEvaluation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AE38
		void ResetAllBodiesSimulatePhysics(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AD58
		void RecreateClothingActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AC78
		void PlayAnimation(UAnimationAsset NewAnimToPlay, bool bLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AB98
		void Play(bool bLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451AAB8
		void OverrideAnimationData(UAnimationAsset InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451A9D8
		void LinkAnimGraphByTag(FName InTag, UClass InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451A8F8
		void LinkAnimClassLayers(UClass InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451A818
		bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451A738
		bool IsPlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451A658
		bool IsClothingSimulationSuspended(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451A578
		bool IsBodyGravityEnabled(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451A498
		bool HasValidAnimationInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451A3B8
		bool GetTransformAttribute_Ref(FName& BoneName, FName& AttributeName, FTransform& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451A2D8
		bool GetTransformAttribute(FName& BoneName, FName& AttributeName, FTransform DefaultValue, FTransform& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451A1F8
		float GetTeleportRotationThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451A118
		float GetTeleportDistanceThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451A038
		bool GetStringAttribute_Ref(FName& BoneName, FName& AttributeName, FString& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414519F58
		bool GetStringAttribute(FName& BoneName, FName& AttributeName, FString DefaultValue, FString& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414519E78
		USkeletalMesh GetSkeletalMeshAsset(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519D98
		FVector GetSkeletalCenterOfMass(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414519CB8
		UAnimInstance GetPostProcessInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519BD8
		float GetPosition(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519AF8
		float GetPlayRate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519A18
		float GetMorphTarget(FName MorphTargetName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519938
		UAnimInstance GetLinkedAnimLayerInstanceByGroup(FName InGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519858
		UAnimInstance GetLinkedAnimLayerInstanceByClass(UClass InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519778
		void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray& OutLinkedInstances); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414519698
		UAnimInstance GetLinkedAnimGraphInstanceByTag(FName InTag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145195B8
		bool GetIntegerAttribute_Ref(FName& BoneName, FName& AttributeName, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145194D8
		bool GetIntegerAttribute(FName& BoneName, FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145193F8
		bool GetFloatAttribute_Ref(FName& BoneName, FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414519318
		bool GetFloatAttribute(FName& BoneName, FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414519238
		bool GetDisablePostProcessBlueprint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519158
		bool GetDisableAnimCurves(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414519078
		void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414518F98
		void GetConstraintsFromBody(FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, TArray& OutConstraints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414518EB8
		void GetConstraints(bool bIncludesTerminated, TArray& OutConstraints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414518DD8
		FConstraintInstanceAccessor GetConstraintByName(FName ConstraintName, bool bIncludesTerminated); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414518CF8
		float GetClothMaxDistanceScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414518C18
		UClothingSimulationInteractor GetClothingSimulationInteractor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414518B38
		float GetBoneMass(FName BoneName, bool bScaleMass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414518A58
		FVector GetBoneLinearVelocity(FName& InBoneName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414518978
		UAnimInstance GetAnimInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414518898
		UClass GetAnimClass(); // Flags: Final|RequiredAPI|Native|Public 0x7FF4145187B8
		TEnumAsByte GetAnimationMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145186D8
		bool GetAllowRigidBodyAnimNode(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145185F8
		bool GetAllowedAnimCurveEvaluate(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414518518
		bool GetAllowClothActors(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414518438
		void ForceClothNextUpdateTeleportAndReset(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414518358
		void ForceClothNextUpdateTeleport(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414518278
		FName FindConstraintBoneName(int32_t ConstraintIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414518198
		void ClearMorphTargets(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145180B8
		void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414517FD8
		void BindClothToLeaderPoseComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414517EF8
		void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414517E18
		void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414517D38
		void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414517C58
		void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414517B78
	};


	// Class Engine.AnimInstance
	// Inherited from UObject
	// Size: 0x398 (0x3C0 - 0x28)
	class UAnimInstance : public UObject	
	{
	public:
		USkeleton CurrentSkeleton; // 0x28(0x8)
		TEnumAsByte RootMotionMode; // 0x30(0x1)
		bool bUseMultiThreadedAnimationUpdate : 1; // 0x31:0(0x1)
		bool bUsingCopyPoseFromMesh : 1; // 0x31:1(0x1)
		unsigned char UnknownBit07 : 1; // 0x31:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x31:3(0x1) UNKNOWN PROPERTY
		bool bReceiveNotifiesFromLinkedInstances : 1; // 0x31:4(0x1)
		bool bPropagateNotifiesToLinkedInstances : 1; // 0x31:5(0x1)
		bool bUseMainInstanceMontageEvaluationData : 1; // 0x31:6(0x1)
		unsigned char UnknownData09_3[0x1]; // 0x32(0x1) UNKNOWN PROPERTY
		bool bQueueMontageEvents : 1; // 0x33:0(0x1)
		unsigned char UnknownData10_5[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnMontageBlendingOut; // 0x38(0x10)
		FMulticastInlineDelegate OnMontageBlendedIn; // 0x48(0x10)
		FMulticastInlineDelegate OnMontageStarted; // 0x58(0x10)
		FMulticastInlineDelegate OnMontageEnded; // 0x68(0x10)
		FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x78(0x10)
		unsigned char UnknownData11_6[0xB0]; // 0x88(0xB0) UNKNOWN PROPERTY
		TMap SlotGroupInertializationRequestDataMap; // 0x138(0x50)
		unsigned char UnknownData12_6[0x38]; // 0x188(0x38) UNKNOWN PROPERTY
		FAnimNotifyQueue NotifyQueue; // 0x1C0(0x70)
		TArray ActiveAnimNotifyState; // 0x230(0x10)
		TArray ActiveAnimNotifyEventReference; // 0x240(0x10)
		unsigned char UnknownData13_7[0x168]; // 0x250(0x168) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimInstance");
			return ret;
		}

		bool WasAnimNotifyTriggeredInStateMachine(int32_t MachineIndex, UClass AnimNotifyType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AEFD8
		bool WasAnimNotifyTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, UClass AnimNotifyType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AEEF8
		bool WasAnimNotifyTriggeredInAnyState(UClass AnimNotifyType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AEE18
		bool WasAnimNotifyStateActiveInStateMachine(int32_t MachineIndex, UClass AnimNotifyStateType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AED38
		bool WasAnimNotifyStateActiveInSourceState(int32_t MachineIndex, int32_t StateIndex, UClass AnimNotifyStateType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AEC58
		bool WasAnimNotifyStateActiveInAnyState(UClass AnimNotifyStateType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AEB78
		bool WasAnimNotifyNameTriggeredInStateMachine(int32_t MachineIndex, FName NotifyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AEA98
		bool WasAnimNotifyNameTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, FName NotifyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AE9B8
		bool WasAnimNotifyNameTriggeredInAnyState(FName NotifyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AE8D8
		void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF4144AE7F8
		void UnlinkAnimClassLayers(UClass InClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AE718
		APawn TryGetPawnOwner(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AE638
		void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AE558
		void SnapshotPose(FPoseSnapshot& Snapshot); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144AE478
		void SetUseMainInstanceMontageEvaluationData(bool bSet); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144AE398
		void SetRootMotionMode(TEnumAsByte Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AE2B8
		void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144AE1D8
		void SetPropagateNotifiesToLinkedInstances(bool bSet); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144AE0F8
		void SetMorphTarget(FName MorphTargetName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AE018
		void SavePoseSnapshot(FName SnapshotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ADF38
		void ResetDynamics(ETeleportType InTeleportType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ADE58
		bool RequestTransitionEvent(FName EventName, double RequestTimeout, ETransitionRequestQueueMode QueueMode, ETransitionRequestOverwriteMode OverwriteMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ADD78
		void RequestSlotGroupInertialization(FName InSlotGroupName, float duration, UBlendProfile BlendProfile); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ADC98
		void RemovePoseSnapshot(FName SnapshotName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ADBB8
		bool QueryTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, FName EventName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144ADAD8
		bool QueryAndMarkTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, FName EventName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AD9F8
		UAnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendSettings(UAnimSequenceBase Asset, FName SlotNodeName, FMontageBlendSettings& BlendInSettings, FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144AD918
		UAnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendArgs(UAnimSequenceBase Asset, FName SlotNodeName, FAlphaBlendArgs& BlendIn, FAlphaBlendArgs& BlendOut, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144AD838
		UAnimMontage PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD758
		void MontageSync_StopFollowing(UAnimMontage MontageFollower); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD678
		void MontageSync_Follow(UAnimMontage MontageFollower, UAnimInstance OtherAnimInstance, UAnimMontage MontageLeader); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD598
		void Montage_StopWithBlendSettings(FMontageBlendSettings& BlendOutSettings, UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144AD4B8
		void Montage_StopWithBlendOut(FAlphaBlendArgs& BlendOut, UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144AD3D8
		void Montage_StopGroupByName(float InBlendOutTime, FName GroupName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD2F8
		void Montage_Stop(float InBlendOutTime, UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD218
		void Montage_SetPosition(UAnimMontage Montage, float NewPosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD138
		void Montage_SetPlayRate(UAnimMontage Montage, float NewPlayRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AD058
		void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ACF78
		void Montage_Resume(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ACE98
		float Montage_PlayWithBlendSettings(UAnimMontage MontageToPlay, FMontageBlendSettings& BlendInSettings, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144ACDB8
		float Montage_PlayWithBlendIn(UAnimMontage MontageToPlay, FAlphaBlendArgs& BlendIn, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144ACCD8
		float Montage_Play(UAnimMontage MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ACBF8
		void Montage_Pause(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ACB18
		void Montage_JumpToSectionsEnd(FName SectionName, UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ACA38
		void Montage_JumpToSection(FName SectionName, UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AC958
		bool Montage_IsPlaying(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC878
		bool Montage_IsActive(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC798
		float Montage_GetPosition(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC6B8
		float Montage_GetPlayRate(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC5D8
		bool Montage_GetIsStopped(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC4F8
		float Montage_GetEffectivePlayRate(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC418
		FName Montage_GetCurrentSection(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC338
		float Montage_GetBlendTime(UAnimMontage Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AC258
		void LockAIResources(bool bLockMovement, bool LockAILogic); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF4144AC178
		void LinkAnimGraphByTag(FName InTag, UClass InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144AC098
		void LinkAnimClassLayers(UClass InClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ABFB8
		bool IsUsingMainInstanceMontageEvaluationData(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ABED8
		bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ABDF8
		bool IsSlotActive(FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ABD18
		bool IsPlayingSlotAnimation(UAnimSequenceBase Asset, FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ABC38
		bool IsAnyMontagePlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ABB58
		bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ABA78
		bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144AB998
		FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AB8B8
		float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AB7D8
		float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AB6F8
		float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AB618
		float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AB538
		float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AB458
		bool GetReceiveNotifiesFromLinkedInstances(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AB378
		bool GetPropagateNotifiesToLinkedInstances(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AB298
		USkeletalMeshComponent GetOwningComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AB1B8
		AActor GetOwningActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AB0D8
		void GetLinkedAnimLayerInstancesByGroup(FName InGroup, TArray& OutLinkedInstances); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144AAFF8
		UAnimInstance GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, UClass InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AAF18
		UAnimInstance GetLinkedAnimLayerInstanceByGroup(FName InGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AAE38
		UAnimInstance GetLinkedAnimLayerInstanceByClass(UClass InClass, bool bCheckForChildClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AAD58
		void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray& OutLinkedInstances); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144AAC78
		UAnimInstance GetLinkedAnimGraphInstanceByTag(FName InTag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AAB98
		float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AAAB8
		float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA9D8
		float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA8F8
		float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA818
		float GetInstanceMachineWeight(int32_t MachineIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA738
		float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA658
		float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA578
		float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA498
		float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA3B8
		float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA2D8
		float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144AA1F8
		float GetDeltaSeconds(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144AA118
		bool GetCurveValueWithDefault(FName CurveName, float DefaultValue, float& OutValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144AA038
		float GetCurveValue(FName CurveName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9F58
		FName GetCurrentStateName(int32_t MachineIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144A9E78
		UAnimMontage GetCurrentActiveMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9D98
		void GetAllCurveNames(TArray& OutNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9CB8
		void GetActiveCurveNames(EAnimCurveType CurveType, TArray& OutNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9BD8
		bool DynamicMontage_IsPlayingFrom(UAnimSequenceBase Animation); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9AF8
		void ClearTransitionEvents(FName EventName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144A9A18
		void ClearMorphTargets(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144A9938
		void ClearAllTransitionEvents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144A9858
		float CalculateDirection(FVector& Velocity, FRotator& BaseRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9778
		void BlueprintUpdateAnimation(float DeltaTimeX); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144A9698
		void BlueprintThreadSafeUpdateAnimation(float DeltaTime); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144A95B8
		void BlueprintPostEvaluateAnimation(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144A94D8
		void BlueprintLinkedAnimationLayersInitialized(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144A93F8
		void BlueprintInitializeAnimation(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144A9318
		void BlueprintBeginPlay(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144A9238
		float Blueprint_GetSlotMontageLocalWeight(FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9158
		UAnimInstance Blueprint_GetMainAnimInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144A9078
	};


	// Class Engine.BlueprintAsyncActionBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UBlueprintAsyncActionBase : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintAsyncActionBase");
			return ret;
		}

		void Activate(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4116AC250
	};


	// Class Engine.BlueprintCore
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UBlueprintCore : public UObject	
	{
	public:
		UClass SkeletonGeneratedClass; // 0x28(0x8)
		UClass GeneratedClass; // 0x30(0x8)
		bool bLegacyNeedToPurgeSkelRefs; // 0x38(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		FGuid BlueprintGuid; // 0x3C(0x10)
		unsigned char UnknownData03_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintCore");
			return ret;
		}
	};


	// Class Engine.Blueprint
	// Inherited from UBlueprintCore -> UObject
	// Size: 0x58 (0xA8 - 0x50)
	class UBlueprint : public UBlueprintCore	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x50(0x8) UNKNOWN PROPERTY
		UClass ParentClass; // 0x58(0x8)
		TEnumAsByte BlueprintType; // 0x60(0x1)
		bool bRecompileOnLoad : 1; // 0x61:0(0x1)
		bool bHasBeenRegenerated : 1; // 0x61:1(0x1)
		bool bIsRegeneratingOnLoad : 1; // 0x61:2(0x1)
		unsigned char UnknownData03_5[0x2]; // 0x62(0x2) UNKNOWN PROPERTY
		int32_t BlueprintSystemVersion; // 0x64(0x4)
		USimpleConstructionScript SimpleConstructionScript; // 0x68(0x8)
		TArray ComponentTemplates; // 0x70(0x10)
		TArray Timelines; // 0x80(0x10)
		TArray ComponentClassOverrides; // 0x90(0x10)
		UInheritableComponentHandler InheritableComponentHandler; // 0xA0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Blueprint");
			return ret;
		}
	};


	// Class Engine.DynamicBlueprintBinding
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDynamicBlueprintBinding : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DynamicBlueprintBinding");
			return ret;
		}
	};


	// Class Engine.BlueprintGeneratedClass
	// Inherited from UClass -> UStruct -> UField -> UObject
	// Size: 0x160 (0x360 - 0x200)
	class UBlueprintGeneratedClass : public UClass	
	{
	public:
		unsigned char UnknownData05_3[0x8]; // 0x200(0x8) UNKNOWN PROPERTY
		int32_t NumReplicatedProperties; // 0x208(0x4)
		bool bHasCookedComponentInstancingData : 1; // 0x20C:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x20D(0x3) UNKNOWN PROPERTY
		TArray DynamicBindingObjects; // 0x210(0x10)
		TArray ComponentTemplates; // 0x220(0x10)
		TArray Timelines; // 0x230(0x10)
		TArray ComponentClassOverrides; // 0x240(0x10)
		TArray FieldNotifies; // 0x250(0x10)
		unsigned char UnknownData07_6[0x8]; // 0x260(0x8) UNKNOWN PROPERTY
		USimpleConstructionScript SimpleConstructionScript; // 0x268(0x8)
		UInheritableComponentHandler InheritableComponentHandler; // 0x270(0x8)
		unsigned char UnknownData08_6[0x8]; // 0x278(0x8) UNKNOWN PROPERTY
		UFunction UberGraphFunction; // 0x280(0x8)
		TMap CookedPropertyGuids; // 0x288(0x50)
		TMap CookedComponentInstancingData; // 0x2D8(0x50)
		unsigned char UnknownData09_7[0x38]; // 0x328(0x38) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintGeneratedClass");
			return ret;
		}
	};


	// Class Engine.CameraActor
	// Inherited from AActor -> UObject
	// Size: 0x720 (0x9B0 - 0x290)
	class ACameraActor : public AActor	
	{
	public:
		TEnumAsByte AutoActivateForPlayer; // 0x290(0x1)
		unsigned char UnknownData03_6[0x7]; // 0x291(0x7) UNKNOWN PROPERTY
		UCameraComponent CameraComponent; // 0x298(0x8)
		USceneComponent SceneComponent; // 0x2A0(0x8)
		bool bConstrainAspectRatio : 1; // 0x2A8:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x2A9(0x3) UNKNOWN PROPERTY
		float AspectRatio; // 0x2AC(0x4)
		float FOVAngle; // 0x2B0(0x4)
		float PostProcessBlendWeight; // 0x2B4(0x4)
		unsigned char UnknownData05_6[0x8]; // 0x2B8(0x8) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x2C0(0x6F0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraActor");
			return ret;
		}

		int32_t GetAutoActivatePlayerIndex(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144C9058
	};


	// Class Engine.CameraComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x7B0 (0x9D0 - 0x220)
	class UCameraComponent : public USceneComponent	
	{
	public:
		float FieldOfView; // 0x220(0x4)
		float FirstPersonFieldOfView; // 0x224(0x4)
		float FirstPersonScale; // 0x228(0x4)
		float OrthoWidth; // 0x22C(0x4)
		bool bAutoCalculateOrthoPlanes; // 0x230(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x231(0x3) UNKNOWN PROPERTY
		float AutoPlaneShift; // 0x234(0x4)
		float OrthoNearClipPlane; // 0x238(0x4)
		float OrthoFarClipPlane; // 0x23C(0x4)
		bool bUpdateOrthoPlanes; // 0x240(0x1)
		bool bUseCameraHeightAsViewTarget; // 0x241(0x1)
		unsigned char UnknownData05_6[0x2]; // 0x242(0x2) UNKNOWN PROPERTY
		float AspectRatio; // 0x244(0x4)
		TEnumAsByte AspectRatioAxisConstraint; // 0x248(0x1)
		bool bConstrainAspectRatio : 1; // 0x249:0(0x1)
		bool bOverrideAspectRatioAxisConstraint : 1; // 0x249:1(0x1)
		bool bUseFieldOfViewForLOD : 1; // 0x249:2(0x1)
		bool bLockToHmd : 1; // 0x249:3(0x1)
		bool bUsePawnControlRotation : 1; // 0x249:4(0x1)
		bool bEnableFirstPersonFieldOfView : 1; // 0x249:5(0x1)
		bool bEnableFirstPersonScale : 1; // 0x249:6(0x1)
		TEnumAsByte ProjectionMode; // 0x24A(0x1)
		unsigned char UnknownData06_6[0x65]; // 0x24B(0x65) UNKNOWN PROPERTY
		float PostProcessBlendWeight; // 0x2B0(0x4)
		unsigned char UnknownData07_6[0x2C]; // 0x2B4(0x2C) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x2E0(0x6F0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraComponent");
			return ret;
		}

		void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144CA478
		void SetUseCameraHeightAsViewTarget(bool bInUseCameraHeightAsViewTarget); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144CA398
		void SetUpdateOrthoPlanes(bool bInUpdateOrthoPlanes); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144CA2B8
		void SetProjectionMode(TEnumAsByte InProjectionMode); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144CA1D8
		void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144CA0F8
		void SetOrthoWidth(float InOrthoWidth); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144CA018
		void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9F38
		void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9E58
		void SetFirstPersonScale(float InFirstPersonScale); // Flags: Native|Public|BlueprintCallable 0x7FF4144C9D78
		void SetFirstPersonFieldOfView(float InFirstPersonFieldOfView); // Flags: Native|Public|BlueprintCallable 0x7FF4144C9C98
		void SetFieldOfView(float InFieldOfView); // Flags: Native|Public|BlueprintCallable 0x7FF4144C9BB8
		void SetEnableFirstPersonScale(bool bInEnableFirstPersonScale); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9AD8
		void SetEnableFirstPersonFieldOfView(bool bInEnableFirstPersonFieldOfView); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C99F8
		void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9918
		void SetAutoPlaneShift(float InAutoPlaneShift); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9838
		void SetAutoCalculateOrthoPlanes(bool bAutoCalculate); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9758
		void SetAspectRatioAxisConstraint(TEnumAsByte InAspectRatioAxisConstraint); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9678
		void SetAspectRatio(float InAspectRatio); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9598
		void RemoveBlendable(TScriptInterface InBlendableObject); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C94B8
		void OnCameraMeshHiddenChanged(); // Flags: Final|RequiredAPI|Native|Protected|BlueprintCallable 0x7FF4144C93D8
		void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144C92F8
		void AddOrUpdateBlendable(TScriptInterface InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144C9218
	};


	// Class Engine.AudioEngineSubsystem
	// Inherited from UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UAudioEngineSubsystem : public UDynamicSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.SoundBase
	// Inherited from UObject
	// Size: 0x140 (0x168 - 0x28)
	class USoundBase : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		USoundClass SoundClassObject; // 0x30(0x8)
		bool bDebug : 1; // 0x38:0(0x1)
		bool bOverrideConcurrency : 1; // 0x38:1(0x1)
		bool bEnableBusSends : 1; // 0x38:2(0x1)
		bool bEnableBaseSubmix : 1; // 0x38:3(0x1)
		bool bEnableSubmixSends : 1; // 0x38:4(0x1)
		bool bHasDelayNode : 1; // 0x38:5(0x1)
		bool bHasConcatenatorNode : 1; // 0x38:6(0x1)
		bool bBypassVolumeScaleForPriority : 1; // 0x38:7(0x1)
		EVirtualizationMode VirtualizationMode; // 0x39(0x1)
		unsigned char UnknownData03_6[0x56]; // 0x3A(0x56) UNKNOWN PROPERTY
		TSet ConcurrencySet; // 0x90(0x50)
		FSoundConcurrencySettings ConcurrencyOverrides; // 0xE0(0x20)
		float duration; // 0x100(0x4)
		float MaxDistance; // 0x104(0x4)
		float TotalSamples; // 0x108(0x4)
		float Priority; // 0x10C(0x4)
		USoundAttenuation AttenuationSettings; // 0x110(0x8)
		USoundSubmixBase SoundSubmixObject; // 0x118(0x8)
		TArray SoundSubmixSends; // 0x120(0x10)
		USoundEffectSourcePresetChain SourceEffectChain; // 0x130(0x8)
		TArray BusSends; // 0x138(0x10)
		TArray PreEffectBusSends; // 0x148(0x10)
		TArray AssetUserData; // 0x158(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundBase");
			return ret;
		}

		bool IsAttenuationSettingsEditable(); // Flags: Native|Public|Const 0x7FF4144CE8B8
	};


	// Class Engine.SoundWave
	// Inherited from USoundBase -> UObject
	// Size: 0x288 (0x3F0 - 0x168)
	class USoundWave : public USoundBase	
	{
	public:
		unsigned char UnknownData12_3[0x10]; // 0x168(0x10) UNKNOWN PROPERTY
		int32_t CompressionQuality; // 0x178(0x4)
		int32_t StreamingPriority; // 0x17C(0x4)
		ESoundwaveSampleRateSettings SampleRateQuality; // 0x180(0x1)
		unsigned char UnknownData13_6[0x1]; // 0x181(0x1) UNKNOWN PROPERTY
		TEnumAsByte SoundGroup; // 0x182(0x1)
		bool bLooping : 1; // 0x183:0(0x1)
		bool bStreaming : 1; // 0x183:1(0x1)
		bool bSeekableStreaming : 1; // 0x183:2(0x1)
		bool bUseBinkAudio : 1; // 0x183:3(0x1)
		ESoundAssetCompressionType SoundAssetCompressionType; // 0x184(0x1)
		unsigned char UnknownData14_6[0x13]; // 0x185(0x13) UNKNOWN PROPERTY
		FSoundModulationDefaultRoutingSettings ModulationSettings; // 0x198(0x168)
		TArray FrequenciesToAnalyze; // 0x300(0x10)
		TArray CookedSpectralTimeData; // 0x310(0x10)
		TArray CookedEnvelopeTimeData; // 0x320(0x10)
		unsigned char UnknownData15_6[0x1C]; // 0x330(0x1C) UNKNOWN PROPERTY
		unsigned char UnknownBit16 : 1; // 0x34C:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit17 : 1; // 0x34C:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit18 : 1; // 0x34C:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit19 : 1; // 0x34C:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit20 : 1; // 0x34C:4(0x1) UNKNOWN PROPERTY
		bool bMature : 1; // 0x34C:5(0x1)
		bool bManualWordWrap : 1; // 0x34C:6(0x1)
		bool bSingleLine : 1; // 0x34C:7(0x1)
		bool bIsAmbisonics : 1; // 0x34D:0(0x1)
		ESoundWaveLoadingBehavior LoadingBehavior; // 0x34E(0x1)
		unsigned char UnknownData21_6[0x1]; // 0x34F(0x1) UNKNOWN PROPERTY
		FString SpokenText; // 0x350(0x10)
		float SubtitlePriority; // 0x360(0x4)
		float Volume; // 0x364(0x4)
		float pitch; // 0x368(0x4)
		int32_t NumChannels; // 0x36C(0x4)
		int32_t SampleRate; // 0x370(0x4)
		unsigned char UnknownData22_6[0xC]; // 0x374(0xC) UNKNOWN PROPERTY
		TArray Subtitles; // 0x380(0x10)
		UCurveTable Curves; // 0x390(0x8)
		UCurveTable InternalCurves; // 0x398(0x8)
		unsigned char UnknownData23_7[0x50]; // 0x3A0(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundWave");
			return ret;
		}

		void SetSoundAssetCompressionType(ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144CEC38
		ESoundAssetCompressionType GetSoundAssetCompressionType(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144CEB58
		TArray GetLoopRegions(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144CEA78
		TArray GetCuePoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144CE998
	};


	// Class Engine.SoundWaveProcedural
	// Inherited from USoundWave -> USoundBase -> UObject
	// Size: 0x50 (0x440 - 0x3F0)
	class USoundWaveProcedural : public USoundWave	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x3F0(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundWaveProcedural");
			return ret;
		}
	};


	// Class Engine.SoundEffectPreset
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class USoundEffectPreset : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x40]; // 0x28(0x40) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectPreset");
			return ret;
		}
	};


	// Class Engine.SoundEffectSubmixPreset
	// Inherited from USoundEffectPreset -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class USoundEffectSubmixPreset : public USoundEffectPreset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectSubmixPreset");
			return ret;
		}
	};


	// Class Engine.Texture
	// Inherited from UStreamableRenderAsset -> UObject
	// Size: 0x68 (0x130 - 0xC8)
	class UTexture : public UStreamableRenderAsset	
	{
	public:
		unsigned char UnknownData04_3[0x10]; // 0xC8(0x10) UNKNOWN PROPERTY
		FGuid LightingGuid; // 0xD8(0x10)
		int32_t LevelIndex; // 0xE8(0x4)
		int32_t LODBias; // 0xEC(0x4)
		TEnumAsByte CompressionSettings; // 0xF0(0x1)
		TEnumAsByte Filter; // 0xF1(0x1)
		ETextureMipLoadOptions MipLoadOptions; // 0xF2(0x1)
		TEnumAsByte CookPlatformTilingSettings; // 0xF3(0x1)
		bool bOodlePreserveExtremes; // 0xF4(0x1)
		TEnumAsByte LODGroup; // 0xF5(0x1)
		unsigned char UnknownData05_6[0x2]; // 0xF6(0x2) UNKNOWN PROPERTY
		FPerPlatformFloat Downscale; // 0xF8(0x4)
		ETextureDownscaleOptions DownscaleOptions; // 0xFC(0x1)
		ETextureAvailability Availability; // 0xFD(0x1)
		bool SRGB : 1; // 0xFE:0(0x1)
		bool bNoTiling : 1; // 0xFE:1(0x1)
		bool VirtualTextureStreaming : 1; // 0xFE:2(0x1)
		bool CompressionYCoCg : 1; // 0xFE:3(0x1)
		bool bNotOfflineProcessed : 1; // 0xFE:4(0x1)
		bool bAsyncResourceReleaseHasBeenStarted : 1; // 0xFE:5(0x1)
		unsigned char UnknownData06_5[0x1]; // 0xFF(0x1) UNKNOWN PROPERTY
		TArray AssetUserData; // 0x100(0x10)
		unsigned char UnknownData07_7[0x20]; // 0x110(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture");
			return ret;
		}

		bool ComputeTextureSourceChannelMinMax(FLinearColor& OutColorMin, FLinearColor& OutColorMax); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const 0x7FF4144D6878
		void Blueprint_GetTextureSourceDiskAndMemorySize(int64_t& OutDiskSize, int64_t& OutMemorySize); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|Const 0x7FF4144D6798
		int64_t Blueprint_GetMemorySize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144D66B8
		bool AreDownscalePropertiesEditable(); // Flags: Native|Public|Const 0x7FF4144D65D8
	};


	// Class Engine.ActiveSoundUpdateInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActiveSoundUpdateInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActiveSoundUpdateInterface");
			return ret;
		}
	};


	// Class Engine.Channel
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UChannel : public UObject	
	{
	public:
		UNetConnection Connection; // 0x28(0x8)
		unsigned char UnknownData01_7[0x38]; // 0x30(0x38) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Channel");
			return ret;
		}
	};


	// Class Engine.ActorChannel
	// Inherited from UChannel -> UObject
	// Size: 0x230 (0x298 - 0x68)
	class UActorChannel : public UChannel	
	{
	public:
		AActor Actor; // 0x68(0x8)
		unsigned char UnknownData02_6[0xF0]; // 0x70(0xF0) UNKNOWN PROPERTY
		TArray CreateSubObjects; // 0x160(0x10)
		unsigned char UnknownData03_7[0x128]; // 0x170(0x128) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorChannel");
			return ret;
		}
	};


	// Class Engine.ActorInstanceManagerInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorInstanceManagerInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorInstanceManagerInterface");
			return ret;
		}
	};


	// Class Engine.AnimationAssetExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationAssetExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationAssetExtensions");
			return ret;
		}
	};


	// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimBlueprintClassSubsystem_PropertyAccess : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprintClassSubsystem_PropertyAccess");
			return ret;
		}
	};


	// Class Engine.Interface_AnimCurveMetaData
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_AnimCurveMetaData : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_AnimCurveMetaData");
			return ret;
		}
	};


	// Class Engine.AnimCurveMetaData
	// Inherited from UAssetUserData -> UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UAnimCurveMetaData : public UAssetUserData	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		TMap CurveMetaData; // 0x30(0x50)
		unsigned char UnknownData03_7[0x20]; // 0x80(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveMetaData");
			return ret;
		}
	};


	// Class Engine.AnimationDataModelNotifiesExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationDataModelNotifiesExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationDataModelNotifiesExtensions");
			return ret;
		}
	};


	// Class Engine.AnimLayerInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimLayerInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimLayerInterface");
			return ret;
		}
	};


	// Class Engine.AnimationAsset
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UAnimationAsset : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		USkeleton Skeleton; // 0x38(0x8)
		unsigned char UnknownData03_6[0x20]; // 0x40(0x20) UNKNOWN PROPERTY
		TArray MetaData; // 0x60(0x10)
		TArray AssetUserData; // 0x70(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationAsset");
			return ret;
		}

		float GetPlayLength(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144DF558
		UAnimMetaData FindMetaDataByClass(UClass MetaDataClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144DF478
	};


	// Class Engine.AnimSequenceBase
	// Inherited from UAnimationAsset -> UObject
	// Size: 0x30 (0xB0 - 0x80)
	class UAnimSequenceBase : public UAnimationAsset	
	{
	public:
		TArray Notifies; // 0x80(0x10)
		float SequenceLength; // 0x90(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x94(0x4) UNKNOWN PROPERTY
		FRawCurveTracks RawCurveData; // 0x98(0x10)
		float RateScale; // 0xA8(0x4)
		bool bLoop; // 0xAC(0x1)
		unsigned char UnknownData03_7[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSequenceBase");
			return ret;
		}
	};


	// Class Engine.RawAnimSequenceTrackExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class URawAnimSequenceTrackExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RawAnimSequenceTrackExtensions");
			return ret;
		}

		TArray GetScaleKeys(FRawAnimSequenceTrack& Track); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144DF7F8
		TArray GetRotationalKeys(FRawAnimSequenceTrack& Track); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144DF718
		TArray GetPositionalKeys(FRawAnimSequenceTrack& Track); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144DF638
	};


	// Class Engine.AssetExportTask
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UAssetExportTask : public UObject	
	{
	public:
		UObject Object; // 0x28(0x8)
		UExporter Exporter; // 0x30(0x8)
		FString Filename; // 0x38(0x10)
		bool bSelected; // 0x48(0x1)
		bool bReplaceIdentical; // 0x49(0x1)
		bool bPrompt; // 0x4A(0x1)
		bool bAutomated; // 0x4B(0x1)
		bool bUseFileArchive; // 0x4C(0x1)
		bool bWriteEmptyFiles; // 0x4D(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x4E(0x2) UNKNOWN PROPERTY
		TArray IgnoreObjectList; // 0x50(0x10)
		UObject Options; // 0x60(0x8)
		TArray Errors; // 0x68(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetExportTask");
			return ret;
		}
	};


	// Class Engine.AssetManagerSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0xC8 (0xF8 - 0x30)
	class UAssetManagerSettings : public UDeveloperSettings	
	{
	public:
		TArray PrimaryAssetTypesToScan; // 0x30(0x10)
		TArray DirectoriesToExclude; // 0x40(0x10)
		TArray PrimaryAssetRules; // 0x50(0x10)
		TArray CustomPrimaryAssetRules; // 0x60(0x10)
		bool bOnlyCookProductionAssets; // 0x70(0x1)
		bool bShouldManagerDetermineTypeAndName; // 0x71(0x1)
		bool bShouldGuessTypeAndNameInEditor; // 0x72(0x1)
		bool bShouldAcquireMissingChunksOnLoad; // 0x73(0x1)
		bool bShouldWarnAboutInvalidAssets; // 0x74(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x75(0x3) UNKNOWN PROPERTY
		TArray PrimaryAssetIdRedirects; // 0x78(0x10)
		TArray PrimaryAssetTypeRedirects; // 0x88(0x10)
		TArray AssetPathRedirects; // 0x98(0x10)
		TSet MetaDataTagsForAssetRegistry; // 0xA8(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetManagerSettings");
			return ret;
		}
	};


	// Class Engine.AsyncLoadingTests_Shared
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UAsyncLoadingTests_Shared : public UObject	
	{
	public:
		TWeakObjectPtr SoftReference; // 0x28(0x20)
		UObject HardReference; // 0x48(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncLoadingTests_Shared");
			return ret;
		}
	};


	// Class Engine.AsyncPhysicsData
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAsyncPhysicsData : public UObject	
	{
	public:
		int32_t ServerFrame; // 0x28(0x4)
		int32_t ReplicationRedundancy; // 0x2C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncPhysicsData");
			return ret;
		}
	};


	// Class Engine.AudioPanelWidgetInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAudioPanelWidgetInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioPanelWidgetInterface");
			return ret;
		}

		FName GetIconBrushName(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144DF9B8
		FText GetEditorName(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144DF8D8
	};


	// Class Engine.AutoRTFMTestActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAutoRTFMTestActor : public AActor	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestActor");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestAnotherActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAutoRTFMTestAnotherActor : public AActor	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestAnotherActor");
			return ret;
		}
	};


	// Class Engine.BodySetup
	// Inherited from UBodySetupCore -> UObject
	// Size: 0x2C0 (0x2F0 - 0x30)
	class UBodySetup : public UBodySetupCore	
	{
	public:
		FKAggregateGeom AggGeom; // 0x30(0x80)
		bool bAlwaysFullAnimWeight : 1; // 0xB0:0(0x1)
		bool bConsiderForBounds : 1; // 0xB0:1(0x1)
		bool bMeshCollideAll : 1; // 0xB0:2(0x1)
		bool bDoubleSidedGeometry : 1; // 0xB0:3(0x1)
		bool bGenerateNonMirroredCollision : 1; // 0xB0:4(0x1)
		bool bSharedCookedData : 1; // 0xB0:5(0x1)
		bool bGenerateMirroredCollision : 1; // 0xB0:6(0x1)
		bool bSupportUVsAndFaceRemap : 1; // 0xB0:7(0x1)
		unsigned char UnknownBit07 : 1; // 0xB1:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0xB1:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0xB1:2(0x1) UNKNOWN PROPERTY
		bool bNeverNeedsCookedCollisionData : 1; // 0xB1:3(0x1)
		unsigned char UnknownData10_5[0x6]; // 0xB2(0x6) UNKNOWN PROPERTY
		UPhysicalMaterial PhysMaterial; // 0xB8(0x8)
		FWalkableSlopeOverride WalkableSlopeOverride; // 0xC0(0x10)
		unsigned char UnknownData11_6[0x70]; // 0xD0(0x70) UNKNOWN PROPERTY
		FBodyInstance DefaultInstance; // 0x140(0x170)
		unsigned char UnknownData12_6[0x8]; // 0x2B0(0x8) UNKNOWN PROPERTY
		FVector BuildScale3D; // 0x2B8(0x18)
		unsigned char UnknownData13_7[0x20]; // 0x2D0(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BodySetup");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestBodySetup
	// Inherited from UBodySetup -> UBodySetupCore -> UObject
	// Size: 0x8 (0x2F8 - 0x2F0)
	class UAutoRTFMTestBodySetup : public UBodySetup	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x2F0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestBodySetup");
			return ret;
		}
	};


	// Class Engine.ChildActorComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x50 (0x270 - 0x220)
	class UChildActorComponent : public USceneComponent	
	{
	public:
		UClass ChildActorClass; // 0x220(0x8)
		AActor ChildActor; // 0x228(0x8)
		AActor ChildActorTemplate; // 0x230(0x8)
		unsigned char UnknownData02_6[0x18]; // 0x238(0x18) UNKNOWN PROPERTY
		bool bChildActorIsTransient : 1; // 0x250:0(0x1)
		unsigned char UnknownData03_7[0x1F]; // 0x251(0x1F) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChildActorComponent");
			return ret;
		}

		void SetChildActorClass(UClass InClass); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144DFC58
		void OnRep_ChildActor(); // Flags: Final|Native|Private 0x7FF4144DFB78
		void OnChildActorDestroyed(AActor Actor); // Flags: Final|RequiredAPI|Native|Private 0x7FF4144DFA98
	};


	// Class Engine.AutoRTFMTestChildActorComponent
	// Inherited from UChildActorComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x270 - 0x270)
	class UAutoRTFMTestChildActorComponent : public UChildActorComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestChildActorComponent");
			return ret;
		}
	};


	// Class Engine.Level
	// Inherited from UObject
	// Size: 0x2F0 (0x318 - 0x28)
	class ULevel : public UObject	
	{
	public:
		unsigned char UnknownData17_3[0x98]; // 0x28(0x98) UNKNOWN PROPERTY
		UWorld OwningWorld; // 0xC0(0x8)
		UModel Model; // 0xC8(0x8)
		TArray ModelComponents; // 0xD0(0x10)
		ULevelActorContainer ActorCluster; // 0xE0(0x8)
		int32_t NumTextureStreamingUnbuiltComponents; // 0xE8(0x4)
		int32_t NumTextureStreamingDirtyResources; // 0xEC(0x4)
		ALevelScriptActor LevelScriptActor; // 0xF0(0x8)
		ANavigationObjectBase NavListStart; // 0xF8(0x8)
		ANavigationObjectBase NavListEnd; // 0x100(0x8)
		TArray NavDataChunks; // 0x108(0x10)
		float LightmapTotalSize; // 0x118(0x4)
		float ShadowmapTotalSize; // 0x11C(0x4)
		TArray StaticNavigableGeometry; // 0x120(0x10)
		TArray StreamingTextureGuids; // 0x130(0x10)
		TArray StreamingTextures; // 0x140(0x10)
		uint32_t PackedTextureStreamingQualityLevelFeatureLevel; // 0x150(0x4)
		unsigned char UnknownData18_6[0xBC]; // 0x154(0xBC) UNKNOWN PROPERTY
		FGuid LevelBuildDataId; // 0x210(0x10)
		UMapBuildDataRegistry MapBuildData; // 0x220(0x8)
		FIntVector LightBuildLevelOffset; // 0x228(0xC)
		unsigned char UnknownData19_6[0xC]; // 0x234(0xC) UNKNOWN PROPERTY
		bool bIsLightingScenario : 1; // 0x240:0(0x1)
		unsigned char UnknownBit20 : 1; // 0x240:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit21 : 1; // 0x240:2(0x1) UNKNOWN PROPERTY
		bool bTextureStreamingRotationChanged : 1; // 0x240:3(0x1)
		bool bStaticComponentsRegisteredInStreamingManager : 1; // 0x240:4(0x1)
		bool bIsVisible : 1; // 0x240:5(0x1)
		unsigned char UnknownData22_3[0x1]; // 0x241(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit23 : 1; // 0x242:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit24 : 1; // 0x242:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit25 : 1; // 0x242:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit26 : 1; // 0x242:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit27 : 1; // 0x242:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit28 : 1; // 0x242:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit29 : 1; // 0x242:6(0x1) UNKNOWN PROPERTY
		bool bIsPartitioned : 1; // 0x242:7(0x1)
		unsigned char UnknownData30_5[0x65]; // 0x243(0x65) UNKNOWN PROPERTY
		AWorldSettings WorldSettings; // 0x2A8(0x8)
		AWorldDataLayers WorldDataLayers; // 0x2B0(0x8)
		TWeakObjectPtr WorldPartitionRuntimeCell; // 0x2B8(0x20)
		unsigned char UnknownData31_6[0x8]; // 0x2D8(0x8) UNKNOWN PROPERTY
		TArray AssetUserData; // 0x2E0(0x10)
		unsigned char UnknownData32_6[0x10]; // 0x2F0(0x10) UNKNOWN PROPERTY
		TArray DestroyedReplicatedStaticActors; // 0x300(0x10)
		unsigned char UnknownData33_7[0x8]; // 0x310(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Level");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestLevel
	// Inherited from ULevel -> UObject
	// Size: 0x8 (0x320 - 0x318)
	class UAutoRTFMTestLevel : public ULevel	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x318(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestLevel");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestObject
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAutoRTFMTestObject : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestObject");
			return ret;
		}

		void OnComponentPhysicsStateChanged(UPrimitiveComponent ChangedComponent, EComponentPhysicsStateChange StateChange); // Flags: Final|RequiredAPI|Native|Public 0x7FF4144DFD38
	};


	// Class Engine.AutoRTFMTestPrimitiveComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UAutoRTFMTestPrimitiveComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData01_1[0x18]; // 0x4C8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestPrimitiveComponent");
			return ret;
		}
	};


	// Class Engine.BlendableInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlendableInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendableInterface");
			return ret;
		}
	};


	// Class Engine.AnalysisProperties
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnalysisProperties : public UObject	
	{
	public:
		FString Function; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnalysisProperties");
			return ret;
		}
	};


	// Class Engine.BlendSpace
	// Inherited from UAnimationAsset -> UObject
	// Size: 0x140 (0x1C0 - 0x80)
	class UBlendSpace : public UAnimationAsset	
	{
	public:
		unsigned char UnknownData07_3[0x8]; // 0x80(0x8) UNKNOWN PROPERTY
		bool bContainsRotationOffsetMeshSpaceSamples; // 0x88(0x1)
		unsigned char UnknownData08_6[0x3]; // 0x89(0x3) UNKNOWN PROPERTY
		FInterpolationParameter InterpolationParam; // 0x8C(0x30)
		float TargetWeightInterpolationSpeedPerSec; // 0xBC(0x4)
		bool bTargetWeightInterpolationEaseInOut; // 0xC0(0x1)
		bool bAllowMeshSpaceBlending; // 0xC1(0x1)
		bool bLoop; // 0xC2(0x1)
		unsigned char UnknownData09_6[0x1]; // 0xC3(0x1) UNKNOWN PROPERTY
		float AnimLength; // 0xC4(0x4)
		TEnumAsByte NotifyTriggerMode; // 0xC8(0x1)
		bool bInterpolateUsingGrid; // 0xC9(0x1)
		EPreferredTriangulationDirection PreferredTriangulationDirection; // 0xCA(0x1)
		EBlendSpacePerBoneBlendMode PerBoneBlendMode; // 0xCB(0x1)
		unsigned char UnknownData10_6[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY
		TArray ManualPerBoneOverrides; // 0xD0(0x10)
		FBlendSpaceBlendProfile PerBoneBlendProfile; // 0xE0(0x10)
		unsigned char UnknownData11_6[0x10]; // 0xF0(0x10) UNKNOWN PROPERTY
		int32_t SampleIndexWithMarkers; // 0x100(0x4)
		unsigned char UnknownData12_6[0x4]; // 0x104(0x4) UNKNOWN PROPERTY
		TArray SampleData; // 0x108(0x10)
		TArray GridSamples; // 0x118(0x10)
		FBlendSpaceData BlendSpaceData; // 0x128(0x20)
		FBlendParameter BlendParameters; // 0x148(0x60)
		TEnumAsByte AxisToScaleAnimation; // 0x1A8(0x1)
		unsigned char UnknownData13_6[0x7]; // 0x1A9(0x7) UNKNOWN PROPERTY
		TArray DimensionIndices; // 0x1B0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendSpace");
			return ret;
		}
	};


	// Class Engine.Breakpoint
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBreakpoint : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Breakpoint");
			return ret;
		}
	};


	// Class Engine.BlueprintExtension
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintExtension : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintExtension");
			return ret;
		}
	};


	// Class Engine.BookmarkBase
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBookmarkBase : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BookmarkBase");
			return ret;
		}
	};


	// Class Engine.BookMark2D
	// Inherited from UBookmarkBase -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UBookMark2D : public UBookmarkBase	
	{
	public:
		float Zoom2D; // 0x28(0x4)
		FIntPoint Location; // 0x2C(0x8)
		unsigned char UnknownData01_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BookMark2D");
			return ret;
		}
	};


	// Class Engine.ReflectionCapture
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AReflectionCapture : public AActor	
	{
	public:
		UReflectionCaptureComponent CaptureComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReflectionCapture");
			return ret;
		}
	};


	// Class Engine.BoxReflectionCapture
	// Inherited from AReflectionCapture -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ABoxReflectionCapture : public AReflectionCapture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoxReflectionCapture");
			return ret;
		}
	};


	// Class Engine.ReflectionCaptureComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x70 (0x290 - 0x220)
	class UReflectionCaptureComponent : public USceneComponent	
	{
	public:
		UBillboardComponent CaptureOffsetComponent; // 0x220(0x8)
		EReflectionSourceType ReflectionSourceType; // 0x228(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x229(0x7) UNKNOWN PROPERTY
		UTextureCube Cubemap; // 0x230(0x8)
		float SourceCubemapAngle; // 0x238(0x4)
		float Brightness; // 0x23C(0x4)
		FVector CaptureOffset; // 0x240(0x18)
		FGuid MapBuildDataId; // 0x258(0x10)
		unsigned char UnknownData03_7[0x20]; // 0x268(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.BoxReflectionCaptureComponent
	// Inherited from UReflectionCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x2A0 - 0x288)
	class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent	
	{
	public:
		float BoxTransitionDistance; // 0x288(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x28C(0x4) UNKNOWN PROPERTY
		UBoxComponent PreviewInfluenceBox; // 0x290(0x8)
		UBoxComponent PreviewCaptureBox; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoxReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.BuiltInAttributesExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBuiltInAttributesExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BuiltInAttributesExtensions");
			return ret;
		}
	};


	// Class Engine.ChaosBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UChaosBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChaosBlueprintLibrary");
			return ret;
		}

		UChaosEventRelay GetEventRelayFromContext(UObject ContextObject); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144DFE18
	};


	// Class Engine.ChaosEventRelay
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UChaosEventRelay : public UObject	
	{
	public:
		FMulticastInlineDelegate OnCollisionEvent; // 0x28(0x10)
		FMulticastInlineDelegate OnBreakEvent; // 0x38(0x10)
		FMulticastInlineDelegate OnRemovalEvent; // 0x48(0x10)
		FMulticastInlineDelegate OnCrumblingEvent; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChaosEventRelay");
			return ret;
		}
	};


	// Class Engine.Player
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UPlayer : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		APlayerController PlayerController; // 0x30(0x8)
		int32_t CurrentNetSpeed; // 0x38(0x4)
		int32_t ConfiguredInternetSpeed; // 0x3C(0x4)
		int32_t ConfiguredLanSpeed; // 0x40(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Player");
			return ret;
		}
	};


	// Class Engine.NetConnection
	// Inherited from UPlayer -> UObject
	// Size: 0x1DC8 (0x1E10 - 0x48)
	class UNetConnection : public UPlayer	
	{
	public:
		TArray Children; // 0x48(0x10)
		UNetDriver Driver; // 0x58(0x8)
		UClass PackageMapClass; // 0x60(0x8)
		UPackageMap PackageMap; // 0x68(0x8)
		TArray OpenChannels; // 0x70(0x10)
		TArray SentTemporaries; // 0x80(0x10)
		AActor ViewTarget; // 0x90(0x8)
		AActor OwningActor; // 0x98(0x8)
		int32_t MaxPacket; // 0xA0(0x4)
		bool InternalAck : 1; // 0xA4:0(0x1)
		unsigned char UnknownData05_5[0xBB]; // 0xA5(0xBB) UNKNOWN PROPERTY
		FUniqueNetIdRepl PlayerId; // 0x160(0x30)
		unsigned char UnknownData06_6[0x48]; // 0x190(0x48) UNKNOWN PROPERTY
		double LastReceiveTime; // 0x1D8(0x8)
		unsigned char UnknownData07_6[0x11E0]; // 0x1E0(0x11E0) UNKNOWN PROPERTY
		int32_t DefaultMaxChannelSize; // 0x13C0(0x4)
		unsigned char UnknownData08_6[0x334]; // 0x13C4(0x334) UNKNOWN PROPERTY
		TArray ChannelsToTick; // 0x16F8(0x10)
		unsigned char UnknownData09_7[0x708]; // 0x1708(0x708) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetConnection");
			return ret;
		}
	};


	// Class Engine.ChildConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0x8 (0x1E18 - 0x1E10)
	class UChildConnection : public UNetConnection	
	{
	public:
		UNetConnection Parent; // 0x1E10(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChildConnection");
			return ret;
		}
	};


	// Class Engine.PlatformInterfaceBase
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UPlatformInterfaceBase : public UObject	
	{
	public:
		TArray AllDelegates; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformInterfaceBase");
			return ret;
		}
	};


	// Class Engine.CloudStorageBase
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UCloudStorageBase : public UPlatformInterfaceBase	
	{
	public:
		TArray LocalCloudFiles; // 0x38(0x10)
		bool bSuppressDelegateCalls : 1; // 0x48:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CloudStorageBase");
			return ret;
		}
	};


	// Class Engine.ContentBundleTypeFactory
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UContentBundleTypeFactory : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleTypeFactory");
			return ret;
		}
	};


	// Class Engine.ControlChannel
	// Inherited from UChannel -> UObject
	// Size: 0x18 (0x80 - 0x68)
	class UControlChannel : public UChannel	
	{
	public:
		unsigned char UnknownData01_1[0x18]; // 0x68(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ControlChannel");
			return ret;
		}
	};


	// Class Engine.WorldPartition
	// Inherited from UObject
	// Size: 0xD8 (0x100 - 0x28)
	class UWorldPartition : public UObject	
	{
	public:
		unsigned char UnknownData03_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		UWorldPartitionRuntimeHash RuntimeHash; // 0x30(0x8)
		bool bEnableStreaming; // 0x38(0x1)
		EWorldPartitionServerStreamingMode ServerStreamingMode; // 0x39(0x1)
		EWorldPartitionServerStreamingOutMode ServerStreamingOutMode; // 0x3A(0x1)
		EWorldPartitionDataLayersLogicOperator DataLayersLogicOperator; // 0x3B(0x1)
		bool bDisableContentBundles : 1; // 0x3C:0(0x1)
		unsigned char UnknownData04_5[0x93]; // 0x3D(0x93) UNKNOWN PROPERTY
		UDataLayerManager DataLayerManager; // 0xD0(0x8)
		UExternalDataLayerManager ExternalDataLayerManager; // 0xD8(0x8)
		UWorldPartitionStreamingPolicy StreamingPolicy; // 0xE0(0x8)
		unsigned char UnknownData05_7[0x18]; // 0xE8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartition");
			return ret;
		}
	};


	// Class Engine.DataLayerManager
	// Inherited from UObject
	// Size: 0xB0 (0xD8 - 0x28)
	class UDataLayerManager : public UObject	
	{
	public:
		FMulticastInlineDelegate OnDataLayerInstanceRuntimeStateChanged; // 0x28(0x10)
		TSet ReferencedObjects; // 0x38(0x50)
		unsigned char UnknownData01_7[0x50]; // 0x88(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerManager");
			return ret;
		}

		bool SetDataLayerRuntimeState(UDataLayerAsset InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0438
		bool SetDataLayerInstanceRuntimeState(UDataLayerInstance InDataLayerInstance, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0358
		TArray GetDataLayerInstances(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E0278
		EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(UDataLayerInstance InDataLayerInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E0198
		UDataLayerInstance GetDataLayerInstanceFromName(FName& InDataLayerInstanceName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144E00B8
		UDataLayerInstance GetDataLayerInstanceFromAsset(UDataLayerAsset InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144DFFD8
		EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(UDataLayerInstance InDataLayerInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144DFEF8
	};


	// Class Engine.DebugGarbageCollectionGraph
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UDebugGarbageCollectionGraph : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x20]; // 0x28(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugGarbageCollectionGraph");
			return ret;
		}
	};


	// Class Engine.DeletedObjectPlaceholder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDeletedObjectPlaceholder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeletedObjectPlaceholder");
			return ret;
		}
	};


	// Class Engine.DemoNetConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0x50 (0x1E60 - 0x1E10)
	class UDemoNetConnection : public UNetConnection	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x1E10(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DemoNetConnection");
			return ret;
		}
	};


	// Class Engine.PendingNetGame
	// Inherited from UObject
	// Size: 0x98 (0xC0 - 0x28)
	class UPendingNetGame : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		UNetDriver NetDriver; // 0x30(0x8)
		UDemoNetDriver DemoNetDriver; // 0x38(0x8)
		unsigned char UnknownData03_7[0x80]; // 0x40(0x80) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PendingNetGame");
			return ret;
		}
	};


	// Class Engine.DemoPendingNetGame
	// Inherited from UPendingNetGame -> UObject
	// Size: 0x0 (0xC0 - 0xC0)
	class UDemoPendingNetGame : public UPendingNetGame	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DemoPendingNetGame");
			return ret;
		}
	};


	// Class Engine.DeviceProfileFragment
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UDeviceProfileFragment : public UObject	
	{
	public:
		TArray CVars; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeviceProfileFragment");
			return ret;
		}
	};


	// Class Engine.DialogueSoundWaveProxy
	// Inherited from USoundBase -> UObject
	// Size: 0x18 (0x180 - 0x168)
	class UDialogueSoundWaveProxy : public USoundBase	
	{
	public:
		unsigned char UnknownData01_1[0x18]; // 0x168(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DialogueSoundWaveProxy");
			return ret;
		}
	};


	// Class Engine.Light
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ALight : public AActor	
	{
	public:
		ULightComponent LightComponent; // 0x290(0x8)
		bool bEnabled : 1; // 0x298:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Light");
			return ret;
		}

		void ToggleEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0F98
		void SetLightFunctionScale(FVector NewLightFunctionScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E0EB8
		void SetLightFunctionMaterial(UMaterialInterface NewLightFunctionMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0DD8
		void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0CF8
		void SetLightColor(FLinearColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E0C18
		void SetEnabled(bool bSetEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0B38
		void SetCastShadows(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0A58
		void SetBrightness(float NewBrightness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0978
		void SetAffectTranslucentLighting(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E0898
		void OnRep_bEnabled(); // Flags: RequiredAPI|Native|Public 0x7FF4144E07B8
		bool IsEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E06D8
		FLinearColor GetLightColor(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144E05F8
		float GetBrightness(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E0518
	};


	// Class Engine.DirectionalLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x0 (0x2A0 - 0x2A0)
	class ADirectionalLight : public ALight	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DirectionalLight");
			return ret;
		}
	};


	// Class Engine.Distribution
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UDistribution : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Distribution");
			return ret;
		}
	};


	// Class Engine.DistributionFloat
	// Inherited from UDistribution -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UDistributionFloat : public UDistribution	
	{
	public:
		bool bCanBeBaked : 1; // 0x30:0(0x1)
		unsigned char UnknownBit02 : 1; // 0x30:1(0x1) UNKNOWN PROPERTY
		bool bBakedDataSuccesfully : 1; // 0x30:2(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloat");
			return ret;
		}
	};


	// Class Engine.DistributionFloatConstant
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UDistributionFloatConstant : public UDistributionFloat	
	{
	public:
		float Constant; // 0x38(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatConstant");
			return ret;
		}
	};


	// Class Engine.DistributionFloatConstantCurve
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UDistributionFloatConstantCurve : public UDistributionFloat	
	{
	public:
		FInterpCurveFloat ConstantCurve; // 0x38(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatConstantCurve");
			return ret;
		}
	};


	// Class Engine.DistributionFloatParameterBase
	// Inherited from UDistributionFloatConstant -> UDistributionFloat -> UDistribution -> UObject
	// Size: 0x18 (0x58 - 0x40)
	class UDistributionFloatParameterBase : public UDistributionFloatConstant	
	{
	public:
		FName ParameterName; // 0x40(0x4)
		float MinInput; // 0x44(0x4)
		float MaxInput; // 0x48(0x4)
		float MinOutput; // 0x4C(0x4)
		float MaxOutput; // 0x50(0x4)
		TEnumAsByte ParamMode; // 0x54(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x55(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatParameterBase");
			return ret;
		}
	};


	// Class Engine.DistributionFloatParticleParameter
	// Inherited from UDistributionFloatParameterBase -> UDistributionFloatConstant -> UDistributionFloat -> UDistribution -> UObject
	// Size: 0x0 (0x58 - 0x58)
	class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatParticleParameter");
			return ret;
		}
	};


	// Class Engine.DistributionFloatUniform
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UDistributionFloatUniform : public UDistributionFloat	
	{
	public:
		float Min; // 0x38(0x4)
		float Max; // 0x3C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatUniform");
			return ret;
		}
	};


	// Class Engine.DistributionFloatUniformCurve
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UDistributionFloatUniformCurve : public UDistributionFloat	
	{
	public:
		FInterpCurveVector2D ConstantCurve; // 0x38(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatUniformCurve");
			return ret;
		}
	};


	// Class Engine.DistributionVector
	// Inherited from UDistribution -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UDistributionVector : public UDistribution	
	{
	public:
		bool bCanBeBaked : 1; // 0x30:0(0x1)
		bool bIsDirty : 1; // 0x30:1(0x1)
		bool bBakedDataSuccesfully : 1; // 0x30:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVector");
			return ret;
		}
	};


	// Class Engine.DistributionVectorConstant
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x20 (0x58 - 0x38)
	class UDistributionVectorConstant : public UDistributionVector	
	{
	public:
		FVector Constant; // 0x38(0x18)
		bool bLockAxes : 1; // 0x50:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		TEnumAsByte LockedAxes; // 0x54(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x55(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorConstant");
			return ret;
		}
	};


	// Class Engine.DistributionVectorConstantCurve
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x20 (0x58 - 0x38)
	class UDistributionVectorConstantCurve : public UDistributionVector	
	{
	public:
		FInterpCurveVector ConstantCurve; // 0x38(0x18)
		bool bLockAxes : 1; // 0x50:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		TEnumAsByte LockedAxes; // 0x54(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x55(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorConstantCurve");
			return ret;
		}
	};


	// Class Engine.DistributionVectorParameterBase
	// Inherited from UDistributionVectorConstant -> UDistributionVector -> UDistribution -> UObject
	// Size: 0x70 (0xC8 - 0x58)
	class UDistributionVectorParameterBase : public UDistributionVectorConstant	
	{
	public:
		FName ParameterName; // 0x58(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY
		FVector MinInput; // 0x60(0x18)
		FVector MaxInput; // 0x78(0x18)
		FVector MinOutput; // 0x90(0x18)
		FVector MaxOutput; // 0xA8(0x18)
		TEnumAsByte ParamModes; // 0xC0(0x3)
		unsigned char UnknownData03_7[0x5]; // 0xC3(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorParameterBase");
			return ret;
		}
	};


	// Class Engine.DistributionVectorParticleParameter
	// Inherited from UDistributionVectorParameterBase -> UDistributionVectorConstant -> UDistributionVector -> UDistribution -> UObject
	// Size: 0x0 (0xC8 - 0xC8)
	class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorParticleParameter");
			return ret;
		}
	};


	// Class Engine.DistributionVectorUniform
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x40 (0x78 - 0x38)
	class UDistributionVectorUniform : public UDistributionVector	
	{
	public:
		FVector Max; // 0x38(0x18)
		FVector Min; // 0x50(0x18)
		bool bLockAxes : 1; // 0x68:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x69(0x3) UNKNOWN PROPERTY
		TEnumAsByte LockedAxes; // 0x6C(0x1)
		TEnumAsByte MirrorFlags; // 0x6D(0x3)
		bool bUseExtremes : 1; // 0x70:0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorUniform");
			return ret;
		}
	};


	// Class Engine.DistributionVectorUniformCurve
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x28 (0x60 - 0x38)
	class UDistributionVectorUniformCurve : public UDistributionVector	
	{
	public:
		FInterpCurveTwoVectors ConstantCurve; // 0x38(0x18)
		bool bLockAxes1 : 1; // 0x50:0(0x1)
		bool bLockAxes2 : 1; // 0x50:1(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		TEnumAsByte LockedAxes; // 0x54(0x2)
		TEnumAsByte MirrorFlags; // 0x56(0x3)
		unsigned char UnknownData04_6[0x3]; // 0x59(0x3) UNKNOWN PROPERTY
		bool bUseExtremes : 1; // 0x5C:0(0x1)
		unsigned char UnknownData05_7[0x3]; // 0x5D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorUniformCurve");
			return ret;
		}
	};


	// Class Engine.GraphNodeContextMenuContext
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UGraphNodeContextMenuContext : public UObject	
	{
	public:
		UBlueprint Blueprint; // 0x28(0x8)
		UEdGraph Graph; // 0x30(0x8)
		UEdGraphNode Node; // 0x38(0x8)
		unsigned char UnknownData02_6[0x8]; // 0x40(0x8) UNKNOWN PROPERTY
		bool bIsDebugging; // 0x48(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GraphNodeContextMenuContext");
			return ret;
		}
	};


	// Class Engine.EdGraphPin_Deprecated
	// Inherited from UObject
	// Size: 0xD8 (0x100 - 0x28)
	class UEdGraphPin_Deprecated : public UObject	
	{
	public:
		FString PinName; // 0x28(0x10)
		FString PinToolTip; // 0x38(0x10)
		TEnumAsByte Direction; // 0x48(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x49(0x7) UNKNOWN PROPERTY
		FEdGraphPinType PinType; // 0x50(0x48)
		FString DefaultValue; // 0x98(0x10)
		FString AutogeneratedDefaultValue; // 0xA8(0x10)
		UObject DefaultObject; // 0xB8(0x8)
		FText DefaultTextValue; // 0xC0(0x10)
		TArray LinkedTo; // 0xD0(0x10)
		TArray SubPins; // 0xE0(0x10)
		UEdGraphPin_Deprecated ParentPin; // 0xF0(0x8)
		UEdGraphPin_Deprecated ReferencePassThroughConnection; // 0xF8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphPin_Deprecated");
			return ret;
		}
	};


	// Class Engine.EdGraphSchema
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEdGraphSchema : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphSchema");
			return ret;
		}
	};


	// Class Engine.Emitter
	// Inherited from AActor -> UObject
	// Size: 0x50 (0x2E0 - 0x290)
	class AEmitter : public AActor	
	{
	public:
		UParticleSystemComponent ParticleSystemComponent; // 0x290(0x8)
		bool bDestroyOnSystemFinish : 1; // 0x298:0(0x1)
		bool bPostUpdateTickGroup : 1; // 0x298:1(0x1)
		bool bCurrentlyActive : 1; // 0x298:2(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x299(0x7) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnParticleSpawn; // 0x2A0(0x10)
		FMulticastInlineDelegate OnParticleBurst; // 0x2B0(0x10)
		FMulticastInlineDelegate OnParticleDeath; // 0x2C0(0x10)
		FMulticastInlineDelegate OnParticleCollide; // 0x2D0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Emitter");
			return ret;
		}

		void ToggleActive(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1A18
		void SetVectorParameter(FName ParameterName, FVector Param); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E1938
		void SetTemplate(UParticleSystem NewTemplate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1858
		void SetMaterialParameter(FName ParameterName, UMaterialInterface Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1778
		void SetFloatParameter(FName ParameterName, float Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1698
		void SetColorParameter(FName ParameterName, FLinearColor Param); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E15B8
		void SetActorParameter(FName ParameterName, AActor Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E14D8
		void OnRep_bCurrentlyActive(); // Flags: RequiredAPI|Native|Public 0x7FF4144E13F8
		void OnParticleSystemFinished(UParticleSystemComponent FinishedComponent); // Flags: RequiredAPI|Native|Public 0x7FF4144E1318
		bool IsActive(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E1238
		void Deactivate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1158
		void Activate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1078
	};


	// Class Engine.EmitterCameraLensEffectBase
	// Inherited from AEmitter -> AActor -> UObject
	// Size: 0xA0 (0x380 - 0x2E0)
	class AEmitterCameraLensEffectBase : public AEmitter	
	{
	public:
		unsigned char UnknownData04_3[0x8]; // 0x2E0(0x8) UNKNOWN PROPERTY
		UParticleSystem PS_CameraEffect; // 0x2E8(0x8)
		APlayerCameraManager BaseCamera; // 0x2F0(0x8)
		unsigned char UnknownData05_6[0x8]; // 0x2F8(0x8) UNKNOWN PROPERTY
		FTransform RelativeTransform; // 0x300(0x60)
		float BaseFOV; // 0x360(0x4)
		bool bAllowMultipleInstances : 1; // 0x364:0(0x1)
		bool bResetWhenRetriggered : 1; // 0x364:1(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x365(0x3) UNKNOWN PROPERTY
		TArray EmittersToTreatAsSame; // 0x368(0x10)
		float DistFromCamera; // 0x378(0x4)
		unsigned char UnknownData07_7[0x4]; // 0x37C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EmitterCameraLensEffectBase");
			return ret;
		}
	};


	// Class Engine.Engine
	// Inherited from UObject
	// Size: 0xEF8 (0xF20 - 0x28)
	class UEngine : public UObject	
	{
	public:
		unsigned char UnknownData23_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		UFont TinyFont; // 0x30(0x8)
		FSoftObjectPath TinyFontName; // 0x38(0x18)
		UFont SmallFont; // 0x50(0x8)
		FSoftObjectPath SmallFontName; // 0x58(0x18)
		UFont MediumFont; // 0x70(0x8)
		FSoftObjectPath MediumFontName; // 0x78(0x18)
		UFont LargeFont; // 0x90(0x8)
		FSoftObjectPath LargeFontName; // 0x98(0x18)
		UFont SubtitleFont; // 0xB0(0x8)
		FSoftObjectPath SubtitleFontName; // 0xB8(0x18)
		TArray AdditionalFonts; // 0xD0(0x10)
		TArray AdditionalFontNames; // 0xE0(0x10)
		UClass ConsoleClass; // 0xF0(0x8)
		FSoftClassPath ConsoleClassName; // 0xF8(0x18)
		UClass GameViewportClientClass; // 0x110(0x8)
		FSoftClassPath GameViewportClientClassName; // 0x118(0x18)
		UClass LocalPlayerClass; // 0x130(0x8)
		FSoftClassPath LocalPlayerClassName; // 0x138(0x18)
		UClass WorldSettingsClass; // 0x150(0x8)
		FSoftClassPath WorldSettingsClassName; // 0x158(0x18)
		FSoftClassPath NavigationSystemClassName; // 0x170(0x18)
		UClass NavigationSystemClass; // 0x188(0x8)
		FSoftClassPath NavigationSystemConfigClassName; // 0x190(0x18)
		UClass NavigationSystemConfigClass; // 0x1A8(0x8)
		FSoftClassPath AvoidanceManagerClassName; // 0x1B0(0x18)
		UClass AvoidanceManagerClass; // 0x1C8(0x8)
		FSoftClassPath AIControllerClassName; // 0x1D0(0x18)
		UClass PhysicsCollisionHandlerClass; // 0x1E8(0x8)
		FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1F0(0x18)
		FSoftClassPath GameUserSettingsClassName; // 0x208(0x18)
		UClass GameUserSettingsClass; // 0x220(0x8)
		UGameUserSettings GameUserSettings; // 0x228(0x8)
		UClass LevelScriptActorClass; // 0x230(0x8)
		FSoftClassPath LevelScriptActorClassName; // 0x238(0x18)
		FSoftClassPath DefaultBlueprintBaseClassName; // 0x250(0x18)
		FSoftClassPath GameSingletonClassName; // 0x268(0x18)
		UObject GameSingleton; // 0x280(0x8)
		FSoftClassPath AssetManagerClassName; // 0x288(0x18)
		UAssetManager AssetManager; // 0x2A0(0x8)
		UTexture2D DefaultTexture; // 0x2A8(0x8)
		FSoftObjectPath DefaultTextureName; // 0x2B0(0x18)
		UTexture DefaultDiffuseTexture; // 0x2C8(0x8)
		FSoftObjectPath DefaultDiffuseTextureName; // 0x2D0(0x18)
		UTexture2D DefaultBSPVertexTexture; // 0x2E8(0x8)
		FSoftObjectPath DefaultBSPVertexTextureName; // 0x2F0(0x18)
		UTexture2D HighFrequencyNoiseTexture; // 0x308(0x8)
		FSoftObjectPath HighFrequencyNoiseTextureName; // 0x310(0x18)
		UTexture2D DefaultBokehTexture; // 0x328(0x8)
		FSoftObjectPath DefaultBokehTextureName; // 0x330(0x18)
		UTexture2D DefaultBloomKernelTexture; // 0x348(0x8)
		FSoftObjectPath DefaultBloomKernelTextureName; // 0x350(0x18)
		UTexture2D DefaultFilmGrainTexture; // 0x368(0x8)
		FSoftObjectPath DefaultFilmGrainTextureName; // 0x370(0x18)
		UMaterial WireframeMaterial; // 0x388(0x8)
		FString WireframeMaterialName; // 0x390(0x10)
		UMaterial DebugMeshMaterial; // 0x3A0(0x8)
		FSoftObjectPath DebugMeshMaterialName; // 0x3A8(0x18)
		UMaterial NaniteHiddenSectionMaterial; // 0x3C0(0x8)
		FString NaniteHiddenSectionMaterialName; // 0x3C8(0x10)
		UMaterial EmissiveMeshMaterial; // 0x3D8(0x8)
		FSoftObjectPath EmissiveMeshMaterialName; // 0x3E0(0x18)
		UMaterial LevelColorationLitMaterial; // 0x3F8(0x8)
		FString LevelColorationLitMaterialName; // 0x400(0x10)
		UMaterial LevelColorationUnlitMaterial; // 0x410(0x8)
		FString LevelColorationUnlitMaterialName; // 0x418(0x10)
		UMaterial LightingTexelDensityMaterial; // 0x428(0x8)
		FString LightingTexelDensityName; // 0x430(0x10)
		UMaterial ShadedLevelColorationLitMaterial; // 0x440(0x8)
		FString ShadedLevelColorationLitMaterialName; // 0x448(0x10)
		UMaterial ShadedLevelColorationUnlitMaterial; // 0x458(0x8)
		FString ShadedLevelColorationUnlitMaterialName; // 0x460(0x10)
		UMaterial RemoveSurfaceMaterial; // 0x470(0x8)
		FSoftObjectPath RemoveSurfaceMaterialName; // 0x478(0x18)
		UMaterial VertexColorMaterial; // 0x490(0x8)
		FString VertexColorMaterialName; // 0x498(0x10)
		UMaterial VertexColorViewModeMaterial_ColorOnly; // 0x4A8(0x8)
		FString VertexColorViewModeMaterialName_ColorOnly; // 0x4B0(0x10)
		UMaterial VertexColorViewModeMaterial_AlphaAsColor; // 0x4C0(0x8)
		FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x4C8(0x10)
		UMaterial VertexColorViewModeMaterial_RedOnly; // 0x4D8(0x8)
		FString VertexColorViewModeMaterialName_RedOnly; // 0x4E0(0x10)
		UMaterial VertexColorViewModeMaterial_GreenOnly; // 0x4F0(0x8)
		FString VertexColorViewModeMaterialName_GreenOnly; // 0x4F8(0x10)
		UMaterial VertexColorViewModeMaterial_BlueOnly; // 0x508(0x8)
		FString VertexColorViewModeMaterialName_BlueOnly; // 0x510(0x10)
		FSoftObjectPath DebugEditorMaterialName; // 0x520(0x18)
		UMaterial ConstraintLimitMaterial; // 0x538(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialX; // 0x540(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialXAxis; // 0x548(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialY; // 0x550(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialYAxis; // 0x558(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialZ; // 0x560(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialZAxis; // 0x568(0x8)
		UMaterialInstanceDynamic ConstraintLimitMaterialPrismatic; // 0x570(0x8)
		UMaterial InvalidLightmapSettingsMaterial; // 0x578(0x8)
		FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x580(0x18)
		UMaterial PreviewShadowsIndicatorMaterial; // 0x598(0x8)
		FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x5A0(0x18)
		UMaterial ArrowMaterial; // 0x5B8(0x8)
		UMaterialInstanceDynamic ArrowMaterialYellow; // 0x5C0(0x8)
		FSoftObjectPath ArrowMaterialName; // 0x5C8(0x18)
		FLinearColor LightingOnlyBrightness; // 0x5E0(0x10)
		TArray ShaderComplexityColors; // 0x5F0(0x10)
		TArray QuadComplexityColors; // 0x600(0x10)
		TArray LightComplexityColors; // 0x610(0x10)
		TArray StationaryLightOverlapColors; // 0x620(0x10)
		TArray LODColorationColors; // 0x630(0x10)
		TArray HLODColorationColors; // 0x640(0x10)
		TArray StreamingAccuracyColors; // 0x650(0x10)
		FLinearColor GPUSkinCacheVisualizationExcludedColor; // 0x660(0x10)
		FLinearColor GPUSkinCacheVisualizationIncludedColor; // 0x670(0x10)
		FLinearColor GPUSkinCacheVisualizationRecomputeTangentsColor; // 0x680(0x10)
		float GPUSkinCacheVisualizationLowMemoryThresholdInMB; // 0x690(0x4)
		float GPUSkinCacheVisualizationHighMemoryThresholdInMB; // 0x694(0x4)
		FLinearColor GPUSkinCacheVisualizationLowMemoryColor; // 0x698(0x10)
		FLinearColor GPUSkinCacheVisualizationMidMemoryColor; // 0x6A8(0x10)
		FLinearColor GPUSkinCacheVisualizationHighMemoryColor; // 0x6B8(0x10)
		TArray GPUSkinCacheVisualizationRayTracingLODOffsetColors; // 0x6C8(0x10)
		float MaxPixelShaderAdditiveComplexityCount; // 0x6D8(0x4)
		float MaxES3PixelShaderAdditiveComplexityCount; // 0x6DC(0x4)
		float MinLightMapDensity; // 0x6E0(0x4)
		float IdealLightMapDensity; // 0x6E4(0x4)
		float MaxLightMapDensity; // 0x6E8(0x4)
		bool bRenderLightMapDensityGrayscale : 1; // 0x6EC:0(0x1)
		unsigned char UnknownData24_5[0x3]; // 0x6ED(0x3) UNKNOWN PROPERTY
		float RenderLightMapDensityGrayscaleScale; // 0x6F0(0x4)
		float RenderLightMapDensityColorScale; // 0x6F4(0x4)
		FLinearColor LightMapDensityVertexMappedColor; // 0x6F8(0x10)
		FLinearColor LightMapDensitySelectedColor; // 0x708(0x10)
		TArray StatColorMappings; // 0x718(0x10)
		UPhysicalMaterial DefaultPhysMaterial; // 0x728(0x8)
		FSoftObjectPath DefaultPhysMaterialName; // 0x730(0x18)
		UPhysicalMaterial DefaultDestructiblePhysMaterial; // 0x748(0x8)
		FSoftObjectPath DefaultDestructiblePhysMaterialName; // 0x750(0x18)
		TArray ActiveGameNameRedirects; // 0x768(0x10)
		TArray ActiveClassRedirects; // 0x778(0x10)
		TArray ActivePluginRedirects; // 0x788(0x10)
		TArray ActiveStructRedirects; // 0x798(0x10)
		UTexture2D PreIntegratedSkinBRDFTexture; // 0x7A8(0x8)
		FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x7B0(0x18)
		UTexture2D BlueNoiseScalarTexture; // 0x7C8(0x8)
		UTexture2D BlueNoiseVec2Texture; // 0x7D0(0x8)
		FSoftObjectPath BlueNoiseScalarTextureName; // 0x7D8(0x18)
		FSoftObjectPath BlueNoiseVec2TextureName; // 0x7F0(0x18)
		UTexture2DArray GlintTexture; // 0x808(0x8)
		UTexture2DArray GlintTexture2; // 0x810(0x8)
		FSoftObjectPath GlintTextureName; // 0x818(0x18)
		FSoftObjectPath GlintTexture2Name; // 0x830(0x18)
		UVolumeTexture SimpleVolumeTexture; // 0x848(0x8)
		FSoftObjectPath SimpleVolumeTextureName; // 0x850(0x18)
		UVolumeTexture SimpleVolumeEnvTexture; // 0x868(0x8)
		FSoftObjectPath SimpleVolumeEnvTextureName; // 0x870(0x18)
		UTexture2D MiniFontTexture; // 0x888(0x8)
		FSoftObjectPath MiniFontTextureName; // 0x890(0x18)
		UTexture WeightMapPlaceholderTexture; // 0x8A8(0x8)
		UTexture WeightMapArrayPlaceholderTexture; // 0x8B0(0x8)
		FSoftObjectPath WeightMapPlaceholderTextureName; // 0x8B8(0x18)
		FSoftObjectPath WeightMapArrayPlaceholderTextureName; // 0x8D0(0x18)
		UTexture2D LightMapDensityTexture; // 0x8E8(0x8)
		FSoftObjectPath LightMapDensityTextureName; // 0x8F0(0x18)
		unsigned char UnknownData25_6[0x8]; // 0x908(0x8) UNKNOWN PROPERTY
		UGameViewportClient GameViewport; // 0x910(0x8)
		TArray DeferredCommands; // 0x918(0x10)
		float NearClipPlane; // 0x928(0x4)
		bool bSubtitlesEnabled : 1; // 0x92C:0(0x1)
		bool bSubtitlesForcedOff : 1; // 0x92C:1(0x1)
		unsigned char UnknownData26_5[0x3]; // 0x92D(0x3) UNKNOWN PROPERTY
		int32_t MaximumLoopIterationCount; // 0x930(0x4)
		bool bCanBlueprintsTickByDefault : 1; // 0x934:0(0x1)
		bool bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x934:1(0x1)
		bool bAllowMultiThreadedAnimationUpdate : 1; // 0x934:2(0x1)
		bool bEnableEditorPSysRealtimeLOD : 1; // 0x934:3(0x1)
		unsigned char UnknownBit27 : 1; // 0x934:4(0x1) UNKNOWN PROPERTY
		bool bSmoothFrameRate : 1; // 0x934:5(0x1)
		bool bUseFixedFrameRate : 1; // 0x934:6(0x1)
		unsigned char UnknownData28_5[0x3]; // 0x935(0x3) UNKNOWN PROPERTY
		float FixedFrameRate; // 0x938(0x4)
		FFloatRange SmoothedFrameRateRange; // 0x93C(0x10)
		unsigned char UnknownData29_6[0x4]; // 0x94C(0x4) UNKNOWN PROPERTY
		UEngineCustomTimeStep CustomTimeStep; // 0x950(0x8)
		unsigned char UnknownData30_6[0x20]; // 0x958(0x20) UNKNOWN PROPERTY
		FSoftClassPath CustomTimeStepClassName; // 0x978(0x18)
		UTimecodeProvider TimecodeProvider; // 0x990(0x8)
		unsigned char UnknownData31_6[0x20]; // 0x998(0x20) UNKNOWN PROPERTY
		FSoftClassPath TimecodeProviderClassName; // 0x9B8(0x18)
		bool bGenerateDefaultTimecode; // 0x9D0(0x1)
		unsigned char UnknownData32_6[0x3]; // 0x9D1(0x3) UNKNOWN PROPERTY
		FFrameRate GenerateDefaultTimecodeFrameRate; // 0x9D4(0x8)
		float GenerateDefaultTimecodeFrameDelay; // 0x9DC(0x4)
		bool bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x9E0:0(0x1)
		unsigned char UnknownData33_5[0x3]; // 0x9E1(0x3) UNKNOWN PROPERTY
		int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x9E4(0x4)
		bool bShouldGenerateLowQualityLightmaps : 1; // 0x9E8:0(0x1)
		unsigned char UnknownData34_5[0x3]; // 0x9E9(0x3) UNKNOWN PROPERTY
		FColor C_WorldBox; // 0x9EC(0x4)
		FColor C_BrushWire; // 0x9F0(0x4)
		FColor C_AddWire; // 0x9F4(0x4)
		FColor C_SubtractWire; // 0x9F8(0x4)
		FColor C_SemiSolidWire; // 0x9FC(0x4)
		FColor C_NonSolidWire; // 0xA00(0x4)
		FColor C_WireBackground; // 0xA04(0x4)
		FColor C_ScaleBoxHi; // 0xA08(0x4)
		FColor C_VolumeCollision; // 0xA0C(0x4)
		FColor C_BSPCollision; // 0xA10(0x4)
		FColor C_OrthoBackground; // 0xA14(0x4)
		FColor C_Volume; // 0xA18(0x4)
		FColor C_BrushShape; // 0xA1C(0x4)
		unsigned char UnknownData35_6[0x8]; // 0xA20(0x8) UNKNOWN PROPERTY
		FDirectoryPath GameScreenshotSaveDirectory; // 0xA28(0x10)
		bool UseStaticMeshMinLODPerQualityLevels; // 0xA38(0x1)
		bool UseSkeletalMeshMinLODPerQualityLevels; // 0xA39(0x1)
		bool UseClothAssetMinLODPerQualityLevels; // 0xA3A(0x1)
		bool UseGrassVarityPerQualityLevels; // 0xA3B(0x1)
		ETransitionType TransitionType; // 0xA3C(0x1)
		unsigned char UnknownData36_6[0x3]; // 0xA3D(0x3) UNKNOWN PROPERTY
		FString TransitionDescription; // 0xA40(0x10)
		FString TransitionGameMode; // 0xA50(0x10)
		bool bAllowMatureLanguage : 1; // 0xA60:0(0x1)
		unsigned char UnknownData37_5[0x3]; // 0xA61(0x3) UNKNOWN PROPERTY
		float CameraRotationThreshold; // 0xA64(0x4)
		float CameraTranslationThreshold; // 0xA68(0x4)
		float PrimitiveProbablyVisibleTime; // 0xA6C(0x4)
		float MaxOcclusionPixelsFraction; // 0xA70(0x4)
		bool bPauseOnLossOfFocus : 1; // 0xA74:0(0x1)
		unsigned char UnknownData38_5[0x3]; // 0xA75(0x3) UNKNOWN PROPERTY
		int32_t MaxParticleResize; // 0xA78(0x4)
		int32_t MaxParticleResizeWarn; // 0xA7C(0x4)
		TArray PendingDroppedNotes; // 0xA80(0x10)
		float NetClientTicksPerSecond; // 0xA90(0x4)
		float DisplayGamma; // 0xA94(0x4)
		float MinDesiredFrameRate; // 0xA98(0x4)
		FLinearColor DefaultSelectedMaterialColor; // 0xA9C(0x10)
		FLinearColor SelectedMaterialColor; // 0xAAC(0x10)
		FLinearColor SelectionOutlineColor; // 0xABC(0x10)
		FLinearColor SubduedSelectionOutlineColor; // 0xACC(0x10)
		FLinearColor SelectedMaterialColorOverride; // 0xADC(0x10)
		bool bIsOverridingSelectedColor; // 0xAEC(0x1)
		unsigned char UnknownData39_6[0x3]; // 0xAED(0x3) UNKNOWN PROPERTY
		bool bEnableOnScreenDebugMessages : 1; // 0xAF0:0(0x1)
		bool bEnableOnScreenDebugMessagesDisplay : 1; // 0xAF0:1(0x1)
		bool bSuppressMapWarnings : 1; // 0xAF0:2(0x1)
		bool bDisableAILogging : 1; // 0xAF0:3(0x1)
		unsigned char UnknownData40_5[0x3]; // 0xAF1(0x3) UNKNOWN PROPERTY
		uint32_t bEnableVisualLogRecordingOnStart; // 0xAF4(0x4)
		int32_t ScreenSaverInhibitorSemaphore; // 0xAF8(0x4)
		bool bLockReadOnlyLevels : 1; // 0xAFC:0(0x1)
		unsigned char UnknownData41_5[0x3]; // 0xAFD(0x3) UNKNOWN PROPERTY
		FString ParticleEventManagerClassPath; // 0xB00(0x10)
		float SelectionHighlightIntensity; // 0xB10(0x4)
		float BSPSelectionHighlightIntensity; // 0xB14(0x4)
		float SelectionHighlightIntensityBillboards; // 0xB18(0x4)
		unsigned char UnknownData42_6[0x294]; // 0xB1C(0x294) UNKNOWN PROPERTY
		uint32_t GlobalNetTravelCount; // 0xDB0(0x4)
		unsigned char UnknownData43_6[0x4]; // 0xDB4(0x4) UNKNOWN PROPERTY
		TArray NetDriverDefinitions; // 0xDB8(0x10)
		TArray IrisNetDriverConfigs; // 0xDC8(0x10)
		TArray ServerActors; // 0xDD8(0x10)
		TArray RuntimeServerActors; // 0xDE8(0x10)
		float NetErrorLogInterval; // 0xDF8(0x4)
		bool bStartedLoadMapMovie : 1; // 0xDFC:0(0x1)
		unsigned char UnknownData44_5[0x3B]; // 0xDFD(0x3B) UNKNOWN PROPERTY
		int32_t NextWorldContextHandle; // 0xE38(0x4)
		unsigned char UnknownData45_7[0xE4]; // 0xE3C(0xE4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Engine");
			return ret;
		}
	};


	// Class Engine.ViewModeUtils
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UViewModeUtils : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ViewModeUtils");
			return ret;
		}
	};


	// Class Engine.EngineBaseTypes
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineBaseTypes : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineBaseTypes");
			return ret;
		}
	};


	// Class Engine.EngineTypes
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineTypes : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineTypes");
			return ret;
		}
	};


	// Class Engine.ExponentialHeightFog
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AExponentialHeightFog : public AInfo	
	{
	public:
		UExponentialHeightFogComponent Component; // 0x290(0x8)
		bool bEnabled : 1; // 0x298:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExponentialHeightFog");
			return ret;
		}

		void OnRep_bEnabled(); // Flags: Native|Public 0x7FF4144E1AF8
	};


	// Class Engine.ExponentialHeightFogComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xE0 (0x300 - 0x220)
	class UExponentialHeightFogComponent : public USceneComponent	
	{
	public:
		float FogDensity; // 0x220(0x4)
		float FogHeightFalloff; // 0x224(0x4)
		FExponentialHeightFogData SecondFogData; // 0x228(0xC)
		FLinearColor FogInscatteringColor; // 0x234(0x10)
		FLinearColor FogInscatteringLuminance; // 0x244(0x10)
		FLinearColor SkyAtmosphereAmbientContributionColorScale; // 0x254(0x10)
		unsigned char UnknownData03_6[0x4]; // 0x264(0x4) UNKNOWN PROPERTY
		UTextureCube InscatteringColorCubemap; // 0x268(0x8)
		float InscatteringColorCubemapAngle; // 0x270(0x4)
		FLinearColor InscatteringTextureTint; // 0x274(0x10)
		float FullyDirectionalInscatteringColorDistance; // 0x284(0x4)
		float NonDirectionalInscatteringColorDistance; // 0x288(0x4)
		float DirectionalInscatteringExponent; // 0x28C(0x4)
		float DirectionalInscatteringStartDistance; // 0x290(0x4)
		FLinearColor DirectionalInscatteringColor; // 0x294(0x10)
		FLinearColor DirectionalInscatteringLuminance; // 0x2A4(0x10)
		float FogMaxOpacity; // 0x2B4(0x4)
		float StartDistance; // 0x2B8(0x4)
		float EndDistance; // 0x2BC(0x4)
		float FogCutoffDistance; // 0x2C0(0x4)
		bool bEnableVolumetricFog; // 0x2C4(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x2C5(0x3) UNKNOWN PROPERTY
		float VolumetricFogScatteringDistribution; // 0x2C8(0x4)
		FColor VolumetricFogAlbedo; // 0x2CC(0x4)
		FLinearColor VolumetricFogEmissive; // 0x2D0(0x10)
		float VolumetricFogExtinctionScale; // 0x2E0(0x4)
		float VolumetricFogDistance; // 0x2E4(0x4)
		float VolumetricFogStartDistance; // 0x2E8(0x4)
		float VolumetricFogNearFadeInDistance; // 0x2EC(0x4)
		float VolumetricFogStaticLightingScatteringIntensity; // 0x2F0(0x4)
		bool bOverrideLightColorsWithFogInscatteringColors; // 0x2F4(0x1)
		bool bHoldout : 1; // 0x2F5:0(0x1)
		bool bRenderInMainPass : 1; // 0x2F5:1(0x1)
		unsigned char UnknownData05_7[0xA]; // 0x2F6(0xA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExponentialHeightFogComponent");
			return ret;
		}

		void SetVolumetricFogStartDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E3458
		void SetVolumetricFogScatteringDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E3378
		void SetVolumetricFogNearFadeInDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E3298
		void SetVolumetricFogExtinctionScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E31B8
		void SetVolumetricFogEmissive(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E30D8
		void SetVolumetricFogDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2FF8
		void SetVolumetricFogAlbedo(FColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E2F18
		void SetVolumetricFog(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2E38
		void SetStartDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2D58
		void SetSecondFogHeightOffset(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2C78
		void SetSecondFogHeightFalloff(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2B98
		void SetSecondFogDensity(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2AB8
		void SetSecondFogData(FExponentialHeightFogData NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E29D8
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E28F8
		void SetNonDirectionalInscatteringColorDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2818
		void SetInscatteringTextureTint(FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E2738
		void SetInscatteringColorCubemapAngle(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2658
		void SetInscatteringColorCubemap(UTextureCube Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2578
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2498
		void SetFullyDirectionalInscatteringColorDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E23B8
		void SetFogMaxOpacity(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E22D8
		void SetFogInscatteringColor(FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E21F8
		void SetFogHeightFalloff(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2118
		void SetFogDensity(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E2038
		void SetFogCutoffDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1F58
		void SetEndDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1E78
		void SetDirectionalInscatteringStartDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1D98
		void SetDirectionalInscatteringExponent(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144E1CB8
		void SetDirectionalInscatteringColor(FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E1BD8
	};


	// Class Engine.Exporter
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UExporter : public UObject	
	{
	public:
		UClass SupportedClass; // 0x28(0x8)
		UObject ExportRootScope; // 0x30(0x8)
		TArray FormatExtension; // 0x38(0x10)
		TArray FormatDescription; // 0x48(0x10)
		int32_t PreferredFormatIndex; // 0x58(0x4)
		int32_t TextIndent; // 0x5C(0x4)
		bool bText : 1; // 0x60:0(0x1)
		bool bSelectedOnly : 1; // 0x60:1(0x1)
		bool bForceFileOperations : 1; // 0x60:2(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x61(0x7) UNKNOWN PROPERTY
		UAssetExportTask ExportTask; // 0x68(0x8)
		unsigned char UnknownData03_7[0x8]; // 0x70(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Exporter");
			return ret;
		}

		bool ScriptRunAssetExportTask(UAssetExportTask Task); // Flags: Event|Public|BlueprintEvent 0x7FF4144E36F8
		bool RunAssetExportTasks(TArray& ExportTasks); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144E3618
		bool RunAssetExportTask(UAssetExportTask Task); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4144E3538
	};


	// Class Engine.DataAsset
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UDataAsset : public UObject	
	{
	public:
		UClass NativeClass; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataAsset");
			return ret;
		}
	};


	// Class Engine.DataLayerAsset
	// Inherited from UDataAsset -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UDataLayerAsset : public UDataAsset	
	{
	public:
		EDataLayerType DataLayerType; // 0x30(0x1)
		bool bSupportsActorFilters; // 0x31(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x32(0x2) UNKNOWN PROPERTY
		FColor DebugColor; // 0x34(0x4)
		EDataLayerLoadFilter LoadFilter; // 0x38(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerAsset");
			return ret;
		}

		bool IsServerOnly(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3B58
		bool IsRuntime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3A78
		bool IsClientOnly(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3998
		EDataLayerType GetType(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E38B8
		FColor GetDebugColor(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144E37D8
	};


	// Class Engine.ExternalDataLayerAsset
	// Inherited from UDataLayerAsset -> UDataAsset -> UObject
	// Size: 0x8 (0x48 - 0x40)
	class UExternalDataLayerAsset : public UDataLayerAsset	
	{
	public:
		FExternalDataLayerUID UID; // 0x40(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerAsset");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x70 (0xA0 - 0x30)
	class UExternalDataLayerEngineSubsystem : public UEngineSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x70]; // 0x30(0x70) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerInjectionPolicy
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UExternalDataLayerInjectionPolicy : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerInjectionPolicy");
			return ret;
		}
	};


	// Class Engine.DataLayerInstance
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UDataLayerInstance : public UObject	
	{
	public:
		EDataLayerRuntimeState InitialRuntimeState; // 0x28(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		UDataLayerInstance Parent; // 0x30(0x8)
		TArray Children; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstance");
			return ret;
		}

		bool IsVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E45D8
		bool IsServerOnly(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E44F8
		bool IsRuntime(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E4418
		bool IsInitiallyVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E4338
		bool IsEffectiveVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E4258
		bool IsClientOnly(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E4178
		EDataLayerType GetType(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E4098
		EDataLayerRuntimeState GetInitialRuntimeState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3FB8
		FColor GetDebugColor(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3ED8
		FString GetDataLayerShortName(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3DF8
		FString GetDataLayerFullName(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3D18
		UDataLayerAsset GetAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E3C38
	};


	// Class Engine.DataLayerInstanceWithAsset
	// Inherited from UDataLayerInstance -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class UDataLayerInstanceWithAsset : public UDataLayerInstance	
	{
	public:
		UDataLayerAsset DataLayerAsset; // 0x48(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstanceWithAsset");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerInstance
	// Inherited from UDataLayerInstanceWithAsset -> UDataLayerInstance -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class UExternalDataLayerInstance : public UDataLayerInstanceWithAsset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerInstance");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerManager
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UExternalDataLayerManager : public UObject	
	{
	public:
		unsigned char UnknownData01_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		TMap ExternalStreamingObjects; // 0x30(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerManager");
			return ret;
		}
	};


	// Class Engine.FieldNotificationLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UFieldNotificationLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FieldNotificationLibrary");
			return ret;
		}

		bool SetPropertyValueAndBroadcastFields(bool NewValueByRef, int32_t& OldValue, int32_t& NewValue, UObject Object, UObject NetOwner, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty, TArray ExtraFieldIds); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144E4958
		bool SetPropertyValueAndBroadcast(bool NewValueByRef, int32_t& OldValue, int32_t& NewValue, UObject Object, UObject NetOwner, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144E4878
		void BroadcastFieldValueChanged(UObject Object, FFieldNotificationId FieldId); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF4144E4798
		void BroadcastFieldsValueChanged(UObject Object, TArray FieldIds); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF4144E46B8
	};


	// Class Engine.FontImportOptions
	// Inherited from UObject
	// Size: 0xB0 (0xD8 - 0x28)
	class UFontImportOptions : public UObject	
	{
	public:
		FFontImportOptionsData Data; // 0x28(0xB0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FontImportOptions");
			return ret;
		}
	};


	// Class Engine.ForceFeedbackAttenuation
	// Inherited from UObject
	// Size: 0xC0 (0xE8 - 0x28)
	class UForceFeedbackAttenuation : public UObject	
	{
	public:
		FForceFeedbackAttenuationSettings Attenuation; // 0x28(0xC0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ForceFeedbackAttenuation");
			return ret;
		}
	};


	// Class Engine.GameNetworkManager
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xA8 (0x338 - 0x290)
	class AGameNetworkManager : public AInfo	
	{
	public:
		float BadPacketLossThreshold; // 0x290(0x4)
		float SeverePacketLossThreshold; // 0x294(0x4)
		int32_t BadPingThreshold; // 0x298(0x4)
		int32_t SeverePingThreshold; // 0x29C(0x4)
		int32_t AdjustedNetSpeed; // 0x2A0(0x4)
		float LastNetSpeedUpdateTime; // 0x2A4(0x4)
		int32_t TotalNetBandwidth; // 0x2A8(0x4)
		int32_t MinDynamicBandwidth; // 0x2AC(0x4)
		int32_t MaxDynamicBandwidth; // 0x2B0(0x4)
		bool bIsStandbyCheckingEnabled : 1; // 0x2B4:0(0x1)
		bool bHasStandbyCheatTriggered : 1; // 0x2B4:1(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x2B5(0x3) UNKNOWN PROPERTY
		float StandbyRxCheatTime; // 0x2B8(0x4)
		float StandbyTxCheatTime; // 0x2BC(0x4)
		float PercentMissingForRxStandby; // 0x2C0(0x4)
		float PercentMissingForTxStandby; // 0x2C4(0x4)
		float PercentForBadPing; // 0x2C8(0x4)
		float JoinInProgressStandbyWaitTime; // 0x2CC(0x4)
		float MoveRepSize; // 0x2D0(0x4)
		float MAXPOSITIONERRORSQUARED; // 0x2D4(0x4)
		float MAXNEARZEROVELOCITYSQUARED; // 0x2D8(0x4)
		float CLIENTADJUSTUPDATECOST; // 0x2DC(0x4)
		float MAXCLIENTUPDATEINTERVAL; // 0x2E0(0x4)
		float MaxClientForcedUpdateDuration; // 0x2E4(0x4)
		float ServerForcedUpdateHitchThreshold; // 0x2E8(0x4)
		float ServerForcedUpdateHitchCooldown; // 0x2EC(0x4)
		float MaxMoveDeltaTime; // 0x2F0(0x4)
		float MaxClientSmoothingDeltaTime; // 0x2F4(0x4)
		float ClientNetSendMoveDeltaTime; // 0x2F8(0x4)
		float ClientNetSendMoveDeltaTimeThrottled; // 0x2FC(0x4)
		float ClientNetSendMoveDeltaTimeStationary; // 0x300(0x4)
		int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x304(0x4)
		int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x308(0x4)
		float ClientErrorUpdateRateLimit; // 0x30C(0x4)
		float ClientNetCamUpdateDeltaTime; // 0x310(0x4)
		float ClientNetCamUpdatePositionLimit; // 0x314(0x4)
		bool ClientAuthorativePosition; // 0x318(0x1)
		bool bMovementTimeDiscrepancyDetection; // 0x319(0x1)
		bool bMovementTimeDiscrepancyResolution; // 0x31A(0x1)
		unsigned char UnknownData04_6[0x1]; // 0x31B(0x1) UNKNOWN PROPERTY
		float MovementTimeDiscrepancyMaxTimeMargin; // 0x31C(0x4)
		float MovementTimeDiscrepancyMinTimeMargin; // 0x320(0x4)
		float MovementTimeDiscrepancyResolutionRate; // 0x324(0x4)
		float MovementTimeDiscrepancyDriftAllowance; // 0x328(0x4)
		bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x32C(0x1)
		bool bUseDistanceBasedRelevancy; // 0x32D(0x1)
		unsigned char UnknownData05_7[0xA]; // 0x32E(0xA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameNetworkManager");
			return ret;
		}
	};


	// Class Engine.SpotLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ASpotLight : public ALight	
	{
	public:
		USpotLightComponent SpotLightComponent; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpotLight");
			return ret;
		}

		void SetOuterConeAngle(float NewOuterConeAngle); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144E4B18
		void SetInnerConeAngle(float NewInnerConeAngle); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144E4A38
	};


	// Class Engine.GeneratedMeshAreaLight
	// Inherited from ASpotLight -> ALight -> AActor -> UObject
	// Size: 0x0 (0x2A8 - 0x2A8)
	class AGeneratedMeshAreaLight : public ASpotLight	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GeneratedMeshAreaLight");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_Base
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHapticFeedbackEffect_Base : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_Base");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_Buffer
	// Inherited from UHapticFeedbackEffect_Base -> UObject
	// Size: 0x18 (0x40 - 0x28)
	class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base	
	{
	public:
		TArray Amplitudes; // 0x28(0x10)
		int32_t SampleRate; // 0x38(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_Buffer");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_Curve
	// Inherited from UHapticFeedbackEffect_Base -> UObject
	// Size: 0x110 (0x138 - 0x28)
	class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base	
	{
	public:
		FHapticFeedbackDetails_Curve HapticDetails; // 0x28(0x110)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_Curve");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_SoundWave
	// Inherited from UHapticFeedbackEffect_Base -> UObject
	// Size: 0x20 (0x48 - 0x28)
	class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base	
	{
	public:
		USoundWave SoundWave; // 0x28(0x8)
		bool bUseStereo; // 0x30(0x1)
		unsigned char UnknownData01_7[0x17]; // 0x31(0x17) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_SoundWave");
			return ret;
		}
	};


	// Class Engine.HLODInstancedStaticMeshComponent
	// Inherited from UInstancedStaticMeshComponent -> UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x8E0 - 0x8E0)
	class UHLODInstancedStaticMeshComponent : public UInstancedStaticMeshComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODInstancedStaticMeshComponent");
			return ret;
		}
	};


	// Class Engine.HierarchicalLODSetup
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UHierarchicalLODSetup : public UObject	
	{
	public:
		TArray HierarchicalLODSetup; // 0x28(0x10)
		TWeakObjectPtr OverrideBaseMaterial; // 0x38(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HierarchicalLODSetup");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODSourceActors
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODSourceActors : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODSourceActors");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODSourceActorsFromCell
	// Inherited from UWorldPartitionHLODSourceActors -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODSourceActorsFromCell : public UWorldPartitionHLODSourceActors	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODSourceActorsFromCell");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODSourceActorsFromLevel
	// Inherited from UWorldPartitionHLODSourceActors -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODSourceActorsFromLevel : public UWorldPartitionHLODSourceActors	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODSourceActorsFromLevel");
			return ret;
		}
	};


	// Class Engine.AnimationDataController
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationDataController : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationDataController");
			return ret;
		}

		void UpdateCurveNamesFromSkeleton(USkeleton Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E6EF8
		bool SetTransformCurveKeys(FAnimationCurveIdentifier& CurveId, TArray& TransformValues, TArray& TimeKeys, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E6E18
		bool SetTransformCurveKey(FAnimationCurveIdentifier& CurveId, float Time, FTransform& Value, bool bShouldTransact); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144E6D38
		void SetPlayLength(float Length, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E6C58
		void SetNumberOfFrames(FFrameNumber NewLengthInFrames, bool bShouldTransact); // Flags: Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E6B78
		void SetModel(TScriptInterface InModel); // Flags: Native|Public|BlueprintCallable 0x7FF4144E6A98
		void SetFrameRate(FFrameRate FrameRate, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E69B8
		bool SetCurveKeys(FAnimationCurveIdentifier& CurveId, TArray& CurveKeys, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E68D8
		bool SetCurveKey(FAnimationCurveIdentifier& CurveId, FRichCurveKey& Key, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E67F8
		bool SetCurveFlags(FAnimationCurveIdentifier& CurveId, int32_t Flags, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E6718
		bool SetCurveFlag(FAnimationCurveIdentifier& CurveId, TEnumAsByte Flag, bool bState, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E6638
		bool SetCurveComment(FAnimationCurveIdentifier& CurveId, FString Comment, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E6558
		bool SetCurveColor(FAnimationCurveIdentifier& CurveId, FLinearColor Color, bool bShouldTransact); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144E6478
		bool SetBoneTrackKeys(FName BoneName, TArray& PositionalKeys, TArray& RotationalKeys, TArray& ScalingKeys, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E6398
		bool ScaleCurve(FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E62B8
		void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E61D8
		void ResizeNumberOfFrames(FFrameNumber NewLengthInFrames, FFrameNumber T0, FFrameNumber T1, bool bShouldTransact); // Flags: Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E60F8
		void ResizeInFrames(FFrameNumber NewLengthInFrames, FFrameNumber T0, FFrameNumber T1, bool bShouldTransact); // Flags: Native|Public|HasDefaults|BlueprintCallable 0x7FF4144E6018
		void Resize(float Length, float T0, float T1, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E5F38
		bool RenameCurve(FAnimationCurveIdentifier& CurveToRenameId, FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5E58
		bool RemoveTransformCurveKey(FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5D78
		bool RemoveCurveKey(FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5C98
		bool RemoveCurve(FAnimationCurveIdentifier& CurveId, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5BB8
		bool RemoveBoneTrack(FName BoneName, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E5AD8
		bool RemoveAttributeKey(FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E59F8
		bool RemoveAttribute(FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5918
		void RemoveAllCurvesOfType(ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E5838
		void RemoveAllBoneTracks(bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E5758
		int32_t RemoveAllAttributesForBone(FName& BoneName, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5678
		int32_t RemoveAllAttributes(bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E5598
		void OpenBracket(FText& InTitle, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E54B8
		int32_t InsertBoneTrack(FName BoneName, int32_t DesiredIndex, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E53D8
		TScriptInterface GetModelInterface(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E52F8
		void FindOrAddCurveNamesOnSkeleton(USkeleton Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E5218
		bool DuplicateCurve(FAnimationCurveIdentifier& CopyCurveId, FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5138
		bool DuplicateAttribute(FAnimationAttributeIdentifier& AttributeIdentifier, FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E5058
		void CloseBracket(bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E4F78
		bool AddCurve(FAnimationCurveIdentifier& CurveId, int32_t CurveFlags, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E4E98
		int32_t AddBoneTrack(FName BoneName, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E4DB8
		bool AddBoneCurve(FName BoneName, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable 0x7FF4144E4CD8
		bool AddAttribute(FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable 0x7FF4144E4BF8
	};


	// Class Engine.AnimationDataModel
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationDataModel : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationDataModel");
			return ret;
		}

		bool IsValidBoneTrackName(FName& TrackName); // Flags: Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7CF8
		bool IsValidBoneTrackIndex(int32_t TrackIndex); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7C18
		double GetPlayLength(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7B38
		int32_t GetNumBoneTracks(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7A58
		int32_t GetNumberOfTransformCurves(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7978
		int32_t GetNumberOfKeys(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7898
		int32_t GetNumberOfFrames(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E77B8
		int32_t GetNumberOfFloatCurves(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E76D8
		FFrameRate GetFrameRate(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E75F8
		void GetBoneTrackNames(TArray& OutNames); // Flags: Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7518
		int32_t GetBoneTrackIndexByName(FName TrackName); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7438
		int32_t GetBoneTrackIndex(FBoneAnimationTrack& Track); // Flags: Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7358
		FBoneAnimationTrack GetBoneTrackByName(FName TrackName); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7278
		FBoneAnimationTrack GetBoneTrackByIndex(int32_t TrackIndex); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E7198
		TArray GetBoneAnimationTracks(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E70B8
		UAnimSequence GetAnimationSequence(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144E6FD8
	};


	// Class Engine.AssetRegistryTagProviderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAssetRegistryTagProviderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetRegistryTagProviderInterface");
			return ret;
		}
	};


	// Class Engine.InGameAdManager
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x28 (0x60 - 0x38)
	class UInGameAdManager : public UPlatformInterfaceBase	
	{
	public:
		bool bShouldPauseWhileAdOpen : 1; // 0x38:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		TArray ClickedBannerDelegates; // 0x40(0x10)
		TArray ClosedAdDelegates; // 0x50(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InGameAdManager");
			return ret;
		}
	};


	// Class Engine.Interface_ActorSubobject
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_ActorSubobject : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_ActorSubobject");
			return ret;
		}
	};


	// Class Engine.Interface_AssetUserData
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_AssetUserData : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_AssetUserData");
			return ret;
		}

		bool HasAssetUserDataOfClass(UClass InUserDataClass); // Flags: Native|Public|BlueprintCallable 0x7FF4144E7F98
		UAssetUserData GetAssetUserDataOfClass(UClass InUserDataClass); // Flags: Native|Public|BlueprintCallable 0x7FF4144E7EB8
		bool AddAssetUserDataOfClass(UClass InUserDataClass); // Flags: Native|Public|BlueprintCallable 0x7FF4144E7DD8
	};


	// Class Engine.Interface_AsyncCompilation
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_AsyncCompilation : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_AsyncCompilation");
			return ret;
		}
	};


	// Class Engine.BoneReferenceSkeletonProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBoneReferenceSkeletonProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoneReferenceSkeletonProvider");
			return ret;
		}
	};


	// Class Engine.Interface_CollisionDataProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_CollisionDataProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_CollisionDataProvider");
			return ret;
		}
	};


	// Class Engine.Interface_PostProcessVolume
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_PostProcessVolume : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_PostProcessVolume");
			return ret;
		}
	};


	// Class Engine.Interface_PreviewMeshProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_PreviewMeshProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_PreviewMeshProvider");
			return ret;
		}
	};


	// Class Engine.PhysicsComponent
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsComponent : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsComponent");
			return ret;
		}
	};


	// Class Engine.ISMPartitionInstanceManager
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UISMPartitionInstanceManager : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ISMPartitionInstanceManager");
			return ret;
		}
	};


	// Class Engine.ISMPartitionInstanceManagerProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UISMPartitionInstanceManagerProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ISMPartitionInstanceManagerProvider");
			return ret;
		}
	};


	// Class Engine.WorldPartitionObjectResolver
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionObjectResolver : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionObjectResolver");
			return ret;
		}
	};


	// Class Engine.KismetTextLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetTextLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetTextLibrary");
			return ret;
		}

		FText TextTrimTrailing(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EAB58
		FText TextTrimPrecedingAndTrailing(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EAA78
		FText TextTrimPreceding(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA998
		FText TextToUpper(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA8B8
		FText TextToLower(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA7D8
		bool TextIsTransient(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA6F8
		bool TextIsFromStringTable(FText& Text); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA618
		bool TextIsEmpty(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA538
		bool TextIsCultureInvariant(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA458
		FText TextFromStringTable(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144EA378
		bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA298
		FText PolyglotDataToText(FPolyglotTextData& PolyglotData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA1B8
		bool NotEqual_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EA0D8
		bool NotEqual_IgnoreCase_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E9FF8
		FText MakeInvariantText(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E9F18
		void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E9E38
		FString GetTextSourceString(FText Text); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E9D58
		bool GetTextId(FText Text, FString& OutNamespace, FString& OutKey); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E9C78
		FText GetEmptyText(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E9B98
		FText Format(FText InPattern, TArray InArgs); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E9AB8
		bool FindTextInLocalizationTable(FString NameSpace, FString Key, FText& OutText, FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E99D8
		bool EqualEqual_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E98F8
		bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E9818
		bool EditTextSourceString(UObject TextOwner, FText& Text, FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144E9738
		FText Conv_VectorToText(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E9658
		FText Conv_Vector2dToText(FVector2D InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E9578
		FText Conv_TransformToText(FTransform& InTrans); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E9498
		FString Conv_TextToString(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E93B8
		FText Conv_StringToText(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E92D8
		FText Conv_RotatorToText(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E91F8
		FText Conv_ObjectToText(UObject InObj); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E9118
		FText Conv_NumericPropertyToText(int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144E9038
		FText Conv_NameToText(FName InName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8F58
		FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8E78
		FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8D98
		FText Conv_DoubleToText(double Value, TEnumAsByte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8CB8
		FText Conv_ColorToText(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E8BD8
		FText Conv_ByteToText(char Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8AF8
		FText Conv_BoolToText(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8A18
		FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E8938
		FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E8858
		FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E8778
		FText AsTimespan_Timespan(FTimespan& InTimespan); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E8698
		FText AsTime_DateTime(FDateTime& In); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E85B8
		FText AsPercent_Float(float Value, TEnumAsByte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E84D8
		FText AsDateTime_DateTime(FDateTime& In); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E83F8
		FText AsDate_DateTime(FDateTime& InDateTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144E8318
		FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8238
		FText AsCurrency_Integer(int32_t Value, TEnumAsByte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8158
		FText AsCurrency_Float(float Value, TEnumAsByte RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144E8078
	};


	// Class Engine.ActorDescContainerInstance
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorDescContainerInstance : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorDescContainerInstance");
			return ret;
		}
	};


	// Class Engine.LevelInstanceContainerInstance
	// Inherited from UActorDescContainerInstance -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceContainerInstance : public UActorDescContainerInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceContainerInstance");
			return ret;
		}
	};


	// Class Engine.LevelInstanceEditorPivotInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceEditorPivotInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceEditorPivotInterface");
			return ret;
		}
	};


	// Class Engine.WorldPartitionPropertyOverride
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionPropertyOverride : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionPropertyOverride");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverrideAsset
	// Inherited from UWorldPartitionPropertyOverride -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverrideAsset : public UWorldPartitionPropertyOverride	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverrideAsset");
			return ret;
		}
	};


	// Class Engine.ActorDescContainer
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorDescContainer : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorDescContainer");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverrideContainer
	// Inherited from UActorDescContainer -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverrideContainer : public UActorDescContainer	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverrideContainer");
			return ret;
		}
	};


	// Class Engine.WorldPartitionPropertyOverridePolicy
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionPropertyOverridePolicy : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionPropertyOverridePolicy");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverridePolicy
	// Inherited from UWorldPartitionPropertyOverridePolicy -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverridePolicy : public UWorldPartitionPropertyOverridePolicy	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverridePolicy");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverrideSamplePolicy
	// Inherited from ULevelInstancePropertyOverridePolicy -> UWorldPartitionPropertyOverridePolicy -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverrideSamplePolicy : public ULevelInstancePropertyOverridePolicy	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverrideSamplePolicy");
			return ret;
		}
	};


	// Class Engine.LevelInstanceSettings
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class ULevelInstanceSettings : public UObject	
	{
	public:
		FString PropertyOverridePolicyClass; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceSettings");
			return ret;
		}
	};


	// Class Engine.World
	// Inherited from UObject
	// Size: 0x8E0 (0x908 - 0x28)
	class UWorld : public UObject	
	{
	public:
		unsigned char UnknownData11_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		ULevel PersistentLevel; // 0x30(0x8)
		UNetDriver NetDriver; // 0x38(0x8)
		ULineBatchComponent LineBatcher; // 0x40(0x8)
		ULineBatchComponent PersistentLineBatcher; // 0x48(0x8)
		ULineBatchComponent ForegroundLineBatcher; // 0x50(0x8)
		AGameNetworkManager NetworkManager; // 0x58(0x8)
		UPhysicsCollisionHandler PhysicsCollisionHandler; // 0x60(0x8)
		TArray ExtraReferencedObjects; // 0x68(0x10)
		TArray PerModuleDataObjects; // 0x78(0x10)
		TArray StreamingLevels; // 0x88(0x10)
		FStreamingLevelsToConsider StreamingLevelsToConsider; // 0x98(0x28)
		AServerStreamingLevelsVisibility ServerStreamingLevelsVisibility; // 0xC0(0x8)
		FString StreamingLevelsPrefix; // 0xC8(0x10)
		unsigned char UnknownData12_6[0x8]; // 0xD8(0x8) UNKNOWN PROPERTY
		ULevel CurrentLevelPendingVisibility; // 0xE0(0x8)
		ULevel CurrentLevelPendingInvisibility; // 0xE8(0x8)
		UDemoNetDriver DemoNetDriver; // 0xF0(0x8)
		AParticleEventManager MyParticleEventManager; // 0xF8(0x8)
		APhysicsVolume DefaultPhysicsVolume; // 0x100(0x8)
		unsigned char UnknownData13_6[0x36]; // 0x108(0x36) UNKNOWN PROPERTY
		unsigned char UnknownBit14 : 1; // 0x13E:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit15 : 1; // 0x13E:1(0x1) UNKNOWN PROPERTY
		bool bAreConstraintsDirty : 1; // 0x13E:2(0x1)
		unsigned char UnknownData16_5[0x11]; // 0x13F(0x11) UNKNOWN PROPERTY
		UNavigationSystemBase NavigationSystem; // 0x150(0x8)
		AGameModeBase AuthorityGameMode; // 0x158(0x8)
		AGameStateBase GameState; // 0x160(0x8)
		UAISystemBase AISystem; // 0x168(0x8)
		UAvoidanceManager AvoidanceManager; // 0x170(0x8)
		TArray Levels; // 0x178(0x10)
		TArray LevelCollections; // 0x188(0x10)
		unsigned char UnknownData17_6[0x40]; // 0x198(0x40) UNKNOWN PROPERTY
		UGameInstance OwningGameInstance; // 0x1D8(0x8)
		TArray ParameterCollectionInstances; // 0x1E0(0x10)
		UCanvas CanvasForRenderingToTarget; // 0x1F0(0x8)
		UCanvas CanvasForDrawMaterialToRenderTarget; // 0x1F8(0x8)
		unsigned char UnknownData18_6[0x70]; // 0x200(0x70) UNKNOWN PROPERTY
		UPhysicsFieldComponent PhysicsField; // 0x270(0x8)
		TSet ComponentsThatNeedPreEndOfFrameSync; // 0x278(0x50)
		TArray ComponentsThatNeedEndOfFrameUpdate; // 0x2C8(0x10)
		TArray ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x2D8(0x10)
		unsigned char UnknownData19_6[0x438]; // 0x2E8(0x438) UNKNOWN PROPERTY
		UWorldComposition WorldComposition; // 0x720(0x8)
		UContentBundleManager ContentBundleManager; // 0x728(0x8)
		unsigned char UnknownData20_6[0xC0]; // 0x730(0xC0) UNKNOWN PROPERTY
		FWorldPSCPool PSCPool; // 0x7F0(0x58)
		unsigned char UnknownData21_7[0xC0]; // 0x848(0xC0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.World");
			return ret;
		}

		AWorldSettings K2_GetWorldSettings(); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41458B1B8
		void HandleTimelineScrubbed(); // Flags: Final|Native|Public 0x7FF41458B0D8
		UDataLayerManager GetDataLayerManager(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458AFF8
	};


	// Class Engine.LevelStreaming
	// Inherited from UObject
	// Size: 0x178 (0x1A0 - 0x28)
	class ULevelStreaming : public UObject	
	{
	public:
		TWeakObjectPtr WorldAsset; // 0x28(0x20)
		int32_t StreamingPriority; // 0x48(0x4)
		FName PackageNameToLoad; // 0x4C(0x4)
		TArray LODPackageNames; // 0x50(0x10)
		unsigned char UnknownData10_6[0x10]; // 0x60(0x10) UNKNOWN PROPERTY
		FTransform LevelTransform; // 0x70(0x60)
		bool bClientOnlyVisible; // 0xD0(0x1)
		unsigned char UnknownData11_6[0x3]; // 0xD1(0x3) UNKNOWN PROPERTY
		int32_t LevelLODIndex; // 0xD4(0x4)
		unsigned char UnknownBit12 : 1; // 0xD8:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit13 : 1; // 0xD8:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit14 : 1; // 0xD8:2(0x1) UNKNOWN PROPERTY
		bool bShouldBeVisible : 1; // 0xD8:3(0x1)
		bool bShouldBeLoaded : 1; // 0xD8:4(0x1)
		unsigned char UnknownData15_3[0x19]; // 0xD9(0x19) UNKNOWN PROPERTY
		bool bLocked : 1; // 0xF2:0(0x1)
		bool bIsStatic : 1; // 0xF2:1(0x1)
		bool bShouldBlockOnLoad : 1; // 0xF2:2(0x1)
		bool bShouldBlockOnUnload : 1; // 0xF2:3(0x1)
		bool bDisableDistanceStreaming : 1; // 0xF2:4(0x1)
		bool bDrawOnLevelStatusMap : 1; // 0xF2:5(0x1)
		unsigned char UnknownData16_5[0x1]; // 0xF3(0x1) UNKNOWN PROPERTY
		FLinearColor LevelColor; // 0xF4(0x10)
		unsigned char UnknownData17_6[0x4]; // 0x104(0x4) UNKNOWN PROPERTY
		TArray EditorStreamingVolumes; // 0x108(0x10)
		float MinTimeBetweenVolumeUnloadRequests; // 0x118(0x4)
		unsigned char UnknownData18_6[0x4]; // 0x11C(0x4) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnLevelLoaded; // 0x120(0x10)
		FMulticastInlineDelegate OnLevelUnloaded; // 0x130(0x10)
		FMulticastInlineDelegate OnLevelShown; // 0x140(0x10)
		FMulticastInlineDelegate OnLevelHidden; // 0x150(0x10)
		ULevel LoadedLevel; // 0x160(0x8)
		ULevel PendingUnloadLevel; // 0x168(0x8)
		unsigned char UnknownData19_7[0x28]; // 0x170(0x28) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreaming");
			return ret;
		}

		bool ShouldBeLoaded(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EB798
		void SetShouldBeVisible(bool bInShouldBeVisible); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EB6B8
		void SetShouldBeLoaded(bool bInShouldBeLoaded); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EB5D8
		void SetPriority(int32_t NewPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EB4F8
		void SetLevelLODIndex(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EB418
		void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EB338
		bool IsStreamingStatePending(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EB258
		bool IsLevelVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EB178
		bool IsLevelLoaded(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EB098
		FName GetWorldAssetPackageFName(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EAFB8
		ULevel GetLoadedLevel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EAED8
		ALevelScriptActor GetLevelScriptActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF4144EADF8
		bool GetIsRequestingUnloadAndRemoval(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EAD18
		ULevelStreaming CreateInstance(FString UniqueInstanceName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EAC38
	};


	// Class Engine.LevelStreamingAlwaysLoaded
	// Inherited from ULevelStreaming -> UObject
	// Size: 0x8 (0x1A0 - 0x198)
	class ULevelStreamingAlwaysLoaded : public ULevelStreaming	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x198(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingAlwaysLoaded");
			return ret;
		}
	};


	// Class Engine.LevelStreamingDynamic
	// Inherited from ULevelStreaming -> UObject
	// Size: 0x8 (0x1A0 - 0x198)
	class ULevelStreamingDynamic : public ULevelStreaming	
	{
	public:
		bool bInitiallyLoaded : 1; // 0x198:0(0x1)
		bool bInitiallyVisible : 1; // 0x198:1(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x199(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingDynamic");
			return ret;
		}

		ULevelStreamingDynamic LoadLevelInstanceBySoftObjectPtr(UObject WorldContextObject, TWeakObjectPtr Level, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, UClass OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144EB958
		ULevelStreamingDynamic LoadLevelInstance(UObject WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, UClass OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144EB878
	};


	// Class Engine.LevelStreamingPersistent
	// Inherited from ULevelStreaming -> UObject
	// Size: 0x8 (0x1A0 - 0x198)
	class ULevelStreamingPersistent : public ULevelStreaming	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x198(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingPersistent");
			return ret;
		}
	};


	// Class Engine.LevelStreamingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x18 (0x2E0 - 0x2C8)
	class ALevelStreamingVolume : public AVolume	
	{
	public:
		TArray StreamingLevelNames; // 0x2C8(0x10)
		bool bEditorPreVisOnly : 1; // 0x2D8:0(0x1)
		bool bDisabled : 1; // 0x2D8:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x2D9(0x3) UNKNOWN PROPERTY
		TEnumAsByte StreamingUsage; // 0x2DC(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x2DD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingVolume");
			return ret;
		}
	};


	// Class Engine.LightComponentBase
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x50 (0x270 - 0x220)
	class ULightComponentBase : public USceneComponent	
	{
	public:
		FGuid OriginalLightGuid; // 0x220(0x10)
		FGuid LightGuid; // 0x230(0x10)
		float Brightness; // 0x240(0x4)
		float Intensity; // 0x244(0x4)
		FColor LightColor; // 0x248(0x4)
		bool bAffectsWorld : 1; // 0x24C:0(0x1)
		bool CastShadows : 1; // 0x24C:1(0x1)
		bool CastStaticShadows : 1; // 0x24C:2(0x1)
		bool CastDynamicShadows : 1; // 0x24C:3(0x1)
		bool bAffectTranslucentLighting : 1; // 0x24C:4(0x1)
		bool bTransmission : 1; // 0x24C:5(0x1)
		bool bCastVolumetricShadow : 1; // 0x24C:6(0x1)
		bool bCastDeepShadow : 1; // 0x24C:7(0x1)
		bool bCastRaytracedShadow : 1; // 0x24D:0(0x1)
		unsigned char UnknownData03_5[0x2]; // 0x24E(0x2) UNKNOWN PROPERTY
		TEnumAsByte CastRaytracedShadow; // 0x250(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x251(0x3) UNKNOWN PROPERTY
		bool bAffectReflection : 1; // 0x254:0(0x1)
		bool bAffectGlobalIllumination : 1; // 0x254:1(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x255(0x3) UNKNOWN PROPERTY
		float DeepShadowLayerDistribution; // 0x258(0x4)
		float IndirectLightingIntensity; // 0x25C(0x4)
		float VolumetricScatteringIntensity; // 0x260(0x4)
		int32_t SamplesPerPixel; // 0x264(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightComponentBase");
			return ret;
		}

		void SetSamplesPerPixel(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EC138
		void SetCastVolumetricShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EC058
		void SetCastShadows(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EBF78
		void SetCastRaytracedShadows(TEnumAsByte bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EBE98
		void SetCastRaytracedShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EBDB8
		void SetCastDeepShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EBCD8
		void SetAffectReflection(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EBBF8
		void SetAffectGlobalIllumination(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EBB18
		FLinearColor GetLightColor(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EBA38
	};


	// Class Engine.Texture2D
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x150 - 0x130)
	class UTexture2D : public UTexture	
	{
	public:
		int32_t FirstResourceMemMip; // 0x130(0x4)
		bool bTemporarilyDisableStreaming : 1; // 0x134:0(0x1)
		TEnumAsByte AddressX; // 0x135(0x1)
		TEnumAsByte AddressY; // 0x136(0x1)
		unsigned char UnknownData02_6[0x1]; // 0x137(0x1) UNKNOWN PROPERTY
		FIntPoint ImportedSize; // 0x138(0x8)
		unsigned char UnknownData03_7[0x10]; // 0x140(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture2D");
			return ret;
		}

		int32_t Blueprint_GetSizeY(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC3D8
		int32_t Blueprint_GetSizeX(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC2F8
		FSharedImageConstRefBlueprint Blueprint_GetCPUCopy(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC218
	};


	// Class Engine.LightMapTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class ULightMapTexture2D : public UTexture2D	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x150(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightMapTexture2D");
			return ret;
		}
	};


	// Class Engine.LightmassPortal
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALightmassPortal : public AActor	
	{
	public:
		ULightmassPortalComponent PortalComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassPortal");
			return ret;
		}
	};


	// Class Engine.LightmassPortalComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x230 - 0x220)
	class ULightmassPortalComponent : public USceneComponent	
	{
	public:
		UBoxComponent PreviewBox; // 0x220(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x228(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassPortalComponent");
			return ret;
		}
	};


	// Class Engine.LocalFogVolume
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALocalFogVolume : public AInfo	
	{
	public:
		ULocalFogVolumeComponent LocalFogVolumeVolume; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalFogVolume");
			return ret;
		}
	};


	// Class Engine.MapBuildDataRegistry
	// Inherited from UObject
	// Size: 0x210 (0x238 - 0x28)
	class UMapBuildDataRegistry : public UObject	
	{
	public:
		TEnumAsByte LevelLightingQuality; // 0x28(0x1)
		unsigned char UnknownData01_7[0x20F]; // 0x29(0x20F) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MapBuildDataRegistry");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAbs
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionAbs : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAbs");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionAbsorptionMediumMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput TransmittanceColor; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAbsorptionMediumMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionActorPositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionActorPositionWS : public UMaterialExpression	
	{
	public:
		EPositionOrigin OriginType; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionActorPositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAdd
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionAdd : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAdd");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionTextureBase : public UMaterialExpression	
	{
	public:
		UTexture Texture; // 0xB0(0x8)
		TEnumAsByte SamplerType; // 0xB8(0x1)
		bool IsDefaultMeshpaintTexture : 1; // 0xB9:0(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xBA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSample
	// Inherited from UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0xF8 (0x1B8 - 0xC0)
	class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase	
	{
	public:
		FExpressionInput Coordinates; // 0xC0(0x28)
		FExpressionInput TextureObject; // 0xE8(0x28)
		FExpressionInput MipValue; // 0x110(0x28)
		FExpressionInput CoordinatesDX; // 0x138(0x28)
		FExpressionInput CoordinatesDY; // 0x160(0x28)
		FExpressionInput AutomaticViewMipBiasValue; // 0x188(0x28)
		TEnumAsByte MipValueMode; // 0x1B0(0x1)
		TEnumAsByte SamplerSource; // 0x1B1(0x1)
		bool AutomaticViewMipBias : 1; // 0x1B2:0(0x1)
		char ConstCoordinate; // 0x1B3(0x1)
		int32_t ConstMipValue; // 0x1B4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameter
	// Inherited from UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x60 (0x218 - 0x1B8)
	class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample	
	{
	public:
		FName ParameterName; // 0x1B8(0x4)
		FGuid ExpressionGUID; // 0x1BC(0x10)
		FName Group; // 0x1CC(0x4)
		int32_t SortPriority; // 0x1D0(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x1D4(0x4) UNKNOWN PROPERTY
		FParameterChannelNames ChannelNames; // 0x1D8(0x40)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameter2D
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameter2D");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAntialiasedTextureMask
	// Inherited from UMaterialExpressionTextureSampleParameter2D -> UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x8 (0x220 - 0x218)
	class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D	
	{
	public:
		float Threshold; // 0x218(0x4)
		TEnumAsByte Channel; // 0x21C(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x21D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAntialiasedTextureMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAppendVector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionAppendVector : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAppendVector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArccosine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArccosine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArccosine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArccosineFast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArccosineFast : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArccosineFast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArcsine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArcsine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArcsine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArcsineFast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArcsineFast : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArcsineFast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangent
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArctangent : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangent");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangent2
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionArctangent2 : public UMaterialExpression	
	{
	public:
		FExpressionInput Y; // 0xB0(0x28)
		FExpressionInput X; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangent2");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangent2Fast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionArctangent2Fast : public UMaterialExpression	
	{
	public:
		FExpressionInput Y; // 0xB0(0x28)
		FExpressionInput X; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangent2Fast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangentFast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArctangentFast : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangentFast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAtmosphericFogColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAtmosphericFogColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAtmosphericLightColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAtmosphericLightColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAtmosphericLightVector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAtmosphericLightVector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBentNormalCustomOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBentNormalCustomOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBinaryOp
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionBinaryOp : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBinaryOp");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLess
	// Inherited from UMaterialExpressionBinaryOp -> UMaterialExpression -> UObject
	// Size: 0x0 (0x108 - 0x108)
	class UMaterialExpressionLess : public UMaterialExpressionBinaryOp	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLess");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBindlessSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionBindlessSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Bindless; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBindlessSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBlackBody
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionBlackBody : public UMaterialExpression	
	{
	public:
		FExpressionInput Temp; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBlackBody");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBlendMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x90 (0x140 - 0xB0)
	class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput A; // 0xB0(0x30)
		FMaterialAttributesInput B; // 0xE0(0x30)
		FExpressionInput Alpha; // 0x110(0x28)
		TEnumAsByte PixelAttributeBlendType; // 0x138(0x1)
		TEnumAsByte VertexAttributeBlendType; // 0x139(0x1)
		unsigned char UnknownData01_7[0x6]; // 0x13A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBlendMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionBounds : public UMaterialExpression	
	{
	public:
		TEnumAsByte Type; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBreakMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBreakMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBumpOffset
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionBumpOffset : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinate; // 0xB0(0x28)
		FExpressionInput Height; // 0xD8(0x28)
		FExpressionInput HeightRatioInput; // 0x100(0x28)
		float HeightRatio; // 0x128(0x4)
		float ReferencePlane; // 0x12C(0x4)
		uint32_t ConstCoordinate; // 0x130(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBumpOffset");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCameraPositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCameraPositionWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCameraPositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCameraVectorWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCameraVectorWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCameraVectorWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCeil
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionCeil : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCeil");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParameter
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionParameter : public UMaterialExpression	
	{
	public:
		FName ParameterName; // 0xB0(0x4)
		FGuid ExpressionGUID; // 0xB4(0x10)
		FName Group; // 0xC4(0x4)
		int32_t SortPriority; // 0xC8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVectorParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x58 (0x128 - 0xD0)
	class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter	
	{
	public:
		FLinearColor DefaultValue; // 0xD0(0x10)
		bool bUseCustomPrimitiveData; // 0xE0(0x1)
		char PrimitiveDataIndex; // 0xE1(0x1)
		unsigned char UnknownData01_6[0x6]; // 0xE2(0x6) UNKNOWN PROPERTY
		FParameterChannelNames ChannelNames; // 0xE8(0x40)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVectorParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionChannelMaskParameter
	// Inherited from UMaterialExpressionVectorParameter -> UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x30 (0x158 - 0x128)
	class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter	
	{
	public:
		TEnumAsByte MaskChannel; // 0x128(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x129(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0x130(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionChannelMaskParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionClamp
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionClamp : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		FExpressionInput Min; // 0xD8(0x28)
		FExpressionInput Max; // 0x100(0x28)
		TEnumAsByte ClampMode; // 0x128(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x129(0x3) UNKNOWN PROPERTY
		float MinDefault; // 0x12C(0x4)
		float MaxDefault; // 0x130(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionClamp");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionClearCoatNormalCustomOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCloudSampleAttribute
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCloudSampleAttribute");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCollectionParameter
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionCollectionParameter : public UMaterialExpression	
	{
	public:
		UMaterialParameterCollection Collection; // 0xB0(0x8)
		FName ParameterName; // 0xB8(0x4)
		FGuid ParameterId; // 0xBC(0x10)
		unsigned char UnknownData01_7[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCollectionParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionComment
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionComment : public UMaterialExpression	
	{
	public:
		int32_t SizeX; // 0xB0(0x4)
		int32_t SizeY; // 0xB4(0x4)
		FString Text; // 0xB8(0x10)
		FLinearColor CommentColor; // 0xC8(0x10)
		int32_t FontSize; // 0xD8(0x4)
		bool bCommentBubbleVisible_InDetailsPanel : 1; // 0xDC:0(0x1)
		bool bColorCommentBubble : 1; // 0xDC:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0xDD(0x3) UNKNOWN PROPERTY
		bool bGroupMode; // 0xE0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionComment");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionComponentMask
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionComponentMask : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		bool R : 1; // 0xD8:0(0x1)
		bool G : 1; // 0xD8:1(0x1)
		bool B : 1; // 0xD8:2(0x1)
		bool A : 1; // 0xD8:3(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionComponentMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionComposite
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionComposite : public UMaterialExpression	
	{
	public:
		FString SubgraphName; // 0xB0(0x10)
		UMaterialExpressionPinBase InputExpressions; // 0xC0(0x8)
		UMaterialExpressionPinBase OutputExpressions; // 0xC8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionComposite");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionConstant : public UMaterialExpression	
	{
	public:
		float R; // 0xB0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant2Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionConstant2Vector : public UMaterialExpression	
	{
	public:
		float R; // 0xB0(0x4)
		float G; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant2Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant3Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionConstant3Vector : public UMaterialExpression	
	{
	public:
		FLinearColor Constant; // 0xB0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant3Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant4Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionConstant4Vector : public UMaterialExpression	
	{
	public:
		FLinearColor Constant; // 0xB0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant4Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstantBiasScale
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionConstantBiasScale : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Bias; // 0xD8(0x4)
		float Scale; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstantBiasScale");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCosine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionCosine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Period; // 0xD8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCosine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCrossProduct
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionCrossProduct : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCrossProduct");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionScalarParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x10 (0xE0 - 0xD0)
	class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter	
	{
	public:
		float DefaultValue; // 0xD0(0x4)
		bool bUseCustomPrimitiveData; // 0xD4(0x1)
		char PrimitiveDataIndex; // 0xD5(0x1)
		unsigned char UnknownData01_6[0x2]; // 0xD6(0x2) UNKNOWN PROPERTY
		float SliderMin; // 0xD8(0x4)
		float SliderMax; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionScalarParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCurveAtlasRowParameter
	// Inherited from UMaterialExpressionScalarParameter -> UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x38 (0x118 - 0xE0)
	class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter	
	{
	public:
		UCurveLinearColor Curve; // 0xE0(0x8)
		UCurveLinearColorAtlas Atlas; // 0xE8(0x8)
		FExpressionInput InputTime; // 0xF0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCurveAtlasRowParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCustom
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x70 (0x120 - 0xB0)
	class UMaterialExpressionCustom : public UMaterialExpression	
	{
	public:
		FString Code; // 0xB0(0x10)
		TEnumAsByte OutputType; // 0xC0(0x1)
		unsigned char UnknownData02_6[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY
		FString Description; // 0xC8(0x10)
		TArray Inputs; // 0xD8(0x10)
		TArray AdditionalOutputs; // 0xE8(0x10)
		TArray AdditionalDefines; // 0xF8(0x10)
		TArray IncludeFilePaths; // 0x108(0x10)
		bool ShowCode; // 0x118(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x119(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCustom");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput InputTrue; // 0xB0(0x28)
		FExpressionInput InputFalse; // 0xD8(0x28)
		TArray DDSPIPropertyNames; // 0x100(0x10)
		bool bContainsInvalidProperty : 1; // 0x110:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x111(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch");
			return ret;
		}

		TArray GetNameOptions(); // Flags: Final|Native|Public|Const 0x7FF4144EC4B8
	};


	// Class Engine.MaterialExpressionDBufferTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDBufferTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte DBufferTextureId; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDBufferTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDDX
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDDX : public UMaterialExpression	
	{
	public:
		FExpressionInput Value; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDDX");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDDY
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDDY : public UMaterialExpression	
	{
	public:
		FExpressionInput Value; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDDY");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDecalColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalDerivative
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDecalDerivative : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalDerivative");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalLifetimeOpacity
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalLifetimeOpacity");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalMipmapLevel
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression	
	{
	public:
		FExpressionInput TextureSize; // 0xB0(0x28)
		float ConstWidth; // 0xD8(0x4)
		float ConstHeight; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalMipmapLevel");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDeltaTime
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDeltaTime : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDeltaTime");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDepthFade
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionDepthFade : public UMaterialExpression	
	{
	public:
		FExpressionInput InOpacity; // 0xB0(0x28)
		FExpressionInput FadeDistance; // 0xD8(0x28)
		float OpacityDefault; // 0x100(0x4)
		float FadeDistanceDefault; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDepthFade");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDepthOfFieldFunction
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression	
	{
	public:
		TEnumAsByte FunctionValue; // 0xB0(0x1)
		unsigned char UnknownData01_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Depth; // 0xB8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDepthOfFieldFunction");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDeriveNormalZ
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDeriveNormalZ : public UMaterialExpression	
	{
	public:
		FExpressionInput InXY; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDeriveNormalZ");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDesaturation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionDesaturation : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		FExpressionInput Fraction; // 0xD8(0x28)
		FLinearColor LuminanceFactors; // 0x100(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDesaturation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionDistance : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceCullFade
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDistanceCullFade : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceCullFade");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceFieldApproxAO
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xC0 (0x170 - 0xB0)
	class UMaterialExpressionDistanceFieldApproxAO : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData03_6[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY
		FExpressionInput Normal; // 0xE0(0x28)
		FExpressionInput BaseDistance; // 0x108(0x28)
		float BaseDistanceDefault; // 0x130(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x134(0x4) UNKNOWN PROPERTY
		FExpressionInput Radius; // 0x138(0x28)
		float RadiusDefault; // 0x160(0x4)
		uint32_t NumSteps; // 0x164(0x4)
		float StepScaleDefault; // 0x168(0x4)
		unsigned char UnknownData05_7[0x4]; // 0x16C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceFieldApproxAO");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceFieldGradient
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceFieldGradient");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput No; // 0xB0(0x28)
		FExpressionInput Yes; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceFieldsRenderingSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceToNearestSurface
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceToNearestSurface");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDivide
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionDivide : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDivide");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDotProduct
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionDotProduct : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDotProduct");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDoubleVectorParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x20 (0xF0 - 0xD0)
	class UMaterialExpressionDoubleVectorParameter : public UMaterialExpressionParameter	
	{
	public:
		FVector4d DefaultValue; // 0xD0(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDoubleVectorParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDynamicParameter
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDynamicParameter : public UMaterialExpression	
	{
	public:
		TArray ParamNames; // 0xB0(0x10)
		FLinearColor DefaultValue; // 0xC0(0x10)
		uint32_t ParameterIndex; // 0xD0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDynamicParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExecBegin
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionExecBegin : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput Exec; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExecBegin");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExecEnd
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionExecEnd : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExecEnd");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExponential
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionExponential : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExponential");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExponential2
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionExponential2 : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExponential2");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionEyeAdaptation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionEyeAdaptation : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionEyeAdaptation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionEyeAdaptationInverse
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionEyeAdaptationInverse : public UMaterialExpression	
	{
	public:
		FExpressionInput LightValueInput; // 0xB0(0x28)
		FExpressionInput AlphaInput; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionEyeAdaptationInverse");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFeatureLevelSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xF0 (0x1A0 - 0xB0)
	class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Inputs; // 0xD8(0xC8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFeatureLevelSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFloor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionFloor : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFloor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFmod
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionFmod : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFmod");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFontSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionFontSample : public UMaterialExpression	
	{
	public:
		UFont Font; // 0xB0(0x8)
		int32_t FontTexturePage; // 0xB8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFontSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFontSampleParameter
	// Inherited from UMaterialExpressionFontSample -> UMaterialExpression -> UObject
	// Size: 0x20 (0xE0 - 0xC0)
	class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample	
	{
	public:
		FName ParameterName; // 0xC0(0x4)
		FGuid ExpressionGUID; // 0xC4(0x10)
		FName Group; // 0xD4(0x4)
		int32_t SortPriority; // 0xD8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFontSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionForLoop
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionForLoop : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput LoopBody; // 0xB0(0x8)
		FExpressionExecOutput Completed; // 0xB8(0x8)
		FExpressionInput StartIndex; // 0xC0(0x28)
		FExpressionInput EndIndex; // 0xE8(0x28)
		FExpressionInput IndexStep; // 0x110(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionForLoop");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFrac
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionFrac : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFrac");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFresnel
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionFresnel : public UMaterialExpression	
	{
	public:
		FExpressionInput ExponentIn; // 0xB0(0x28)
		float Exponent; // 0xD8(0x4)
		unsigned char UnknownData02_6[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY
		FExpressionInput BaseReflectFractionIn; // 0xE0(0x28)
		float BaseReflectFraction; // 0x108(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x10C(0x4) UNKNOWN PROPERTY
		FExpressionInput Normal; // 0x110(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFresnel");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFunctionInput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xB0 (0x160 - 0xB0)
	class UMaterialExpressionFunctionInput : public UMaterialExpression	
	{
	public:
		FExpressionInput Preview; // 0xB0(0x28)
		FName InputName; // 0xD8(0x4)
		unsigned char UnknownData04_6[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY
		FString Description; // 0xE0(0x10)
		FGuid ID; // 0xF0(0x10)
		TEnumAsByte InputType; // 0x100(0x1)
		unsigned char UnknownData05_6[0xF]; // 0x101(0xF) UNKNOWN PROPERTY
		FVector4f PreviewValue; // 0x110(0x10)
		bool bUsePreviewValueAsDefault : 1; // 0x120:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x121(0x3) UNKNOWN PROPERTY
		int32_t SortPriority; // 0x124(0x4)
		bool bCompilingFunctionPreview : 1; // 0x128:0(0x1)
		unsigned char UnknownData07_7[0x37]; // 0x129(0x37) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFunctionInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFunctionOutput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionFunctionOutput : public UMaterialExpression	
	{
	public:
		FName OutputName; // 0xB0(0x4)
		unsigned char UnknownData04_6[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY
		FString Description; // 0xB8(0x10)
		int32_t SortPriority; // 0xC8(0x4)
		unsigned char UnknownData05_6[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY
		FExpressionInput A; // 0xD0(0x28)
		bool bLastPreviewed : 1; // 0xF8:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0xF9(0x3) UNKNOWN PROPERTY
		FGuid ID; // 0xFC(0x10)
		unsigned char UnknownData07_7[0x4]; // 0x10C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFunctionOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGenericConstant
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionGenericConstant : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGenericConstant");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstantDouble
	// Inherited from UMaterialExpressionGenericConstant -> UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionConstantDouble : public UMaterialExpressionGenericConstant	
	{
	public:
		double Value; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstantDouble");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGetLocal
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionGetLocal : public UMaterialExpression	
	{
	public:
		FName LocalName; // 0xB0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGetLocal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGetMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x40 (0xF0 - 0xB0)
	class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)
		TArray AttributeGetTypes; // 0xE0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGetMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGIReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionGIReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput StaticIndirect; // 0xD8(0x28)
		FExpressionInput DynamicIndirect; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGIReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionHairAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionHairAttributes : public UMaterialExpression	
	{
	public:
		bool bUseTangentSpace : 1; // 0xB0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionHairAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionHairColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionHairColor : public UMaterialExpression	
	{
	public:
		FExpressionInput Melanin; // 0xB0(0x28)
		FExpressionInput Redness; // 0xD8(0x28)
		FExpressionInput DyeColor; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionHairColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionHsvToRgb
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionHsvToRgb : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionHsvToRgb");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionIf
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xD8 (0x188 - 0xB0)
	class UMaterialExpressionIf : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput AGreaterThanB; // 0x100(0x28)
		FExpressionInput AEqualsB; // 0x128(0x28)
		FExpressionInput ALessThanB; // 0x150(0x28)
		float EqualsThreshold; // 0x178(0x4)
		float ConstB; // 0x17C(0x4)
		float ConstAEqualsB; // 0x180(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x184(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionIf");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionIfThenElse
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionIfThenElse : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput Then; // 0xB0(0x8)
		FExpressionExecOutput Else; // 0xB8(0x8)
		FExpressionInput Condition; // 0xC0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionIfThenElse");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionInverseLinearInterpolate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput Value; // 0x100(0x28)
		float ConstA; // 0x128(0x4)
		float ConstB; // 0x12C(0x4)
		float ConstValue; // 0x130(0x4)
		bool bClampResult; // 0x134(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x135(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionInverseLinearInterpolate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionIsOrthographic
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionIsOrthographic : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionIsOrthographic");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLength
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLength : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLength");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLightmapUVs
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionLightmapUVs : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLightmapUVs");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLightmassReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionLightmassReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Realtime; // 0xB0(0x28)
		FExpressionInput Lightmass; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLightmassReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLightVector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionLightVector : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLightVector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLinearInterpolate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionLinearInterpolate : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput Alpha; // 0x100(0x28)
		float ConstA; // 0x128(0x4)
		float ConstB; // 0x12C(0x4)
		float ConstAlpha; // 0x130(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLinearInterpolate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLocalPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionLocalPosition : public UMaterialExpression	
	{
	public:
		EPositionIncludedOffsets IncludedOffsets; // 0xB0(0x4)
		ELocalPositionOrigin LocalOrigin; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLocalPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLogarithm
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLogarithm : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLogarithm");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLogarithm10
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLogarithm10 : public UMaterialExpression	
	{
	public:
		FExpressionInput X; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLogarithm10");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLogarithm2
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLogarithm2 : public UMaterialExpression	
	{
	public:
		FExpressionInput X; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLogarithm2");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMakeMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x438 (0x4E8 - 0xB0)
	class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Anisotropy; // 0x150(0x28)
		FExpressionInput EmissiveColor; // 0x178(0x28)
		FExpressionInput Opacity; // 0x1A0(0x28)
		FExpressionInput OpacityMask; // 0x1C8(0x28)
		FExpressionInput Normal; // 0x1F0(0x28)
		FExpressionInput Tangent; // 0x218(0x28)
		FExpressionInput WorldPositionOffset; // 0x240(0x28)
		FExpressionInput SubsurfaceColor; // 0x268(0x28)
		FExpressionInput ClearCoat; // 0x290(0x28)
		FExpressionInput ClearCoatRoughness; // 0x2B8(0x28)
		FExpressionInput AmbientOcclusion; // 0x2E0(0x28)
		FExpressionInput Refraction; // 0x308(0x28)
		FExpressionInput CustomizedUVs; // 0x330(0x140)
		FExpressionInput PixelDepthOffset; // 0x470(0x28)
		FExpressionInput ShadingModel; // 0x498(0x28)
		FExpressionInput Displacement; // 0x4C0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMakeMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMapARPassthroughCameraUV
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMapARPassthroughCameraUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialAttributeLayers
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x190 (0x240 - 0xB0)
	class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput Input; // 0xB0(0x30)
		FMaterialLayersFunctions DefaultLayers; // 0xE0(0x128)
		TArray LayerCallers; // 0x208(0x10)
		int32_t NumActiveLayerCallers; // 0x218(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x21C(0x4) UNKNOWN PROPERTY
		TArray BlendCallers; // 0x220(0x10)
		int32_t NumActiveBlendCallers; // 0x230(0x4)
		bool bIsLayerGraphBuilt; // 0x234(0x1)
		unsigned char UnknownData03_7[0xB]; // 0x235(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialAttributeLayers");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialFunctionCall
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression	
	{
	public:
		UMaterialFunctionInterface MaterialFunction; // 0xB0(0x8)
		TArray FunctionInputs; // 0xB8(0x10)
		TArray FunctionOutputs; // 0xC8(0x10)
		FMaterialParameterInfo FunctionParameterInfo; // 0xD8(0xC)
		unsigned char UnknownData01_7[0x4]; // 0xE4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialFunctionCall");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialLayerOutput
	// Inherited from UMaterialExpressionFunctionOutput -> UMaterialExpression -> UObject
	// Size: 0x0 (0x110 - 0x110)
	class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialLayerOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialProxyReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Realtime; // 0xB0(0x28)
		FExpressionInput MaterialProxy; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialProxyReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionMaterialSample : public UMaterialExpression	
	{
	public:
		UMaterialInterface MaterialReference; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMax
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionMax : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMax");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMeshPaintTextureObject
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionMeshPaintTextureObject : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMeshPaintTextureObject");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMin
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionMin : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMin");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionModulo
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionModulo : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionModulo");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMultiply
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionMultiply : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMultiply");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRerouteBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionRerouteBase : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRerouteBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNamedRerouteBase
	// Inherited from UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNamedRerouteBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNamedRerouteDeclaration
	// Inherited from UMaterialExpressionNamedRerouteBase -> UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		FName Name; // 0xD8(0x4)
		FLinearColor NodeColor; // 0xDC(0x10)
		FGuid VariableGuid; // 0xEC(0x10)
		unsigned char UnknownData01_7[0x4]; // 0xFC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNamedRerouteDeclaration");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNamedRerouteUsage
	// Inherited from UMaterialExpressionNamedRerouteBase -> UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x18 (0xC8 - 0xB0)
	class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase	
	{
	public:
		UMaterialExpressionNamedRerouteDeclaration Declaration; // 0xB0(0x8)
		FGuid DeclarationGuid; // 0xB8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNamedRerouteUsage");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNaniteReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionNaniteReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Nanite; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNaniteReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNeuralNetworkInput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionNeuralNetworkInput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		FExpressionInput Input0; // 0xD8(0x28)
		FExpressionInput Mask; // 0x100(0x28)
		TEnumAsByte NeuralIndexType; // 0x128(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x129(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNeuralNetworkInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNeuralNetworkOutput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionNeuralNetworkOutput : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte NeuralIndexType; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNeuralNetworkOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNoise
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionNoise : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData04_6[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY
		FExpressionInput FilterWidth; // 0xE0(0x28)
		float Scale; // 0x108(0x4)
		int32_t Quality; // 0x10C(0x4)
		TEnumAsByte NoiseFunction; // 0x110(0x1)
		unsigned char UnknownData05_6[0x3]; // 0x111(0x3) UNKNOWN PROPERTY
		bool bTurbulence : 1; // 0x114:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		int32_t Levels; // 0x118(0x4)
		float OutputMin; // 0x11C(0x4)
		float OutputMax; // 0x120(0x4)
		float LevelScale; // 0x124(0x4)
		bool bTiling : 1; // 0x128:0(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x129(0x3) UNKNOWN PROPERTY
		uint32_t RepeatSize; // 0x12C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNoise");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNormalize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionNormalize : public UMaterialExpression	
	{
	public:
		FExpressionInput VectorInput; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNormalize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectBounds : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectLocalBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectLocalBounds : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectLocalBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectOrientation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectOrientation : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectOrientation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectPositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionObjectPositionWS : public UMaterialExpression	
	{
	public:
		EPositionOrigin OriginType; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectPositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectRadius
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectRadius : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectRadius");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionOneMinus
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionOneMinus : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionOneMinus");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPanner
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionPanner : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinate; // 0xB0(0x28)
		FExpressionInput Time; // 0xD8(0x28)
		FExpressionInput Speed; // 0x100(0x28)
		float SpeedX; // 0x128(0x4)
		float SpeedY; // 0x12C(0x4)
		uint32_t ConstCoordinate; // 0x130(0x4)
		bool bFractionalPart; // 0x134(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x135(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPanner");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleDirection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleDirection : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleDirection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleMacroUV
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleMacroUV : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleMacroUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleMotionBlurFade
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleMotionBlurFade");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticlePositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionParticlePositionWS : public UMaterialExpression	
	{
	public:
		EPositionOrigin OriginType; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticlePositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleRadius
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleRadius : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleRadius");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleRandom
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleRandom : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleRandom");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleRelativeTime
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleRelativeTime : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleRelativeTime");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSize : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSpeed
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSpeed : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSpeed");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSpriteRotation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSpriteRotation : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSpriteRotation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSubUV
	// Inherited from UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x8 (0x1C0 - 0x1B8)
	class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample	
	{
	public:
		bool bBlend : 1; // 0x1B8:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x1B9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSubUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSubUVProperties
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSubUVProperties");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPathTracingBufferTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionPathTracingBufferTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte PathTracingBufferTextureId; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPathTracingBufferTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPathTracingQualitySwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionPathTracingQualitySwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Normal; // 0xB0(0x28)
		FExpressionInput PathTraced; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPathTracingQualitySwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPathTracingRayTypeSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xC8 (0x178 - 0xB0)
	class UMaterialExpressionPathTracingRayTypeSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Main; // 0xB0(0x28)
		FExpressionInput Shadow; // 0xD8(0x28)
		FExpressionInput IndirectDiffuse; // 0x100(0x28)
		FExpressionInput IndirectSpecular; // 0x128(0x28)
		FExpressionInput IndirectVolume; // 0x150(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPathTracingRayTypeSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceCustomData
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression	
	{
	public:
		FExpressionInput DefaultValue; // 0xB0(0x28)
		float ConstDefaultValue; // 0xD8(0x4)
		uint32_t DataIndex; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceCustomData");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x40 (0xF0 - 0xB0)
	class UMaterialExpressionPerInstanceCustomData3Vector : public UMaterialExpression	
	{
	public:
		FExpressionInput DefaultValue; // 0xB0(0x28)
		FLinearColor ConstDefaultValue; // 0xD8(0x10)
		uint32_t DataIndex; // 0xE8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xEC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceCustomData3Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceFadeAmount
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceFadeAmount");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceRandom
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPerInstanceRandom : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceRandom");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPinBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x18 (0xC8 - 0xB0)
	class UMaterialExpressionPinBase : public UMaterialExpression	
	{
	public:
		TArray ReroutePins; // 0xB0(0x10)
		TEnumAsByte PinDirection; // 0xC0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPinBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPixelDepth
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPixelDepth : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPixelDepth");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPixelNormalWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPixelNormalWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPixelNormalWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPostVolumeUserFlagTest
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionPostVolumeUserFlagTest : public UMaterialExpression	
	{
	public:
		FExpressionInput BitIndex; // 0xB0(0x28)
		int32_t ConstBitIndex; // 0xD8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPostVolumeUserFlagTest");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPower
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionPower : public UMaterialExpression	
	{
	public:
		FExpressionInput base; // 0xB0(0x28)
		FExpressionInput Exponent; // 0xD8(0x28)
		float ConstExponent; // 0x100(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x104(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPower");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPrecomputedAOMask
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPrecomputedAOMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreSkinnedLocalBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreSkinnedLocalBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreSkinnedNormal
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreSkinnedNormal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreSkinnedPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreSkinnedPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreviousFrameSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput CurrentFrame; // 0xB0(0x28)
		FExpressionInput PreviousFrame; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreviousFrameSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionQualitySwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xC8 (0x178 - 0xB0)
	class UMaterialExpressionQualitySwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Inputs; // 0xD8(0xA0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionQualitySwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRayTracingQualitySwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Normal; // 0xB0(0x28)
		FExpressionInput RayTraced; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRayTracingQualitySwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionReflectionCapturePassSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Reflection; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionReflectionCapturePassSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionReflectionVectorWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionReflectionVectorWS : public UMaterialExpression	
	{
	public:
		FExpressionInput CustomWorldNormal; // 0xB0(0x28)
		bool bNormalizeCustomWorldNormal : 1; // 0xD8:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionReflectionVectorWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRequiredSamplersSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionRequiredSamplersSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput InputTrue; // 0xB0(0x28)
		FExpressionInput InputFalse; // 0xD8(0x28)
		uint32_t RequiredSamplers; // 0x100(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x104(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRequiredSamplersSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionReroute
	// Inherited from UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionReroute");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRgbToHsv
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionRgbToHsv : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRgbToHsv");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRotateAboutAxis
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xA8 (0x158 - 0xB0)
	class UMaterialExpressionRotateAboutAxis : public UMaterialExpression	
	{
	public:
		FExpressionInput NormalizedRotationAxis; // 0xB0(0x28)
		FExpressionInput RotationAngle; // 0xD8(0x28)
		FExpressionInput PivotPoint; // 0x100(0x28)
		FExpressionInput Position; // 0x128(0x28)
		float Period; // 0x150(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x154(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRotateAboutAxis");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRotator
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionRotator : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinate; // 0xB0(0x28)
		FExpressionInput Time; // 0xD8(0x28)
		float CenterX; // 0x100(0x4)
		float CenterY; // 0x104(0x4)
		float Speed; // 0x108(0x4)
		uint32_t ConstCoordinate; // 0x10C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRotator");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRound
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionRound : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRound");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x168 (0x218 - 0xB0)
	class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Specular; // 0xD8(0x28)
		FExpressionInput Roughness; // 0x100(0x28)
		FExpressionInput Normal; // 0x128(0x28)
		FExpressionInput WorldHeight; // 0x150(0x28)
		FExpressionInput Opacity; // 0x178(0x28)
		FExpressionInput Mask; // 0x1A0(0x28)
		FExpressionInput Displacement; // 0x1C8(0x28)
		FExpressionInput Mask4; // 0x1F0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput VirtualTextureOutput; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xD8 (0x188 - 0xB0)
	class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		FExpressionInput WorldPosition; // 0xD8(0x28)
		FExpressionInput MipValue; // 0x100(0x28)
		FExpressionInput DDX; // 0x128(0x28)
		FExpressionInput DDY; // 0x150(0x28)
		URuntimeVirtualTexture VirtualTexture; // 0x178(0x8)
		ERuntimeVirtualTextureMaterialType MaterialType; // 0x180(0x1)
		bool bSinglePhysicalSpace; // 0x181(0x1)
		bool bAdaptive; // 0x182(0x1)
		EPositionOrigin WorldPositionOriginType; // 0x183(0x1)
		TEnumAsByte TextureAddressMode; // 0x184(0x1)
		TEnumAsByte MipValueMode; // 0x185(0x1)
		bool bEnableFeedback; // 0x186(0x1)
		unsigned char UnknownData01_7[0x1]; // 0x187(0x1) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
	// Inherited from UMaterialExpressionRuntimeVirtualTextureSample -> UMaterialExpression -> UObject
	// Size: 0x20 (0x1A8 - 0x188)
	class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample	
	{
	public:
		FName ParameterName; // 0x188(0x4)
		FGuid ExpressionGUID; // 0x18C(0x10)
		FName Group; // 0x19C(0x4)
		int32_t SortPriority; // 0x1A0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x1A4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSamplePhysicsVectorField
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte FieldTarget; // 0xD9(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSamplePhysicsVectorField");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSamplePhysicsScalarField
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte FieldTarget; // 0xD9(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSamplePhysicsScalarField");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSamplePhysicsIntegerField
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte FieldTarget; // 0xD9(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSamplePhysicsIntegerField");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSaturate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSaturate : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSaturate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionSceneColor : public UMaterialExpression	
	{
	public:
		TEnumAsByte InputMode; // 0xB0(0x1)
		unsigned char UnknownData01_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0xB8(0x28)
		FExpressionInput OffsetFraction; // 0xE0(0x28)
		FVector2D ConstInput; // 0x108(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneDepth
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionSceneDepth : public UMaterialExpression	
	{
	public:
		TEnumAsByte InputMode; // 0xB0(0x1)
		unsigned char UnknownData01_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0xB8(0x28)
		FExpressionInput Coordinates; // 0xE0(0x28)
		FVector2D ConstInput; // 0x108(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneDepth");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneDepthWithoutWater
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x48 (0xF8 - 0xB0)
	class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression	
	{
	public:
		TEnumAsByte InputMode; // 0xB0(0x1)
		unsigned char UnknownData02_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0xB8(0x28)
		FVector2D ConstInput; // 0xE0(0x10)
		float FallbackDepth; // 0xF0(0x4)
		unsigned char UnknownData03_7[0x4]; // 0xF4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneDepthWithoutWater");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneTexelSize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSceneTexelSize : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneTexelSize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSceneTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte SceneTextureId; // 0xD8(0x1)
		bool bFiltered; // 0xD9(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionScreenPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionScreenPosition : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionScreenPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSetLocal
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionSetLocal : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput Exec; // 0xB0(0x8)
		FExpressionInput Value; // 0xB8(0x28)
		FName LocalName; // 0xE0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xE4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSetLocal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSetMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression	
	{
	public:
		TArray Inputs; // 0xB0(0x10)
		TArray AttributeSetTypes; // 0xC0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSetMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShaderStageSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionShaderStageSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput PixelShader; // 0xB0(0x28)
		FExpressionInput VertexShader; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShaderStageSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShadingModel
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionShadingModel : public UMaterialExpression	
	{
	public:
		TEnumAsByte ShadingModel; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShadingModel");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShadingPathSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xA0 (0x150 - 0xB0)
	class UMaterialExpressionShadingPathSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Inputs; // 0xD8(0x78)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShadingPathSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShadowReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionShadowReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Shadow; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShadowReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSign
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSign : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSign");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Period; // 0xD8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0xA0 (0x150 - 0xB0)
	class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput ScatteringCoefficients; // 0xB0(0x28)
		FExpressionInput AbsorptionCoefficients; // 0xD8(0x28)
		FExpressionInput PhaseG; // 0x100(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x128(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightDirection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData02_6[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY
		FExpressionInput WorldPosition; // 0xB8(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xE0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminanceOnGround
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightIlluminanceOnGround : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminanceOnGround");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY
		FExpressionInput DiskAngularDiameterOverride; // 0xB8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyLightEnvMapSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSkyLightEnvMapSample : public UMaterialExpression	
	{
	public:
		FExpressionInput Direction; // 0xB0(0x28)
		FExpressionInput Roughness; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyLightEnvMapSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSmoothStep
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionSmoothStep : public UMaterialExpression	
	{
	public:
		FExpressionInput Min; // 0xB0(0x28)
		FExpressionInput Max; // 0xD8(0x28)
		FExpressionInput Value; // 0x100(0x28)
		float ConstMin; // 0x128(0x4)
		float ConstMax; // 0x12C(0x4)
		float ConstValue; // 0x130(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSmoothStep");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSobol
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x90 (0x140 - 0xB0)
	class UMaterialExpressionSobol : public UMaterialExpression	
	{
	public:
		FExpressionInput Cell; // 0xB0(0x28)
		FExpressionInput Index; // 0xD8(0x28)
		FExpressionInput Seed; // 0x100(0x28)
		uint32_t ConstIndex; // 0x128(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x12C(0x4) UNKNOWN PROPERTY
		FVector2D ConstSeed; // 0x130(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSobol");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionSparseVolumeTextureBase : public UMaterialExpression	
	{
	public:
		USparseVolumeTexture SparseVolumeTexture; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureObject
	// Inherited from UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0xB8 - 0xB8)
	class UMaterialExpressionSparseVolumeTextureObject : public UMaterialExpressionSparseVolumeTextureBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureObject");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureSample
	// Inherited from UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0xD0 (0x188 - 0xB8)
	class UMaterialExpressionSparseVolumeTextureSample : public UMaterialExpressionSparseVolumeTextureBase	
	{
	public:
		FExpressionInput Coordinates; // 0xB8(0x28)
		FExpressionInput TextureObject; // 0xE0(0x28)
		FExpressionInput MipValue; // 0x108(0x28)
		FExpressionInput CoordinatesDX; // 0x130(0x28)
		FExpressionInput CoordinatesDY; // 0x158(0x28)
		TEnumAsByte MipValueMode; // 0x180(0x1)
		TEnumAsByte SamplerSource; // 0x181(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x182(0x2) UNKNOWN PROPERTY
		int32_t ConstMipValue; // 0x184(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureSampleParameter
	// Inherited from UMaterialExpressionSparseVolumeTextureSample -> UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0x20 (0x1A8 - 0x188)
	class UMaterialExpressionSparseVolumeTextureSampleParameter : public UMaterialExpressionSparseVolumeTextureSample	
	{
	public:
		FName ParameterName; // 0x188(0x4)
		FGuid ExpressionGUID; // 0x18C(0x10)
		FName Group; // 0x19C(0x4)
		int32_t SortPriority; // 0x1A0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x1A4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureObjectParameter
	// Inherited from UMaterialExpressionSparseVolumeTextureSampleParameter -> UMaterialExpressionSparseVolumeTextureSample -> UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x1A8 - 0x1A8)
	class UMaterialExpressionSparseVolumeTextureObjectParameter : public UMaterialExpressionSparseVolumeTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureObjectParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSpeedTree
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xB0 (0x160 - 0xB0)
	class UMaterialExpressionSpeedTree : public UMaterialExpression	
	{
	public:
		FExpressionInput GeometryInput; // 0xB0(0x28)
		FExpressionInput WindInput; // 0xD8(0x28)
		FExpressionInput LODInput; // 0x100(0x28)
		FExpressionInput ExtraBendWS; // 0x128(0x28)
		TEnumAsByte GeometryType; // 0x150(0x1)
		TEnumAsByte WindType; // 0x151(0x1)
		TEnumAsByte LODType; // 0x152(0x1)
		unsigned char UnknownData02_6[0x1]; // 0x153(0x1) UNKNOWN PROPERTY
		float BillboardThreshold; // 0x154(0x4)
		bool bAccurateWindVelocities; // 0x158(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x159(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSpeedTree");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSphereMask
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xA8 (0x158 - 0xB0)
	class UMaterialExpressionSphereMask : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput Radius; // 0x100(0x28)
		FExpressionInput Hardness; // 0x128(0x28)
		float AttenuationRadius; // 0x150(0x4)
		float HardnessPercent; // 0x154(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSphereMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSphericalParticleOpacity
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression	
	{
	public:
		FExpressionInput Density; // 0xB0(0x28)
		float ConstantDensity; // 0xD8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSphericalParticleOpacity");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSquareRoot
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSquareRoot : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSquareRoot");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSRGBColorToWorkingColorSpace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSRGBColorToWorkingColorSpace : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSRGBColorToWorkingColorSpace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticBool
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionStaticBool : public UMaterialExpression	
	{
	public:
		bool Value : 1; // 0xB0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticBool");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticBoolParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x8 (0xD8 - 0xD0)
	class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter	
	{
	public:
		bool DefaultValue : 1; // 0xD0:0(0x1)
		bool DynamicBranch : 1; // 0xD0:1(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticBoolParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticComponentMaskParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x30 (0x100 - 0xD0)
	class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter	
	{
	public:
		FExpressionInput Input; // 0xD0(0x28)
		bool DefaultR : 1; // 0xF8:0(0x1)
		bool DefaultG : 1; // 0xF8:1(0x1)
		bool DefaultB : 1; // 0xF8:2(0x1)
		bool DefaultA : 1; // 0xF8:3(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xF9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticComponentMaskParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionStaticSwitch : public UMaterialExpression	
	{
	public:
		bool DefaultValue : 1; // 0xB0:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput A; // 0xB8(0x28)
		FExpressionInput B; // 0xE0(0x28)
		FExpressionInput Value; // 0x108(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticSwitchParameter
	// Inherited from UMaterialExpressionStaticBoolParameter -> UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x50 (0x128 - 0xD8)
	class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter	
	{
	public:
		FExpressionInput A; // 0xD8(0x28)
		FExpressionInput B; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticSwitchParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStep
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionStep : public UMaterialExpression	
	{
	public:
		FExpressionInput Y; // 0xB0(0x28)
		FExpressionInput X; // 0xD8(0x28)
		float ConstY; // 0x100(0x4)
		float ConstX; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStep");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateBSDF
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSubstrateBSDF : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateShadingModels
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x360 (0x410 - 0xB0)
	class UMaterialExpressionSubstrateShadingModels : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Anisotropy; // 0x150(0x28)
		FExpressionInput EmissiveColor; // 0x178(0x28)
		FExpressionInput Normal; // 0x1A0(0x28)
		FExpressionInput Tangent; // 0x1C8(0x28)
		FExpressionInput SubsurfaceColor; // 0x1F0(0x28)
		FExpressionInput ClearCoat; // 0x218(0x28)
		FExpressionInput ClearCoatRoughness; // 0x240(0x28)
		FExpressionInput Opacity; // 0x268(0x28)
		FExpressionInput TransmittanceColor; // 0x290(0x28)
		FExpressionInput WaterScatteringCoefficients; // 0x2B8(0x28)
		FExpressionInput WaterAbsorptionCoefficients; // 0x2E0(0x28)
		FExpressionInput WaterPhaseG; // 0x308(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x330(0x28)
		FExpressionInput ClearCoatNormal; // 0x358(0x28)
		FExpressionInput CustomTangent; // 0x380(0x28)
		FShadingModelMaterialInput ShadingModel; // 0x3A8(0x28)
		unsigned char UnknownData02_6[0x8]; // 0x3D0(0x8) UNKNOWN PROPERTY
		FExpressionInput ThinTranslucentSurfaceCoverage; // 0x3D8(0x28)
		TEnumAsByte ShadingModelOverride; // 0x400(0x1)
		unsigned char UnknownData03_6[0x7]; // 0x401(0x7) UNKNOWN PROPERTY
		USubsurfaceProfile SubsurfaceProfile; // 0x408(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateShadingModels");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSlabBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x2E8 (0x398 - 0xB0)
	class UMaterialExpressionSubstrateSlabBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DiffuseAlbedo; // 0xB0(0x28)
		FExpressionInput F0; // 0xD8(0x28)
		FExpressionInput F90; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Anisotropy; // 0x150(0x28)
		FExpressionInput Normal; // 0x178(0x28)
		FExpressionInput Tangent; // 0x1A0(0x28)
		FExpressionInput SSSMFP; // 0x1C8(0x28)
		FExpressionInput SSSMFPScale; // 0x1F0(0x28)
		FExpressionInput SSSPhaseAnisotropy; // 0x218(0x28)
		FExpressionInput EmissiveColor; // 0x240(0x28)
		FExpressionInput SecondRoughness; // 0x268(0x28)
		FExpressionInput SecondRoughnessWeight; // 0x290(0x28)
		FExpressionInput FuzzRoughness; // 0x2B8(0x28)
		FExpressionInput FuzzAmount; // 0x2E0(0x28)
		FExpressionInput FuzzColor; // 0x308(0x28)
		FExpressionInput GlintValue; // 0x330(0x28)
		FExpressionInput GlintUV; // 0x358(0x28)
		USubsurfaceProfile SubsurfaceProfile; // 0x380(0x8)
		USpecularProfile SpecularProfile; // 0x388(0x8)
		bool bUseSSSDiffusion : 1; // 0x390:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x391(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSlabBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSimpleClearCoatBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x118 (0x1C8 - 0xB0)
	class UMaterialExpressionSubstrateSimpleClearCoatBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DiffuseAlbedo; // 0xB0(0x28)
		FExpressionInput F0; // 0xD8(0x28)
		FExpressionInput Roughness; // 0x100(0x28)
		FExpressionInput ClearCoatCoverage; // 0x128(0x28)
		FExpressionInput ClearCoatRoughness; // 0x150(0x28)
		FExpressionInput Normal; // 0x178(0x28)
		FExpressionInput EmissiveColor; // 0x1A0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSimpleClearCoatBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateVolumetricFogCloudBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0xA8 (0x158 - 0xB0)
	class UMaterialExpressionSubstrateVolumetricFogCloudBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Albedo; // 0xB0(0x28)
		FExpressionInput Extinction; // 0xD8(0x28)
		FExpressionInput EmissiveColor; // 0x100(0x28)
		FExpressionInput AmbientOcclusion; // 0x128(0x28)
		bool bEmissiveOnly : 1; // 0x150:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x151(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateVolumetricFogCloudBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateUnlitBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionSubstrateUnlitBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput EmissiveColor; // 0xB0(0x28)
		FExpressionInput TransmittanceColor; // 0xD8(0x28)
		FExpressionInput Normal; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateUnlitBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateHairBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x118 (0x1C8 - 0xB0)
	class UMaterialExpressionSubstrateHairBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Scatter; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Backlit; // 0x150(0x28)
		FExpressionInput Tangent; // 0x178(0x28)
		FExpressionInput EmissiveColor; // 0x1A0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateHairBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateEyeBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x148 (0x1F8 - 0xB0)
	class UMaterialExpressionSubstrateEyeBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DiffuseColor; // 0xB0(0x28)
		FExpressionInput Roughness; // 0xD8(0x28)
		FExpressionInput CorneaNormal; // 0x100(0x28)
		FExpressionInput IrisNormal; // 0x128(0x28)
		FExpressionInput IrisPlaneNormal; // 0x150(0x28)
		FExpressionInput IrisMask; // 0x178(0x28)
		FExpressionInput IrisDistance; // 0x1A0(0x28)
		FExpressionInput EmissiveColor; // 0x1C8(0x28)
		USubsurfaceProfile SubsurfaceProfile; // 0x1F0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateEyeBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSingleLayerWaterBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x1B8 (0x268 - 0xB0)
	class UMaterialExpressionSubstrateSingleLayerWaterBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Normal; // 0x150(0x28)
		FExpressionInput EmissiveColor; // 0x178(0x28)
		FExpressionInput TopMaterialOpacity; // 0x1A0(0x28)
		FExpressionInput WaterAlbedo; // 0x1C8(0x28)
		FExpressionInput WaterExtinction; // 0x1F0(0x28)
		FExpressionInput WaterPhaseG; // 0x218(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x240(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSingleLayerWaterBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateLightFunction
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSubstrateLightFunction : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Color; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateLightFunction");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstratePostProcess
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstratePostProcess : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Color; // 0xB0(0x28)
		FExpressionInput Opacity; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstratePostProcess");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateUI
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateUI : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Color; // 0xB0(0x28)
		FExpressionInput Opacity; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateUI");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateConvertToDecal
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateConvertToDecal : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DecalMaterial; // 0xB0(0x28)
		FExpressionInput Coverage; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateConvertToDecal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateConvertMaterialAttributes
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0xE0 (0x190 - 0xB0)
	class UMaterialExpressionSubstrateConvertMaterialAttributes : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)
		FExpressionInput WaterScatteringCoefficients; // 0xE0(0x28)
		FExpressionInput WaterAbsorptionCoefficients; // 0x108(0x28)
		FExpressionInput WaterPhaseG; // 0x130(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x158(0x28)
		USubsurfaceProfile SubsurfaceProfile; // 0x180(0x8)
		TEnumAsByte ShadingModelOverride; // 0x188(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x189(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateConvertMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateHorizontalMixing
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionSubstrateHorizontalMixing : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Background; // 0xB0(0x28)
		FExpressionInput Foreground; // 0xD8(0x28)
		FExpressionInput Mix; // 0x100(0x28)
		bool bUseParameterBlending : 1; // 0x128:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x129(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateHorizontalMixing");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateVerticalLayering
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionSubstrateVerticalLayering : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Top; // 0xB0(0x28)
		FExpressionInput base; // 0xD8(0x28)
		FExpressionInput Thickness; // 0x100(0x28)
		bool bUseParameterBlending : 1; // 0x128:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x129(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateVerticalLayering");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateAdd
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionSubstrateAdd : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		bool bUseParameterBlending : 1; // 0x100:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x101(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateAdd");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateWeight
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateWeight : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput Weight; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateWeight");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateUtilityBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSubstrateUtilityBase : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateUtilityBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateTransmittanceToMFP
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateTransmittanceToMFP : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput TransmittanceColor; // 0xB0(0x28)
		FExpressionInput Thickness; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateTransmittanceToMFP");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateMetalnessToDiffuseAlbedoF0
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionSubstrateMetalnessToDiffuseAlbedoF0 : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateMetalnessToDiffuseAlbedoF0");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateHazinessToSecondaryRoughness
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateHazinessToSecondaryRoughness : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput BaseRoughness; // 0xB0(0x28)
		FExpressionInput Haziness; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateHazinessToSecondaryRoughness");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateThinFilm
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0xC8 (0x178 - 0xB0)
	class UMaterialExpressionSubstrateThinFilm : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput Normal; // 0xB0(0x28)
		FExpressionInput F0; // 0xD8(0x28)
		FExpressionInput F90; // 0x100(0x28)
		FExpressionInput Thickness; // 0x128(0x28)
		FExpressionInput IOR; // 0x150(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateThinFilm");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateGetAttributes
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSubstrateGetAttributes : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateGetAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSetAttributes
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionSubstrateSetAttributes : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput FrontMaterial; // 0xB0(0x28)
		FMaterialAttributesInput NonSubstrateAttributes; // 0xD8(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSetAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubsurfaceMediumMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubsurfaceMediumMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput MeanFreePath; // 0xB0(0x28)
		FExpressionInput ScatteringDistribution; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubsurfaceMediumMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubtract
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionSubtract : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubtract");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionSwitch : public UMaterialExpression	
	{
	public:
		FString Description; // 0xB0(0x10)
		FExpressionInput SwitchValue; // 0xC0(0x28)
		float ConstSwitchValue; // 0xE8(0x4)
		unsigned char UnknownData02_6[0x4]; // 0xEC(0x4) UNKNOWN PROPERTY
		FExpressionInput Default; // 0xF0(0x28)
		float ConstDefault; // 0x118(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x11C(0x4) UNKNOWN PROPERTY
		TArray Inputs; // 0x120(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTangent
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTangent : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Period; // 0xD8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTangent");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTangentOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTangentOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTemporalSobol
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionTemporalSobol : public UMaterialExpression	
	{
	public:
		FExpressionInput Index; // 0xB0(0x28)
		FExpressionInput Seed; // 0xD8(0x28)
		uint32_t ConstIndex; // 0x100(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x104(0x4) UNKNOWN PROPERTY
		FVector2D ConstSeed; // 0x108(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTemporalSobol");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureCollection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionTextureCollection : public UMaterialExpression	
	{
	public:
		UTextureCollection TextureCollection; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureCollection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureCollectionParameter
	// Inherited from UMaterialExpressionTextureCollection -> UMaterialExpression -> UObject
	// Size: 0x20 (0xD8 - 0xB8)
	class UMaterialExpressionTextureCollectionParameter : public UMaterialExpressionTextureCollection	
	{
	public:
		FName ParameterName; // 0xB8(0x4)
		FGuid ExpressionGUID; // 0xBC(0x10)
		FName Group; // 0xCC(0x4)
		int32_t SortPriority; // 0xD0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureCollectionParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureCoordinate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionTextureCoordinate : public UMaterialExpression	
	{
	public:
		int32_t CoordinateIndex; // 0xB0(0x4)
		float UTiling; // 0xB4(0x4)
		float VTiling; // 0xB8(0x4)
		bool UnMirrorU : 1; // 0xBC:0(0x1)
		bool UnMirrorV : 1; // 0xBC:1(0x1)
		unsigned char UnknownData01_7[0x3]; // 0xBD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureCoordinate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureObject
	// Inherited from UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0xC0 - 0xC0)
	class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureObject");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureObjectFromCollection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionTextureObjectFromCollection : public UMaterialExpression	
	{
	public:
		FExpressionInput TextureCollection; // 0xB0(0x28)
		UTextureCollection TextureCollectionObject; // 0xD8(0x8)
		FExpressionInput CollectionIndex; // 0xE0(0x28)
		int32_t ConstCollectionIndex; // 0x108(0x4)
		ETextureCollectionMemberType TextureType; // 0x10C(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureObjectFromCollection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureObjectParameter
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureObjectParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureProperty
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTextureProperty : public UMaterialExpression	
	{
	public:
		FExpressionInput TextureObject; // 0xB0(0x28)
		TEnumAsByte Property; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureProperty");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameter2DArray
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameter2DArray");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterCube
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterCube");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameterCubeArray : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterCubeArray");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterSubUV
	// Inherited from UMaterialExpressionTextureSampleParameter2D -> UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x8 (0x220 - 0x218)
	class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D	
	{
	public:
		bool bBlend : 1; // 0x218:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x219(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterSubUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterVolume
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterVolume");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput TransmittanceColor; // 0xB0(0x28)
		FExpressionInput SurfaceCoverage; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionThinTranslucentMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTime
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionTime : public UMaterialExpression	
	{
	public:
		bool bIgnorePause : 1; // 0xB0:0(0x1)
		bool bOverride_Period : 1; // 0xB0:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0xB1(0x3) UNKNOWN PROPERTY
		float Period; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTime");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTransform
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTransform : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		TEnumAsByte TransformSourceType; // 0xD8(0x1)
		TEnumAsByte TransformType; // 0xD9(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTransform");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTransformPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTransformPosition : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		TEnumAsByte TransformSourceType; // 0xD8(0x1)
		TEnumAsByte TransformType; // 0xD9(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTransformPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTruncate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionTruncate : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTruncate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTruncateLWC
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionTruncateLWC : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTruncateLWC");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTwoSidedSign
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionTwoSidedSign : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTwoSidedSign");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionUserSceneTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionUserSceneTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		FName UserSceneTexture; // 0xD8(0x4)
		bool bFiltered; // 0xDC(0x1)
		bool bClamped; // 0xDD(0x1)
		unsigned char UnknownData01_7[0x2]; // 0xDE(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionUserSceneTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVectorNoise
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionVectorNoise : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte NoiseFunction; // 0xD9(0x1)
		unsigned char UnknownData02_6[0x2]; // 0xDA(0x2) UNKNOWN PROPERTY
		int32_t Quality; // 0xDC(0x4)
		bool bTiling : 1; // 0xE0:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0xE1(0x3) UNKNOWN PROPERTY
		uint32_t TileSize; // 0xE4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVectorNoise");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVertexColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexInterpolator
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		unsigned char UnknownData01_7[0x10]; // 0xD8(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexInterpolator");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexNormalWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVertexNormalWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexNormalWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexTangentWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVertexTangentWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexTangentWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionViewProperty
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionViewProperty : public UMaterialExpression	
	{
	public:
		TEnumAsByte Property; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionViewProperty");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionViewSize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionViewSize : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionViewSize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput No; // 0xB0(0x28)
		FExpressionInput Yes; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x140 (0x1F0 - 0xB0)
	class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput PhaseG; // 0xB0(0x28)
		FExpressionInput PhaseG2; // 0xD8(0x28)
		FExpressionInput PhaseBlend; // 0x100(0x28)
		FExpressionInput MultiScatteringContribution; // 0x128(0x28)
		FExpressionInput MultiScatteringOcclusion; // 0x150(0x28)
		FExpressionInput MultiScatteringEccentricity; // 0x178(0x28)
		FExpressionInput ConservativeDensity; // 0x1A0(0x28)
		float ConstPhaseG; // 0x1C8(0x4)
		float ConstPhaseG2; // 0x1CC(0x4)
		float ConstPhaseBlend; // 0x1D0(0x4)
		bool PerSamplePhaseEvaluation; // 0x1D4(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x1D5(0x3) UNKNOWN PROPERTY
		uint32_t MultiScatteringApproximationOctaveCount; // 0x1D8(0x4)
		float ConstMultiScatteringContribution; // 0x1DC(0x4)
		float ConstMultiScatteringOcclusion; // 0x1E0(0x4)
		float ConstMultiScatteringEccentricity; // 0x1E4(0x4)
		bool bGroundContribution; // 0x1E8(0x1)
		bool bGrayScaleMaterial; // 0x1E9(0x1)
		bool bRayMarchVolumeShadow; // 0x1EA(0x1)
		bool bClampMultiScatteringContribution; // 0x1EB(0x1)
		unsigned char UnknownData03_7[0x4]; // 0x1EC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput ContainsMatter; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionWhileLoop
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionWhileLoop : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput LoopBody; // 0xB0(0x8)
		FExpressionExecOutput Completed; // 0xB8(0x8)
		FExpressionInput Condition; // 0xC0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionWhileLoop");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionWorldPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionWorldPosition : public UMaterialExpression	
	{
	public:
		TEnumAsByte WorldPositionShaderOffset; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionWorldPosition");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionInterfaceEditorOnlyData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMaterialFunctionInterfaceEditorOnlyData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionInterfaceEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionEditorOnlyData
	// Inherited from UMaterialFunctionInterfaceEditorOnlyData -> UObject
	// Size: 0x30 (0x58 - 0x28)
	class UMaterialFunctionEditorOnlyData : public UMaterialFunctionInterfaceEditorOnlyData	
	{
	public:
		FMaterialExpressionCollection ExpressionCollection; // 0x28(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionInterface
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UMaterialFunctionInterface : public UObject	
	{
	public:
		FGuid StateId; // 0x28(0x10)
		EMaterialFunctionUsage MaterialFunctionUsage; // 0x38(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionInterface");
			return ret;
		}
	};


	// Class Engine.MaterialFunction
	// Inherited from UMaterialFunctionInterface -> UObject
	// Size: 0x28 (0x68 - 0x40)
	class UMaterialFunction : public UMaterialFunctionInterface	
	{
	public:
		FString Description; // 0x40(0x10)
		FString UserExposedCaption; // 0x50(0x10)
		bool bExposeToLibrary : 1; // 0x60:0(0x1)
		bool bPrefixParameterNames : 1; // 0x60:1(0x1)
		bool bEnableExecWire : 1; // 0x60:2(0x1)
		bool bEnableNewHLSLGenerator : 1; // 0x60:3(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x61(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunction");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionInstance
	// Inherited from UMaterialFunctionInterface -> UObject
	// Size: 0xB0 (0xF0 - 0x40)
	class UMaterialFunctionInstance : public UMaterialFunctionInterface	
	{
	public:
		UMaterialFunctionInterface Parent; // 0x40(0x8)
		UMaterialFunctionInterface base; // 0x48(0x8)
		TArray ScalarParameterValues; // 0x50(0x10)
		TArray VectorParameterValues; // 0x60(0x10)
		TArray DoubleVectorParameterValues; // 0x70(0x10)
		TArray TextureParameterValues; // 0x80(0x10)
		TArray TextureCollectionParameterValues; // 0x90(0x10)
		TArray FontParameterValues; // 0xA0(0x10)
		TArray StaticSwitchParameterValues; // 0xB0(0x10)
		TArray StaticComponentMaskParameterValues; // 0xC0(0x10)
		TArray RuntimeVirtualTextureParameterValues; // 0xD0(0x10)
		TArray SparseVolumeTextureParameterValues; // 0xE0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionInstance");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayer
	// Inherited from UMaterialFunction -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class UMaterialFunctionMaterialLayer : public UMaterialFunction	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayer");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayerInstance
	// Inherited from UMaterialFunctionInstance -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0xF0 - 0xF0)
	class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayerInstance");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayerBlend
	// Inherited from UMaterialFunction -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayerBlend");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayerBlendInstance
	// Inherited from UMaterialFunctionInstance -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0xF0 - 0xF0)
	class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayerBlendInstance");
			return ret;
		}
	};


	// Class Engine.MaterialInterfaceEditorOnlyData
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UMaterialInterfaceEditorOnlyData : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x18]; // 0x28(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInterfaceEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialParameterCollectionInstance
	// Inherited from UObject
	// Size: 0xF8 (0x120 - 0x28)
	class UMaterialParameterCollectionInstance : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x4]; // 0x28(0x4) UNKNOWN PROPERTY
		TWeakObjectPtr Collection; // 0x2C(0x8)
		unsigned char UnknownData03_7[0xEC]; // 0x34(0xEC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialParameterCollectionInstance");
			return ret;
		}
	};


	// Class Engine.MeshBudgetProjectSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UMeshBudgetProjectSettings : public UDeveloperSettings	
	{
	public:
		bool bEnableStaticMeshBudget; // 0x30(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TArray StaticMeshBudgetInfos; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshBudgetProjectSettings");
			return ret;
		}
	};


	// Class Engine.MeshDeformer
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshDeformer : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDeformer");
			return ret;
		}
	};


	// Class Engine.MeshDeformerInstanceSettings
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshDeformerInstanceSettings : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDeformerInstanceSettings");
			return ret;
		}
	};


	// Class Engine.MeshDeformerInstance
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshDeformerInstance : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDeformerInstance");
			return ret;
		}
	};


	// Class Engine.MeshDrawCommandStatsSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x28 (0x58 - 0x30)
	class UMeshDrawCommandStatsSettings : public UDeveloperSettings	
	{
	public:
		TArray Budgets; // 0x30(0x10)
		TArray BudgetTotals; // 0x40(0x10)
		int32_t CollectionForCsvProfiler; // 0x50(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDrawCommandStatsSettings");
			return ret;
		}
	};


	// Class Engine.MeshPaintVirtualTexture
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class UMeshPaintVirtualTexture : public UTexture2D	
	{
	public:
		TWeakObjectPtr OwningComponent; // 0x150(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshPaintVirtualTexture");
			return ret;
		}
	};


	// Class Engine.MicroTransactionBase
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x30 (0x68 - 0x38)
	class UMicroTransactionBase : public UPlatformInterfaceBase	
	{
	public:
		TArray AvailableProducts; // 0x38(0x10)
		FString LastError; // 0x48(0x10)
		FString LastErrorSolution; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MicroTransactionBase");
			return ret;
		}
	};


	// Class Engine.MorphTarget
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UMorphTarget : public UObject	
	{
	public:
		USkeletalMesh BaseSkelMesh; // 0x28(0x8)
		unsigned char UnknownData01_7[0x10]; // 0x30(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MorphTarget");
			return ret;
		}
	};


	// Class Engine.NavAgentInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavAgentInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavAgentInterface");
			return ret;
		}
	};


	// Class Engine.NavAreaBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UNavAreaBase : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavAreaBase");
			return ret;
		}
	};


	// Class Engine.NavEdgeProviderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavEdgeProviderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavEdgeProviderInterface");
			return ret;
		}
	};


	// Class Engine.NavigationDataInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavigationDataInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationDataInterface");
			return ret;
		}
	};


	// Class Engine.NavigationInvokerInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavigationInvokerInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationInvokerInterface");
			return ret;
		}
	};


	// Class Engine.NavLinkDefinition
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UNavLinkDefinition : public UObject	
	{
	public:
		TArray Links; // 0x28(0x10)
		TArray SegmentLinks; // 0x38(0x10)
		unsigned char UnknownData01_7[0x8]; // 0x48(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavLinkDefinition");
			return ret;
		}
	};


	// Class Engine.NavMovementInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavMovementInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavMovementInterface");
			return ret;
		}

		void StopMovementKeepPathing(); // Flags: Native|Public|BlueprintCallable 0x7FF4144ECE58
		void StopActiveMovement(); // Flags: Native|Public|BlueprintCallable 0x7FF4144ECD78
		void RequestPathMove(FVector& MoveInput); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144ECC98
		void RequestDirectMove(FVector& MoveVelocity, bool bForceMaxSpeed); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144ECBB8
		bool IsSwimming(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ECAD8
		bool IsMovingOnGround(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC9F8
		bool IsFlying(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC918
		bool IsFalling(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC838
		bool IsCrouching(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC758
		FVector GetVelocityForNavMovement(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC678
		float GetMaxSpeedForNavMovement(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EC598
	};


	// Class Engine.NavPathObserverInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavPathObserverInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavPathObserverInterface");
			return ret;
		}
	};


	// Class Engine.NavRelevantInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavRelevantInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavRelevantInterface");
			return ret;
		}
	};


	// Class Engine.NetworkPhysicsSettingsComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x138 (0x1D8 - 0xA0)
	class UNetworkPhysicsSettingsComponent : public UActorComponent	
	{
	public:
		FNetworkPhysicsSettings GeneralSettings; // 0xA0(0x8)
		FNetworkPhysicsSettingsDefaultReplication DefaultReplicationSettings; // 0xA8(0x20)
		FNetworkPhysicsSettingsPredictiveInterpolation PredictiveInterpolationSettings; // 0xC8(0x80)
		FNetworkPhysicsSettingsResimulation ResimulationSettings; // 0x148(0x40)
		FNetworkPhysicsSettingsNetworkPhysicsComponent NetworkPhysicsComponentSettings; // 0x188(0x48)
		unsigned char UnknownData01_7[0x8]; // 0x1D0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPhysicsSettingsComponent");
			return ret;
		}
	};


	// Class Engine.NetworkPredictionInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNetworkPredictionInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPredictionInterface");
			return ret;
		}
	};


	// Class Engine.ParticleEmitter
	// Inherited from UObject
	// Size: 0x190 (0x1B8 - 0x28)
	class UParticleEmitter : public UObject	
	{
	public:
		FName EmitterName; // 0x28(0x4)
		int32_t SubUVDataOffset; // 0x2C(0x4)
		TEnumAsByte EmitterRenderMode; // 0x30(0x1)
		EParticleSignificanceLevel SignificanceLevel; // 0x31(0x1)
		unsigned char UnknownData06_6[0x1]; // 0x32(0x1) UNKNOWN PROPERTY
		bool bUseLegacySpawningBehavior : 1; // 0x33:0(0x1)
		unsigned char UnknownBit07 : 1; // 0x33:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x33:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x33:3(0x1) UNKNOWN PROPERTY
		bool ConvertedModules : 1; // 0x33:4(0x1)
		bool bIsSoloing : 1; // 0x33:5(0x1)
		bool bCookedOut : 1; // 0x33:6(0x1)
		bool bDisabledLODsKeepEmitterAlive : 1; // 0x33:7(0x1)
		bool bDisableWhenInsignficant : 1; // 0x34:0(0x1)
		unsigned char UnknownData10_5[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		TArray LODLevels; // 0x38(0x10)
		int32_t PeakActiveParticles; // 0x48(0x4)
		int32_t InitialAllocationCount; // 0x4C(0x4)
		float QualityLevelSpawnRateScale; // 0x50(0x4)
		uint32_t DetailModeBitmask; // 0x54(0x4)
		unsigned char UnknownData11_7[0x160]; // 0x58(0x160) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleEmitter");
			return ret;
		}
	};


	// Class Engine.ParticleLODLevel
	// Inherited from UObject
	// Size: 0x90 (0xB8 - 0x28)
	class UParticleLODLevel : public UObject	
	{
	public:
		int32_t Level; // 0x28(0x4)
		bool bEnabled : 1; // 0x2C:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		UParticleModuleRequired RequiredModule; // 0x30(0x8)
		TArray Modules; // 0x38(0x10)
		UParticleModuleTypeDataBase TypeDataModule; // 0x48(0x8)
		UParticleModuleSpawn SpawnModule; // 0x50(0x8)
		UParticleModuleEventGenerator EventGenerator; // 0x58(0x8)
		TArray SpawningModules; // 0x60(0x10)
		TArray SpawnModules; // 0x70(0x10)
		TArray UpdateModules; // 0x80(0x10)
		TArray OrbitModules; // 0x90(0x10)
		TArray EventReceiverModules; // 0xA0(0x10)
		bool ConvertedModules : 1; // 0xB0:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0xB1(0x3) UNKNOWN PROPERTY
		int32_t PeakActiveParticles; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleLODLevel");
			return ret;
		}
	};


	// Class Engine.FXSystemAsset
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UFXSystemAsset : public UObject	
	{
	public:
		uint32_t MaxPoolSize; // 0x28(0x4)
		uint32_t PoolPrimeSize; // 0x2C(0x4)
		unsigned char UnknownData01_7[0x20]; // 0x30(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FXSystemAsset");
			return ret;
		}
	};


	// Class Engine.ParticleSystem
	// Inherited from UFXSystemAsset -> UObject
	// Size: 0x128 (0x178 - 0x50)
	class UParticleSystem : public UFXSystemAsset	
	{
	public:
		float UpdateTime_FPS; // 0x50(0x4)
		float UpdateTime_Delta; // 0x54(0x4)
		float WarmupTime; // 0x58(0x4)
		float WarmupTickRate; // 0x5C(0x4)
		TArray Emitters; // 0x60(0x10)
		UParticleSystemComponent PreviewComponent; // 0x70(0x8)
		UInterpCurveEdSetup CurveEdSetup; // 0x78(0x8)
		float LODDistanceCheckTime; // 0x80(0x4)
		float MacroUVRadius; // 0x84(0x4)
		TArray LODDistances; // 0x88(0x10)
		TArray LODSettings; // 0x98(0x10)
		FBox FixedRelativeBoundingBox; // 0xA8(0x38)
		float SecondsBeforeInactive; // 0xE0(0x4)
		float Delay; // 0xE4(0x4)
		float DelayLow; // 0xE8(0x4)
		bool bOrientZAxisTowardCamera : 1; // 0xEC:0(0x1)
		bool bUseFixedRelativeBoundingBox : 1; // 0xEC:1(0x1)
		bool bShouldResetPeakCounts : 1; // 0xEC:2(0x1)
		bool bHasPhysics : 1; // 0xEC:3(0x1)
		bool bUseRealtimeThumbnail : 1; // 0xEC:4(0x1)
		bool ThumbnailImageOutOfDate : 1; // 0xEC:5(0x1)
		unsigned char UnknownBit05 : 1; // 0xEC:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0xEC:7(0x1) UNKNOWN PROPERTY
		bool bUseDelayRange : 1; // 0xED:0(0x1)
		bool bAllowManagedTicking : 1; // 0xED:1(0x1)
		bool bAutoDeactivate : 1; // 0xED:2(0x1)
		bool bRegenerateLODDuplicate : 1; // 0xED:3(0x1)
		TEnumAsByte SystemUpdateMode; // 0xEE(0x1)
		TEnumAsByte LODMethod; // 0xEF(0x1)
		EParticleSystemInsignificanceReaction InsignificantReaction; // 0xF0(0x1)
		TEnumAsByte OcclusionBoundsMethod; // 0xF1(0x1)
		unsigned char UnknownData07_6[0x1]; // 0xF2(0x1) UNKNOWN PROPERTY
		EParticleSignificanceLevel MaxSignificanceLevel; // 0xF3(0x1)
		uint32_t MinTimeBetweenTicks; // 0xF4(0x4)
		float InsignificanceDelay; // 0xF8(0x4)
		unsigned char UnknownData08_6[0x4]; // 0xFC(0x4) UNKNOWN PROPERTY
		FVector MacroUVPosition; // 0x100(0x18)
		FBox CustomOcclusionBounds; // 0x118(0x38)
		TArray SoloTracking; // 0x150(0x10)
		TArray NamedMaterialSlots; // 0x160(0x10)
		unsigned char UnknownData09_7[0x8]; // 0x170(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSystem");
			return ret;
		}

		bool ContainsEmitterType(UClass TypeData); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144ECF38
	};


	// Class Engine.ParticleModule
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UParticleModule : public UObject	
	{
	public:
		bool bSpawnModule : 1; // 0x28:0(0x1)
		bool bUpdateModule : 1; // 0x28:1(0x1)
		bool bFinalUpdateModule : 1; // 0x28:2(0x1)
		bool bUpdateForGPUEmitter : 1; // 0x28:3(0x1)
		bool bCurvesAsColor : 1; // 0x28:4(0x1)
		bool b3DDrawMode : 1; // 0x28:5(0x1)
		bool bSupported3DDrawMode : 1; // 0x28:6(0x1)
		bool bEnabled : 1; // 0x28:7(0x1)
		bool bEditable : 1; // 0x29:0(0x1)
		bool LODDuplicate : 1; // 0x29:1(0x1)
		bool bSupportsRandomSeed : 1; // 0x29:2(0x1)
		bool bRequiresLoopingNotification : 1; // 0x29:3(0x1)
		char LODValidity; // 0x2A(0x1)
		unsigned char UnknownData01_7[0x5]; // 0x2B(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModule");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleAccelerationBase : public UParticleModule	
	{
	public:
		bool bAlwaysInWorldSpace : 1; // 0x30:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAcceleration
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x68 (0xA0 - 0x38)
	class UParticleModuleAcceleration : public UParticleModuleAccelerationBase	
	{
	public:
		FRawDistributionVector Acceleration; // 0x38(0x60)
		bool bApplyOwnerScale : 1; // 0x98:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x99(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAcceleration");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationConstant
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase	
	{
	public:
		FVector Acceleration; // 0x38(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationConstant");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationDrag
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x38 (0x70 - 0x38)
	class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase	
	{
	public:
		UDistributionFloat DragCoefficient; // 0x38(0x8)
		FRawDistributionFloat DragCoefficientRaw; // 0x40(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationDrag");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationDragScaleOverLife
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x38 (0x70 - 0x38)
	class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase	
	{
	public:
		UDistributionFloat DragScale; // 0x38(0x8)
		FRawDistributionFloat DragScaleRaw; // 0x40(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationDragScaleOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationOverLifetime
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x60 (0x98 - 0x38)
	class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase	
	{
	public:
		FRawDistributionVector AccelOverLife; // 0x38(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationOverLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleAttractorBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorLine
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0x90 (0xC0 - 0x30)
	class UParticleModuleAttractorLine : public UParticleModuleAttractorBase	
	{
	public:
		FVector EndPoint0; // 0x30(0x18)
		FVector EndPoint1; // 0x48(0x18)
		FRawDistributionFloat Range; // 0x60(0x30)
		FRawDistributionFloat Strength; // 0x90(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorLine");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorParticle
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0x80 (0xB0 - 0x30)
	class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase	
	{
	public:
		FName EmitterName; // 0x30(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		FRawDistributionFloat Range; // 0x38(0x30)
		bool bStrengthByDistance : 1; // 0x68:0(0x1)
		unsigned char UnknownData06_5[0x7]; // 0x69(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat Strength; // 0x70(0x30)
		bool bAffectBaseVelocity : 1; // 0xA0:0(0x1)
		unsigned char UnknownData07_5[0x3]; // 0xA1(0x3) UNKNOWN PROPERTY
		TEnumAsByte SelectionMethod; // 0xA4(0x1)
		unsigned char UnknownData08_6[0x3]; // 0xA5(0x3) UNKNOWN PROPERTY
		bool bRenewSource : 1; // 0xA8:0(0x1)
		bool bInheritSourceVel : 1; // 0xA8:1(0x1)
		unsigned char UnknownData09_5[0x3]; // 0xA9(0x3) UNKNOWN PROPERTY
		int32_t LastSelIndex; // 0xAC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorParticle");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorPoint
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0xC8 (0xF8 - 0x30)
	class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase	
	{
	public:
		FRawDistributionVector Position; // 0x30(0x60)
		FRawDistributionFloat Range; // 0x90(0x30)
		FRawDistributionFloat Strength; // 0xC0(0x30)
		bool StrengthByDistance : 1; // 0xF0:0(0x1)
		bool bAffectBaseVelocity : 1; // 0xF0:1(0x1)
		bool bOverrideVelocity : 1; // 0xF0:2(0x1)
		bool bUseWorldSpacePosition : 1; // 0xF0:3(0x1)
		bool Positive_X : 1; // 0xF0:4(0x1)
		bool Positive_Y : 1; // 0xF0:5(0x1)
		bool Positive_Z : 1; // 0xF0:6(0x1)
		bool Negative_X : 1; // 0xF0:7(0x1)
		bool Negative_Y : 1; // 0xF1:0(0x1)
		bool Negative_Z : 1; // 0xF1:1(0x1)
		unsigned char UnknownData01_7[0x6]; // 0xF2(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorPoint");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorPointGravity
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0x58 (0x88 - 0x30)
	class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase	
	{
	public:
		FVector Position; // 0x30(0x18)
		float Radius; // 0x48(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY
		UDistributionFloat Strength; // 0x50(0x8)
		FRawDistributionFloat StrengthRaw; // 0x58(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorPointGravity");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleBeamBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamModifier
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x108 (0x138 - 0x30)
	class UParticleModuleBeamModifier : public UParticleModuleBeamBase	
	{
	public:
		TEnumAsByte ModifierType; // 0x30(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FBeamModifierOptions PositionOptions; // 0x34(0x4)
		FRawDistributionVector Position; // 0x38(0x60)
		FBeamModifierOptions TangentOptions; // 0x98(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x9C(0x4) UNKNOWN PROPERTY
		FRawDistributionVector Tangent; // 0xA0(0x60)
		bool bAbsoluteTangent : 1; // 0x100:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x101(0x3) UNKNOWN PROPERTY
		FBeamModifierOptions StrengthOptions; // 0x104(0x4)
		FRawDistributionFloat Strength; // 0x108(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamModifier");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamNoise
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x190 (0x1C0 - 0x30)
	class UParticleModuleBeamNoise : public UParticleModuleBeamBase	
	{
	public:
		bool bLowFreq_Enabled : 1; // 0x30:0(0x1)
		unsigned char UnknownData08_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		int32_t Frequency; // 0x34(0x4)
		int32_t Frequency_LowRange; // 0x38(0x4)
		unsigned char UnknownData09_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		FRawDistributionVector NoiseRange; // 0x40(0x60)
		FRawDistributionFloat NoiseRangeScale; // 0xA0(0x30)
		bool bNRScaleEmitterTime : 1; // 0xD0:0(0x1)
		unsigned char UnknownData10_5[0x7]; // 0xD1(0x7) UNKNOWN PROPERTY
		FRawDistributionVector NoiseSpeed; // 0xD8(0x60)
		bool bSmooth : 1; // 0x138:0(0x1)
		unsigned char UnknownData11_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		float NoiseLockRadius; // 0x13C(0x4)
		bool bNoiseLock : 1; // 0x140:0(0x1)
		bool bOscillate : 1; // 0x140:1(0x1)
		unsigned char UnknownData12_5[0x3]; // 0x141(0x3) UNKNOWN PROPERTY
		float NoiseLockTime; // 0x144(0x4)
		float NoiseTension; // 0x148(0x4)
		bool bUseNoiseTangents : 1; // 0x14C:0(0x1)
		unsigned char UnknownData13_5[0x3]; // 0x14D(0x3) UNKNOWN PROPERTY
		FRawDistributionFloat NoiseTangentStrength; // 0x150(0x30)
		int32_t NoiseTessellation; // 0x180(0x4)
		bool bTargetNoise : 1; // 0x184:0(0x1)
		unsigned char UnknownData14_5[0x3]; // 0x185(0x3) UNKNOWN PROPERTY
		float FrequencyDistance; // 0x188(0x4)
		bool bApplyNoiseScale : 1; // 0x18C:0(0x1)
		unsigned char UnknownData15_5[0x3]; // 0x18D(0x3) UNKNOWN PROPERTY
		FRawDistributionFloat NoiseScale; // 0x190(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamNoise");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamSource
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x118 (0x148 - 0x30)
	class UParticleModuleBeamSource : public UParticleModuleBeamBase	
	{
	public:
		TEnumAsByte SourceMethod; // 0x30(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName SourceName; // 0x34(0x4)
		bool bSourceAbsolute : 1; // 0x38:0(0x1)
		unsigned char UnknownData07_5[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		FRawDistributionVector Source; // 0x40(0x60)
		bool bLockSource : 1; // 0xA0:0(0x1)
		unsigned char UnknownData08_5[0x3]; // 0xA1(0x3) UNKNOWN PROPERTY
		TEnumAsByte SourceTangentMethod; // 0xA4(0x1)
		unsigned char UnknownData09_6[0x3]; // 0xA5(0x3) UNKNOWN PROPERTY
		FRawDistributionVector SourceTangent; // 0xA8(0x60)
		bool bLockSourceTangent : 1; // 0x108:0(0x1)
		unsigned char UnknownData10_5[0x7]; // 0x109(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat SourceStrength; // 0x110(0x30)
		bool bLockSourceStength : 1; // 0x140:0(0x1)
		unsigned char UnknownData11_7[0x7]; // 0x141(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamSource");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamTarget
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x118 (0x148 - 0x30)
	class UParticleModuleBeamTarget : public UParticleModuleBeamBase	
	{
	public:
		TEnumAsByte TargetMethod; // 0x30(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName TargetName; // 0x34(0x4)
		FRawDistributionVector Target; // 0x38(0x60)
		bool bTargetAbsolute : 1; // 0x98:0(0x1)
		bool bLockTarget : 1; // 0x98:1(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x99(0x3) UNKNOWN PROPERTY
		TEnumAsByte TargetTangentMethod; // 0x9C(0x1)
		unsigned char UnknownData08_6[0x3]; // 0x9D(0x3) UNKNOWN PROPERTY
		FRawDistributionVector TargetTangent; // 0xA0(0x60)
		bool bLockTargetTangent : 1; // 0x100:0(0x1)
		unsigned char UnknownData09_5[0x7]; // 0x101(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat TargetStrength; // 0x108(0x30)
		bool bLockTargetStength : 1; // 0x138:0(0x1)
		unsigned char UnknownData10_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		float LockRadius; // 0x13C(0x4)
		unsigned char UnknownData11_7[0x8]; // 0x140(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamTarget");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCameraBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleCameraBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCameraBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCameraOffset
	// Inherited from UParticleModuleCameraBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleCameraOffset : public UParticleModuleCameraBase	
	{
	public:
		FRawDistributionFloat CameraOffset; // 0x30(0x30)
		bool bSpawnTimeOnly : 1; // 0x60:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x61(0x3) UNKNOWN PROPERTY
		TEnumAsByte UpdateMethod; // 0x64(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x65(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCameraOffset");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCollisionBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleCollisionBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCollisionBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCollision
	// Inherited from UParticleModuleCollisionBase -> UParticleModule -> UObject
	// Size: 0x190 (0x1C0 - 0x30)
	class UParticleModuleCollision : public UParticleModuleCollisionBase	
	{
	public:
		FRawDistributionVector DampingFactor; // 0x30(0x60)
		FRawDistributionVector DampingFactorRotation; // 0x90(0x60)
		FRawDistributionFloat MaxCollisions; // 0xF0(0x30)
		TEnumAsByte CollisionCompletionOption; // 0x120(0x1)
		unsigned char UnknownData06_6[0x7]; // 0x121(0x7) UNKNOWN PROPERTY
		TArray CollisionTypes; // 0x128(0x10)
		unsigned char UnknownData07_6[0x8]; // 0x138(0x8) UNKNOWN PROPERTY
		bool bApplyPhysics : 1; // 0x140:0(0x1)
		bool bIgnoreTriggerVolumes : 1; // 0x140:1(0x1)
		unsigned char UnknownData08_5[0x7]; // 0x141(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat ParticleMass; // 0x148(0x30)
		float DirScalar; // 0x178(0x4)
		bool bPawnsDoNotDecrementCount : 1; // 0x17C:0(0x1)
		bool bOnlyVerticalNormalsDecrementCount : 1; // 0x17C:1(0x1)
		unsigned char UnknownData09_5[0x3]; // 0x17D(0x3) UNKNOWN PROPERTY
		float VerticalFudgeFactor; // 0x180(0x4)
		unsigned char UnknownData10_6[0x4]; // 0x184(0x4) UNKNOWN PROPERTY
		FRawDistributionFloat DelayAmount; // 0x188(0x30)
		bool bDropDetail : 1; // 0x1B8:0(0x1)
		bool bCollideOnlyIfVisible : 1; // 0x1B8:1(0x1)
		bool bIgnoreSourceActor : 1; // 0x1B8:2(0x1)
		unsigned char UnknownData11_5[0x3]; // 0x1B9(0x3) UNKNOWN PROPERTY
		float MaxCollisionDistance; // 0x1BC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCollision");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCollisionGPU
	// Inherited from UParticleModuleCollisionBase -> UParticleModule -> UObject
	// Size: 0x78 (0xA8 - 0x30)
	class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase	
	{
	public:
		FRawDistributionFloat Resilience; // 0x30(0x30)
		FRawDistributionFloat ResilienceScaleOverLife; // 0x60(0x30)
		float Friction; // 0x90(0x4)
		float RandomSpread; // 0x94(0x4)
		float RandomDistribution; // 0x98(0x4)
		float RadiusScale; // 0x9C(0x4)
		float RadiusBias; // 0xA0(0x4)
		TEnumAsByte Response; // 0xA4(0x1)
		TEnumAsByte CollisionMode; // 0xA5(0x1)
		unsigned char UnknownData01_7[0x2]; // 0xA6(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCollisionGPU");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColorBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleColorBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColorBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColor
	// Inherited from UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleColor : public UParticleModuleColorBase	
	{
	public:
		FRawDistributionVector StartColor; // 0x30(0x60)
		FRawDistributionFloat StartAlpha; // 0x90(0x30)
		bool bClampAlpha : 1; // 0xC0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColor");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColorOverLife
	// Inherited from UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleColorOverLife : public UParticleModuleColorBase	
	{
	public:
		FRawDistributionVector ColorOverLife; // 0x30(0x60)
		FRawDistributionFloat AlphaOverLife; // 0x90(0x30)
		bool bClampAlpha : 1; // 0xC0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColorOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColorScaleOverLife
	// Inherited from UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase	
	{
	public:
		FRawDistributionVector ColorScaleOverLife; // 0x30(0x60)
		FRawDistributionFloat AlphaScaleOverLife; // 0x90(0x30)
		bool bEmitterTime : 1; // 0xC0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColorScaleOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColor_Seeded
	// Inherited from UParticleModuleColor -> UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x18 (0xE0 - 0xC8)
	class UParticleModuleColor_Seeded : public UParticleModuleColor	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0xC8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColor_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleEventBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventGenerator
	// Inherited from UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModuleEventGenerator : public UParticleModuleEventBase	
	{
	public:
		TArray Events; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventGenerator");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventReceiverBase
	// Inherited from UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleEventReceiverBase : public UParticleModuleEventBase	
	{
	public:
		TEnumAsByte EventGeneratorType; // 0x30(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName EventName; // 0x34(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventReceiverBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventReceiverKillParticles
	// Inherited from UParticleModuleEventReceiverBase -> UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase	
	{
	public:
		bool bStopSpawning : 1; // 0x38:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventReceiverKillParticles");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventReceiverSpawn
	// Inherited from UParticleModuleEventReceiverBase -> UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0xB0 (0xE8 - 0x38)
	class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase	
	{
	public:
		FRawDistributionFloat SpawnCount; // 0x38(0x30)
		bool bUseParticleTime : 1; // 0x68:0(0x1)
		bool bUsePSysLocation : 1; // 0x68:1(0x1)
		bool bInheritVelocity : 1; // 0x68:2(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x69(0x7) UNKNOWN PROPERTY
		FRawDistributionVector InheritVelocityScale; // 0x70(0x60)
		TArray PhysicalMaterials; // 0xD0(0x10)
		bool bBanPhysicalMaterials : 1; // 0xE0:0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventReceiverSpawn");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventSendToGame
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UParticleModuleEventSendToGame : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventSendToGame");
			return ret;
		}
	};


	// Class Engine.ParticleModuleKillBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleKillBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleKillBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleKillBox
	// Inherited from UParticleModuleKillBase -> UParticleModule -> UObject
	// Size: 0xC8 (0xF8 - 0x30)
	class UParticleModuleKillBox : public UParticleModuleKillBase	
	{
	public:
		FRawDistributionVector LowerLeftCorner; // 0x30(0x60)
		FRawDistributionVector UpperRightCorner; // 0x90(0x60)
		bool bAbsolute : 1; // 0xF0:0(0x1)
		bool bKillInside : 1; // 0xF0:1(0x1)
		bool bAxisAlignedAndFixedSize : 1; // 0xF0:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xF1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleKillBox");
			return ret;
		}
	};


	// Class Engine.ParticleModuleKillHeight
	// Inherited from UParticleModuleKillBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleKillHeight : public UParticleModuleKillBase	
	{
	public:
		FRawDistributionFloat Height; // 0x30(0x30)
		bool bAbsolute : 1; // 0x60:0(0x1)
		bool bFloor : 1; // 0x60:1(0x1)
		bool bApplyPSysScale : 1; // 0x60:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x61(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleKillHeight");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLifetimeBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleLifetimeBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLifetimeBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLifetime
	// Inherited from UParticleModuleLifetimeBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleLifetime : public UParticleModuleLifetimeBase	
	{
	public:
		FRawDistributionFloat Lifetime; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLifetime_Seeded
	// Inherited from UParticleModuleLifetime -> UParticleModuleLifetimeBase -> UParticleModule -> UObject
	// Size: 0x18 (0x78 - 0x60)
	class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLifetime_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLightBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleLightBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLightBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLight
	// Inherited from UParticleModuleLightBase -> UParticleModule -> UObject
	// Size: 0x110 (0x140 - 0x30)
	class UParticleModuleLight : public UParticleModuleLightBase	
	{
	public:
		bool bUseInverseSquaredFalloff; // 0x30(0x1)
		bool bAffectsTranslucency; // 0x31(0x1)
		unsigned char UnknownData05_6[0x2]; // 0x32(0x2) UNKNOWN PROPERTY
		bool bOverrideInverseExposureBlend : 1; // 0x34:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		bool bPreviewLightRadius; // 0x38(0x1)
		unsigned char UnknownData07_6[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		float SpawnFraction; // 0x3C(0x4)
		FRawDistributionVector ColorScaleOverLife; // 0x40(0x60)
		FRawDistributionFloat BrightnessOverLife; // 0xA0(0x30)
		FRawDistributionFloat RadiusScale; // 0xD0(0x30)
		FRawDistributionFloat LightExponent; // 0x100(0x30)
		float InverseExposureBlend; // 0x130(0x4)
		FLightingChannels LightingChannels; // 0x134(0x1)
		unsigned char UnknownData08_6[0x3]; // 0x135(0x3) UNKNOWN PROPERTY
		float VolumetricScatteringIntensity; // 0x138(0x4)
		bool bHighQualityLights; // 0x13C(0x1)
		bool bShadowCastingLights; // 0x13D(0x1)
		unsigned char UnknownData09_7[0x2]; // 0x13E(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLight");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLight_Seeded
	// Inherited from UParticleModuleLight -> UParticleModuleLightBase -> UParticleModule -> UObject
	// Size: 0x18 (0x158 - 0x140)
	class UParticleModuleLight_Seeded : public UParticleModuleLight	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x140(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLight_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleLocationBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocation
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleLocation : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector StartLocation; // 0x30(0x60)
		float DistributeOverNPoints; // 0x90(0x4)
		float DistributeThreshold; // 0x94(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationBoneSocket
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x48 (0x78 - 0x30)
	class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase	
	{
	public:
		TEnumAsByte SourceType; // 0x30(0x1)
		unsigned char UnknownData04_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		FVector UniversalOffset; // 0x38(0x18)
		TArray SourceLocations; // 0x50(0x10)
		TEnumAsByte SelectionMethod; // 0x60(0x1)
		unsigned char UnknownData05_6[0x3]; // 0x61(0x3) UNKNOWN PROPERTY
		bool bUpdatePositionEachFrame : 1; // 0x64:0(0x1)
		bool bOrientMeshEmitters : 1; // 0x64:1(0x1)
		bool bInheritBoneVelocity : 1; // 0x64:2(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x65(0x3) UNKNOWN PROPERTY
		float InheritVelocityScale; // 0x68(0x4)
		FName SkelMeshActorParamName; // 0x6C(0x4)
		int32_t NumPreSelectedIndices; // 0x70(0x4)
		unsigned char UnknownData07_7[0x4]; // 0x74(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationBoneSocket");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationDirect
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x180 (0x1B0 - 0x30)
	class UParticleModuleLocationDirect : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector Location; // 0x30(0x60)
		FRawDistributionVector LocationOffset; // 0x90(0x60)
		FRawDistributionVector ScaleFactor; // 0xF0(0x60)
		FRawDistributionVector Direction; // 0x150(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationDirect");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationEmitter
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleLocationEmitter : public UParticleModuleLocationBase	
	{
	public:
		FName EmitterName; // 0x30(0x4)
		TEnumAsByte SelectionMethod; // 0x34(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		bool InheritSourceVelocity : 1; // 0x38:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		float InheritSourceVelocityScale; // 0x3C(0x4)
		bool bInheritSourceRotation : 1; // 0x40:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		float InheritSourceRotationScale; // 0x44(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationEmitter");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationEmitterDirect
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase	
	{
	public:
		FName EmitterName; // 0x30(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationEmitterDirect");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveBase
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase	
	{
	public:
		bool Positive_X : 1; // 0x30:0(0x1)
		bool Positive_Y : 1; // 0x30:1(0x1)
		bool Positive_Z : 1; // 0x30:2(0x1)
		bool Negative_X : 1; // 0x30:3(0x1)
		bool Negative_Y : 1; // 0x30:4(0x1)
		bool Negative_Z : 1; // 0x30:5(0x1)
		bool SurfaceOnly : 1; // 0x30:6(0x1)
		bool Velocity : 1; // 0x30:7(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat VelocityScale; // 0x38(0x30)
		FRawDistributionVector StartLocation; // 0x68(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveCylinder
	// Inherited from UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x70 (0x138 - 0xC8)
	class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase	
	{
	public:
		bool RadialVelocity : 1; // 0xC8:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0xC9(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat StartRadius; // 0xD0(0x30)
		FRawDistributionFloat StartHeight; // 0x100(0x30)
		TEnumAsByte HeightAxis; // 0x130(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x131(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveCylinder");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
	// Inherited from UParticleModuleLocationPrimitiveCylinder -> UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x150 - 0x138)
	class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x138(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveSphere
	// Inherited from UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x30 (0xF8 - 0xC8)
	class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase	
	{
	public:
		FRawDistributionFloat StartRadius; // 0xC8(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveSphere");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
	// Inherited from UParticleModuleLocationPrimitiveSphere -> UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x110 - 0xF8)
	class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0xF8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveTriangle
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0xF0 (0x120 - 0x30)
	class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector StartOffset; // 0x30(0x60)
		FRawDistributionFloat Height; // 0x90(0x30)
		FRawDistributionFloat Angle; // 0xC0(0x30)
		FRawDistributionFloat Thickness; // 0xF0(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveTriangle");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationSkelVertSurface
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x80 (0xB0 - 0x30)
	class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase	
	{
	public:
		TEnumAsByte SourceType; // 0x30(0x1)
		unsigned char UnknownData05_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		FVector UniversalOffset; // 0x38(0x18)
		bool bUpdatePositionEachFrame : 1; // 0x50:0(0x1)
		bool bOrientMeshEmitters : 1; // 0x50:1(0x1)
		bool bInheritBoneVelocity : 1; // 0x50:2(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		float InheritVelocityScale; // 0x54(0x4)
		FName SkelMeshActorParamName; // 0x58(0x4)
		unsigned char UnknownData07_6[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY
		TArray ValidAssociatedBones; // 0x60(0x10)
		bool bEnforceNormalCheck : 1; // 0x70:0(0x1)
		unsigned char UnknownData08_5[0x7]; // 0x71(0x7) UNKNOWN PROPERTY
		FVector NormalToCompare; // 0x78(0x18)
		float NormalCheckToleranceDegrees; // 0x90(0x4)
		float NormalCheckTolerance; // 0x94(0x4)
		TArray ValidMaterialIndices; // 0x98(0x10)
		bool bInheritVertexColor : 1; // 0xA8:0(0x1)
		bool bInheritUV : 1; // 0xA8:1(0x1)
		unsigned char UnknownData09_5[0x3]; // 0xA9(0x3) UNKNOWN PROPERTY
		uint32_t InheritUVChannel; // 0xAC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationSkelVertSurface");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationWorldOffset
	// Inherited from UParticleModuleLocation -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x0 (0x98 - 0x98)
	class UParticleModuleLocationWorldOffset : public UParticleModuleLocation	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationWorldOffset");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationWorldOffset_Seeded
	// Inherited from UParticleModuleLocationWorldOffset -> UParticleModuleLocation -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0xB0 - 0x98)
	class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationWorldOffset_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocation_Seeded
	// Inherited from UParticleModuleLocation -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0xB0 - 0x98)
	class UParticleModuleLocation_Seeded : public UParticleModuleLocation	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocation_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMaterialBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleMaterialBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMaterialBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshMaterial
	// Inherited from UParticleModuleMaterialBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase	
	{
	public:
		TArray MeshMaterials; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshMaterial");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleRotationBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotation
	// Inherited from UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleMeshRotation : public UParticleModuleRotationBase	
	{
	public:
		FRawDistributionVector StartRotation; // 0x30(0x60)
		bool bInheritParent : 1; // 0x90:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRateBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleRotationRateBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRateBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRate
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionVector StartRotationRate; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRate");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionVector LifeMultiplier; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRateMultiplyLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRateOverLife
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionVector RotRate; // 0x30(0x60)
		bool bScaleRotRate : 1; // 0x90:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRateOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRate_Seeded
	// Inherited from UParticleModuleMeshRotationRate -> UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x18 (0xA8 - 0x90)
	class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRate_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotation_Seeded
	// Inherited from UParticleModuleMeshRotation -> UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x18 (0xB0 - 0x98)
	class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotation_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrbitBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleOrbitBase : public UParticleModule	
	{
	public:
		bool bUseEmitterTime : 1; // 0x30:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrbitBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrbit
	// Inherited from UParticleModuleOrbitBase -> UParticleModule -> UObject
	// Size: 0x140 (0x178 - 0x38)
	class UParticleModuleOrbit : public UParticleModuleOrbitBase	
	{
	public:
		TEnumAsByte ChainMode; // 0x38(0x1)
		unsigned char UnknownData04_6[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		FRawDistributionVector OffsetAmount; // 0x40(0x60)
		FOrbitOptions OffsetOptions; // 0xA0(0x4)
		unsigned char UnknownData05_6[0x4]; // 0xA4(0x4) UNKNOWN PROPERTY
		FRawDistributionVector RotationAmount; // 0xA8(0x60)
		FOrbitOptions RotationOptions; // 0x108(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x10C(0x4) UNKNOWN PROPERTY
		FRawDistributionVector RotationRateAmount; // 0x110(0x60)
		FOrbitOptions RotationRateOptions; // 0x170(0x4)
		unsigned char UnknownData07_7[0x4]; // 0x174(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrbit");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrientationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleOrientationBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrientationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrientationAxisLock
	// Inherited from UParticleModuleOrientationBase -> UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase	
	{
	public:
		TEnumAsByte LockAxisFlags; // 0x30(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrientationAxisLock");
			return ret;
		}
	};


	// Class Engine.ParticleModuleParameterBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleParameterBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleParameterBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleParameterDynamic
	// Inherited from UParticleModuleParameterBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleParameterDynamic : public UParticleModuleParameterBase	
	{
	public:
		TArray DynamicParams; // 0x30(0x10)
		int32_t UpdateFlags; // 0x40(0x4)
		bool bUsesVelocity : 1; // 0x44:0(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x45(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleParameterDynamic");
			return ret;
		}
	};


	// Class Engine.ParticleModuleParameterDynamic_Seeded
	// Inherited from UParticleModuleParameterDynamic -> UParticleModuleParameterBase -> UParticleModule -> UObject
	// Size: 0x18 (0x60 - 0x48)
	class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x48(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleParameterDynamic_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModulePivotOffset
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModulePivotOffset : public UParticleModuleLocationBase	
	{
	public:
		FVector2D PivotOffset; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModulePivotOffset");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRequired
	// Inherited from UParticleModule -> UObject
	// Size: 0x140 (0x170 - 0x30)
	class UParticleModuleRequired : public UParticleModule	
	{
	public:
		UMaterialInterface Material; // 0x30(0x8)
		float MinFacingCameraBlendDistance; // 0x38(0x4)
		float MaxFacingCameraBlendDistance; // 0x3C(0x4)
		FVector EmitterOrigin; // 0x40(0x18)
		FRotator EmitterRotation; // 0x58(0x18)
		TEnumAsByte ScreenAlignment; // 0x70(0x1)
		bool bUseLocalSpace : 1; // 0x71:0(0x1)
		bool bKillOnDeactivate : 1; // 0x71:1(0x1)
		bool bKillOnCompleted : 1; // 0x71:2(0x1)
		TEnumAsByte SortMode; // 0x72(0x1)
		bool bUseLegacyEmitterTime : 1; // 0x73:0(0x1)
		bool bRemoveHMDRoll : 1; // 0x73:1(0x1)
		bool bSupportLargeWorldCoordinates : 1; // 0x73:2(0x1)
		bool bEmitterDurationUseRange : 1; // 0x73:3(0x1)
		bool bOverrideUseVelocityForMotionBlur : 1; // 0x73:4(0x1)
		bool bUseVelocityForMotionBlur : 1; // 0x73:5(0x1)
		float EmitterDuration; // 0x74(0x4)
		FRawDistributionFloat SpawnRate; // 0x78(0x30)
		TArray BurstList; // 0xA8(0x10)
		float EmitterDelay; // 0xB8(0x4)
		float EmitterDelayLow; // 0xBC(0x4)
		bool bDelayFirstLoopOnly : 1; // 0xC0:0(0x1)
		TEnumAsByte InterpolationMethod; // 0xC1(0x1)
		bool bScaleUV : 1; // 0xC2:0(0x1)
		bool bEmitterDelayUseRange : 1; // 0xC2:1(0x1)
		TEnumAsByte ParticleBurstMethod; // 0xC3(0x1)
		bool bOverrideSystemMacroUV : 1; // 0xC4:0(0x1)
		bool bUseMaxDrawCount : 1; // 0xC4:1(0x1)
		TEnumAsByte OpacitySourceMode; // 0xC5(0x1)
		TEnumAsByte EmitterNormalsMode; // 0xC6(0x1)
		bool bOrbitModuleAffectsVelocityAlignment : 1; // 0xC7:0(0x1)
		int32_t SubImages_Horizontal; // 0xC8(0x4)
		int32_t SubImages_Vertical; // 0xCC(0x4)
		float RandomImageTime; // 0xD0(0x4)
		int32_t RandomImageChanges; // 0xD4(0x4)
		FVector MacroUVPosition; // 0xD8(0x18)
		float MacroUVRadius; // 0xF0(0x4)
		EParticleUVFlipMode UVFlippingMode; // 0xF4(0x1)
		TEnumAsByte BoundingMode; // 0xF5(0x1)
		bool bDurationRecalcEachLoop : 1; // 0xF6:0(0x1)
		unsigned char UnknownData02_5[0x1]; // 0xF7(0x1) UNKNOWN PROPERTY
		FVector NormalsSphereCenter; // 0xF8(0x18)
		float AlphaThreshold; // 0x110(0x4)
		int32_t EmitterLoops; // 0x114(0x4)
		UTexture2D CutoutTexture; // 0x118(0x8)
		int32_t MaxDrawCount; // 0x120(0x4)
		float EmitterDurationLow; // 0x124(0x4)
		FVector NormalsCylinderDirection; // 0x128(0x18)
		TArray NamedMaterialOverrides; // 0x140(0x10)
		unsigned char UnknownData03_7[0x20]; // 0x150(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRequired");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotation
	// Inherited from UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleRotation : public UParticleModuleRotationBase	
	{
	public:
		FRawDistributionFloat StartRotation; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationOverLifetime
	// Inherited from UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase	
	{
	public:
		FRawDistributionFloat RotationOverLife; // 0x30(0x30)
		bool Scale : 1; // 0x60:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x61(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationOverLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRate
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleRotationRate : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionFloat StartRotationRate; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRate");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRateMultiplyLife
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionFloat LifeMultiplier; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRateMultiplyLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRate_Seeded
	// Inherited from UParticleModuleRotationRate -> UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x18 (0x78 - 0x60)
	class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRate_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotation_Seeded
	// Inherited from UParticleModuleRotation -> UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x78 - 0x60)
	class UParticleModuleRotation_Seeded : public UParticleModuleRotation	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotation_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleSizeBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSize
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleSize : public UParticleModuleSizeBase	
	{
	public:
		FRawDistributionVector StartSize; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSize");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeMultiplyLife
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase	
	{
	public:
		FRawDistributionVector LifeMultiplier; // 0x30(0x60)
		bool MultiplyX : 1; // 0x90:0(0x1)
		bool MultiplyY : 1; // 0x90:1(0x1)
		bool MultiplyZ : 1; // 0x90:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeMultiplyLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeScale
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleSizeScale : public UParticleModuleSizeBase	
	{
	public:
		FRawDistributionVector SizeScale; // 0x30(0x60)
		bool EnableX : 1; // 0x90:0(0x1)
		bool EnableY : 1; // 0x90:1(0x1)
		bool EnableZ : 1; // 0x90:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeScale");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeScaleBySpeed
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase	
	{
	public:
		FVector2D SpeedScale; // 0x30(0x10)
		FVector2D MaxScale; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeScaleBySpeed");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSize_Seeded
	// Inherited from UParticleModuleSize -> UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x18 (0xA8 - 0x90)
	class UParticleModuleSize_Seeded : public UParticleModuleSize	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSize_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSourceMovement
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleSourceMovement : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector SourceMovementScale; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSourceMovement");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSpawnBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleSpawnBase : public UParticleModule	
	{
	public:
		bool bProcessSpawnRate : 1; // 0x30:0(0x1)
		bool bProcessBurstList : 1; // 0x30:1(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSpawnBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSpawn
	// Inherited from UParticleModuleSpawnBase -> UParticleModule -> UObject
	// Size: 0xA8 (0xE0 - 0x38)
	class UParticleModuleSpawn : public UParticleModuleSpawnBase	
	{
	public:
		FRawDistributionFloat Rate; // 0x38(0x30)
		FRawDistributionFloat RateScale; // 0x68(0x30)
		TArray BurstList; // 0x98(0x10)
		FRawDistributionFloat BurstScale; // 0xA8(0x30)
		TEnumAsByte ParticleBurstMethod; // 0xD8(0x1)
		unsigned char UnknownData02_6[0x3]; // 0xD9(0x3) UNKNOWN PROPERTY
		bool bApplyGlobalSpawnRateScale : 1; // 0xDC:0(0x1)
		unsigned char UnknownData03_7[0x3]; // 0xDD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSpawn");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSpawnPerUnit
	// Inherited from UParticleModuleSpawnBase -> UParticleModule -> UObject
	// Size: 0x40 (0x78 - 0x38)
	class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase	
	{
	public:
		float UnitScalar; // 0x38(0x4)
		float MovementTolerance; // 0x3C(0x4)
		FRawDistributionFloat SpawnPerUnit; // 0x40(0x30)
		float MaxFrameDistance; // 0x70(0x4)
		bool bIgnoreSpawnRateWhenMoving : 1; // 0x74:0(0x1)
		bool bIgnoreMovementAlongX : 1; // 0x74:1(0x1)
		bool bIgnoreMovementAlongY : 1; // 0x74:2(0x1)
		bool bIgnoreMovementAlongZ : 1; // 0x74:3(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x75(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSpawnPerUnit");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSubUVBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleSubUVBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSubUVBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSubUV
	// Inherited from UParticleModuleSubUVBase -> UParticleModule -> UObject
	// Size: 0x40 (0x70 - 0x30)
	class UParticleModuleSubUV : public UParticleModuleSubUVBase	
	{
	public:
		USubUVAnimation Animation; // 0x30(0x8)
		FRawDistributionFloat SubImageIndex; // 0x38(0x30)
		bool bUseRealTime : 1; // 0x68:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x69(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSubUV");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSubUVMovie
	// Inherited from UParticleModuleSubUV -> UParticleModuleSubUVBase -> UParticleModule -> UObject
	// Size: 0x40 (0xB0 - 0x70)
	class UParticleModuleSubUVMovie : public UParticleModuleSubUV	
	{
	public:
		bool bUseEmitterTime : 1; // 0x70:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x71(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat FrameRate; // 0x78(0x30)
		int32_t StartingFrame; // 0xA8(0x4)
		unsigned char UnknownData03_7[0x4]; // 0xAC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSubUVMovie");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTrailBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleTrailBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTrailBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTrailSource
	// Inherited from UParticleModuleTrailBase -> UParticleModule -> UObject
	// Size: 0x58 (0x88 - 0x30)
	class UParticleModuleTrailSource : public UParticleModuleTrailBase	
	{
	public:
		TEnumAsByte SourceMethod; // 0x30(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName SourceName; // 0x34(0x4)
		FRawDistributionFloat SourceStrength; // 0x38(0x30)
		bool bLockSourceStength : 1; // 0x68:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x69(0x3) UNKNOWN PROPERTY
		int32_t SourceOffsetCount; // 0x6C(0x4)
		TArray SourceOffsetDefaults; // 0x70(0x10)
		TEnumAsByte SelectionMethod; // 0x80(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x81(0x3) UNKNOWN PROPERTY
		bool bInheritRotation : 1; // 0x84:0(0x1)
		unsigned char UnknownData07_7[0x3]; // 0x85(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTrailSource");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleTypeDataBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataAnimTrail
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase	
	{
	public:
		bool bDeadTrailsOnDeactivate : 1; // 0x30:0(0x1)
		bool bEnablePreviousTangentRecalculation : 1; // 0x30:1(0x1)
		bool bTangentRecalculationEveryFrame : 1; // 0x30:2(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		float TilingDistance; // 0x34(0x4)
		float DistanceTessellationStepSize; // 0x38(0x4)
		float TangentTessellationStepSize; // 0x3C(0x4)
		float WidthTessellationStepSize; // 0x40(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataAnimTrail");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataBeam2
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x118 (0x148 - 0x30)
	class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase	
	{
	public:
		TEnumAsByte BeamMethod; // 0x30(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		int32_t TextureTile; // 0x34(0x4)
		float TextureTileDistance; // 0x38(0x4)
		int32_t Sheets; // 0x3C(0x4)
		int32_t MaxBeamCount; // 0x40(0x4)
		float Speed; // 0x44(0x4)
		int32_t InterpolationPoints; // 0x48(0x4)
		bool bAlwaysOn : 1; // 0x4C:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		int32_t UpVectorStepSize; // 0x50(0x4)
		FName BranchParentName; // 0x54(0x4)
		FRawDistributionFloat Distance; // 0x58(0x30)
		TEnumAsByte TaperMethod; // 0x88(0x1)
		unsigned char UnknownData06_6[0x7]; // 0x89(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat TaperFactor; // 0x90(0x30)
		FRawDistributionFloat TaperScale; // 0xC0(0x30)
		bool RenderGeometry : 1; // 0xF0:0(0x1)
		bool RenderDirectLine : 1; // 0xF0:1(0x1)
		bool RenderLines : 1; // 0xF0:2(0x1)
		bool RenderTessellation : 1; // 0xF0:3(0x1)
		unsigned char UnknownData07_7[0x57]; // 0xF1(0x57) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataBeam2");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataGpu
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x5A0 (0x5D0 - 0x30)
	class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase	
	{
	public:
		FGPUSpriteEmitterInfo EmitterInfo; // 0x30(0x350)
		FGPUSpriteResourceData ResourceData; // 0x380(0x240)
		float CameraMotionBlurAmount; // 0x5C0(0x4)
		bool bClearExistingParticlesOnInit : 1; // 0x5C4:0(0x1)
		unsigned char UnknownData01_7[0xB]; // 0x5C5(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataGpu");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataMesh
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x80 (0xB0 - 0x30)
	class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase	
	{
	public:
		UStaticMesh Mesh; // 0x30(0x8)
		unsigned char UnknownData03_6[0x8]; // 0x38(0x8) UNKNOWN PROPERTY
		float LODSizeScale; // 0x40(0x4)
		bool bUseStaticMeshLODs : 1; // 0x44:0(0x1)
		bool CastShadows : 1; // 0x44:1(0x1)
		bool DoCollisions : 1; // 0x44:2(0x1)
		TEnumAsByte MeshAlignment; // 0x45(0x1)
		bool bOverrideMaterial : 1; // 0x46:0(0x1)
		bool bOverrideDefaultMotionBlurSettings : 1; // 0x46:1(0x1)
		bool bEnableMotionBlur : 1; // 0x46:2(0x1)
		unsigned char UnknownData04_5[0x1]; // 0x47(0x1) UNKNOWN PROPERTY
		FRawDistributionVector RollPitchYawRange; // 0x48(0x60)
		TEnumAsByte AxisLockOption; // 0xA8(0x1)
		bool bCameraFacing : 1; // 0xA9:0(0x1)
		TEnumAsByte CameraFacingUpAxisOption; // 0xAA(0x1)
		TEnumAsByte CameraFacingOption; // 0xAB(0x1)
		bool bApplyParticleRotationAsSpin : 1; // 0xAC:0(0x1)
		bool bFaceCameraDirectionRatherThanPosition : 1; // 0xAC:1(0x1)
		bool bCollisionsConsiderPartilceSize : 1; // 0xAC:2(0x1)
		unsigned char UnknownData05_7[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataMesh");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataRibbon
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase	
	{
	public:
		int32_t MaxTessellationBetweenParticles; // 0x30(0x4)
		int32_t SheetsPerTrail; // 0x34(0x4)
		int32_t MaxTrailCount; // 0x38(0x4)
		int32_t MaxParticleInTrailCount; // 0x3C(0x4)
		bool bDeadTrailsOnDeactivate : 1; // 0x40:0(0x1)
		bool bDeadTrailsOnSourceLoss : 1; // 0x40:1(0x1)
		bool bClipSourceSegement : 1; // 0x40:2(0x1)
		bool bEnablePreviousTangentRecalculation : 1; // 0x40:3(0x1)
		bool bTangentRecalculationEveryFrame : 1; // 0x40:4(0x1)
		bool bSpawnInitialParticle : 1; // 0x40:5(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		TEnumAsByte RenderAxis; // 0x44(0x1)
		unsigned char UnknownData05_6[0x3]; // 0x45(0x3) UNKNOWN PROPERTY
		float TangentSpawningScalar; // 0x48(0x4)
		bool bRenderGeometry : 1; // 0x4C:0(0x1)
		bool bRenderSpawnPoints : 1; // 0x4C:1(0x1)
		bool bRenderTangents : 1; // 0x4C:2(0x1)
		bool bRenderTessellation : 1; // 0x4C:3(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		float TilingDistance; // 0x50(0x4)
		float DistanceTessellationStepSize; // 0x54(0x4)
		bool bEnableTangentDiffInterpScale : 1; // 0x58:0(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x59(0x3) UNKNOWN PROPERTY
		float TangentTessellationScalar; // 0x5C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataRibbon");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleVectorFieldBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldGlobal
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase	
	{
	public:
		bool bOverrideGlobalVectorFieldTightness : 1; // 0x30:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		float GlobalVectorFieldScale; // 0x34(0x4)
		float GlobalVectorFieldTightness; // 0x38(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldGlobal");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldLocal
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase	
	{
	public:
		UVectorField VectorField; // 0x30(0x8)
		FVector RelativeTranslation; // 0x38(0x18)
		FRotator RelativeRotation; // 0x50(0x18)
		FVector RelativeScale3D; // 0x68(0x18)
		float Intensity; // 0x80(0x4)
		float Tightness; // 0x84(0x4)
		bool bIgnoreComponentTransform : 1; // 0x88:0(0x1)
		bool bTileX : 1; // 0x88:1(0x1)
		bool bTileY : 1; // 0x88:2(0x1)
		bool bTileZ : 1; // 0x88:3(0x1)
		bool bUseFixDT : 1; // 0x88:4(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x89(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldLocal");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldRotation
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase	
	{
	public:
		FVector MinInitialRotation; // 0x30(0x18)
		FVector MaxInitialRotation; // 0x48(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldRotation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldRotationRate
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase	
	{
	public:
		FVector RotationRate; // 0x30(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldRotationRate");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldScale
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase	
	{
	public:
		UDistributionFloat VectorFieldScale; // 0x30(0x8)
		FRawDistributionFloat VectorFieldScaleRaw; // 0x38(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldScale");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldScaleOverLife
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase	
	{
	public:
		UDistributionFloat VectorFieldScaleOverLife; // 0x30(0x8)
		FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldScaleOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleVelocityBase : public UParticleModule	
	{
	public:
		bool bInWorldSpace : 1; // 0x30:0(0x1)
		bool bApplyOwnerScale : 1; // 0x30:1(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocity
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x90 (0xC8 - 0x38)
	class UParticleModuleVelocity : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionVector StartVelocity; // 0x38(0x60)
		FRawDistributionFloat StartVelocityRadial; // 0x98(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocity");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityCone
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x78 (0xB0 - 0x38)
	class UParticleModuleVelocityCone : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionFloat Angle; // 0x38(0x30)
		FRawDistributionFloat Velocity; // 0x68(0x30)
		FVector Direction; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityCone");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityInheritParent
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x60 (0x98 - 0x38)
	class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionVector Scale; // 0x38(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityInheritParent");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityOverLifetime
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x68 (0xA0 - 0x38)
	class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionVector VelOverLife; // 0x38(0x60)
		bool Absolute : 1; // 0x98:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x99(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityOverLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocity_Seeded
	// Inherited from UParticleModuleVelocity -> UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x18 (0xE0 - 0xC8)
	class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0xC8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocity_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleSpriteEmitter
	// Inherited from UParticleEmitter -> UObject
	// Size: 0x0 (0x1B8 - 0x1B8)
	class UParticleSpriteEmitter : public UParticleEmitter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSpriteEmitter");
			return ret;
		}
	};


	// Class Engine.FXSystemComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x4D0 - 0x4C8)
	class UFXSystemComponent : public UPrimitiveComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FXSystemComponent");
			return ret;
		}

		void SetVectorParameter(FName ParameterName, FVector Param); // Flags: Native|Public|HasDefaults|BlueprintCallable 0x7FF4144ED8D8
		void SetUseAutoManageAttachment(bool bAutoManage); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED7F8
		void SetIntParameter(FName ParameterName, int32_t Param); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED718
		void SetFloatParameter(FName ParameterName, float Param); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED638
		void SetEmitterEnable(FName EmitterName, bool bNewEnableState); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED558
		void SetColorParameter(FName ParameterName, FLinearColor Param); // Flags: Native|Public|HasDefaults|BlueprintCallable 0x7FF4144ED478
		void SetBoolParameter(FName ParameterName, bool Param); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED398
		void SetAutoAttachmentParameters(USceneComponent Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED2B8
		void SetActorParameter(FName ParameterName, AActor Param); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED1D8
		void ReleaseToPool(); // Flags: Native|Public|BlueprintCallable 0x7FF4144ED0F8
		UFXSystemAsset GetFXSystemAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144ED018
	};


	// Class Engine.ParticleSystemComponent
	// Inherited from UFXSystemComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x308 (0x7D0 - 0x4C8)
	class UParticleSystemComponent : public UFXSystemComponent	
	{
	public:
		UParticleSystem Template; // 0x4C8(0x8)
		TArray EmitterMaterials; // 0x4D0(0x10)
		TArray SkelMeshComponents; // 0x4E0(0x10)
		unsigned char UnknownData16_6[0x1]; // 0x4F0(0x1) UNKNOWN PROPERTY
		bool bResetOnDetach : 1; // 0x4F1:0(0x1)
		bool bUpdateOnDedicatedServer : 1; // 0x4F1:1(0x1)
		unsigned char UnknownBit17 : 1; // 0x4F1:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit18 : 1; // 0x4F1:3(0x1) UNKNOWN PROPERTY
		bool bAllowRecycling : 1; // 0x4F1:4(0x1)
		bool bAutoManageAttachment : 1; // 0x4F1:5(0x1)
		bool bAutoAttachWeldSimulatedBodies : 1; // 0x4F1:6(0x1)
		unsigned char UnknownBit19 : 1; // 0x4F1:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit20 : 1; // 0x4F2:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit21 : 1; // 0x4F2:1(0x1) UNKNOWN PROPERTY
		bool bWarmingUp : 1; // 0x4F2:2(0x1)
		bool bOverrideLODMethod : 1; // 0x4F2:3(0x1)
		bool bSkipUpdateDynamicDataDuringTick : 1; // 0x4F2:4(0x1)
		unsigned char UnknownData22_5[0xA]; // 0x4F3(0xA) UNKNOWN PROPERTY
		TEnumAsByte LODMethod; // 0x4FD(0x1)
		EParticleSignificanceLevel RequiredSignificance; // 0x4FE(0x1)
		unsigned char UnknownData23_6[0x1]; // 0x4FF(0x1) UNKNOWN PROPERTY
		TArray InstanceParameters; // 0x500(0x10)
		FMulticastInlineDelegate OnParticleSpawn; // 0x510(0x10)
		FMulticastInlineDelegate OnParticleBurst; // 0x520(0x10)
		FMulticastInlineDelegate OnParticleDeath; // 0x530(0x10)
		FMulticastInlineDelegate OnParticleCollide; // 0x540(0x10)
		bool bOldPositionValid; // 0x550(0x1)
		unsigned char UnknownData24_6[0x7]; // 0x551(0x7) UNKNOWN PROPERTY
		FVector OldPosition; // 0x558(0x18)
		FVector PartSysVelocity; // 0x570(0x18)
		float WarmupTime; // 0x588(0x4)
		float WarmupTickRate; // 0x58C(0x4)
		unsigned char UnknownData25_6[0x4]; // 0x590(0x4) UNKNOWN PROPERTY
		float SecondsBeforeInactive; // 0x594(0x4)
		unsigned char UnknownData26_6[0x4]; // 0x598(0x4) UNKNOWN PROPERTY
		float MaxTimeBeforeForceUpdateTransform; // 0x59C(0x4)
		unsigned char UnknownData27_6[0x20]; // 0x5A0(0x20) UNKNOWN PROPERTY
		TArray ReplayClips; // 0x5C0(0x10)
		unsigned char UnknownData28_6[0x8]; // 0x5D0(0x8) UNKNOWN PROPERTY
		float CustomTimeDilation; // 0x5D8(0x4)
		unsigned char UnknownData29_6[0x54]; // 0x5DC(0x54) UNKNOWN PROPERTY
		TWeakObjectPtr AutoAttachParent; // 0x630(0x8)
		FName AutoAttachSocketName; // 0x638(0x4)
		EAttachmentRule AutoAttachLocationRule; // 0x63C(0x1)
		EAttachmentRule AutoAttachRotationRule; // 0x63D(0x1)
		EAttachmentRule AutoAttachScaleRule; // 0x63E(0x1)
		unsigned char UnknownData30_6[0x51]; // 0x63F(0x51) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnSystemFinished; // 0x690(0x10)
		unsigned char UnknownData31_7[0x130]; // 0x6A0(0x130) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSystemComponent");
			return ret;
		}

		void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte InWidthMode, float InWidth); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EEDD8
		void SetTemplate(UParticleSystem NewTemplate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EECF8
		void SetMaterialParameter(FName ParameterName, UMaterialInterface Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EEC18
		void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144EEB38
		void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EEA58
		void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144EE978
		void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144EE898
		void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EE7B8
		void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144EE6D8
		void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144EE5F8
		void SetAutoAttachParams(USceneComponent Parent, FName SocketName, TEnumAsByte LocationType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EE518
		int32_t GetNumActiveParticles(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EE438
		UMaterialInterface GetNamedMaterial(FName InName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EE358
		bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EE278
		bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144EE198
		bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EE0B8
		bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EDFD8
		bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144EDEF8
		bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EDE18
		bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EDD38
		void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144EDC58
		void EndTrails(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EDB78
		UMaterialInstanceDynamic CreateNamedDynamicMaterialInstance(FName InName, UMaterialInterface SourceMaterial); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EDA98
		void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte InWidthMode, float InWidth); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144ED9B8
	};


	// Class Engine.ParticleSystemReplay
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UParticleSystemReplay : public UObject	
	{
	public:
		int32_t ClipIDNumber; // 0x28(0x4)
		unsigned char UnknownData01_7[0x14]; // 0x2C(0x14) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSystemReplay");
			return ret;
		}
	};


	// Class Engine.PathFollowingAgentInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPathFollowingAgentInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PathFollowingAgentInterface");
			return ret;
		}
	};


	// Class Engine.PhysicsObjectBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsObjectBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsObjectBlueprintLibrary");
			return ret;
		}

		FTransform GetPhysicsObjectWorldTransform(UPrimitiveComponent Component, FName BoneName); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144EF158
		FClosestPhysicsObjectResult GetClosestPhysicsObjectFromWorldLocation(UPrimitiveComponent Component, FVector& WorldLocation); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4144EF078
		bool ExtractClosestPhysicsObjectResults(FClosestPhysicsObjectResult& Result, FName& OutName); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144EEF98
		void ApplyRadialImpulse(UPrimitiveComponent Component, FVector Origin, float Radius, float Strength, TEnumAsByte Falloff, bool bApplyStrain, float Strain, bool bVelChange, float MinValue, float MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF4144EEEB8
	};


	// Class Engine.PhysicsSpringComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x30 (0x250 - 0x220)
	class UPhysicsSpringComponent : public USceneComponent	
	{
	public:
		float SpringStiffness; // 0x220(0x4)
		float SpringDamping; // 0x224(0x4)
		float SpringLengthAtRest; // 0x228(0x4)
		float SpringRadius; // 0x22C(0x4)
		TEnumAsByte SpringChannel; // 0x230(0x1)
		bool bIgnoreSelf; // 0x231(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x232(0x2) UNKNOWN PROPERTY
		float SpringCompression; // 0x234(0x4)
		unsigned char UnknownData03_7[0x18]; // 0x238(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsSpringComponent");
			return ret;
		}

		FVector GetSpringRestingPoint(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EF4D8
		FVector GetSpringDirection(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EF3F8
		FVector GetSpringCurrentEndPoint(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144EF318
		float GetNormalizedCompressionScalar(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EF238
	};


	// Class Engine.PhysicsThreadLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsThreadLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsThreadLibrary");
			return ret;
		}

		void AddForce(FBodyInstanceAsyncPhysicsTickHandle Handle, FVector Force, bool bAccelChange); // Flags: Final|Native|Static|Private|HasDefaults|BlueprintCallable 0x7FF4144EF5B8
	};


	// Class Engine.PhysicsThrusterComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x230 - 0x220)
	class UPhysicsThrusterComponent : public USceneComponent	
	{
	public:
		float ThrustStrength; // 0x220(0x4)
		unsigned char UnknownData01_7[0xC]; // 0x224(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsThrusterComponent");
			return ret;
		}
	};


	// Class Engine.PieFixupTestObject
	// Inherited from UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UPieFixupTestObject : public UObject	
	{
	public:
		FSoftObjectPath Path; // 0x28(0x18)
		TWeakObjectPtr TypedPtr; // 0x40(0x20)
		FPieFixupStructWithSoftObjectPath Struct; // 0x60(0x38)
		TArray Array; // 0x98(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PieFixupTestObject");
			return ret;
		}
	};


	// Class Engine.SceneCapture
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ASceneCapture : public AActor	
	{
	public:
		UStaticMeshComponent MeshComp; // 0x290(0x8)
		USceneComponent SceneComponent; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCapture");
			return ret;
		}
	};


	// Class Engine.PlanarReflection
	// Inherited from ASceneCapture -> AActor -> UObject
	// Size: 0x10 (0x2B0 - 0x2A0)
	class APlanarReflection : public ASceneCapture	
	{
	public:
		UPlanarReflectionComponent PlanarReflectionComponent; // 0x2A0(0x8)
		bool bShowPreviewPlane; // 0x2A8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x2A9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlanarReflection");
			return ret;
		}

		void OnInterpToggle(bool bEnable); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144EF698
	};


	// Class Engine.SceneCaptureComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xD0 (0x2F0 - 0x220)
	class USceneCaptureComponent : public USceneComponent	
	{
	public:
		ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x220(0x1)
		TEnumAsByte CaptureSource; // 0x221(0x1)
		bool bCaptureEveryFrame : 1; // 0x222:0(0x1)
		bool bCaptureOnMovement : 1; // 0x222:1(0x1)
		bool bCaptureGpuNextRender : 1; // 0x222:2(0x1)
		bool bDumpGpuNextRender : 1; // 0x222:3(0x1)
		bool bAlwaysPersistRenderingState; // 0x223(0x1)
		unsigned char UnknownData04_6[0x4]; // 0x224(0x4) UNKNOWN PROPERTY
		TArray HiddenComponents; // 0x228(0x10)
		TArray HiddenActors; // 0x238(0x10)
		TArray ShowOnlyComponents; // 0x248(0x10)
		TArray ShowOnlyActors; // 0x258(0x10)
		float LODDistanceFactor; // 0x268(0x4)
		float MaxViewDistanceOverride; // 0x26C(0x4)
		int32_t CaptureSortPriority; // 0x270(0x4)
		bool bUseRayTracingIfEnabled; // 0x274(0x1)
		unsigned char UnknownData05_6[0x3]; // 0x275(0x3) UNKNOWN PROPERTY
		TArray ShowFlagSettings; // 0x278(0x10)
		unsigned char UnknownData06_6[0x40]; // 0x288(0x40) UNKNOWN PROPERTY
		FString ProfilingEventName; // 0x2C8(0x10)
		unsigned char UnknownData07_7[0x18]; // 0x2D8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureComponent");
			return ret;
		}

		void ShowOnlyComponent(UPrimitiveComponent InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F0038
		void ShowOnlyActorComponents(AActor InActor, bool bIncludeFromChildActors); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EFF58
		void SetShowFlagSettings(TArray& InShowFlagSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144EFE78
		void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EFD98
		void RemoveShowOnlyComponent(UPrimitiveComponent InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EFCB8
		void RemoveShowOnlyActorComponents(AActor InActor, bool bIncludeFromChildActors); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EFBD8
		void HideComponent(UPrimitiveComponent InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EFAF8
		void HideActorComponents(AActor InActor, bool bIncludeFromChildActors); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EFA18
		TArray GetShowFlagSettings(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144EF938
		void ClearShowOnlyComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EF858
		void ClearHiddenComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144EF778
	};


	// Class Engine.PlanarReflectionComponent
	// Inherited from USceneCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x160 (0x450 - 0x2F0)
	class UPlanarReflectionComponent : public USceneCaptureComponent	
	{
	public:
		UBoxComponent PreviewBox; // 0x2F0(0x8)
		float NormalDistortionStrength; // 0x2F8(0x4)
		float PrefilterRoughness; // 0x2FC(0x4)
		float PrefilterRoughnessDistance; // 0x300(0x4)
		int32_t ScreenPercentage; // 0x304(0x4)
		float ExtraFOV; // 0x308(0x4)
		float DistanceFromPlaneFadeStart; // 0x30C(0x4)
		float DistanceFromPlaneFadeEnd; // 0x310(0x4)
		float DistanceFromPlaneFadeoutStart; // 0x314(0x4)
		float DistanceFromPlaneFadeoutEnd; // 0x318(0x4)
		float AngleFromPlaneFadeStart; // 0x31C(0x4)
		float AngleFromPlaneFadeEnd; // 0x320(0x4)
		bool bShowPreviewPlane; // 0x324(0x1)
		bool bRenderSceneTwoSided; // 0x325(0x1)
		unsigned char UnknownData01_7[0x12A]; // 0x326(0x12A) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlanarReflectionComponent");
			return ret;
		}
	};


	// Class Engine.PlaneReflectionCapture
	// Inherited from AReflectionCapture -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class APlaneReflectionCapture : public AReflectionCapture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlaneReflectionCapture");
			return ret;
		}
	};


	// Class Engine.PlaneReflectionCaptureComponent
	// Inherited from UReflectionCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x2A0 - 0x288)
	class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent	
	{
	public:
		float InfluenceRadiusScale; // 0x288(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x28C(0x4) UNKNOWN PROPERTY
		UDrawSphereComponent PreviewInfluenceRadius; // 0x290(0x8)
		UBoxComponent PreviewCaptureBox; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlaneReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.PlatformInterfaceWebResponse
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UPlatformInterfaceWebResponse : public UObject	
	{
	public:
		FString OriginalURL; // 0x28(0x10)
		int32_t ResponseCode; // 0x38(0x4)
		int32_t tag; // 0x3C(0x4)
		FString StringResponse; // 0x40(0x10)
		TArray BinaryResponse; // 0x50(0x10)
		unsigned char UnknownData01_7[0x50]; // 0x60(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformInterfaceWebResponse");
			return ret;
		}

		int32_t GetNumHeaders(); // Flags: Native|Public 0x7FF4144F02D8
		FString GetHeaderValue(FString HeaderName); // Flags: Native|Public 0x7FF4144F01F8
		void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value); // Flags: Native|Public|HasOutParms 0x7FF4144F0118
	};


	// Class Engine.PlayerCameraManager
	// Inherited from AActor -> UObject
	// Size: 0x2270 (0x2500 - 0x290)
	class APlayerCameraManager : public AActor	
	{
	public:
		APlayerController PCOwner; // 0x290(0x8)
		USceneComponent TransformComponent; // 0x298(0x8)
		unsigned char UnknownData18_6[0x4]; // 0x2A0(0x4) UNKNOWN PROPERTY
		float DefaultFOV; // 0x2A4(0x4)
		unsigned char UnknownData19_6[0x4]; // 0x2A8(0x4) UNKNOWN PROPERTY
		float DefaultOrthoWidth; // 0x2AC(0x4)
		unsigned char UnknownData20_6[0x4]; // 0x2B0(0x4) UNKNOWN PROPERTY
		float DefaultAspectRatio; // 0x2B4(0x4)
		unsigned char UnknownData21_6[0x68]; // 0x2B8(0x68) UNKNOWN PROPERTY
		FTViewTarget ViewTarget; // 0x320(0x830)
		FTViewTarget PendingViewTarget; // 0xB50(0x830)
		unsigned char UnknownData22_6[0x30]; // 0x1380(0x30) UNKNOWN PROPERTY
		FCameraCacheEntry CameraCachePrivate; // 0x13B0(0x820)
		FCameraCacheEntry LastFrameCameraCachePrivate; // 0x1BD0(0x820)
		TArray ModifierList; // 0x23F0(0x10)
		TArray DefaultModifiers; // 0x2400(0x10)
		float FreeCamDistance; // 0x2410(0x4)
		unsigned char UnknownData23_6[0x4]; // 0x2414(0x4) UNKNOWN PROPERTY
		FVector FreeCamOffset; // 0x2418(0x18)
		FVector ViewTargetOffset; // 0x2430(0x18)
		FMulticastInlineDelegate OnAudioFadeChangeEvent; // 0x2448(0x10)
		unsigned char UnknownData24_6[0x18]; // 0x2458(0x18) UNKNOWN PROPERTY
		TArray CameraLensEffects; // 0x2470(0x10)
		UCameraModifier_CameraShake CachedCameraShakeMod; // 0x2480(0x8)
		TArray PostProcessBlendCache; // 0x2488(0x10)
		unsigned char UnknownData25_6[0x20]; // 0x2498(0x20) UNKNOWN PROPERTY
		ACameraActor AnimCameraActor; // 0x24B8(0x8)
		bool bIsOrthographic : 1; // 0x24C0:0(0x1)
		bool bAutoCalculateOrthoPlanes : 1; // 0x24C0:1(0x1)
		unsigned char UnknownData26_5[0x3]; // 0x24C1(0x3) UNKNOWN PROPERTY
		float AutoPlaneShift; // 0x24C4(0x4)
		bool bUpdateOrthoPlanes : 1; // 0x24C8:0(0x1)
		bool bUseCameraHeightAsViewTarget : 1; // 0x24C8:1(0x1)
		bool bDefaultConstrainAspectRatio : 1; // 0x24C8:2(0x1)
		unsigned char UnknownBit27 : 1; // 0x24C8:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit28 : 1; // 0x24C8:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit29 : 1; // 0x24C8:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit30 : 1; // 0x24C8:6(0x1) UNKNOWN PROPERTY
		bool bClientSimulatingViewTarget : 1; // 0x24C8:7(0x1)
		bool bUseClientSideCameraUpdates : 1; // 0x24C9:0(0x1)
		unsigned char UnknownBit31 : 1; // 0x24C9:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit32 : 1; // 0x24C9:2(0x1) UNKNOWN PROPERTY
		bool bGameCameraCutThisFrame : 1; // 0x24C9:3(0x1)
		unsigned char UnknownData33_5[0x2]; // 0x24CA(0x2) UNKNOWN PROPERTY
		float ViewPitchMin; // 0x24CC(0x4)
		float ViewPitchMax; // 0x24D0(0x4)
		float ViewYawMin; // 0x24D4(0x4)
		float ViewYawMax; // 0x24D8(0x4)
		float ViewRollMin; // 0x24DC(0x4)
		float ViewRollMax; // 0x24E0(0x4)
		unsigned char UnknownData34_6[0x4]; // 0x24E4(0x4) UNKNOWN PROPERTY
		float ServerUpdateCameraTimeout; // 0x24E8(0x4)
		unsigned char UnknownData35_7[0xC]; // 0x24EC(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerCameraManager");
			return ret;
		}

		void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF4144F1D18
		void StopCameraShake(UCameraShakeBase ShakeInstance, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F1C38
		void StopCameraFade(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F1B58
		void StopAllInstancesOfCameraShakeFromSource(UClass Shake, UCameraShakeSourceComponent SourceComponent, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F1A78
		void StopAllInstancesOfCameraShake(UClass Shake, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F1998
		void StopAllCameraShakesFromSource(UCameraShakeSourceComponent SourceComponent, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F18B8
		void StopAllCameraShakes(bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F17D8
		UCameraShakeBase StartCameraShakeFromSource(UClass ShakeClass, UCameraShakeSourceComponent SourceComponent, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F16F8
		UCameraShakeBase StartCameraShake(UClass ShakeClass, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F1618
		void StartCameraFade(float FromAlpha, float ToAlpha, float duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F1538
		void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F1458
		void SetGameCameraCutThisFrame(); // Flags: Native|Public|BlueprintCallable 0x7FF4144F1378
		void RemoveGenericCameraLensEffect(TScriptInterface Emitter); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F1298
		bool RemoveCameraModifier(UCameraModifier ModifierToRemove); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F11B8
		void RemoveCameraLensEffect(AEmitterCameraLensEffectBase Emitter); // Flags: RequiredAPI|Native|Public 0x7FF4144F10D8
		void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF4144F0FF8
		void OnPhotographySessionStart(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 0x7FF4144F0F18
		void OnPhotographySessionEnd(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 0x7FF4144F0E38
		void OnPhotographyMultiPartCaptureStart(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 0x7FF4144F0D58
		void OnPhotographyMultiPartCaptureEnd(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent 0x7FF4144F0C78
		APlayerController GetOwningPlayerController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F0B98
		float GetFOVAngle(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F0AB8
		FRotator GetCameraRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F09D8
		FVector GetCameraLocation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F08F8
		UCameraModifier FindCameraModifierByClass(UClass ModifierClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F0818
		void ClearCameraLensEffects(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F0738
		bool BlueprintUpdateCamera(AActor CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF4144F0658
		UCameraModifier AddNewCameraModifier(UClass ModifierClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F0578
		TScriptInterface AddGenericCameraLensEffect(UClass LensEffectEmitterClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F0498
		AEmitterCameraLensEffectBase AddCameraLensEffect(UClass LensEffectEmitterClass); // Flags: RequiredAPI|Native|Public 0x7FF4144F03B8
	};


	// Class Engine.PluginBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPluginBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PluginBlueprintLibrary");
			return ret;
		}

		bool IsPluginMounted(FString PluginName); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF4144F2878
		bool GetPluginVersionName(FString PluginName, FString& OutVersionName); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F2798
		bool GetPluginVersion(FString PluginName, int32_t& OutVersion); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F26B8
		bool GetPluginNameForObjectPath(FSoftObjectPath& ObjectPath, FString& OutPluginName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144F25D8
		bool GetPluginMountedAssetPath(FString PluginName, FString& OutAssetPath); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F24F8
		bool GetPluginEditorCustomVirtualPath(FString PluginName, FString& OutVirtualPath); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F2418
		bool GetPluginDescriptorFilePath(FString PluginName, FString& OutFilePath); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F2338
		bool GetPluginDescription(FString PluginName, FString& OutDescription); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F2258
		bool GetPluginContentDir(FString PluginName, FString& OutContentDir); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F2178
		bool GetPluginBaseDir(FString PluginName, FString& OutBaseDir); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144F2098
		TArray GetEnabledPluginNames(); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF4144F1FB8
		TArray GetAdditionalProjectPluginSearchPaths(); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF4144F1ED8
		TArray GetAdditionalPluginSearchPaths(); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF4144F1DF8
	};


	// Class Engine.PointLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class APointLight : public ALight	
	{
	public:
		UPointLightComponent PointLightComponent; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PointLight");
			return ret;
		}

		void SetRadius(float NewRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F2A38
		void SetLightFalloffExponent(float NewLightFalloffExponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F2958
	};


	// Class Engine.Polys
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UPolys : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Polys");
			return ret;
		}
	};


	// Class Engine.PrecomputedVisibilityOverrideVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x30 (0x2F8 - 0x2C8)
	class APrecomputedVisibilityOverrideVolume : public AVolume	
	{
	public:
		TArray OverrideVisibleActors; // 0x2C8(0x10)
		TArray OverrideInvisibleActors; // 0x2D8(0x10)
		TArray OverrideInvisibleLevels; // 0x2E8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrecomputedVisibilityOverrideVolume");
			return ret;
		}
	};


	// Class Engine.RigidBodyBase
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ARigidBodyBase : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RigidBodyBase");
			return ret;
		}
	};


	// Class Engine.RadialForceActor
	// Inherited from ARigidBodyBase -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ARadialForceActor : public ARigidBodyBase	
	{
	public:
		URadialForceComponent ForceComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RadialForceActor");
			return ret;
		}

		void ToggleForce(); // Flags: Native|Public|BlueprintCallable 0x7FF4144F2DB8
		void FireImpulse(); // Flags: Native|Public|BlueprintCallable 0x7FF4144F2CD8
		void EnableForce(); // Flags: Native|Public|BlueprintCallable 0x7FF4144F2BF8
		void DisableForce(); // Flags: Native|Public|BlueprintCallable 0x7FF4144F2B18
	};


	// Class Engine.ReplicationDriver
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UReplicationDriver : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplicationDriver");
			return ret;
		}
	};


	// Class Engine.ReplicationConnectionDriver
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UReplicationConnectionDriver : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplicationConnectionDriver");
			return ret;
		}
	};


	// Class Engine.RuntimePartition
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class URuntimePartition : public UObject	
	{
	public:
		FName Name; // 0x28(0x4)
		bool bBlockOnSlowStreaming; // 0x2C(0x1)
		bool bClientOnlyVisible; // 0x2D(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x2E(0x2) UNKNOWN PROPERTY
		int32_t Priority; // 0x30(0x4)
		ERuntimePartitionCellBoundsMethod BoundsMethod; // 0x34(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		int32_t LoadingRange; // 0x38(0x4)
		FLinearColor DebugColor; // 0x3C(0x10)
		int32_t HLODIndex; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartition");
			return ret;
		}
	};


	// Class Engine.RuntimePartitionLevelStreaming
	// Inherited from URuntimePartition -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class URuntimePartitionLevelStreaming : public URuntimePartition	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartitionLevelStreaming");
			return ret;
		}
	};


	// Class Engine.RuntimePartitionLHGrid
	// Inherited from URuntimePartition -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class URuntimePartitionLHGrid : public URuntimePartition	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartitionLHGrid");
			return ret;
		}
	};


	// Class Engine.RuntimePartitionPersistent
	// Inherited from URuntimePartition -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class URuntimePartitionPersistent : public URuntimePartition	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartitionPersistent");
			return ret;
		}
	};


	// Class Engine.RVOAvoidanceInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class URVOAvoidanceInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RVOAvoidanceInterface");
			return ret;
		}
	};


	// Class Engine.Scene
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UScene : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Scene");
			return ret;
		}
	};


	// Class Engine.SceneCapture2D
	// Inherited from ASceneCapture -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ASceneCapture2D : public ASceneCapture	
	{
	public:
		USceneCaptureComponent2D CaptureComponent2D; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCapture2D");
			return ret;
		}

		void OnInterpToggle(bool bEnable); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144F2E98
	};


	// Class Engine.SceneCaptureComponent2D
	// Inherited from USceneCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x810 (0xB00 - 0x2F0)
	class USceneCaptureComponent2D : public USceneCaptureComponent	
	{
	public:
		TEnumAsByte ProjectionType; // 0x2F0(0x1)
		unsigned char UnknownData10_6[0x3]; // 0x2F1(0x3) UNKNOWN PROPERTY
		float FOVAngle; // 0x2F4(0x4)
		float OrthoWidth; // 0x2F8(0x4)
		bool bAutoCalculateOrthoPlanes; // 0x2FC(0x1)
		unsigned char UnknownData11_6[0x3]; // 0x2FD(0x3) UNKNOWN PROPERTY
		float AutoPlaneShift; // 0x300(0x4)
		bool bUpdateOrthoPlanes; // 0x304(0x1)
		bool bUseCameraHeightAsViewTarget; // 0x305(0x1)
		unsigned char UnknownData12_6[0x2]; // 0x306(0x2) UNKNOWN PROPERTY
		UTextureRenderTarget2D TextureTarget; // 0x308(0x8)
		TEnumAsByte CompositeMode; // 0x310(0x1)
		unsigned char UnknownData13_6[0xF]; // 0x311(0xF) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x320(0x6F0)
		float PostProcessBlendWeight; // 0xA10(0x4)
		bool bOverride_CustomNearClippingPlane : 1; // 0xA14:0(0x1)
		unsigned char UnknownData14_5[0x3]; // 0xA15(0x3) UNKNOWN PROPERTY
		float CustomNearClippingPlane; // 0xA18(0x4)
		bool bUseCustomProjectionMatrix; // 0xA1C(0x1)
		unsigned char UnknownData15_6[0x3]; // 0xA1D(0x3) UNKNOWN PROPERTY
		FMatrix CustomProjectionMatrix; // 0xA20(0x80)
		bool bUseFauxOrthoViewPos; // 0xAA0(0x1)
		bool bEnableOrthographicTiling; // 0xAA1(0x1)
		unsigned char UnknownData16_6[0x2]; // 0xAA2(0x2) UNKNOWN PROPERTY
		int32_t NumXTiles; // 0xAA4(0x4)
		int32_t NumYTiles; // 0xAA8(0x4)
		bool bEnableClipPlane; // 0xAAC(0x1)
		unsigned char UnknownData17_6[0x3]; // 0xAAD(0x3) UNKNOWN PROPERTY
		FVector ClipPlaneBase; // 0xAB0(0x18)
		FVector ClipPlaneNormal; // 0xAC8(0x18)
		bool bRenderInMainRenderer; // 0xAE0(0x1)
		unsigned char UnknownData18_6[0x3]; // 0xAE1(0x3) UNKNOWN PROPERTY
		bool bCameraCutThisFrame : 1; // 0xAE4:0(0x1)
		bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0xAE4:1(0x1)
		unsigned char UnknownData19_7[0x1B]; // 0xAE5(0x1B) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureComponent2D");
			return ret;
		}

		void RemoveBlendable(TScriptInterface InBlendableObject); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144F3138
		void CaptureScene(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F3058
		void AddOrUpdateBlendable(TScriptInterface InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4144F2F78
	};


	// Class Engine.SceneCaptureComponentCube
	// Inherited from USceneCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x710 (0xA00 - 0x2F0)
	class USceneCaptureComponentCube : public USceneCaptureComponent	
	{
	public:
		UTextureRenderTargetCube TextureTarget; // 0x2F0(0x8)
		bool bCaptureRotation; // 0x2F8(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x2F9(0x7) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x300(0x6F0)
		float PostProcessBlendWeight; // 0x9F0(0x4)
		unsigned char UnknownData03_7[0xC]; // 0x9F4(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureComponentCube");
			return ret;
		}

		void CaptureScene(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F3218
	};


	// Class Engine.SceneCaptureCube
	// Inherited from ASceneCapture -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ASceneCaptureCube : public ASceneCapture	
	{
	public:
		USceneCaptureComponentCube CaptureComponentCube; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureCube");
			return ret;
		}

		void OnInterpToggle(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F32F8
	};


	// Class Engine.ShadowMapTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class UShadowMapTexture2D : public UTexture2D	
	{
	public:
		TEnumAsByte ShadowmapFlags; // 0x150(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x151(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ShadowMapTexture2D");
			return ret;
		}
	};


	// Class Engine.SkeletalBodySetup
	// Inherited from UBodySetup -> UBodySetupCore -> UObject
	// Size: 0x18 (0x308 - 0x2F0)
	class USkeletalBodySetup : public UBodySetup	
	{
	public:
		bool bSkipScaleFromAnimation; // 0x2F0(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x2F1(0x7) UNKNOWN PROPERTY
		TArray PhysicalAnimationData; // 0x2F8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalBodySetup");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshSocket
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class USkeletalMeshSocket : public UObject	
	{
	public:
		FName SocketName; // 0x28(0x4)
		FName BoneName; // 0x2C(0x4)
		FVector RelativeLocation; // 0x30(0x18)
		FRotator RelativeRotation; // 0x48(0x18)
		FVector RelativeScale; // 0x60(0x18)
		bool bForceAlwaysAnimated; // 0x78(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x79(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshSocket");
			return ret;
		}

		void InitializeSocketFromLocation(USkeletalMeshComponent SkelComp, FVector WorldLocation, FVector WorldNormal); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F34B8
		FVector GetSocketLocation(USkeletalMeshComponent SkelComp); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F33D8
	};


	// Class Engine.SkeletalMeshDescriptionBulkData
	// Inherited from UMeshDescriptionBaseBulkData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USkeletalMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshDescriptionBulkData");
			return ret;
		}
	};


	// Class Engine.SkyLight
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ASkyLight : public AInfo	
	{
	public:
		USkyLightComponent LightComponent; // 0x290(0x8)
		bool bEnabled : 1; // 0x298:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyLight");
			return ret;
		}

		void OnRep_bEnabled(); // Flags: RequiredAPI|Native|Public 0x7FF4144F6238
	};


	// Class Engine.SkyLightComponent
	// Inherited from ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x1D8 (0x440 - 0x268)
	class USkyLightComponent : public ULightComponentBase	
	{
	public:
		bool bRealTimeCapture; // 0x268(0x1)
		TEnumAsByte SourceType; // 0x269(0x1)
		unsigned char UnknownData05_6[0x6]; // 0x26A(0x6) UNKNOWN PROPERTY
		UTextureCube Cubemap; // 0x270(0x8)
		float SourceCubemapAngle; // 0x278(0x4)
		int32_t CubemapResolution; // 0x27C(0x4)
		float SkyDistanceThreshold; // 0x280(0x4)
		bool bCaptureEmissiveOnly; // 0x284(0x1)
		bool bLowerHemisphereIsBlack; // 0x285(0x1)
		unsigned char UnknownData06_6[0x2]; // 0x286(0x2) UNKNOWN PROPERTY
		FLinearColor LowerHemisphereColor; // 0x288(0x10)
		float OcclusionMaxDistance; // 0x298(0x4)
		float Contrast; // 0x29C(0x4)
		float OcclusionExponent; // 0x2A0(0x4)
		float MinOcclusion; // 0x2A4(0x4)
		FColor OcclusionTint; // 0x2A8(0x4)
		bool bCloudAmbientOcclusion : 1; // 0x2AC:0(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x2AD(0x3) UNKNOWN PROPERTY
		float CloudAmbientOcclusionStrength; // 0x2B0(0x4)
		float CloudAmbientOcclusionExtent; // 0x2B4(0x4)
		float CloudAmbientOcclusionMapResolutionScale; // 0x2B8(0x4)
		float CloudAmbientOcclusionApertureScale; // 0x2BC(0x4)
		TEnumAsByte OcclusionCombineMode; // 0x2C0(0x1)
		unsigned char UnknownData08_6[0xA7]; // 0x2C1(0xA7) UNKNOWN PROPERTY
		UTextureCube BlendDestinationCubemap; // 0x368(0x8)
		unsigned char UnknownData09_7[0xD0]; // 0x370(0xD0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyLightComponent");
			return ret;
		}

		void SetVolumetricScatteringIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6D98
		void SetSourceCubemapAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6CB8
		void SetOcclusionTint(FColor& InTint); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144F6BD8
		void SetOcclusionExponent(float InOcclusionExponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6AF8
		void SetOcclusionContrast(float InOcclusionContrast); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6A18
		void SetMinOcclusion(float InMinOcclusion); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6938
		void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144F6858
		void SetLightColor(FLinearColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F6778
		void SetIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6698
		void SetIndirectLightingIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F65B8
		void SetCubemapBlend(UTextureCube SourceCubemap, UTextureCube DestinationCubemap, float InBlendFraction); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F64D8
		void SetCubemap(UTextureCube NewCubemap); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F63F8
		void RecaptureSky(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F6318
	};


	// Class Engine.SMInstanceManager
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USMInstanceManager : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceManager");
			return ret;
		}
	};


	// Class Engine.SMInstanceManagerProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USMInstanceManagerProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceManagerProvider");
			return ret;
		}
	};


	// Class Engine.SoundAttenuation
	// Inherited from UObject
	// Size: 0x3D0 (0x3F8 - 0x28)
	class USoundAttenuation : public UObject	
	{
	public:
		FSoundAttenuationSettings Attenuation; // 0x28(0x3D0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundAttenuation");
			return ret;
		}
	};


	// Class Engine.SoundAttenuationEditorSettings
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USoundAttenuationEditorSettings : public UObject	
	{
	public:
		bool bEnableReverbSend; // 0x28(0x1)
		bool bEnableSendToAudioLink; // 0x29(0x1)
		unsigned char UnknownData01_7[0x6]; // 0x2A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundAttenuationEditorSettings");
			return ret;
		}
	};


	// Class Engine.SoundEffectPresetWidgetInterface
	// Inherited from UAudioPanelWidgetInterface -> UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USoundEffectPresetWidgetInterface : public UAudioPanelWidgetInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectPresetWidgetInterface");
			return ret;
		}

		void OnPropertyChanged(USoundEffectPreset Preset, FName PropertyName); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144F7038
		void OnConstructed(USoundEffectPreset Preset); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144F6F58
		UClass GetClass(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144F6E78
	};


	// Class Engine.SoundEffectSourcePreset
	// Inherited from USoundEffectPreset -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class USoundEffectSourcePreset : public USoundEffectPreset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectSourcePreset");
			return ret;
		}
	};


	// Class Engine.SoundEffectSourcePresetChain
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class USoundEffectSourcePresetChain : public UObject	
	{
	public:
		TArray Chain; // 0x28(0x10)
		bool bPlayEffectChainTails : 1; // 0x38:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectSourcePresetChain");
			return ret;
		}
	};


	// Class Engine.SoundGroups
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class USoundGroups : public UObject	
	{
	public:
		TArray SoundGroupProfiles; // 0x28(0x10)
		unsigned char UnknownData01_7[0x50]; // 0x38(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundGroups");
			return ret;
		}
	};


	// Class Engine.SoundNode
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class USoundNode : public UObject	
	{
	public:
		TArray ChildNodes; // 0x28(0x10)
		unsigned char UnknownData01_7[0x10]; // 0x38(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNode");
			return ret;
		}
	};


	// Class Engine.SoundNodeModulatorContinuous
	// Inherited from USoundNode -> UObject
	// Size: 0x38 (0x80 - 0x48)
	class USoundNodeModulatorContinuous : public USoundNode	
	{
	public:
		FModulatorContinuousParams PitchModulationParams; // 0x48(0x1C)
		FModulatorContinuousParams VolumeModulationParams; // 0x64(0x1C)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeModulatorContinuous");
			return ret;
		}
	};


	// Class Engine.SoundSubmixWidgetInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USoundSubmixWidgetInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmixWidgetInterface");
			return ret;
		}

		void OnConstructed(USoundSubmixBase SoundSubmix); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF4144F7118
	};


	// Class Engine.SparseVolumeTexture
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USparseVolumeTexture : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SparseVolumeTexture");
			return ret;
		}

		int32_t GetSizeZ(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F7658
		int32_t GetSizeY(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F7578
		int32_t GetSizeX(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F7498
		int32_t GetNumMipLevels(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F73B8
		int32_t GetNumFrames(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F72D8
		FTransform GetFrameTransform(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F71F8
	};


	// Class Engine.SparseVolumeTextureFrame
	// Inherited from USparseVolumeTexture -> UObject
	// Size: 0x1A8 (0x1D0 - 0x28)
	class USparseVolumeTextureFrame : public USparseVolumeTexture	
	{
	public:
		USparseVolumeTexture Owner; // 0x28(0x8)
		int32_t FrameIndex; // 0x30(0x4)
		unsigned char UnknownData02_6[0xC]; // 0x34(0xC) UNKNOWN PROPERTY
		FTransform Transform; // 0x40(0x60)
		unsigned char UnknownData03_7[0x130]; // 0xA0(0x130) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SparseVolumeTextureFrame");
			return ret;
		}
	};


	// Class Engine.StreamableSparseVolumeTexture
	// Inherited from USparseVolumeTexture -> UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UStreamableSparseVolumeTexture : public USparseVolumeTexture	
	{
	public:
		unsigned char UnknownData04_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FIntVector VolumeResolution; // 0x30(0xC)
		int32_t NumMipLevels; // 0x3C(0x4)
		int32_t NumFrames; // 0x40(0x4)
		TEnumAsByte FormatA; // 0x44(0x1)
		TEnumAsByte FormatB; // 0x45(0x1)
		unsigned char UnknownData05_6[0xA]; // 0x46(0xA) UNKNOWN PROPERTY
		FVector4f FallbackValueA; // 0x50(0x10)
		FVector4f FallbackValueB; // 0x60(0x10)
		TEnumAsByte AddressX; // 0x70(0x1)
		TEnumAsByte AddressY; // 0x71(0x1)
		TEnumAsByte AddressZ; // 0x72(0x1)
		bool bLocalDDCOnly; // 0x73(0x1)
		float StreamingPoolSizeFactor; // 0x74(0x4)
		int32_t NumberOfPrefetchFrames; // 0x78(0x4)
		float PrefetchPercentageStepSize; // 0x7C(0x4)
		float PrefetchPercentageBias; // 0x80(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x84(0x4) UNKNOWN PROPERTY
		TArray AssetUserData; // 0x88(0x10)
		TArray Frames; // 0x98(0x10)
		unsigned char UnknownData07_7[0x8]; // 0xA8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamableSparseVolumeTexture");
			return ret;
		}
	};


	// Class Engine.StaticSparseVolumeTexture
	// Inherited from UStreamableSparseVolumeTexture -> USparseVolumeTexture -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UStaticSparseVolumeTexture : public UStreamableSparseVolumeTexture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticSparseVolumeTexture");
			return ret;
		}
	};


	// Class Engine.AnimatedSparseVolumeTexture
	// Inherited from UStreamableSparseVolumeTexture -> USparseVolumeTexture -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UAnimatedSparseVolumeTexture : public UStreamableSparseVolumeTexture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimatedSparseVolumeTexture");
			return ret;
		}
	};


	// Class Engine.AnimatedSparseVolumeTextureController
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UAnimatedSparseVolumeTextureController : public UObject	
	{
	public:
		USparseVolumeTexture SparseVolumeTexture; // 0x28(0x8)
		float Time; // 0x30(0x4)
		bool bIsPlaying; // 0x34(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		float FrameRate; // 0x38(0x4)
		int32_t MipLevel; // 0x3C(0x4)
		bool bBlockingStreamingRequests; // 0x40(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x41(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimatedSparseVolumeTextureController");
			return ret;
		}

		void Update(float DeltaTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7E38
		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7D58
		void Play(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7C78
		void Pause(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7B98
		USparseVolumeTextureFrame GetFrameByIndex(int32_t FrameIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7AB8
		float GetFractionalFrameIndex(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F79D8
		float GetDuration(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F78F8
		void GetCurrentFramesForInterpolation(USparseVolumeTextureFrame& Frame0, USparseVolumeTextureFrame& Frame1, float& LerpAlpha); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144F7818
		USparseVolumeTextureFrame GetCurrentFrame(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7738
	};


	// Class Engine.SphereReflectionCapture
	// Inherited from AReflectionCapture -> AActor -> UObject
	// Size: 0x8 (0x2A0 - 0x298)
	class ASphereReflectionCapture : public AReflectionCapture	
	{
	public:
		UDrawSphereComponent DrawCaptureRadius; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SphereReflectionCapture");
			return ret;
		}
	};


	// Class Engine.SphereReflectionCaptureComponent
	// Inherited from UReflectionCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x2A0 - 0x288)
	class USphereReflectionCaptureComponent : public UReflectionCaptureComponent	
	{
	public:
		float InfluenceRadius; // 0x288(0x4)
		float CaptureDistanceScale; // 0x28C(0x4)
		UDrawSphereComponent PreviewInfluenceRadius; // 0x290(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x298(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SphereReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.StaticMeshSocket
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class UStaticMeshSocket : public UObject	
	{
	public:
		FName SocketName; // 0x28(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY
		FVector RelativeLocation; // 0x30(0x18)
		FRotator RelativeRotation; // 0x48(0x18)
		FVector RelativeScale; // 0x60(0x18)
		FString tag; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshSocket");
			return ret;
		}
	};


	// Class Engine.EditorFlagCollector
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEditorFlagCollector : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EditorFlagCollector");
			return ret;
		}

		TArray GetFlagNames(); // Flags: Final|Native|Static|Public 0x7FF4144F7F18
	};


	// Class Engine.StereoLayerShape
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStereoLayerShape : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShape");
			return ret;
		}
	};


	// Class Engine.StereoLayerShapeQuad
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStereoLayerShapeQuad : public UStereoLayerShape	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeQuad");
			return ret;
		}
	};


	// Class Engine.StereoLayerShapeCylinder
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UStereoLayerShapeCylinder : public UStereoLayerShape	
	{
	public:
		float Radius; // 0x28(0x4)
		float OverlayArc; // 0x2C(0x4)
		int32_t Height; // 0x30(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeCylinder");
			return ret;
		}

		void SetRadius(float InRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F81B8
		void SetOverlayArc(float InOverlayArc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F80D8
		void SetHeight(int32_t InHeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F7FF8
	};


	// Class Engine.StereoLayerShapeCubemap
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStereoLayerShapeCubemap : public UStereoLayerShape	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeCubemap");
			return ret;
		}
	};


	// Class Engine.StereoLayerShapeEquirect
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x98 (0xC0 - 0x28)
	class UStereoLayerShapeEquirect : public UStereoLayerShape	
	{
	public:
		FBox2D LeftUVRect; // 0x28(0x28)
		FBox2D RightUVRect; // 0x50(0x28)
		FVector2D LeftScale; // 0x78(0x10)
		FVector2D RightScale; // 0x88(0x10)
		FVector2D LeftBias; // 0x98(0x10)
		FVector2D RightBias; // 0xA8(0x10)
		float Radius; // 0xB8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeEquirect");
			return ret;
		}

		void SetEquirectProps(FEquirectProps InScaleBiases); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F8298
	};


	// Class Engine.StereoLayerComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x100 (0x320 - 0x220)
	class UStereoLayerComponent : public USceneComponent	
	{
	public:
		bool bLiveTexture : 1; // 0x220:0(0x1)
		bool bSupportsDepth : 1; // 0x220:1(0x1)
		bool bNoAlphaChannel : 1; // 0x220:2(0x1)
		unsigned char UnknownData04_5[0x7]; // 0x221(0x7) UNKNOWN PROPERTY
		UTexture Texture; // 0x228(0x8)
		UTexture LeftTexture; // 0x230(0x8)
		bool bQuadPreserveTextureRatio : 1; // 0x238:0(0x1)
		unsigned char UnknownData05_5[0x7]; // 0x239(0x7) UNKNOWN PROPERTY
		TArray AdditionalFlags; // 0x240(0x10)
		FVector2D QuadSize; // 0x250(0x10)
		FBox2D UVRect; // 0x260(0x28)
		TEnumAsByte StereoLayerType; // 0x288(0x1)
		unsigned char UnknownData06_6[0x7]; // 0x289(0x7) UNKNOWN PROPERTY
		UStereoLayerShape Shape; // 0x290(0x8)
		int32_t Priority; // 0x298(0x4)
		unsigned char UnknownData07_7[0x84]; // 0x29C(0x84) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerComponent");
			return ret;
		}

		void SetUVRect(FBox2D InUVRect); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F8D18
		void SetTexture(UTexture InTexture); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F8C38
		void SetQuadSize(FVector2D InQuadSize); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F8B58
		void SetPriority(int32_t InPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F8A78
		void SetLeftTexture(UTexture InTexture); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F8998
		void SetEquirectProps(FEquirectProps InEquirectProps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F88B8
		void MarkTextureForUpdate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F87D8
		FBox2D GetUVRect(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F86F8
		UTexture GetTexture(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F8618
		FVector2D GetQuadSize(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F8538
		int32_t GetPriority(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F8458
		UTexture GetLeftTexture(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F8378
	};


	// Class Engine.StreamingWorldSubsystemInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStreamingWorldSubsystemInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamingWorldSubsystemInterface");
			return ret;
		}
	};


	// Class Engine.SubUVAnimation
	// Inherited from UObject
	// Size: 0x38 (0x60 - 0x28)
	class USubUVAnimation : public UObject	
	{
	public:
		UTexture2D SubUVTexture; // 0x28(0x8)
		int32_t SubImages_Horizontal; // 0x30(0x4)
		int32_t SubImages_Vertical; // 0x34(0x4)
		TEnumAsByte BoundingMode; // 0x38(0x1)
		TEnumAsByte OpacitySourceMode; // 0x39(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x3A(0x2) UNKNOWN PROPERTY
		float AlphaThreshold; // 0x3C(0x4)
		unsigned char UnknownData03_7[0x20]; // 0x40(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SubUVAnimation");
			return ret;
		}
	};


	// Class Engine.TextPropertyTestObject
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UTextPropertyTestObject : public UObject	
	{
	public:
		FText DefaultedText; // 0x28(0x10)
		FText UndefaultedText; // 0x38(0x10)
		FText TransientText; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextPropertyTestObject");
			return ret;
		}
	};


	// Class Engine.TextRenderActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ATextRenderActor : public AActor	
	{
	public:
		UTextRenderComponent TextRender; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextRenderActor");
			return ret;
		}
	};


	// Class Engine.TextRenderComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x48 (0x510 - 0x4C8)
	class UTextRenderComponent : public UPrimitiveComponent	
	{
	public:
		FText Text; // 0x4C8(0x10)
		UMaterialInterface TextMaterial; // 0x4D8(0x8)
		UFont Font; // 0x4E0(0x8)
		TEnumAsByte HorizontalAlignment; // 0x4E8(0x1)
		TEnumAsByte VerticalAlignment; // 0x4E9(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x4EA(0x2) UNKNOWN PROPERTY
		FColor TextRenderColor; // 0x4EC(0x4)
		float XScale; // 0x4F0(0x4)
		float YScale; // 0x4F4(0x4)
		float WorldSize; // 0x4F8(0x4)
		float InvDefaultSize; // 0x4FC(0x4)
		float HorizSpacingAdjust; // 0x500(0x4)
		float VertSpacingAdjust; // 0x504(0x4)
		bool bAlwaysRenderAsText : 1; // 0x508:0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x509(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextRenderComponent");
			return ret;
		}

		void SetYScale(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9958
		void SetXScale(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9878
		void SetWorldSize(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9798
		void SetVertSpacingAdjust(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F96B8
		void SetVerticalAlignment(TEnumAsByte Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F95D8
		void SetTextRenderColor(FColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144F94F8
		void SetTextMaterial(UMaterialInterface Material); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9418
		void SetText(FText& Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms 0x7FF4144F9338
		void SetHorizSpacingAdjust(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9258
		void SetHorizontalAlignment(TEnumAsByte Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9178
		void SetFont(UFont Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9098
		void K2_SetText(FText& Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144F8FB8
		FVector GetTextWorldSize(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F8ED8
		FVector GetTextLocalSize(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4144F8DF8
	};


	// Class Engine.TextureCollection
	// Inherited from UDataAsset -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UTextureCollection : public UDataAsset	
	{
	public:
		TArray Textures; // 0x30(0x10)
		unsigned char UnknownData01_7[0x10]; // 0x40(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureCollection");
			return ret;
		}
	};


	// Class Engine.TextureEncodingProjectSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UTextureEncodingProjectSettings : public UDeveloperSettings	
	{
	public:
		bool bSharedLinearTextureEncoding : 1; // 0x30:0(0x1)
		bool bFinalUsesRDO : 1; // 0x30:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		int8_t FinalRDOLambda; // 0x34(0x1)
		ETextureEncodeEffort FinalEffortLevel; // 0x35(0x1)
		ETextureUniversalTiling FinalUniversalTiling; // 0x36(0x1)
		unsigned char UnknownData05_6[0x1]; // 0x37(0x1) UNKNOWN PROPERTY
		bool bFastUsesRDO : 1; // 0x38:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		int8_t FastRDOLambda; // 0x3C(0x1)
		ETextureEncodeEffort FastEffortLevel; // 0x3D(0x1)
		ETextureUniversalTiling FastUniversalTiling; // 0x3E(0x1)
		ETextureEncodeSpeed CookUsesSpeed; // 0x3F(0x1)
		ETextureEncodeSpeed EditorUsesSpeed; // 0x40(0x1)
		unsigned char UnknownData07_7[0x7]; // 0x41(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureEncodingProjectSettings");
			return ret;
		}
	};


	// Class Engine.TextureEncodingUserSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UTextureEncodingUserSettings : public UDeveloperSettings	
	{
	public:
		ETextureEncodeSpeedOverride ForceEncodeSpeed; // 0x30(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureEncodingUserSettings");
			return ret;
		}
	};


	// Class Engine.TimelineComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x98 (0x138 - 0xA0)
	class UTimelineComponent : public UActorComponent	
	{
	public:
		FTimeline TheTimeline; // 0xA0(0x90)
		bool bIgnoreTimeDilation : 1; // 0x130:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x131(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TimelineComponent");
			return ret;
		}

		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FB398
		void SetVectorCurve(UCurveVector NewVectorCurve, FName VectorTrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FB2B8
		void SetTimelinePostUpdateFunc(FDelegateProperty NewTimelinePostUpdateFunc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FB1D8
		void SetTimelineLengthMode(TEnumAsByte NewLengthMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FB0F8
		void SetTimelineLength(float NewLength); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FB018
		void SetTimelineFinishedFunc(FDelegateProperty NewTimelineFinishedFunc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FAF38
		void SetPlayRate(float NewRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FAE58
		void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FAD78
		void SetNewTime(float NewTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FAC98
		void SetLooping(bool bNewLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FABB8
		void SetLinearColorCurve(UCurveLinearColor NewLinearColorCurve, FName LinearColorTrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FAAD8
		void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FA9F8
		void SetFloatCurve(UCurveFloat NewFloatCurve, FName FloatTrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FA918
		void ReverseFromEnd(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FA838
		void Reverse(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FA758
		void PlayFromStart(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FA678
		void Play(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FA598
		void OnRep_Timeline(FTimeline& OldTimeline); // Flags: Final|Native|Public|HasOutParms 0x7FF4144FA4B8
		bool IsReversing(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FA3D8
		bool IsPlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FA2F8
		bool IsLooping(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FA218
		float GetTimelineLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FA138
		float GetScaledTimelineLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FA058
		float GetPlayRate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F9F78
		float GetPlaybackPosition(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F9E98
		bool GetIgnoreTimeDilation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144F9DB8
		void AddInterpVector(UCurveVector VectorCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9CD8
		void AddInterpLinearColor(UCurveLinearColor LinearColorCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9BF8
		void AddInterpFloat(UCurveFloat FloatCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9B18
		void AddEvent(float Time, FDelegateProperty EventFunc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144F9A38
	};


	// Class Engine.TriggerBase
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ATriggerBase : public AActor	
	{
	public:
		UShapeComponent CollisionComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerBase");
			return ret;
		}
	};


	// Class Engine.TriggerBox
	// Inherited from ATriggerBase -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ATriggerBox : public ATriggerBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerBox");
			return ret;
		}
	};


	// Class Engine.TriggerCapsule
	// Inherited from ATriggerBase -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ATriggerCapsule : public ATriggerBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerCapsule");
			return ret;
		}
	};


	// Class Engine.TriggerSphere
	// Inherited from ATriggerBase -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ATriggerSphere : public ATriggerBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerSphere");
			return ret;
		}
	};


	// Class Engine.TwitterIntegrationBase
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UTwitterIntegrationBase : public UPlatformInterfaceBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TwitterIntegrationBase");
			return ret;
		}

		bool TwitterRequest(FString URL, TArray& ParamKeysAndValues, TEnumAsByte RequestMethod, int32_t AccountIndex); // Flags: Native|Public|HasOutParms 0x7FF4144FB9B8
		bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture); // Flags: Native|Public 0x7FF4144FB8D8
		void Init(); // Flags: Native|Public 0x7FF4144FB7F8
		int32_t GetNumAccounts(); // Flags: Native|Public 0x7FF4144FB718
		FString GetAccountName(int32_t AccountIndex); // Flags: Native|Public 0x7FF4144FB638
		bool CanShowTweetUI(); // Flags: Native|Public 0x7FF4144FB558
		bool AuthorizeAccounts(); // Flags: Native|Public 0x7FF4144FB478
	};


	// Class Engine.UniversalObjectLocatorScriptingExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UUniversalObjectLocatorScriptingExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.UniversalObjectLocatorScriptingExtensions");
			return ret;
		}

		FUniversalObjectLocator UniversalObjectLocatorFromString(FString InString); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144FBFD8
		FString ToString(FUniversalObjectLocator& Locator); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FBEF8
		void SyncUnload(FUniversalObjectLocator& Locator, UObject Context); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FBE18
		UObject SyncLoad(FUniversalObjectLocator& Locator, UObject Context); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FBD38
		UObject SyncFind(FUniversalObjectLocator& Locator, UObject Context); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FBC58
		FUniversalObjectLocator MakeUniversalObjectLocator(UObject Object, UObject Context); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4144FBB78
		bool IsEmpty(FUniversalObjectLocator& Locator); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FBA98
	};


	// Class Engine.VariableFrameStrippingSettings
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UVariableFrameStrippingSettings : public UObject	
	{
	public:
		FPerPlatformBool UseVariableFrameStripping; // 0x28(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		FPerPlatformInt FrameStrippingRate; // 0x2C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VariableFrameStrippingSettings");
			return ret;
		}
	};


	// Class Engine.VectorField
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UVectorField : public UObject	
	{
	public:
		FBox Bounds; // 0x28(0x38)
		float Intensity; // 0x60(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x64(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorField");
			return ret;
		}
	};


	// Class Engine.VectorFieldAnimated
	// Inherited from UVectorField -> UObject
	// Size: 0x40 (0xA8 - 0x68)
	class UVectorFieldAnimated : public UVectorField	
	{
	public:
		UTexture2D Texture; // 0x68(0x8)
		TEnumAsByte ConstructionOp; // 0x70(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x71(0x3) UNKNOWN PROPERTY
		int32_t VolumeSizeX; // 0x74(0x4)
		int32_t VolumeSizeY; // 0x78(0x4)
		int32_t VolumeSizeZ; // 0x7C(0x4)
		int32_t SubImagesX; // 0x80(0x4)
		int32_t SubImagesY; // 0x84(0x4)
		int32_t FrameCount; // 0x88(0x4)
		float FramesPerSecond; // 0x8C(0x4)
		bool bLoop : 1; // 0x90:0(0x1)
		unsigned char UnknownData03_5[0x7]; // 0x91(0x7) UNKNOWN PROPERTY
		UVectorFieldStatic NoiseField; // 0x98(0x8)
		float NoiseScale; // 0xA0(0x4)
		float NoiseMax; // 0xA4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldAnimated");
			return ret;
		}
	};


	// Class Engine.VectorFieldComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UVectorFieldComponent : public UPrimitiveComponent	
	{
	public:
		UVectorField VectorField; // 0x4C8(0x8)
		float Intensity; // 0x4D0(0x4)
		float Tightness; // 0x4D4(0x4)
		bool bPreviewVectorField : 1; // 0x4D8:0(0x1)
		unsigned char UnknownData01_7[0x17]; // 0x4D9(0x17) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldComponent");
			return ret;
		}

		void SetIntensity(float NewIntensity); // Flags: Native|Public|BlueprintCallable 0x7FF4144FC0B8
	};


	// Class Engine.VectorFieldStatic
	// Inherited from UVectorField -> UObject
	// Size: 0x50 (0xB8 - 0x68)
	class UVectorFieldStatic : public UVectorField	
	{
	public:
		int32_t SizeX; // 0x68(0x4)
		int32_t SizeY; // 0x6C(0x4)
		int32_t SizeZ; // 0x70(0x4)
		bool bAllowCPUAccess; // 0x74(0x1)
		unsigned char UnknownData01_7[0x43]; // 0x75(0x43) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldStatic");
			return ret;
		}
	};


	// Class Engine.VisualLoggerDebugSnapshotInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVisualLoggerDebugSnapshotInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerDebugSnapshotInterface");
			return ret;
		}
	};


	// Class Engine.WindDirectionalSourceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x20 (0x240 - 0x220)
	class UWindDirectionalSourceComponent : public USceneComponent	
	{
	public:
		float Strength; // 0x220(0x4)
		float Speed; // 0x224(0x4)
		float MinGustAmount; // 0x228(0x4)
		float MaxGustAmount; // 0x22C(0x4)
		float Radius; // 0x230(0x4)
		bool bPointWind : 1; // 0x234:0(0x1)
		unsigned char UnknownData01_7[0xB]; // 0x235(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WindDirectionalSourceComponent");
			return ret;
		}

		void SetWindType(EWindSourceType InNewType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC5F8
		void SetStrength(float InNewStrength); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC518
		void SetSpeed(float InNewSpeed); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC438
		void SetRadius(float InNewRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC358
		void SetMinimumGustAmount(float InNewMinGust); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC278
		void SetMaximumGustAmount(float InNewMaxGust); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC198
	};


	// Class Engine.WorldPartitionEditorLoaderAdapter
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UWorldPartitionEditorLoaderAdapter : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorLoaderAdapter");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellData
	// Inherited from UObject
	// Size: 0xB0 (0xD8 - 0x28)
	class UWorldPartitionRuntimeCellData : public UObject	
	{
	public:
		unsigned char UnknownData03_3[0x28]; // 0x28(0x28) UNKNOWN PROPERTY
		FBox ContentBounds; // 0x50(0x38)
		unsigned char UnknownData04_6[0x40]; // 0x88(0x40) UNKNOWN PROPERTY
		FName GridName; // 0xC8(0x4)
		int32_t Priority; // 0xCC(0x4)
		int32_t HierarchicalLevel; // 0xD0(0x4)
		unsigned char UnknownData05_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellData");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCell
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UWorldPartitionRuntimeCell : public UObject	
	{
	public:
		unsigned char UnknownData04_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		bool bIsAlwaysLoaded; // 0x38(0x1)
		unsigned char UnknownData05_6[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		FDataLayerInstanceNames DataLayers; // 0x40(0x18)
		bool bClientOnlyVisible; // 0x58(0x1)
		bool bIsHLOD; // 0x59(0x1)
		bool bBlockOnSlowLoading; // 0x5A(0x1)
		unsigned char UnknownData06_6[0x1]; // 0x5B(0x1) UNKNOWN PROPERTY
		FGuid ContentBundleID; // 0x5C(0x10)
		FLinearColor CellDebugColor; // 0x6C(0x10)
		FGuid CellGuid; // 0x7C(0x10)
		FGuid SourceCellGuid; // 0x8C(0x10)
		unsigned char UnknownData07_6[0xC]; // 0x9C(0xC) UNKNOWN PROPERTY
		UWorldPartitionRuntimeCellData RuntimeCellData; // 0xA8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCell");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellDataHashSet
	// Inherited from UWorldPartitionRuntimeCellData -> UObject
	// Size: 0x8 (0xE0 - 0xD8)
	class UWorldPartitionRuntimeCellDataHashSet : public UWorldPartitionRuntimeCellData	
	{
	public:
		bool bIs2D; // 0xD8(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellDataHashSet");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellTransformer
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionRuntimeCellTransformer : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellTransformer");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellTransformerISM
	// Inherited from UWorldPartitionRuntimeCellTransformer -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionRuntimeCellTransformerISM : public UWorldPartitionRuntimeCellTransformer	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellTransformerISM");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellTransformerLog
	// Inherited from UWorldPartitionRuntimeCellTransformer -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionRuntimeCellTransformerLog : public UWorldPartitionRuntimeCellTransformer	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellTransformerLog");
			return ret;
		}
	};


	// Class Engine.RuntimeHashExternalStreamingObjectBase
	// Inherited from UObject
	// Size: 0x190 (0x1B8 - 0x28)
	class URuntimeHashExternalStreamingObjectBase : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TMap SubObjectsToCellRemapping; // 0x38(0x50)
		FWorldPartitionRuntimeContainerResolver ContainerResolver; // 0x88(0x58)
		unsigned char UnknownData03_6[0x10]; // 0xE0(0x10) UNKNOWN PROPERTY
		TWeakObjectPtr OuterWorld; // 0xF0(0x20)
		TMap CellToStreamingData; // 0x110(0x50)
		TSet DataLayerInstances; // 0x160(0x50)
		UExternalDataLayerInstance RootExternalDataLayerInstance; // 0x1B0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeHashExternalStreamingObjectBase");
			return ret;
		}
	};


	// Class Engine.RuntimeHashSetExternalStreamingObject
	// Inherited from URuntimeHashExternalStreamingObjectBase -> UObject
	// Size: 0x10 (0x1C8 - 0x1B8)
	class URuntimeHashSetExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase	
	{
	public:
		TArray RuntimeStreamingData; // 0x1B8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeHashSetExternalStreamingObject");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeHash
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UWorldPartitionRuntimeHash : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x28(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeHashSet
	// Inherited from UWorldPartitionRuntimeHash -> UObject
	// Size: 0xD0 (0x148 - 0x78)
	class UWorldPartitionRuntimeHashSet : public UWorldPartitionRuntimeHash	
	{
	public:
		TArray RuntimePartitions; // 0x78(0x10)
		TArray RuntimeStreamingData; // 0x88(0x10)
		TMap WorldAssetStreamingObjects; // 0x98(0x50)
		unsigned char UnknownData01_7[0x60]; // 0xE8(0x60) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeHashSet");
			return ret;
		}
	};


	// Class Engine.WorldPartitionSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UWorldPartitionSettings : public UDeveloperSettings	
	{
	public:
		EWorldPartitionDataLayersLogicOperator NewMapsDataLayersLogicOperator; // 0x30(0x1)
		bool bNewMapsEnableWorldPartition; // 0x31(0x1)
		bool bNewMapsEnableWorldPartitionStreaming; // 0x32(0x1)
		unsigned char UnknownData01_6[0x5]; // 0x33(0x5) UNKNOWN PROPERTY
		UClass EditorHashDefaultClass; // 0x38(0x8)
		UClass RuntimeHashDefaultClass; // 0x40(0x8)
		UWorldPartitionPropertyOverridePolicy PropertyOverridePolicy; // 0x48(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionSettings");
			return ret;
		}
	};


	// Class Engine.WorldSettings
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x220 (0x4B0 - 0x290)
	class AWorldSettings : public AInfo	
	{
	public:
		unsigned char UnknownData06_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		int32_t VisibilityCellSize; // 0x298(0x4)
		TEnumAsByte VisibilityAggressiveness; // 0x29C(0x1)
		bool bPrecomputeVisibility : 1; // 0x29D:0(0x1)
		bool bPlaceCellsOnlyAlongCameraTracks : 1; // 0x29D:1(0x1)
		bool bEnableWorldBoundsChecks : 1; // 0x29D:2(0x1)
		bool bEnableNavigationSystem : 1; // 0x29D:3(0x1)
		bool bEnableAISystem : 1; // 0x29D:4(0x1)
		bool bEnableWorldComposition : 1; // 0x29D:5(0x1)
		bool bUseClientSideLevelStreamingVolumes : 1; // 0x29D:6(0x1)
		bool bEnableWorldOriginRebasing : 1; // 0x29D:7(0x1)
		bool bWorldGravitySet : 1; // 0x29E:0(0x1)
		bool bGlobalGravitySet : 1; // 0x29E:1(0x1)
		bool bMinimizeBSPSections : 1; // 0x29E:2(0x1)
		bool bForceNoPrecomputedLighting : 1; // 0x29E:3(0x1)
		bool bForceVolumetricLightmapsOnly : 1; // 0x29E:4(0x1)
		bool bHighPriorityLoading : 1; // 0x29E:5(0x1)
		bool bHighPriorityLoadingLocal : 1; // 0x29E:6(0x1)
		bool bOverrideDefaultBroadphaseSettings : 1; // 0x29E:7(0x1)
		bool bGenerateSingleClusterForLevel : 1; // 0x29F:0(0x1)
		bool bReuseAddressAndPort : 1; // 0x29F:1(0x1)
		TWeakObjectPtr AISystemClass; // 0x2A0(0x20)
		FVector LevelInstancePivotOffset; // 0x2C0(0x18)
		UNavigationSystemConfig NavigationSystemConfig; // 0x2D8(0x8)
		UNavigationSystemConfig NavigationSystemConfigOverride; // 0x2E0(0x8)
		UWorldPartition WorldPartition; // 0x2E8(0x8)
		TArray BaseNavmeshDataLayers; // 0x2F0(0x10)
		float WorldToMeters; // 0x300(0x4)
		float KillZ; // 0x304(0x4)
		UClass KillZDamageType; // 0x308(0x8)
		float WorldGravityZ; // 0x310(0x4)
		float GlobalGravityZ; // 0x314(0x4)
		UClass DefaultPhysicsVolumeClass; // 0x318(0x8)
		UClass PhysicsCollisionHandlerClass; // 0x320(0x8)
		UClass DefaultGameMode; // 0x328(0x8)
		UClass GameNetworkManagerClass; // 0x330(0x8)
		int32_t PackedLightAndShadowMapTextureSize; // 0x338(0x4)
		unsigned char UnknownData07_6[0x4]; // 0x33C(0x4) UNKNOWN PROPERTY
		FVector DefaultColorScale; // 0x340(0x18)
		float DefaultMaxDistanceFieldOcclusionDistance; // 0x358(0x4)
		float GlobalDistanceFieldViewDistance; // 0x35C(0x4)
		float DynamicIndirectShadowsSelfShadowingIntensity; // 0x360(0x4)
		float VolumetricLightmapLoadingRange; // 0x364(0x4)
		FNaniteSettings NaniteSettings; // 0x368(0x1)
		unsigned char UnknownData08_6[0x7]; // 0x369(0x7) UNKNOWN PROPERTY
		FReverbSettings DefaultReverbSettings; // 0x370(0x20)
		FInteriorSettings DefaultAmbientZoneSettings; // 0x390(0x24)
		unsigned char UnknownData09_6[0x4]; // 0x3B4(0x4) UNKNOWN PROPERTY
		USoundMix DefaultBaseSoundMix; // 0x3B8(0x8)
		float TimeDilation; // 0x3C0(0x4)
		float CinematicTimeDilation; // 0x3C4(0x4)
		float DemoPlayTimeDilation; // 0x3C8(0x4)
		float MinGlobalTimeDilation; // 0x3CC(0x4)
		float MaxGlobalTimeDilation; // 0x3D0(0x4)
		float MinUndilatedFrameTime; // 0x3D4(0x4)
		float MaxUndilatedFrameTime; // 0x3D8(0x4)
		unsigned char UnknownData10_6[0x4]; // 0x3DC(0x4) UNKNOWN PROPERTY
		FBroadphaseSettings BroadphaseSettings; // 0x3E0(0x80)
		TArray ReplicationViewers; // 0x460(0x10)
		TArray AssetUserData; // 0x470(0x10)
		APlayerState PauserPlayerState; // 0x480(0x8)
		int32_t MaxNumberOfBookmarks; // 0x488(0x4)
		unsigned char UnknownData11_6[0x4]; // 0x48C(0x4) UNKNOWN PROPERTY
		UClass DefaultBookmarkClass; // 0x490(0x8)
		TArray BookmarkArray; // 0x498(0x10)
		UClass LastBookmarkClass; // 0x4A8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldSettings");
			return ret;
		}

		void OnRep_WorldGravityZ(); // Flags: RequiredAPI|Native|Public 0x7FF4144FC7B8
		void OnRep_NaniteSettings(); // Flags: RequiredAPI|Native|Public 0x7FF4144FC6D8
	};


	// Class Engine.Texture2DArray
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x10 (0x140 - 0x130)
	class UTexture2DArray : public UTexture	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x130(0x8) UNKNOWN PROPERTY
		TEnumAsByte AddressX; // 0x138(0x1)
		TEnumAsByte AddressY; // 0x139(0x1)
		TEnumAsByte AddressZ; // 0x13A(0x1)
		unsigned char UnknownData03_7[0x5]; // 0x13B(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture2DArray");
			return ret;
		}
	};


	// Class Engine.ActorFolder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorFolder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorFolder");
			return ret;
		}
	};


	// Class Engine.ActorPartitionSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UActorPartitionSubsystem : public UWorldSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorPartitionSubsystem");
			return ret;
		}
	};


	// Class Engine.AISystemBase
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UAISystemBase : public UObject	
	{
	public:
		FSoftClassPath AISystemClassName; // 0x28(0x18)
		FName AISystemModuleName; // 0x40(0x4)
		unsigned char UnknownData02_6[0xC]; // 0x44(0xC) UNKNOWN PROPERTY
		bool bInstantiateAISystemOnClient; // 0x50(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x51(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AISystemBase");
			return ret;
		}
	};


	// Class Engine.NavigationSystemBase
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavigationSystemBase : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationSystemBase");
			return ret;
		}
	};


	// Class Engine.NavigationSystemConfig
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UNavigationSystemConfig : public UObject	
	{
	public:
		FSoftClassPath NavigationSystemClass; // 0x28(0x18)
		FNavAgentSelector SupportedAgentsMask; // 0x40(0x4)
		FName DefaultAgentName; // 0x44(0x4)
		bool bIsOverriden : 1; // 0x48:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationSystemConfig");
			return ret;
		}
	};


	// Class Engine.NullNavSysConfig
	// Inherited from UNavigationSystemConfig -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class UNullNavSysConfig : public UNavigationSystemConfig	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NullNavSysConfig");
			return ret;
		}
	};


	// Class Engine.AvoidanceManager
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class UAvoidanceManager : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		float DefaultTimeToLive; // 0x30(0x4)
		float LockTimeAfterAvoid; // 0x34(0x4)
		float LockTimeAfterClean; // 0x38(0x4)
		float DeltaTimeToPredict; // 0x3C(0x4)
		float ArtificialRadiusExpansion; // 0x40(0x4)
		float TestHeightDifference; // 0x44(0x4)
		float HeightCheckMargin; // 0x48(0x4)
		unsigned char UnknownData03_7[0x94]; // 0x4C(0x94) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AvoidanceManager");
			return ret;
		}

		bool RegisterMovementComponent(UMovementComponent MovementComp, float AvoidanceWeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCB38
		int32_t GetObjectCount(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCA58
		int32_t GetNewAvoidanceUID(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FC978
		FVector GetAvoidanceVelocityForComponent(UMovementComponent MovementComp); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4144FC898
	};


	// Class Engine.NavCollisionBase
	// Inherited from UObject
	// Size: 0x48 (0x70 - 0x28)
	class UNavCollisionBase : public UObject	
	{
	public:
		bool bIsDynamicObstacle : 1; // 0x28:0(0x1)
		unsigned char UnknownData01_7[0x47]; // 0x29(0x47) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavCollisionBase");
			return ret;
		}
	};


	// Class Engine.NavigationDataChunk
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UNavigationDataChunk : public UObject	
	{
	public:
		FName NavigationDataName; // 0x28(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationDataChunk");
			return ret;
		}
	};


	// Class Engine.AmbientSound
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAmbientSound : public AActor	
	{
	public:
		UAudioComponent AudioComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AmbientSound");
			return ret;
		}

		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCF98
		void Play(float StartTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCEB8
		void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCDD8
		void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCCF8
		void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FCC18
	};


	// Class Engine.AimOffsetBlendSpace
	// Inherited from UBlendSpace -> UAnimationAsset -> UObject
	// Size: 0x0 (0x1C0 - 0x1C0)
	class UAimOffsetBlendSpace : public UBlendSpace	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AimOffsetBlendSpace");
			return ret;
		}
	};


	// Class Engine.BlendSpace1D
	// Inherited from UBlendSpace -> UAnimationAsset -> UObject
	// Size: 0x8 (0x1C8 - 0x1C0)
	class UBlendSpace1D : public UBlendSpace	
	{
	public:
		bool bScaleAnimation; // 0x1C0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x1C1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendSpace1D");
			return ret;
		}
	};


	// Class Engine.AimOffsetBlendSpace1D
	// Inherited from UBlendSpace1D -> UBlendSpace -> UAnimationAsset -> UObject
	// Size: 0x0 (0x1C8 - 0x1C8)
	class UAimOffsetBlendSpace1D : public UBlendSpace1D	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AimOffsetBlendSpace1D");
			return ret;
		}
	};


	// Class Engine.AnimationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0xF8 (0x128 - 0x30)
	class UAnimationSettings : public UDeveloperSettings	
	{
	public:
		int32_t CompressCommandletVersion; // 0x30(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		TArray KeyEndEffectorsMatchNameArray; // 0x38(0x10)
		bool ForceRecompression; // 0x48(0x1)
		bool bForceBelowThreshold; // 0x49(0x1)
		bool bFirstRecompressUsingCurrentOrDefault; // 0x4A(0x1)
		bool bRaiseMaxErrorToExisting; // 0x4B(0x1)
		bool bEnablePerformanceLog; // 0x4C(0x1)
		bool bStripAnimationDataOnDedicatedServer; // 0x4D(0x1)
		bool bTickAnimationOnSkeletalMeshInit; // 0x4E(0x1)
		unsigned char UnknownData06_6[0x1]; // 0x4F(0x1) UNKNOWN PROPERTY
		FTimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings; // 0x50(0x1C)
		unsigned char UnknownData07_6[0x4]; // 0x6C(0x4) UNKNOWN PROPERTY
		TArray BoneCustomAttributesNames; // 0x70(0x10)
		TArray BoneNamesWithCustomAttributes; // 0x80(0x10)
		TMap AttributeBlendModes; // 0x90(0x50)
		ECustomAttributeBlendType DefaultAttributeBlendMode; // 0xE0(0x1)
		unsigned char UnknownData08_6[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY
		TArray TransformAttributeNames; // 0xE8(0x10)
		TArray UserDefinedStructAttributes; // 0xF8(0x10)
		TArray MirrorFindReplaceExpressions; // 0x108(0x10)
		FFrameRate DefaultFrameRate; // 0x118(0x8)
		bool bEnforceSupportedFrameRates; // 0x120(0x1)
		unsigned char UnknownData09_7[0x7]; // 0x121(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationSettings");
			return ret;
		}

		TArray GetBoneCustomAttributeNamesToImport(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD078
	};


	// Class Engine.AnimBlueprintGeneratedStruct
	// Inherited from UScriptStruct -> UStruct -> UField -> UObject
	// Size: 0x0 (0xC0 - 0xC0)
	class UAnimBlueprintGeneratedStruct : public UScriptStruct	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprintGeneratedStruct");
			return ret;
		}
	};


	// Class Engine.AnimBlueprintGeneratedClass
	// Inherited from UBlueprintGeneratedClass -> UClass -> UStruct -> UField -> UObject
	// Size: 0x268 (0x5C8 - 0x360)
	class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass	
	{
	public:
		unsigned char UnknownData03_3[0x8]; // 0x360(0x8) UNKNOWN PROPERTY
		TArray BakedStateMachines; // 0x368(0x10)
		USkeleton TargetSkeleton; // 0x378(0x8)
		TArray AnimNotifies; // 0x380(0x10)
		TMap OrderedSavedPoseIndicesMap; // 0x390(0x50)
		unsigned char UnknownData04_6[0x80]; // 0x3E0(0x80) UNKNOWN PROPERTY
		TArray SyncGroupNames; // 0x460(0x10)
		TMap GraphAssetPlayerInformation; // 0x470(0x50)
		TMap GraphBlendOptions; // 0x4C0(0x50)
		TArray AnimNodeData; // 0x510(0x10)
		TMap NodeTypeMap; // 0x520(0x50)
		unsigned char UnknownData05_7[0x58]; // 0x570(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprintGeneratedClass");
			return ret;
		}
	};


	// Class Engine.AnimBoneCompressionCodec
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnimBoneCompressionCodec : public UObject	
	{
	public:
		FString Description; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBoneCompressionCodec");
			return ret;
		}
	};


	// Class Engine.AnimBoneCompressionSettings
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnimBoneCompressionSettings : public UObject	
	{
	public:
		TArray Codecs; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBoneCompressionSettings");
			return ret;
		}
	};


	// Class Engine.AnimClassInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimClassInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimClassInterface");
			return ret;
		}
	};


	// Class Engine.AnimCompositeBase
	// Inherited from UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UAnimCompositeBase : public UAnimSequenceBase	
	{
	public:
		FFrameRate CommonTargetFrameRate; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompositeBase");
			return ret;
		}
	};


	// Class Engine.AnimComposite
	// Inherited from UAnimCompositeBase -> UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x10 (0xC8 - 0xB8)
	class UAnimComposite : public UAnimCompositeBase	
	{
	public:
		FAnimTrack AnimationTrack; // 0xB8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimComposite");
			return ret;
		}
	};


	// Class Engine.AnimCompress
	// Inherited from UAnimBoneCompressionCodec -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UAnimCompress : public UAnimBoneCompressionCodec	
	{
	public:
		bool bNeedsSkeleton : 1; // 0x38:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		TEnumAsByte TranslationCompressionFormat; // 0x3C(0x1)
		TEnumAsByte RotationCompressionFormat; // 0x3D(0x1)
		TEnumAsByte ScaleCompressionFormat; // 0x3E(0x1)
		unsigned char UnknownData03_7[0x1]; // 0x3F(0x1) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress");
			return ret;
		}
	};


	// Class Engine.AnimCompress_BitwiseCompressOnly
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x0 (0x40 - 0x40)
	class UAnimCompress_BitwiseCompressOnly : public UAnimCompress	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_BitwiseCompressOnly");
			return ret;
		}
	};


	// Class Engine.AnimCompress_LeastDestructive
	// Inherited from UAnimCompress_BitwiseCompressOnly -> UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x0 (0x40 - 0x40)
	class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_LeastDestructive");
			return ret;
		}
	};


	// Class Engine.AnimCompress_RemoveLinearKeys
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x20 (0x60 - 0x40)
	class UAnimCompress_RemoveLinearKeys : public UAnimCompress	
	{
	public:
		float MaxPosDiff; // 0x40(0x4)
		float MaxAngleDiff; // 0x44(0x4)
		float MaxScaleDiff; // 0x48(0x4)
		float MaxEffectorDiff; // 0x4C(0x4)
		float MinEffectorDiff; // 0x50(0x4)
		float EffectorDiffSocket; // 0x54(0x4)
		float ParentKeyScale; // 0x58(0x4)
		bool bRetarget : 1; // 0x5C:0(0x1)
		bool bActuallyFilterLinearKeys : 1; // 0x5C:1(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x5D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_RemoveLinearKeys");
			return ret;
		}
	};


	// Class Engine.AnimCompress_PerTrackCompression
	// Inherited from UAnimCompress_RemoveLinearKeys -> UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x78 (0xD8 - 0x60)
	class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys	
	{
	public:
		float MaxZeroingThreshold; // 0x60(0x4)
		float MaxPosDiffBitwise; // 0x64(0x4)
		float MaxAngleDiffBitwise; // 0x68(0x4)
		float MaxScaleDiffBitwise; // 0x6C(0x4)
		TArray AllowedRotationFormats; // 0x70(0x10)
		TArray AllowedTranslationFormats; // 0x80(0x10)
		TArray AllowedScaleFormats; // 0x90(0x10)
		bool bResampleAnimation : 1; // 0xA0:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0xA1(0x3) UNKNOWN PROPERTY
		float ResampledFramerate; // 0xA4(0x4)
		int32_t MinKeysForResampling; // 0xA8(0x4)
		bool bUseAdaptiveError : 1; // 0xAC:0(0x1)
		bool bUseOverrideForEndEffectors : 1; // 0xAC:1(0x1)
		unsigned char UnknownData05_5[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY
		int32_t TrackHeightBias; // 0xB0(0x4)
		float ParentingDivisor; // 0xB4(0x4)
		float ParentingDivisorExponent; // 0xB8(0x4)
		bool bUseAdaptiveError2 : 1; // 0xBC:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0xBD(0x3) UNKNOWN PROPERTY
		float RotationErrorSourceRatio; // 0xC0(0x4)
		float TranslationErrorSourceRatio; // 0xC4(0x4)
		float ScaleErrorSourceRatio; // 0xC8(0x4)
		float MaxErrorPerTrackRatio; // 0xCC(0x4)
		float PerturbationProbeSize; // 0xD0(0x4)
		unsigned char UnknownData07_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_PerTrackCompression");
			return ret;
		}
	};


	// Class Engine.AnimCompress_RemoveEverySecondKey
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x8 (0x48 - 0x40)
	class UAnimCompress_RemoveEverySecondKey : public UAnimCompress	
	{
	public:
		int32_t MinKeys; // 0x40(0x4)
		bool bStartAtSecondKey : 1; // 0x44:0(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x45(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_RemoveEverySecondKey");
			return ret;
		}
	};


	// Class Engine.AnimCompress_RemoveTrivialKeys
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x10 (0x50 - 0x40)
	class UAnimCompress_RemoveTrivialKeys : public UAnimCompress	
	{
	public:
		float MaxPosDiff; // 0x40(0x4)
		float MaxAngleDiff; // 0x44(0x4)
		float MaxScaleDiff; // 0x48(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_RemoveTrivialKeys");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
	// Inherited from UAnimCurveCompressionCodec -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec_UniformIndexable
	// Inherited from UAnimCurveCompressionCodec -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec_UniformIndexable");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec_UniformlySampled
	// Inherited from UAnimCurveCompressionCodec -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec_UniformlySampled");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionSettings
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAnimCurveCompressionSettings : public UObject	
	{
	public:
		UAnimCurveCompressionCodec Codec; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionSettings");
			return ret;
		}
	};


	// Class Engine.AnimDataModel
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class UAnimDataModel : public UObject	
	{
	public:
		unsigned char UnknownData05_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		int32_t BracketCounter; // 0x30(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		FMulticastInlineDelegate ModifiedEventDynamic; // 0x38(0x10)
		unsigned char UnknownData07_6[0x18]; // 0x48(0x18) UNKNOWN PROPERTY
		TArray BoneAnimationTracks; // 0x60(0x10)
		float PlayLength; // 0x70(0x4)
		FFrameRate FrameRate; // 0x74(0x8)
		int32_t NumberOfFrames; // 0x7C(0x4)
		int32_t NumberOfKeys; // 0x80(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x84(0x4) UNKNOWN PROPERTY
		FAnimationCurveData CurveData; // 0x88(0x20)
		TArray AnimatedBoneAttributes; // 0xA8(0x10)
		bool bPopulated; // 0xB8(0x1)
		unsigned char UnknownData09_7[0xF]; // 0xB9(0xF) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimDataModel");
			return ret;
		}
	};


	// Class Engine.AnimMetaData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimMetaData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimMetaData");
			return ret;
		}
	};


	// Class Engine.AnimMontage
	// Inherited from UAnimCompositeBase -> UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x128 (0x1E0 - 0xB8)
	class UAnimMontage : public UAnimCompositeBase	
	{
	public:
		EMontageBlendMode BlendModeIn; // 0xB8(0x1)
		EMontageBlendMode BlendModeOut; // 0xB9(0x1)
		unsigned char UnknownData05_6[0x6]; // 0xBA(0x6) UNKNOWN PROPERTY
		FAlphaBlend BlendIn; // 0xC0(0x30)
		FAlphaBlend BlendOut; // 0xF0(0x30)
		float BlendOutTriggerTime; // 0x120(0x4)
		FName SyncGroup; // 0x124(0x4)
		int32_t SyncSlotIndex; // 0x128(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x12C(0x4) UNKNOWN PROPERTY
		FMarkerSyncData MarkerData; // 0x130(0x20)
		TArray CompositeSections; // 0x150(0x10)
		TArray SlotAnimTracks; // 0x160(0x10)
		bool bEnableRootMotionTranslation; // 0x170(0x1)
		bool bEnableRootMotionRotation; // 0x171(0x1)
		bool bEnableAutoBlendOut; // 0x172(0x1)
		unsigned char UnknownData07_6[0x5]; // 0x173(0x5) UNKNOWN PROPERTY
		UBlendProfile BlendProfileIn; // 0x178(0x8)
		UBlendProfile BlendProfileOut; // 0x180(0x8)
		TEnumAsByte RootMotionRootLock; // 0x188(0x1)
		unsigned char UnknownData08_6[0x7]; // 0x189(0x7) UNKNOWN PROPERTY
		TArray BranchingPointMarkers; // 0x190(0x10)
		TArray BranchingPointStateNotifyIndices; // 0x1A0(0x10)
		FTimeStretchCurve TimeStretchCurve; // 0x1B0(0x28)
		FName TimeStretchCurveName; // 0x1D8(0x4)
		unsigned char UnknownData09_7[0x4]; // 0x1DC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimMontage");
			return ret;
		}

		bool IsValidSectionName(FName InSectionName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FDBD8
		bool IsValidAdditiveSlot(FName& SlotNodeName); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4144FDAF8
		bool IsDynamicMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FDA18
		FName GetSectionName(int32_t SectionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD938
		int32_t GetSectionIndex(FName InSectionName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD858
		int32_t GetNumSections(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD778
		FName GetGroupName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD698
		UAnimSequenceBase GetFirstAnimReference(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD5B8
		float GetDefaultBlendOutTime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD4D8
		float GetDefaultBlendInTime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD3F8
		FAlphaBlendArgs GetBlendOutArgs(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD318
		FAlphaBlendArgs GetBlendInArgs(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FD238
		UAnimMontage CreateSlotAnimationAsDynamicMontage_WithBlendSettings(UAnimSequenceBase Asset, FName SlotNodeName, FMontageBlendSettings& BlendInSettings, FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float InBlendOutTriggerTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4144FD158
	};


	// Class Engine.AnimNotifyLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimNotifyLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyLibrary");
			return ret;
		}

		bool NotifyStateReachedEnd(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FE038
		float GetCurrentAnimationTimeRatio(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FDF58
		float GetCurrentAnimationTime(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FDE78
		float GetCurrentAnimationNotifyStateTimeRatio(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FDD98
		float GetCurrentAnimationNotifyStateTime(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FDCB8
	};


	// Class Engine.AnimNotifyMirrorInspectionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimNotifyMirrorInspectionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyMirrorInspectionLibrary");
			return ret;
		}

		bool IsTriggeredByMirroredAnimation(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FE1F8
		UMirrorDataTable GetMirrorDataTable(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FE118
	};


	// Class Engine.AnimNotifyStateMachineInspectionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimNotifyStateMachineInspectionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyStateMachineInspectionLibrary");
			return ret;
		}

		bool IsTriggeredByStateMachine(FAnimNotifyEventReference& EventReference, UAnimInstance AnimInstance, FName StateMachineName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FE498
		bool IsTriggeredByStateInStateMachine(FAnimNotifyEventReference& EventReference, UAnimInstance AnimInstance, FName StateMachineName, FName StateName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FE3B8
		bool IsTriggeredByState(FAnimNotifyEventReference& EventReference, UAnimInstance AnimInstance, FName StateName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FE2D8
	};


	// Class Engine.AnimNotifyState_DisableRootMotion
	// Inherited from UAnimNotifyState -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState_DisableRootMotion");
			return ret;
		}
	};


	// Class Engine.AnimNotifyState_TimedParticleEffect
	// Inherited from UAnimNotifyState -> UObject
	// Size: 0x48 (0x78 - 0x30)
	class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState	
	{
	public:
		UParticleSystem PSTemplate; // 0x30(0x8)
		FName SocketName; // 0x38(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		FVector LocationOffset; // 0x40(0x18)
		FRotator RotationOffset; // 0x58(0x18)
		bool bDestroyAtEnd; // 0x70(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState_TimedParticleEffect");
			return ret;
		}
	};


	// Class Engine.AnimNotifyState_Trail
	// Inherited from UAnimNotifyState -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UAnimNotifyState_Trail : public UAnimNotifyState	
	{
	public:
		UParticleSystem PSTemplate; // 0x30(0x8)
		FName FirstSocketName; // 0x38(0x4)
		FName SecondSocketName; // 0x3C(0x4)
		TEnumAsByte WidthScaleMode; // 0x40(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		FName WidthScaleCurve; // 0x44(0x4)
		bool bRecycleSpawnedSystems : 1; // 0x48:0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState_Trail");
			return ret;
		}

		UParticleSystem OverridePSTemplate(USkeletalMeshComponent MeshComp, UAnimSequenceBase Animation); // Flags: RequiredAPI|Event|Public|BlueprintEvent|Const 0x7FF4144FE578
	};


	// Class Engine.AnimNotify_PauseClothingSimulation
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_PauseClothingSimulation : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_PauseClothingSimulation");
			return ret;
		}
	};


	// Class Engine.AnimNotify_PlayParticleEffect
	// Inherited from UAnimNotify -> UObject
	// Size: 0x88 (0xC0 - 0x38)
	class UAnimNotify_PlayParticleEffect : public UAnimNotify	
	{
	public:
		UParticleSystem PSTemplate; // 0x38(0x8)
		FVector LocationOffset; // 0x40(0x18)
		FRotator RotationOffset; // 0x58(0x18)
		FVector Scale; // 0x70(0x18)
		unsigned char UnknownData03_6[0x28]; // 0x88(0x28) UNKNOWN PROPERTY
		bool Attached : 1; // 0xB0:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0xB1(0x3) UNKNOWN PROPERTY
		FName SocketName; // 0xB4(0x4)
		unsigned char UnknownData05_7[0x8]; // 0xB8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_PlayParticleEffect");
			return ret;
		}
	};


	// Class Engine.AnimNotify_PlaySound
	// Inherited from UAnimNotify -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UAnimNotify_PlaySound : public UAnimNotify	
	{
	public:
		USoundBase Sound; // 0x38(0x8)
		float VolumeMultiplier; // 0x40(0x4)
		float PitchMultiplier; // 0x44(0x4)
		bool bFollow : 1; // 0x48:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		FName AttachName; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_PlaySound");
			return ret;
		}
	};


	// Class Engine.AnimNotify_ResetClothingSimulation
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_ResetClothingSimulation : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_ResetClothingSimulation");
			return ret;
		}
	};


	// Class Engine.AnimNotify_ResetDynamics
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_ResetDynamics : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_ResetDynamics");
			return ret;
		}
	};


	// Class Engine.AnimNotify_ResumeClothingSimulation
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_ResumeClothingSimulation : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_ResumeClothingSimulation");
			return ret;
		}
	};


	// Class Engine.AnimSequence
	// Inherited from UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x140 (0x1F0 - 0xB0)
	class UAnimSequence : public UAnimSequenceBase	
	{
	public:
		UAnimBoneCompressionSettings BoneCompressionSettings; // 0xB0(0x8)
		UAnimCurveCompressionSettings CurveCompressionSettings; // 0xB8(0x8)
		unsigned char UnknownData05_6[0x80]; // 0xC0(0x80) UNKNOWN PROPERTY
		UVariableFrameStrippingSettings VariableFrameStrippingSettings; // 0x140(0x8)
		TEnumAsByte AdditiveAnimType; // 0x148(0x1)
		TEnumAsByte RefPoseType; // 0x149(0x1)
		unsigned char UnknownData06_6[0x2]; // 0x14A(0x2) UNKNOWN PROPERTY
		int32_t RefFrameIndex; // 0x14C(0x4)
		UAnimSequence RefPoseSeq; // 0x150(0x8)
		FName RetargetSource; // 0x158(0x4)
		unsigned char UnknownData07_6[0x4]; // 0x15C(0x4) UNKNOWN PROPERTY
		TArray RetargetSourceAssetReferencePose; // 0x160(0x10)
		EAnimInterpolationType Interpolation; // 0x170(0x1)
		bool bEnableRootMotion; // 0x171(0x1)
		TEnumAsByte RootMotionRootLock; // 0x172(0x1)
		bool bForceRootLock; // 0x173(0x1)
		bool bUseNormalizedRootMotionScale; // 0x174(0x1)
		bool bRootMotionSettingsCopiedFromMontage; // 0x175(0x1)
		EStripAnimDataOnDedicatedServerSettings StripAnimDataOnDedicatedServer; // 0x176(0x1)
		unsigned char UnknownData08_6[0x1]; // 0x177(0x1) UNKNOWN PROPERTY
		TArray AuthoredSyncMarkers; // 0x178(0x10)
		unsigned char UnknownData09_6[0x10]; // 0x188(0x10) UNKNOWN PROPERTY
		FPerPlatformFrameRate PlatformTargetFrameRate; // 0x198(0x8)
		TMap AttributeCurves; // 0x1A0(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSequence");
			return ret;
		}
	};


	// Class Engine.AnimSet
	// Inherited from UObject
	// Size: 0xC0 (0xE8 - 0x28)
	class UAnimSet : public UObject	
	{
	public:
		bool bAnimRotationOnly : 1; // 0x28:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		TArray TrackBoneNames; // 0x30(0x10)
		TArray LinkupCache; // 0x40(0x10)
		TArray BoneUseAnimTranslation; // 0x50(0x10)
		TArray ForceUseMeshTranslation; // 0x60(0x10)
		TArray UseTranslationBoneNames; // 0x70(0x10)
		TArray ForceMeshTranslationBoneNames; // 0x80(0x10)
		FName PreviewSkelMeshName; // 0x90(0x4)
		FName BestRatioSkelMeshName; // 0x94(0x4)
		unsigned char UnknownData03_7[0x50]; // 0x98(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSet");
			return ret;
		}
	};


	// Class Engine.AnimSingleNodeInstance
	// Inherited from UAnimInstance -> UObject
	// Size: 0x18 (0x3D0 - 0x3B8)
	class UAnimSingleNodeInstance : public UAnimInstance	
	{
	public:
		UAnimationAsset CurrentAsset; // 0x3B8(0x8)
		FDelegateProperty PostEvaluateAnimEvent; // 0x3C0(0xC)
		unsigned char UnknownData01_7[0x4]; // 0x3CC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSingleNodeInstance");
			return ret;
		}

		void StopAnim(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FF298
		void SetReverse(bool bInReverse); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FF1B8
		void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4144FF0D8
		void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FEFF8
		void SetPosition(float InPosition, bool bFireNotifies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FEF18
		void SetPlayRate(float InPlayRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FEE38
		void SetPlaying(bool bIsPlaying); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FED58
		void SetMirrorDataTable(UMirrorDataTable MirrorDataTable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FEC78
		void SetLooping(bool bIsLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FEB98
		void SetBlendSpacePosition(FVector& InPosition); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4144FEAB8
		void SetAnimationAsset(UAnimationAsset NewAsset, bool bIsLooping, float InPlayRate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FE9D8
		void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FE8F8
		UMirrorDataTable GetMirrorDataTable(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FE818
		float GetLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4144FE738
		UAnimationAsset GetAnimationAsset(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4144FE658
	};


	// Class Engine.AnimStateMachineTypes
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimStateMachineTypes : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimStateMachineTypes");
			return ret;
		}
	};


	// Class Engine.AnimStreamable
	// Inherited from UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x48 (0xF8 - 0xB0)
	class UAnimStreamable : public UAnimSequenceBase	
	{
	public:
		int32_t NumberOfKeys; // 0xB0(0x4)
		EAnimInterpolationType Interpolation; // 0xB4(0x1)
		unsigned char UnknownData03_6[0x3]; // 0xB5(0x3) UNKNOWN PROPERTY
		FName RetargetSource; // 0xB8(0x4)
		FFrameRate SamplingFrameRate; // 0xBC(0x8)
		unsigned char UnknownData04_6[0x14]; // 0xC4(0x14) UNKNOWN PROPERTY
		UAnimBoneCompressionSettings BoneCompressionSettings; // 0xD8(0x8)
		UAnimCurveCompressionSettings CurveCompressionSettings; // 0xE0(0x8)
		UVariableFrameStrippingSettings VariableFrameStrippingSettings; // 0xE8(0x8)
		bool bEnableRootMotion; // 0xF0(0x1)
		TEnumAsByte RootMotionRootLock; // 0xF1(0x1)
		bool bForceRootLock; // 0xF2(0x1)
		bool bUseNormalizedRootMotionScale; // 0xF3(0x1)
		unsigned char UnknownData05_7[0x4]; // 0xF4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimStreamable");
			return ret;
		}
	};


	// Class Engine.AssetMappingTable
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAssetMappingTable : public UObject	
	{
	public:
		TArray MappedAssets; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetMappingTable");
			return ret;
		}
	};


	// Class Engine.AnimationAttributeIdentifierExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationAttributeIdentifierExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationAttributeIdentifierExtensions");
			return ret;
		}

		bool IsValid(FAnimationAttributeIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF378
	};


	// Class Engine.Skeleton
	// Inherited from UObject
	// Size: 0x438 (0x460 - 0x28)
	class USkeleton : public UObject	
	{
	public:
		unsigned char UnknownData05_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TArray BoneTree; // 0x38(0x10)
		unsigned char UnknownData06_6[0x128]; // 0x48(0x128) UNKNOWN PROPERTY
		FGuid VirtualBoneGuid; // 0x170(0x10)
		TArray VirtualBones; // 0x180(0x10)
		TArray CompatibleSkeletons; // 0x190(0x10)
		TArray Sockets; // 0x1A0(0x10)
		unsigned char UnknownData07_6[0x50]; // 0x1B0(0x50) UNKNOWN PROPERTY
		FSmartNameContainer SmartNames; // 0x200(0x50)
		unsigned char UnknownData08_6[0x10]; // 0x250(0x10) UNKNOWN PROPERTY
		TArray BlendProfiles; // 0x260(0x10)
		TArray SlotGroups; // 0x270(0x10)
		unsigned char UnknownData09_6[0x1D0]; // 0x280(0x1D0) UNKNOWN PROPERTY
		TArray AssetUserData; // 0x450(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Skeleton");
			return ret;
		}

		UBlendProfile GetBlendProfile(FName& InProfileName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145005D8
		void AddCompatibleSkeletonSoft(TWeakObjectPtr& SourceSkeleton); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145004F8
		void AddCompatibleSkeleton(USkeleton SourceSkeleton); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414500418
	};


	// Class Engine.BlendProfile
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UBlendProfile : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		USkeleton OwningSkeleton; // 0x30(0x8)
		TArray ProfileEntries; // 0x38(0x10)
		EBlendProfileMode Mode; // 0x48(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendProfile");
			return ret;
		}
	};


	// Class Engine.BoneMaskFilter
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UBoneMaskFilter : public UObject	
	{
	public:
		TArray BlendPoses; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoneMaskFilter");
			return ret;
		}
	};


	// Class Engine.CachedAnimDataLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CachedAnimDataLibrary");
			return ret;
		}

		bool StateMachine_IsStateRelevant(UAnimInstance InAnimInstance, FCachedAnimStateData& CachedAnimStateData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFDF8
		bool StateMachine_IsRelevant(UAnimInstance InAnimInstance, FCachedAnimStateArray& CachedAnimStateArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFD18
		bool StateMachine_IsFullWeight(UAnimInstance InAnimInstance, FCachedAnimStateArray& CachedAnimStateArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFC38
		float StateMachine_GetTotalWeight(UAnimInstance InAnimInstance, FCachedAnimStateArray& CachedAnimStateArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFB58
		float StateMachine_GetRelevantAnimTimeRemainingFraction(UAnimInstance InAnimInstance, FCachedAnimRelevancyData& CachedAnimRelevancyData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFA78
		float StateMachine_GetRelevantAnimTimeRemaining(UAnimInstance InAnimInstance, FCachedAnimRelevancyData& CachedAnimRelevancyData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF998
		float StateMachine_GetRelevantAnimTime(UAnimInstance InAnimInstance, FCachedAnimRelevancyData& CachedAnimRelevancyData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF8B8
		float StateMachine_GetLocalWeight(UAnimInstance InAnimInstance, FCachedAnimStateData& CachedAnimStateData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF7D8
		float StateMachine_GetGlobalWeight(UAnimInstance InAnimInstance, FCachedAnimStateData& CachedAnimStateData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF6F8
		float StateMachine_GetCrossfadeDuration(UAnimInstance InAnimInstance, FCachedAnimTransitionData& CachedAnimTransitionData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF618
		float StateMachine_GetAssetPlayerTimeRatio(UAnimInstance InAnimInstance, FCachedAnimAssetPlayerData& CachedAnimAssetPlayerData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF538
		float StateMachine_GetAssetPlayerTime(UAnimInstance InAnimInstance, FCachedAnimAssetPlayerData& CachedAnimAssetPlayerData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FF458
	};


	// Class Engine.AnimationCurveIdentifierExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationCurveIdentifierExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationCurveIdentifierExtensions");
			return ret;
		}

		bool IsValid(FAnimationCurveIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414500098
		ERawCurveTrackTypes GetType(FAnimationCurveIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFFB8
		FName GetName(FAnimationCurveIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4144FFED8
	};


	// Class Engine.CurveSourceInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCurveSourceInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveSourceInterface");
			return ret;
		}

		float GetCurveValue(FName CurveName); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF414500338
		void GetCurves(TArray& OutValues); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|BlueprintEvent|Const 0x7FF414500258
		FName GetBindingName(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF414500178
	};


	// Class Engine.DataTable
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UDataTable : public UObject	
	{
	public:
		UScriptStruct RowStruct; // 0x28(0x8)
		unsigned char UnknownData03_6[0x50]; // 0x30(0x50) UNKNOWN PROPERTY
		bool bStripFromClientBuilds : 1; // 0x80:0(0x1)
		bool bIgnoreExtraFields : 1; // 0x80:1(0x1)
		bool bIgnoreMissingFields : 1; // 0x80:2(0x1)
		bool bPreserveExistingValues : 1; // 0x80:3(0x1)
		unsigned char UnknownData04_5[0x7]; // 0x81(0x7) UNKNOWN PROPERTY
		FString ImportKeyField; // 0x88(0x10)
		unsigned char UnknownData05_7[0x18]; // 0x98(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataTable");
			return ret;
		}
	};


	// Class Engine.MirrorDataTable
	// Inherited from UDataTable -> UObject
	// Size: 0x140 (0x1F0 - 0xB0)
	class UMirrorDataTable : public UDataTable	
	{
	public:
		TArray MirrorFindReplaceExpressions; // 0xB0(0x10)
		TEnumAsByte MirrorAxis; // 0xC0(0x1)
		bool bMirrorRootMotion; // 0xC1(0x1)
		unsigned char UnknownData02_6[0x6]; // 0xC2(0x6) UNKNOWN PROPERTY
		USkeleton Skeleton; // 0xC8(0x8)
		unsigned char UnknownData03_7[0x120]; // 0xD0(0x120) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MirrorDataTable");
			return ret;
		}
	};


	// Class Engine.NodeMappingContainer
	// Inherited from UObject
	// Size: 0x130 (0x158 - 0x28)
	class UNodeMappingContainer : public UObject	
	{
	public:
		TMap SourceItems; // 0x28(0x50)
		TMap TargetItems; // 0x78(0x50)
		TMap SourceToTarget; // 0xC8(0x50)
		TWeakObjectPtr SourceAsset; // 0x118(0x20)
		TWeakObjectPtr TargetAsset; // 0x138(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NodeMappingContainer");
			return ret;
		}
	};


	// Class Engine.NodeMappingProviderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNodeMappingProviderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NodeMappingProviderInterface");
			return ret;
		}
	};


	// Class Engine.PoseAsset
	// Inherited from UAnimationAsset -> UObject
	// Size: 0x90 (0x110 - 0x80)
	class UPoseAsset : public UAnimationAsset	
	{
	public:
		FPoseDataContainer PoseContainer; // 0x80(0x70)
		bool bAdditivePose; // 0xF0(0x1)
		unsigned char UnknownData02_6[0x3]; // 0xF1(0x3) UNKNOWN PROPERTY
		int32_t BasePoseIndex; // 0xF4(0x4)
		FName RetargetSource; // 0xF8(0x4)
		unsigned char UnknownData03_6[0x4]; // 0xFC(0x4) UNKNOWN PROPERTY
		TArray RetargetSourceAssetReferencePose; // 0x100(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseAsset");
			return ret;
		}
	};


	// Class Engine.PreviewCollectionInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPreviewCollectionInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PreviewCollectionInterface");
			return ret;
		}
	};


	// Class Engine.PreviewMeshCollection
	// Inherited from UDataAsset -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UPreviewMeshCollection : public UDataAsset	
	{
	public:
		unsigned char UnknownData01_3[0x8]; // 0x30(0x8) UNKNOWN PROPERTY
		USkeleton Skeleton; // 0x38(0x8)
		TArray SkeletalMeshes; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PreviewMeshCollection");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshActor
	// Inherited from AActor -> UObject
	// Size: 0x80 (0x310 - 0x290)
	class ASkeletalMeshActor : public AActor	
	{
	public:
		bool bShouldDoAnimNotifies : 1; // 0x290:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x291(0x7) UNKNOWN PROPERTY
		USkeletalMeshComponent SkeletalMeshComponent; // 0x298(0x8)
		USkeletalMesh ReplicatedMesh; // 0x2A0(0x8)
		UPhysicsAsset ReplicatedPhysAsset; // 0x2A8(0x8)
		UMaterialInterface ReplicatedMaterial0; // 0x2B0(0x8)
		UMaterialInterface ReplicatedMaterial1; // 0x2B8(0x8)
		unsigned char UnknownData03_7[0x50]; // 0x2C0(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshActor");
			return ret;
		}

		void OnRep_ReplicatedPhysAsset(); // Flags: RequiredAPI|Native|Public 0x7FF413E50928
		void OnRep_ReplicatedMesh(); // Flags: RequiredAPI|Native|Public 0x7FF413E50848
		void OnRep_ReplicatedMaterial1(); // Flags: RequiredAPI|Native|Public 0x7FF413E50768
		void OnRep_ReplicatedMaterial0(); // Flags: RequiredAPI|Native|Public 0x7FF413E50688
	};


	// Class Engine.AnimBlueprint
	// Inherited from UBlueprint -> UBlueprintCore -> UObject
	// Size: 0x28 (0xD0 - 0xA8)
	class UAnimBlueprint : public UBlueprint	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0xA8(0x8) UNKNOWN PROPERTY
		USkeleton TargetSkeleton; // 0xB0(0x8)
		TArray Groups; // 0xB8(0x10)
		bool bIsTemplate; // 0xC8(0x1)
		bool bUseMultiThreadedAnimationUpdate; // 0xC9(0x1)
		bool bWarnAboutBlueprintUsage; // 0xCA(0x1)
		bool bEnableLinkedAnimLayerInstanceSharing : 1; // 0xCB:0(0x1)
		unsigned char UnknownData03_7[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprint");
			return ret;
		}
	};


	// Class Engine.AssetManager
	// Inherited from UObject
	// Size: 0x4A8 (0x4D0 - 0x28)
	class UAssetManager : public UObject	
	{
	public:
		unsigned char UnknownData04_3[0x308]; // 0x28(0x308) UNKNOWN PROPERTY
		TArray ObjectReferenceList; // 0x330(0x10)
		bool bIsGlobalAsyncScanEnvironment; // 0x340(0x1)
		bool bShouldGuessTypeAndName; // 0x341(0x1)
		bool bShouldUseSynchronousLoad; // 0x342(0x1)
		bool bIsLoadingFromPakFiles; // 0x343(0x1)
		bool bShouldAcquireMissingChunksOnLoad; // 0x344(0x1)
		bool bOnlyCookProductionAssets; // 0x345(0x1)
		unsigned char UnknownData05_6[0x2]; // 0x346(0x2) UNKNOWN PROPERTY
		int32_t NumBulkScanRequests; // 0x348(0x4)
		bool bIsPrimaryAssetDirectoryCurrent; // 0x34C(0x1)
		bool bIsManagementDatabaseCurrent; // 0x34D(0x1)
		bool bUpdateManagementDatabaseAfterScan; // 0x34E(0x1)
		bool bIncludeOnlyOnDiskAssets; // 0x34F(0x1)
		bool bHasCompletedInitialScan; // 0x350(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x351(0x3) UNKNOWN PROPERTY
		int32_t NumberOfSpawnedNotifications; // 0x354(0x4)
		unsigned char UnknownData07_7[0x178]; // 0x358(0x178) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetManager");
			return ret;
		}
	};


	// Class Engine.AsyncActionLoadPrimaryAssetBase
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x48 (0x78 - 0x30)
	class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase	
	{
	public:
		unsigned char UnknownData01_1[0x48]; // 0x30(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetBase");
			return ret;
		}
	};


	// Class Engine.AsyncActionLoadPrimaryAsset
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAsset");
			return ret;
		}

		UAsyncActionLoadPrimaryAsset AsyncLoadPrimaryAsset(UObject WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145006B8
	};


	// Class Engine.AsyncActionLoadPrimaryAssetClass
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetClass");
			return ret;
		}

		UAsyncActionLoadPrimaryAssetClass AsyncLoadPrimaryAssetClass(UObject WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414500798
	};


	// Class Engine.AsyncActionLoadPrimaryAssetList
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetList");
			return ret;
		}

		UAsyncActionLoadPrimaryAssetList AsyncLoadPrimaryAssetList(UObject WorldContextObject, TArray& PrimaryAssetList, TArray& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414500878
	};


	// Class Engine.AsyncActionLoadPrimaryAssetClassList
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetClassList");
			return ret;
		}

		UAsyncActionLoadPrimaryAssetClassList AsyncLoadPrimaryAssetClassList(UObject WorldContextObject, TArray& PrimaryAssetList, TArray& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414500958
	};


	// Class Engine.AsyncActionChangePrimaryAssetBundles
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionChangePrimaryAssetBundles");
			return ret;
		}

		UAsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForPrimaryAssetList(UObject WorldContextObject, TArray& PrimaryAssetList, TArray& AddBundles, TArray& RemoveBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414500B18
		UAsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForMatchingPrimaryAssets(UObject WorldContextObject, TArray& NewBundles, TArray& OldBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414500A38
	};


	// Class Engine.AtmosphericFog
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAtmosphericFog : public AInfo	
	{
	public:
		UAtmosphericFogComponent AtmosphericFogComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AtmosphericFog");
			return ret;
		}
	};


	// Class Engine.SkyAtmosphereComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x100 (0x320 - 0x220)
	class USkyAtmosphereComponent : public USceneComponent	
	{
	public:
		ESkyAtmosphereTransformMode TransformMode; // 0x220(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x221(0x3) UNKNOWN PROPERTY
		float BottomRadius; // 0x224(0x4)
		FColor GroundAlbedo; // 0x228(0x4)
		float AtmosphereHeight; // 0x22C(0x4)
		float MultiScatteringFactor; // 0x230(0x4)
		float TraceSampleCountScale; // 0x234(0x4)
		float RayleighScatteringScale; // 0x238(0x4)
		FLinearColor RayleighScattering; // 0x23C(0x10)
		float RayleighExponentialDistribution; // 0x24C(0x4)
		float MieScatteringScale; // 0x250(0x4)
		FLinearColor MieScattering; // 0x254(0x10)
		float MieAbsorptionScale; // 0x264(0x4)
		FLinearColor MieAbsorption; // 0x268(0x10)
		float MieAnisotropy; // 0x278(0x4)
		float MieExponentialDistribution; // 0x27C(0x4)
		float OtherAbsorptionScale; // 0x280(0x4)
		FLinearColor OtherAbsorption; // 0x284(0x10)
		FTentDistribution OtherTentDistribution; // 0x294(0xC)
		FLinearColor SkyLuminanceFactor; // 0x2A0(0x10)
		float AerialPespectiveViewDistanceScale; // 0x2B0(0x4)
		float HeightFogContribution; // 0x2B4(0x4)
		float TransmittanceMinLightElevationAngle; // 0x2B8(0x4)
		float AerialPerspectiveStartDepth; // 0x2BC(0x4)
		bool bHoldout : 1; // 0x2C0:0(0x1)
		bool bRenderInMainPass : 1; // 0x2C0:1(0x1)
		unsigned char UnknownData04_5[0x47]; // 0x2C1(0x47) UNKNOWN PROPERTY
		FGuid bStaticLightingBuiltGUID; // 0x308(0x10)
		unsigned char UnknownData05_7[0x8]; // 0x318(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyAtmosphereComponent");
			return ret;
		}

		void SetSkyLuminanceFactor(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145021D8
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145020F8
		void SetRayleighScatteringScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502018
		void SetRayleighScattering(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414501F38
		void SetRayleighExponentialDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501E58
		void SetOtherAbsorptionScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501D78
		void SetOtherAbsorption(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414501C98
		void SetMultiScatteringFactor(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501BB8
		void SetMieScatteringScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501AD8
		void SetMieScattering(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145019F8
		void SetMieExponentialDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501918
		void SetMieAnisotropy(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501838
		void SetMieAbsorptionScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501758
		void SetMieAbsorption(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414501678
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501598
		void SetHeightFogContribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145014B8
		void SetGroundAlbedo(FColor& NewValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145013D8
		void SetBottomRadius(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145012F8
		void SetAtmosphereHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501218
		void SetAerialPespectiveViewDistanceScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501138
		void ResetAtmosphereLightDirectionOverride(int32_t AtmosphereLightIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414501058
		void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414500F78
		bool IsAtmosphereLightDirectionOverriden(int32_t AtmosphereLightIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414500E98
		FVector GetOverridenAtmosphereLightDirection(int32_t AtmosphereLightIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414500DB8
		float GetAtmosphericLightToMatchIlluminanceOnGround(FVector LightDirection, float IlluminanceOnGround); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414500CD8
		FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(UDirectionalLightComponent DirectionalLight); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414500BF8
	};


	// Class Engine.AtmosphericFogComponent
	// Inherited from USkyAtmosphereComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x320 - 0x320)
	class UAtmosphericFogComponent : public USkyAtmosphereComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AtmosphericFogComponent");
			return ret;
		}

		void SetSunMultiplier(float NewSunMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502D38
		void SetStartDistance(float NewStartDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502C58
		void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502B78
		void SetFogMultiplier(float NewFogMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502A98
		void SetDistanceScale(float NewDistanceScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145029B8
		void SetDistanceOffset(float NewDistanceOffset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145028D8
		void SetDensityOffset(float NewDensityOffset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145027F8
		void SetDensityMultiplier(float NewDensityMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502718
		void SetDefaultLightColor(FLinearColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414502638
		void SetDefaultBrightness(float NewBrightness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502558
		void SetAltitudeScale(float NewAltitudeScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502478
		void DisableSunDisk(bool NewSunDisk); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502398
		void DisableGroundScattering(bool NewGroundScattering); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145022B8
	};


	// Class Engine.AudioBus
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAudioBus : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		EAudioBusChannels AudioBusChannels; // 0x30(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioBus");
			return ret;
		}
	};


	// Class Engine.AudioSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x168 (0x198 - 0x30)
	class UAudioSettings : public UDeveloperSettings	
	{
	public:
		FSoftObjectPath DefaultSoundClassName; // 0x30(0x18)
		FSoftObjectPath DefaultMediaSoundClassName; // 0x48(0x18)
		FSoftObjectPath DefaultSoundConcurrencyName; // 0x60(0x18)
		FSoftObjectPath DefaultBaseSoundMix; // 0x78(0x18)
		FSoftObjectPath VoiPSoundClass; // 0x90(0x18)
		FSoftObjectPath MasterSubmix; // 0xA8(0x18)
		FSoftObjectPath BaseDefaultSubmix; // 0xC0(0x18)
		FSoftObjectPath ReverbSubmix; // 0xD8(0x18)
		FSoftObjectPath EQSubmix; // 0xF0(0x18)
		EVoiceSampleRate VoiPSampleRate; // 0x108(0x4)
		EDefaultAudioCompressionType DefaultAudioCompressionType; // 0x10C(0x1)
		unsigned char UnknownData05_6[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		int32_t DefaultCompressionQuality; // 0x110(0x4)
		float DefaultReverbSendLevel; // 0x114(0x4)
		int32_t MaximumConcurrentStreams; // 0x118(0x4)
		float GlobalMinPitchScale; // 0x11C(0x4)
		float GlobalMaxPitchScale; // 0x120(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x124(0x4) UNKNOWN PROPERTY
		TArray QualityLevels; // 0x128(0x10)
		bool bAllowPlayWhenSilent : 1; // 0x138:0(0x1)
		bool bDisableMasterEQ : 1; // 0x138:1(0x1)
		bool bAllowCenterChannel3DPanning : 1; // 0x138:2(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		uint32_t NumStoppingSources; // 0x13C(0x4)
		EPanningMethod PanningMethod; // 0x140(0x1)
		EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x141(0x1)
		unsigned char UnknownData08_6[0x6]; // 0x142(0x6) UNKNOWN PROPERTY
		FString DialogueFilenameFormat; // 0x148(0x10)
		TArray DebugSounds; // 0x158(0x10)
		TArray DefaultAudioBuses; // 0x168(0x10)
		USoundClass DefaultSoundClass; // 0x178(0x8)
		USoundClass DefaultMediaSoundClass; // 0x180(0x8)
		USoundConcurrency DefaultSoundConcurrency; // 0x188(0x8)
		unsigned char UnknownData09_7[0x8]; // 0x190(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioSettings");
			return ret;
		}
	};


	// Class Engine.AudioVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x70 (0x338 - 0x2C8)
	class AAudioVolume : public AVolume	
	{
	public:
		float Priority; // 0x2C8(0x4)
		bool bEnabled : 1; // 0x2CC:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x2CD(0x3) UNKNOWN PROPERTY
		FReverbSettings Settings; // 0x2D0(0x20)
		FInteriorSettings AmbientZoneSettings; // 0x2F0(0x24)
		unsigned char UnknownData03_6[0x4]; // 0x314(0x4) UNKNOWN PROPERTY
		TArray SubmixSendSettings; // 0x318(0x10)
		TArray SubmixOverrideSettings; // 0x328(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioVolume");
			return ret;
		}

		void SetSubmixSendSettings(TArray& NewSubmixSendSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414503358
		void SetSubmixOverrideSettings(TArray& NewSubmixOverrideSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414503278
		void SetReverbSettings(FReverbSettings& NewReverbSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414503198
		void SetPriority(float NewPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145030B8
		void SetInteriorSettings(FInteriorSettings& NewInteriorSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414502FD8
		void SetEnabled(bool bNewEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414502EF8
		void OnRep_bEnabled(); // Flags: Final|RequiredAPI|Native|Private 0x7FF414502E18
	};


	// Class Engine.ActorSoundParameterInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorSoundParameterInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorSoundParameterInterface");
			return ret;
		}

		void GetActorSoundParams(TArray& Params); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|BlueprintEvent|Const 0x7FF414503438
	};


	// Class Engine.AudioWidgetSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UAudioWidgetSubsystem : public UEngineSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioWidgetSubsystem");
			return ret;
		}
	};


	// Class Engine.SoundParameterControllerInterface
	// Inherited from UAudioParameterControllerInterface -> UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USoundParameterControllerInterface : public UAudioParameterControllerInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundParameterControllerInterface");
			return ret;
		}
	};


	// Class Engine.AudioParameterConversionStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAudioParameterConversionStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioParameterConversionStatics");
			return ret;
		}

		FAudioParameter StringToAudioParameter(FName Name, FString String); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503CF8
		FAudioParameter StringArrayToAudioParameter(FName Name, TArray Strings); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503C18
		FAudioParameter ObjectToAudioParameter(FName Name, UObject Object); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503B38
		FAudioParameter ObjectArrayToAudioParameter(FName Name, TArray Objects); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503A58
		FAudioParameter IntegerToAudioParameter(FName Name, int32_t Integer); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503978
		FAudioParameter IntegerArrayToAudioParameter(FName Name, TArray Integers); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503898
		FAudioParameter FloatToAudioParameter(FName Name, float float); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145037B8
		FAudioParameter FloatArrayToAudioParameter(FName Name, TArray Floats); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145036D8
		FAudioParameter BooleanToAudioParameter(FName Name, bool bool); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145035F8
		FAudioParameter BooleanArrayToAudioParameter(FName Name, TArray Bools); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414503518
	};


	// Class Engine.BlockingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ABlockingVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlockingVolume");
			return ret;
		}
	};


	// Class Engine.BlueprintInstancedStructLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintInstancedStructLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintInstancedStructLibrary");
			return ret;
		}

		void SetInstancedStructValue(FInstancedStruct& InstancedStruct, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145043F8
		void Reset(FInstancedStruct& InstancedStruct, UScriptStruct StructType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504318
		bool NotEqual_InstancedStruct(FInstancedStruct& A, FInstancedStruct& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504238
		FInstancedStruct MakeInstancedStruct(int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504158
		bool IsValid_InstancedStruct(FInstancedStruct& InstancedStruct); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504078
		EStructUtilsResult IsInstancedStructValid(FInstancedStruct& InstancedStruct); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414503F98
		void GetInstancedStructValue(EStructUtilsResult& ExecResult, FInstancedStruct& InstancedStruct, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414503EB8
		bool EqualEqual_InstancedStruct(FInstancedStruct& A, FInstancedStruct& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414503DD8
	};


	// Class Engine.BlueprintMapLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintMapLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintMapLibrary");
			return ret;
		}

		void SetMapPropertyByName(UObject Object, FName PropertyName, TMap& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504D98
		void Map_Values(TMap& TargetMap, TArray& Values); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504CB8
		bool Map_Remove(TMap& TargetMap, int32_t& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504BD8
		int32_t Map_Length(TMap& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504AF8
		void Map_Keys(TMap& TargetMap, TArray& Keys); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504A18
		bool Map_IsNotEmpty(TMap& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504938
		bool Map_IsEmpty(TMap& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504858
		bool Map_Find(TMap& TargetMap, int32_t& Key, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504778
		bool Map_Contains(TMap& TargetMap, int32_t& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414504698
		void Map_Clear(TMap& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145045B8
		void Map_Add(TMap& TargetMap, int32_t& Key, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145044D8
	};


	// Class Engine.BlueprintSetLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintSetLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintSetLibrary");
			return ret;
		}

		void SetSetPropertyByName(UObject Object, FName PropertyName, TSet& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145059D8
		void Set_Union(TSet& A, TSet& B, TSet& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145058F8
		void Set_ToArray(TSet& A, TArray& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505818
		void Set_RemoveItems(TSet& TargetSet, TArray& Items); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505738
		bool Set_Remove(TSet& TargetSet, int32_t& Item); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505658
		int32_t Set_Length(TSet& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414505578
		bool Set_IsNotEmpty(TSet& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414505498
		bool Set_IsEmpty(TSet& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145053B8
		void Set_Intersection(TSet& A, TSet& B, TSet& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145052D8
		void Set_Difference(TSet& A, TSet& B, TSet& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145051F8
		bool Set_Contains(TSet& TargetSet, int32_t& ItemToFind); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414505118
		void Set_Clear(TSet& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505038
		void Set_AddItems(TSet& TargetSet, TArray& NewItems); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504F58
		void Set_Add(TSet& TargetSet, int32_t& NewItem); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414504E78
	};


	// Class Engine.BookMark
	// Inherited from UBookmarkBase -> UObject
	// Size: 0x40 (0x68 - 0x28)
	class UBookMark : public UBookmarkBase	
	{
	public:
		FVector Location; // 0x28(0x18)
		FRotator Rotation; // 0x40(0x18)
		TArray HiddenLevels; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BookMark");
			return ret;
		}
	};


	// Class Engine.BrushBuilder
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UBrushBuilder : public UObject	
	{
	public:
		FString BitmapFilename; // 0x28(0x10)
		FString ToolTip; // 0x38(0x10)
		bool NotifyBadParams : 1; // 0x48:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x49(0x7) UNKNOWN PROPERTY
		TArray Vertices; // 0x50(0x10)
		TArray Polys; // 0x60(0x10)
		FName Layer; // 0x70(0x4)
		bool MergeCoplanars : 1; // 0x74:0(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x75(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BrushBuilder");
			return ret;
		}
	};


	// Class Engine.BrushShape
	// Inherited from ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ABrushShape : public ABrush	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BrushShape");
			return ret;
		}
	};


	// Class Engine.CameraBlockingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ACameraBlockingVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraBlockingVolume");
			return ret;
		}
	};


	// Class Engine.CameraProxyMeshComponent
	// Inherited from UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x590 - 0x590)
	class UCameraProxyMeshComponent : public UStaticMeshComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraProxyMeshComponent");
			return ret;
		}
	};


	// Class Engine.CameraLensEffectInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCameraLensEffectInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraLensEffectInterface");
			return ret;
		}

		UFXSystemComponent GetPrimaryParticleComponent(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414505B98
		TArray GetParticleComponents(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414505AB8
	};


	// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCameraLensEffectInterfaceClassSupportLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraLensEffectInterfaceClassSupportLibrary");
			return ret;
		}

		void SetInterfaceClass(UClass Class, FCameraLensInterfaceClassSupport& Var, EInterfaceValidResult& Result); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505F18
		void IsInterfaceValid(TScriptInterface& CameraLens, EInterfaceValidResult& Result); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505E38
		void IsInterfaceClassValid(FCameraLensInterfaceClassSupport& CameraLens, EInterfaceValidResult& Result); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414505D58
		UClass GetInterfaceClass(FCameraLensInterfaceClassSupport& CameraLens); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414505C78
	};


	// Class Engine.CameraModifier
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UCameraModifier : public UObject	
	{
	public:
		bool bDebug : 1; // 0x28:0(0x1)
		bool bExclusive : 1; // 0x28:1(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		char Priority; // 0x2C(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		APlayerCameraManager CameraOwner; // 0x30(0x8)
		float AlphaInTime; // 0x38(0x4)
		float AlphaOutTime; // 0x3C(0x4)
		float Alpha; // 0x40(0x4)
		unsigned char UnknownData05_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraModifier");
			return ret;
		}

		void OnCameraOwnerDestroyed(AActor InOwner); // Flags: Final|RequiredAPI|Native|Protected 0x7FF414506618
		bool IsPendingDisable(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414506538
		bool IsDisabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414506458
		AActor GetViewTarget(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414506378
		void EnableModifier(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414506298
		void DisableModifier(bool bImmediate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145061B8
		void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 0x7FF4145060D8
		void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF414505FF8
	};


	// Class Engine.CameraModifier_CameraShake
	// Inherited from UCameraModifier -> UObject
	// Size: 0x68 (0xB0 - 0x48)
	class UCameraModifier_CameraShake : public UCameraModifier	
	{
	public:
		TArray ActiveShakes; // 0x48(0x10)
		TMap ExpiredPooledShakesMap; // 0x58(0x50)
		float SplitScreenShakeScale; // 0xA8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xAC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraModifier_CameraShake");
			return ret;
		}
	};


	// Class Engine.CameraShakeBase
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class UCameraShakeBase : public UObject	
	{
	public:
		bool bSingleInstance; // 0x28(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float ShakeScale; // 0x2C(0x4)
		UCameraShakePattern RootShakePattern; // 0x30(0x8)
		APlayerCameraManager CameraManager; // 0x38(0x8)
		unsigned char UnknownData03_7[0x98]; // 0x40(0x98) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakeBase");
			return ret;
		}

		void SetRootShakePattern(UCameraShakePattern InPattern); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145067D8
		UCameraShakePattern GetRootShakePattern(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145066F8
	};


	// Class Engine.CameraShakePattern
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCameraShakePattern : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakePattern");
			return ret;
		}
	};


	// Class Engine.CameraShakeSourceActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ACameraShakeSourceActor : public AActor	
	{
	public:
		UCameraShakeSourceComponent CameraShakeSourceComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakeSourceActor");
			return ret;
		}
	};


	// Class Engine.CameraShakeSourceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x20 (0x240 - 0x220)
	class UCameraShakeSourceComponent : public USceneComponent	
	{
	public:
		ECameraShakeAttenuation Attenuation; // 0x220(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x221(0x3) UNKNOWN PROPERTY
		float InnerAttenuationRadius; // 0x224(0x4)
		float OuterAttenuationRadius; // 0x228(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x22C(0x4) UNKNOWN PROPERTY
		UClass CameraShake; // 0x230(0x8)
		bool bAutoStart; // 0x238(0x1)
		unsigned char UnknownData05_7[0x7]; // 0x239(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakeSourceComponent");
			return ret;
		}

		void StopAllCameraShakesOfType(UClass InCameraShake, bool bImmediately); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414506C38
		void StopAllCameraShakes(bool bImmediately); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414506B58
		void StartCameraShake(UClass InCameraShake, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414506A78
		void Start(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414506998
		float GetAttenuationFactor(FVector& Location); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145068B8
	};


	// Class Engine.TextureRenderTarget
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x138 - 0x130)
	class UTextureRenderTarget : public UTexture	
	{
	public:
		float TargetGamma; // 0x130(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTarget");
			return ret;
		}
	};


	// Class Engine.TextureRenderTarget2D
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x28 (0x160 - 0x138)
	class UTextureRenderTarget2D : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		int32_t SizeY; // 0x13C(0x4)
		FLinearColor ClearColor; // 0x140(0x10)
		TEnumAsByte AddressX; // 0x150(0x1)
		TEnumAsByte AddressY; // 0x151(0x1)
		bool bForceLinearGamma : 1; // 0x152:0(0x1)
		unsigned char UnknownBit02 : 1; // 0x152:1(0x1) UNKNOWN PROPERTY
		bool bHDR : 1; // 0x152:2(0x1)
		bool bGPUSharedFlag : 1; // 0x152:3(0x1)
		TEnumAsByte RenderTargetFormat; // 0x153(0x1)
		bool bAutoGenerateMips : 1; // 0x154:0(0x1)
		TEnumAsByte MipsSamplerFilter; // 0x155(0x1)
		TEnumAsByte MipsAddressU; // 0x156(0x1)
		TEnumAsByte MipsAddressV; // 0x157(0x1)
		TEnumAsByte OverrideFormat; // 0x158(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x159(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTarget2D");
			return ret;
		}
	};


	// Class Engine.CanvasRenderTarget2D
	// Inherited from UTextureRenderTarget2D -> UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x180 - 0x160)
	class UCanvasRenderTarget2D : public UTextureRenderTarget2D	
	{
	public:
		FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0x160(0x10)
		TWeakObjectPtr World; // 0x170(0x8)
		ETextureRenderTargetSampleCount SampleCount; // 0x178(0x1)
		bool bShouldClearRenderTargetOnReceiveUpdate; // 0x179(0x1)
		unsigned char UnknownData01_7[0x6]; // 0x17A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CanvasRenderTarget2D");
			return ret;
		}

		void UpdateResource(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414507178
		void SetSampleCount(ETextureRenderTargetSampleCount InSampleCount); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414507098
		void ReceiveUpdate(UCanvas Canvas, int32_t Width, int32_t Height); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414506FB8
		void GetSize(int32_t& Width, int32_t& Height); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414506ED8
		ETextureRenderTargetSampleCount GetSampleCount(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414506DF8
		UCanvasRenderTarget2D CreateCanvasRenderTarget2D(UObject WorldContextObject, UClass CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414506D18
	};


	// Class Engine.Character
	// Inherited from APawn -> AActor -> UObject
	// Size: 0x310 (0x620 - 0x310)
	class ACharacter : public APawn	
	{
	public:
		USkeletalMeshComponent Mesh; // 0x310(0x8)
		UCharacterMovementComponent CharacterMovement; // 0x318(0x8)
		UCapsuleComponent CapsuleComponent; // 0x320(0x8)
		FBasedMovementInfo BasedMovement; // 0x328(0x40)
		FBasedMovementInfo ReplicatedBasedMovement; // 0x368(0x40)
		float ReplicatedServerLastTransformUpdateTimeStamp; // 0x3A8(0x4)
		float ReplayLastTransformUpdateTimeStamp; // 0x3AC(0x4)
		FQuat BaseRotationOffset; // 0x3B0(0x20)
		FVector BaseTranslationOffset; // 0x3D0(0x18)
		FVector_NetQuantizeNormal ReplicatedGravityDirection; // 0x3E8(0x18)
		unsigned char UnknownData03_6[0x18]; // 0x400(0x18) UNKNOWN PROPERTY
		float AnimRootMotionTranslationScale; // 0x418(0x4)
		float CrouchedEyeHeight; // 0x41C(0x4)
		bool bInBaseReplication : 1; // 0x420:0(0x1)
		bool bIsCrouched : 1; // 0x420:1(0x1)
		bool bProxyIsJumpForceApplied : 1; // 0x420:2(0x1)
		bool bPressedJump : 1; // 0x420:3(0x1)
		bool bClientUpdating : 1; // 0x420:4(0x1)
		bool bClientWasFalling : 1; // 0x420:5(0x1)
		bool bClientResimulateRootMotion : 1; // 0x420:6(0x1)
		bool bClientResimulateRootMotionSources : 1; // 0x420:7(0x1)
		bool bSimGravityDisabled : 1; // 0x421:0(0x1)
		bool bClientCheckEncroachmentOnNetUpdate : 1; // 0x421:1(0x1)
		bool bServerMoveIgnoreRootMotion : 1; // 0x421:2(0x1)
		bool bWasJumping : 1; // 0x421:3(0x1)
		char ReplicatedMovementMode; // 0x422(0x1)
		unsigned char UnknownData04_6[0x1]; // 0x423(0x1) UNKNOWN PROPERTY
		float JumpKeyHoldTime; // 0x424(0x4)
		float JumpForceTimeRemaining; // 0x428(0x4)
		float ProxyJumpForceStartedTime; // 0x42C(0x4)
		float JumpMaxHoldTime; // 0x430(0x4)
		int32_t JumpMaxCount; // 0x434(0x4)
		int32_t JumpCurrentCount; // 0x438(0x4)
		int32_t JumpCurrentCountPreJump; // 0x43C(0x4)
		unsigned char UnknownData05_6[0x8]; // 0x440(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnReachedJumpApex; // 0x448(0x10)
		FMulticastInlineDelegate LandedDelegate; // 0x458(0x10)
		FMulticastInlineDelegate MovementModeChangedDelegate; // 0x468(0x10)
		FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x478(0x10)
		FRootMotionSourceGroup SavedRootMotion; // 0x488(0x48)
		FRootMotionMovementParams ClientRootMotionParams; // 0x4D0(0x70)
		TArray RootMotionRepMoves; // 0x540(0x10)
		FRepRootMotionMontage RepRootMotion; // 0x550(0xC8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Character");
			return ret;
		}

		void UnCrouch(bool bClientSimulation); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414509B78
		void StopJumping(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414509A98
		void StopAnimMontage(UAnimMontage AnimMontage); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145099B8
		void ServerMovePacked(FCharacterServerMovePackedBits PackedBits); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF4145098D8
		void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF4145097F8
		void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF414509718
		void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF414509638
		void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, UPrimitiveComponent ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF414509558
		void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, UPrimitiveComponent ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF414509478
		void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, UPrimitiveComponent ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate 0x7FF414509398
		void RootMotionDebugClientPrintOnScreen(FString InString); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF4145092B8
		float PlayAnimMontage(UAnimMontage AnimMontage, float InPlayRate, FName StartSectionName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145091D8
		void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF4145090F8
		void OnRep_RootMotion(); // Flags: Final|RequiredAPI|Native|Public 0x7FF414509018
		void OnRep_ReplicatedBasedMovement(); // Flags: RequiredAPI|Native|Public 0x7FF414508F38
		void OnRep_ReplayLastTransformUpdateTimeStamp(); // Flags: Final|RequiredAPI|Native|Public 0x7FF414508E58
		void OnRep_IsCrouched(); // Flags: RequiredAPI|Native|Public 0x7FF414508D78
		void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Flags: RequiredAPI|Event|Public|HasDefaults|BlueprintEvent 0x7FF414508C98
		void OnLanded(FHitResult& Hit); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent 0x7FF414508BB8
		void OnJumped(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF414508AD8
		void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145089F8
		void K2_UpdateCustomMovement(float DeltaTime); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414508918
		void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414508838
		void K2_OnMovementModeChanged(TEnumAsByte PrevMovementMode, TEnumAsByte NewMovementMode, char PrevCustomMode, char NewCustomMode); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414508758
		void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414508678
		void Jump(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414508598
		bool IsPlayingRootMotion(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145084B8
		bool IsPlayingNetworkedRootMotionMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145083D8
		bool IsJumpProvidingForce(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145082F8
		bool HasAnyRootMotion(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414508218
		UAnimMontage GetCurrentMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414508138
		FVector GetBaseTranslationOffset(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414508058
		FRotator GetBaseRotationOffsetRotator(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414507F78
		float GetAnimRootMotionTranslationScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414507E98
		void Crouch(bool bClientSimulation); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414507DB8
		void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, UPrimitiveComponent NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 0x7FF414507CD8
		void ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient|NetValidate 0x7FF414507BF8
		void ClientCheatWalk(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF414507B18
		void ClientCheatGhost(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF414507A38
		void ClientCheatFly(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient 0x7FF414507958
		void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 0x7FF414507878
		void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 0x7FF414507798
		void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient 0x7FF4145076B8
		void ClientAckGoodMove(float Timestamp); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient 0x7FF4145075D8
		bool CanJumpInternal(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent|Const 0x7FF4145074F8
		bool CanJump(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414507418
		bool CanCrouch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414507338
		void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414507258
	};


	// Class Engine.CheatManager
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class UCheatManager : public UObject	
	{
	public:
		ADebugCameraController DebugCameraControllerRef; // 0x28(0x8)
		UClass DebugCameraControllerClass; // 0x30(0x8)
		unsigned char UnknownData01_6[0x40]; // 0x38(0x40) UNKNOWN PROPERTY
		TArray CheatManagerExtensions; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CheatManager");
			return ret;
		}

		void Walk(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450CFF8
		void ViewSelf(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450CF18
		void ViewPlayer(FString S); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450CE38
		void ViewClass(UClass DesiredClass); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450CD58
		void ViewActor(FName ActorName); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450CC78
		void UpdateSafeArea(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450CB98
		void ToggleServerStatReplicatorUpdateStatNet(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450CAB8
		void ToggleServerStatReplicatorClientOverwrite(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450C9D8
		void ToggleDebugCamera(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C8F8
		void ToggleAILogging(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C818
		void TestCollisionDistance(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C738
		void Teleport(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450C658
		void Summon(FString ClassName); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C578
		void StreamLevelOut(FName PackageName); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C498
		void StreamLevelIn(FName PackageName); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C3B8
		void SpawnServerStatReplicator(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450C2D8
		void Slomo(float NewTimeDilation); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450C1F8
		void SetWorldOrigin(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450C118
		void SetMouseSensitivityToDefault(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450C038
		void ServerToggleAILogging(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate 0x7FF41450BF58
		void ReceiveInitCheatManager(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41450BE78
		void ReceiveEndPlay(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41450BD98
		void PlayersOnly(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450BCB8
		void OnPlayerEndPlayed(AActor Player, TEnumAsByte EndPlayReason); // Flags: Final|RequiredAPI|Native|Public 0x7FF41450BBD8
		void OnlyLoadLevel(FName PackageName); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450BAF8
		void LogLoc(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450BA18
		void InvertMouse(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450B938
		void God(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450B858
		void Ghost(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450B778
		APlayerController GetPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41450B698
		void FreezeFrame(float Delay); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450B5B8
		void Fly(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450B4D8
		void FlushLog(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450B3F8
		void EnableDebugCamera(); // Flags: RequiredAPI|Native|Protected|BlueprintCallable 0x7FF41450B318
		void DumpVoiceMutingState(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450B238
		void DumpPartyState(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450B158
		void DumpOnlineSessionState(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450B078
		void DumpChatState(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450AF98
		void DisableDebugCamera(); // Flags: RequiredAPI|Native|Protected|BlueprintCallable 0x7FF41450AEB8
		void DestroyTarget(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450ADD8
		void DestroyServerStatReplicator(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450ACF8
		void DestroyPawns(UClass aClass); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450AC18
		void DestroyAllPawnsExceptTarget(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450AB38
		void DestroyAll(UClass aClass); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450AA58
		void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A978
		void DebugCapsuleSweepPawn(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A898
		void DebugCapsuleSweepComplex(bool bTraceComplex); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A7B8
		void DebugCapsuleSweepClear(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A6D8
		void DebugCapsuleSweepChannel(TEnumAsByte Channel); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A5F8
		void DebugCapsuleSweepCapture(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A518
		void DebugCapsuleSweep(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF41450A438
		void DamageTarget(float DamageAmount); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450A358
		void CheatScript(FString ScriptName); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF41450A278
		void ChangeSize(float F); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF41450A198
		void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString); // Flags: RequiredAPI|Exec|Native|Public|HasOutParms|HasDefaults 0x7FF41450A0B8
		void BugItGo(float X, float Y, float Z, float pitch, float Yaw, float Roll); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414509FD8
		void BugIt(FString ScreenShotDescription); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414509EF8
	};


	// Class Engine.CheatManagerExtension
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCheatManagerExtension : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CheatManagerExtension");
			return ret;
		}

		void RemovedFromCheatManager(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF414509E18
		APlayerController GetPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414509D38
		void AddedToCheatManager(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF414509C58
	};


	// Class Engine.CollisionProfile
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x138 (0x168 - 0x30)
	class UCollisionProfile : public UDeveloperSettings	
	{
	public:
		TArray Profiles; // 0x30(0x10)
		TArray DefaultChannelResponses; // 0x40(0x10)
		TArray EditProfiles; // 0x50(0x10)
		TArray ProfileRedirects; // 0x60(0x10)
		TArray CollisionChannelRedirects; // 0x70(0x10)
		unsigned char UnknownData01_7[0xE8]; // 0x80(0xE8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CollisionProfile");
			return ret;
		}
	};


	// Class Engine.Commandlet
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UCommandlet : public UObject	
	{
	public:
		FString HelpDescription; // 0x28(0x10)
		FString HelpUsage; // 0x38(0x10)
		FString HelpWebLink; // 0x48(0x10)
		TArray HelpParamNames; // 0x58(0x10)
		TArray HelpParamDescriptions; // 0x68(0x10)
		bool IsServer : 1; // 0x78:0(0x1)
		bool IsClient : 1; // 0x78:1(0x1)
		bool IsEditor : 1; // 0x78:2(0x1)
		bool LogToConsole : 1; // 0x78:3(0x1)
		bool ShowErrorCount : 1; // 0x78:4(0x1)
		bool ShowProgress : 1; // 0x78:5(0x1)
		bool FastExit : 1; // 0x78:6(0x1)
		bool UseCommandletResultAsExitCode : 1; // 0x78:7(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x79(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Commandlet");
			return ret;
		}
	};


	// Class Engine.PluginCommandlet
	// Inherited from UCommandlet -> UObject
	// Size: 0x20 (0xA0 - 0x80)
	class UPluginCommandlet : public UCommandlet	
	{
	public:
		unsigned char UnknownData01_1[0x20]; // 0x80(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PluginCommandlet");
			return ret;
		}
	};


	// Class Engine.SmokeTestCommandlet
	// Inherited from UCommandlet -> UObject
	// Size: 0x0 (0x80 - 0x80)
	class USmokeTestCommandlet : public UCommandlet	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SmokeTestCommandlet");
			return ret;
		}
	};


	// Class Engine.ComponentDelegateBinding
	// Inherited from UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UComponentDelegateBinding : public UDynamicBlueprintBinding	
	{
	public:
		TArray ComponentDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentDelegateBinding");
			return ret;
		}
	};


	// Class Engine.ApplicationLifecycleComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x90 (0x130 - 0xA0)
	class UApplicationLifecycleComponent : public UActorComponent	
	{
	public:
		FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xA0(0x10)
		FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xB0(0x10)
		FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xC0(0x10)
		FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xD0(0x10)
		FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xE0(0x10)
		FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0xF0(0x10)
		FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x100(0x10)
		FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x110(0x10)
		FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x120(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ApplicationLifecycleComponent");
			return ret;
		}

		void OnTemperatureChangeDelegate__DelegateSignature(ETemperatureSeverityType Severity); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FA1C28
		void OnLowPowerModeDelegate__DelegateSignature(bool bInLowPowerMode); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FA1B48
		void ApplicationStartupArgumentsDelegate__DelegateSignature(TArray& StartupArguments); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FA1A68
		void ApplicationLifetimeDelegate__DelegateSignature(); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FA1988
	};


	// Class Engine.ArrowComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UArrowComponent : public UPrimitiveComponent	
	{
	public:
		FColor ArrowColor; // 0x4C8(0x4)
		float ArrowSize; // 0x4CC(0x4)
		float ArrowLength; // 0x4D0(0x4)
		float ScreenSize; // 0x4D4(0x4)
		bool bIsScreenSizeScaled : 1; // 0x4D8:0(0x1)
		bool bTreatAsASprite : 1; // 0x4D8:1(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x4D9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ArrowComponent");
			return ret;
		}

		void SetUseInEditorScaling(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D6F8
		void SetTreatAsASprite(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D618
		void SetScreenSize(float NewScreenSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D538
		void SetIsScreenSizeScaled(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D458
		void SetArrowSize(float NewSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D378
		void SetArrowLength(float NewLength); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D298
		void SetArrowFColor(FColor NewColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41450D1B8
		void SetArrowColor(FLinearColor NewColor); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF41450D0D8
	};


	// Class Engine.InitialActiveSoundParams
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInitialActiveSoundParams : public UObject	
	{
	public:
		TArray AudioParams; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InitialActiveSoundParams");
			return ret;
		}
	};


	// Class Engine.AudioComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x9F0 (0xC10 - 0x220)
	class UAudioComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData23_3[0x1B8]; // 0x220(0x1B8) UNKNOWN PROPERTY
		USoundBase Sound; // 0x3D8(0x8)
		TArray DefaultParameters; // 0x3E0(0x10)
		TArray InstanceParameters; // 0x3F0(0x10)
		USoundClass SoundClassOverride; // 0x400(0x8)
		bool bAutoDestroy : 1; // 0x408:0(0x1)
		bool bStopWhenOwnerDestroyed : 1; // 0x408:1(0x1)
		bool bShouldRemainActiveIfDropped : 1; // 0x408:2(0x1)
		bool bAllowSpatialization : 1; // 0x408:3(0x1)
		bool bOverrideAttenuation : 1; // 0x408:4(0x1)
		bool bOverrideSubtitlePriority : 1; // 0x408:5(0x1)
		bool bIsUISound : 1; // 0x408:6(0x1)
		bool bEnableLowPassFilter : 1; // 0x408:7(0x1)
		bool bOverridePriority : 1; // 0x409:0(0x1)
		bool bSuppressSubtitles : 1; // 0x409:1(0x1)
		bool bCanPlayMultipleInstances : 1; // 0x409:2(0x1)
		bool bDisableParameterUpdatesWhilePlaying : 1; // 0x409:3(0x1)
		unsigned char UnknownBit24 : 1; // 0x409:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit25 : 1; // 0x409:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit26 : 1; // 0x409:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit27 : 1; // 0x409:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit28 : 1; // 0x40A:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit29 : 1; // 0x40A:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit30 : 1; // 0x40A:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit31 : 1; // 0x40A:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit32 : 1; // 0x40A:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit33 : 1; // 0x40A:5(0x1) UNKNOWN PROPERTY
		bool bAutoManageAttachment : 1; // 0x40A:6(0x1)
		unsigned char UnknownData34_5[0x5]; // 0x40B(0x5) UNKNOWN PROPERTY
		FName AudioComponentUserID; // 0x410(0x4)
		float PitchModulationMin; // 0x414(0x4)
		float PitchModulationMax; // 0x418(0x4)
		float VolumeModulationMin; // 0x41C(0x4)
		float VolumeModulationMax; // 0x420(0x4)
		float VolumeMultiplier; // 0x424(0x4)
		int32_t EnvelopeFollowerAttackTime; // 0x428(0x4)
		int32_t EnvelopeFollowerReleaseTime; // 0x42C(0x4)
		float Priority; // 0x430(0x4)
		float SubtitlePriority; // 0x434(0x4)
		USoundEffectSourcePresetChain SourceEffectChain; // 0x438(0x8)
		float PitchMultiplier; // 0x440(0x4)
		float LowPassFilterFrequency; // 0x444(0x4)
		unsigned char UnknownData35_6[0x8]; // 0x448(0x8) UNKNOWN PROPERTY
		USoundAttenuation AttenuationSettings; // 0x450(0x8)
		FSoundAttenuationSettings AttenuationOverrides; // 0x458(0x3D0)
		USoundConcurrency ConcurrencySettings; // 0x828(0x8)
		TSet ConcurrencySet; // 0x830(0x50)
		unsigned char UnknownData36_6[0xC]; // 0x880(0xC) UNKNOWN PROPERTY
		EAttachmentRule AutoAttachLocationRule; // 0x88C(0x1)
		EAttachmentRule AutoAttachRotationRule; // 0x88D(0x1)
		EAttachmentRule AutoAttachScaleRule; // 0x88E(0x1)
		unsigned char UnknownData37_6[0x1]; // 0x88F(0x1) UNKNOWN PROPERTY
		FSoundModulationDefaultRoutingSettings ModulationRouting; // 0x890(0x168)
		FMulticastInlineDelegate OnAudioPlayStateChanged; // 0x9F8(0x10)
		unsigned char UnknownData38_6[0x18]; // 0xA08(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioVirtualizationChanged; // 0xA20(0x10)
		unsigned char UnknownData39_6[0x18]; // 0xA30(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioFinished; // 0xA48(0x10)
		unsigned char UnknownData40_6[0x18]; // 0xA58(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioPlaybackPercent; // 0xA70(0x10)
		unsigned char UnknownData41_6[0x18]; // 0xA80(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0xA98(0x10)
		unsigned char UnknownData42_6[0x18]; // 0xAA8(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0xAC0(0x10)
		unsigned char UnknownData43_6[0x18]; // 0xAD0(0x18) UNKNOWN PROPERTY
		FDelegateProperty OnQueueSubtitles; // 0xAE8(0xC)
		unsigned char UnknownData44_6[0x14]; // 0xAF4(0x14) UNKNOWN PROPERTY
		TWeakObjectPtr AutoAttachParent; // 0xB08(0x8)
		FName AutoAttachSocketName; // 0xB10(0x4)
		unsigned char UnknownData45_7[0xF4]; // 0xB14(0xF4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioComponent");
			return ret;
		}

		void StopDelayed(float DelayTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450FBB8
		void Stop(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450FAD8
		void SetWaveParameter(FName InName, USoundWave InWave); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F9F8
		void SetVolumeMultiplier(float NewVolumeMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F918
		void SetUISound(bool bInUISound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F838
		void SetSubmixSend(USoundSubmixBase Submix, float SendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F758
		void SetSourceBusSendPreEffect(USoundSourceBus SoundSourceBus, float SourceBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F678
		void SetSourceBusSendPostEffect(USoundSourceBus SoundSourceBus, float SourceBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F598
		void SetSound(USoundBase NewSound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F4B8
		void SetPitchMultiplier(float NewPitchMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F3D8
		void SetPaused(bool bPause); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F2F8
		void SetOverrideAttenuation(bool bInOverrideAttenuation); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41450F218
		void SetOutputToBusOnly(bool bInOutputToBusOnly); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450F138
		void SetModulationRouting(TSet& Modulators, EModulationDestination Destination, EModulationRouting RoutingMethod); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450F058
		void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450EF78
		void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450EE98
		void SetIntParameter(FName InName, int32_t inInt); // Flags: Native|Public|BlueprintCallable 0x7FF41450EDB8
		void SetFloatParameter(FName InName, float InFloat); // Flags: Native|Public|BlueprintCallable 0x7FF41450ECD8
		void SetBoolParameter(FName InName, bool InBool); // Flags: Native|Public|BlueprintCallable 0x7FF41450EBF8
		void SetAudioBusSendPreEffect(UAudioBus AudioBus, float AudioBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450EB18
		void SetAudioBusSendPostEffect(UAudioBus AudioBus, float AudioBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450EA38
		void SetAttenuationSettings(USoundAttenuation InAttenuationSettings); // Flags: Final|Native|Public|BlueprintCallable 0x7FF41450E958
		void SetAttenuationOverrides(FSoundAttenuationSettings& InAttenuationOverrides); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450E878
		void RemoveModulationRouting(TSet& Modulators, EModulationDestination Destination); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450E798
		void PlayQuantized(UObject WorldContextObject, UQuartzClockHandle& InClockHandle, FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450E6B8
		void Play(float StartTime); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450E5D8
		bool IsVirtualized(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41450E4F8
		bool IsPlaying(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41450E418
		bool HasCookedFFTData(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41450E338
		bool HasCookedAmplitudeEnvelopeData(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41450E258
		EAudioComponentPlayState GetPlayState(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41450E178
		TSet GetModulators(EModulationDestination Destination); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF41450E098
		bool GetCookedFFTDataForAllPlayingSounds(TArray& OutSoundWaveSpectralData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450DFB8
		bool GetCookedFFTData(TArray& FrequenciesToGet, TArray& OutSoundWaveSpectralData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450DED8
		bool GetCookedEnvelopeDataForAllPlayingSounds(TArray& OutEnvelopeData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450DDF8
		bool GetCookedEnvelopeData(float& OutEnvelopeData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450DD18
		void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450DC38
		void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450DB58
		bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450DA78
		void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450D998
		void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450D8B8
		void AddModulationRouting(TSet& Modulators, EModulationDestination Destination, bool bShouldModulationRoutingBeUpdated); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41450D7D8
	};


	// Class Engine.BillboardComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UBillboardComponent : public UPrimitiveComponent	
	{
	public:
		UTexture2D Sprite; // 0x4C8(0x8)
		bool bIsScreenSizeScaled : 1; // 0x4D0:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x4D1(0x3) UNKNOWN PROPERTY
		float ScreenSize; // 0x4D4(0x4)
		float U; // 0x4D8(0x4)
		float UL; // 0x4DC(0x4)
		float V; // 0x4E0(0x4)
		float VL; // 0x4E4(0x4)
		float OpacityMaskRefVal; // 0x4E8(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x4EC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BillboardComponent");
			return ret;
		}

		void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450FF38
		void SetSpriteAndUV(UTexture2D NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450FE58
		void SetSprite(UTexture2D NewSprite); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450FD78
		void SetOpacityMaskRefVal(float RefVal); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41450FC98
	};


	// Class Engine.BoundsCopyComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0xA0 (0x140 - 0xA0)
	class UBoundsCopyComponent : public UActorComponent	
	{
	public:
		TWeakObjectPtr BoundsSourceActor; // 0xA0(0x20)
		bool bUseCollidingComponentsForSourceBounds; // 0xC0(0x1)
		bool bKeepOwnBoundsScale; // 0xC1(0x1)
		bool bUseCollidingComponentsForOwnBounds; // 0xC2(0x1)
		unsigned char UnknownData02_6[0xD]; // 0xC3(0xD) UNKNOWN PROPERTY
		FTransform PostTransform; // 0xD0(0x60)
		bool bCopyXBounds; // 0x130(0x1)
		bool bCopyYBounds; // 0x131(0x1)
		bool bCopyZBounds; // 0x132(0x1)
		unsigned char UnknownData03_7[0xD]; // 0x133(0xD) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoundsCopyComponent");
			return ret;
		}
	};


	// Class Engine.ShapeComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UShapeComponent : public UPrimitiveComponent	
	{
	public:
		UBodySetup ShapeBodySetup; // 0x4C8(0x8)
		FColor ShapeColor; // 0x4D0(0x4)
		bool bDrawOnlyIfSelected : 1; // 0x4D4:0(0x1)
		bool bShouldCollideWhenPlacing : 1; // 0x4D4:1(0x1)
		bool bDynamicObstacle : 1; // 0x4D4:2(0x1)
		bool bUseSystemDefaultObstacleAreaClass : 1; // 0x4D4:3(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x4D5(0x3) UNKNOWN PROPERTY
		UClass AreaClassOverride; // 0x4D8(0x8)
		float LineThickness; // 0x4E0(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x4E4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ShapeComponent");
			return ret;
		}

		void SetLineThickness(float Thickness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413ED07F8
	};


	// Class Engine.BoxComponent
	// Inherited from UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x500 - 0x4E8)
	class UBoxComponent : public UShapeComponent	
	{
	public:
		FVector BoxExtent; // 0x4E8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoxComponent");
			return ret;
		}

		void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145101D8
		FVector GetUnscaledBoxExtent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145100F8
		FVector GetScaledBoxExtent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414510018
	};


	// Class Engine.BrushComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UBrushComponent : public UPrimitiveComponent	
	{
	public:
		UModel Brush; // 0x4C8(0x8)
		UBodySetup BrushBodySetup; // 0x4D0(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x4D8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BrushComponent");
			return ret;
		}
	};


	// Class Engine.CapsuleComponent
	// Inherited from UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x4F0 - 0x4E8)
	class UCapsuleComponent : public UShapeComponent	
	{
	public:
		float CapsuleHalfHeight; // 0x4E8(0x4)
		float CapsuleRadius; // 0x4EC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CapsuleComponent");
			return ret;
		}

		void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414510E18
		void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414510D38
		void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414510C58
		void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414510B78
		void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414510A98
		float GetUnscaledCapsuleRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145109B8
		float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145108D8
		float GetUnscaledCapsuleHalfHeight(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145107F8
		float GetShapeScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414510718
		void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414510638
		void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414510558
		float GetScaledCapsuleRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414510478
		float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414510398
		float GetScaledCapsuleHalfHeight(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145102B8
	};


	// Class Engine.MovementComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x68 (0x108 - 0xA0)
	class UMovementComponent : public UActorComponent	
	{
	public:
		USceneComponent UpdatedComponent; // 0xA0(0x8)
		UPrimitiveComponent UpdatedPrimitive; // 0xA8(0x8)
		unsigned char UnknownData03_6[0x8]; // 0xB0(0x8) UNKNOWN PROPERTY
		FVector Velocity; // 0xB8(0x18)
		FVector PlaneConstraintNormal; // 0xD0(0x18)
		FVector PlaneConstraintOrigin; // 0xE8(0x18)
		bool bUpdateOnlyIfRendered : 1; // 0x100:0(0x1)
		bool bAutoUpdateTickRegistration : 1; // 0x100:1(0x1)
		bool bTickBeforeOwner : 1; // 0x100:2(0x1)
		bool bAutoRegisterUpdatedComponent : 1; // 0x100:3(0x1)
		bool bConstrainToPlane : 1; // 0x100:4(0x1)
		bool bSnapToPlaneAtStart : 1; // 0x100:5(0x1)
		bool bAutoRegisterPhysicsVolumeUpdates : 1; // 0x100:6(0x1)
		bool bComponentShouldUpdatePhysicsVolume : 1; // 0x100:7(0x1)
		unsigned char UnknownData04_5[0x2]; // 0x101(0x2) UNKNOWN PROPERTY
		EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0x103(0x1)
		unsigned char UnknownData05_7[0x4]; // 0x104(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MovementComponent");
			return ret;
		}

		void StopMovementImmediately(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA2F58
		void SnapUpdatedComponentToPlane(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA2E78
		void SetUpdatedComponent(USceneComponent NewUpdatedComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA2D98
		void SetPlaneConstraintOrigin(FVector PlaneOrigin); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF410FA2CB8
		void SetPlaneConstraintNormal(FVector PlaneNormal); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF410FA2BD8
		void SetPlaneConstraintFromVectors(FVector Forward, FVector Up); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF410FA2AF8
		void SetPlaneConstraintEnabled(bool bEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA2A18
		void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA2938
		void PhysicsVolumeChanged(APhysicsVolume NewVolume); // Flags: RequiredAPI|Native|Public 0x7FF410FA2858
		bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA2778
		bool IsExceedingMaxSpeed(float MaxSpeed); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA2698
		FVector GetPlaneConstraintOrigin(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF410FA25B8
		FVector GetPlaneConstraintNormal(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF410FA24D8
		EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA2390
		APhysicsVolume GetPhysicsVolume(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA22B0
		float GetMaxSpeed(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA21D0
		float GetGravityZ(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FA20F0
		FVector ConstrainNormalToPlane(FVector Normal); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF410FA2010
		FVector ConstrainLocationToPlane(FVector Location); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF410FA1F30
		FVector ConstrainDirectionToPlane(FVector Direction); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF410FA1E50
	};


	// Class Engine.NavMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0x58 (0x160 - 0x108)
	class UNavMovementComponent : public UMovementComponent	
	{
	public:
		unsigned char UnknownData03_3[0x8]; // 0x108(0x8) UNKNOWN PROPERTY
		float FixedPathBrakingDistance; // 0x110(0x4)
		bool bUpdateNavAgentWithOwnersCollision : 1; // 0x114:0(0x1)
		bool bUseAccelerationForPaths : 1; // 0x114:1(0x1)
		bool bUseFixedBrakingDistanceForPaths : 1; // 0x114:2(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		FNavMovementProperties NavMovementProperties; // 0x118(0x8)
		FNavAgentProperties NavAgentProps; // 0x120(0x30)
		FMovementProperties MovementState; // 0x150(0x1)
		unsigned char UnknownData05_6[0x7]; // 0x151(0x7) UNKNOWN PROPERTY
		UObject PathFollowingComp; // 0x158(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavMovementComponent");
			return ret;
		}

		bool IsSwimming(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEB290
		bool IsMovingOnGround(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEB1B0
		bool IsFlying(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEB0D0
		bool IsFalling(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEAFF0
		bool IsCrouching(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEAF10
		FVector GetVelocityForNavMovement(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEAE30
	};


	// Class Engine.PawnMovementComponent
	// Inherited from UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x168 - 0x160)
	class UPawnMovementComponent : public UNavMovementComponent	
	{
	public:
		APawn PawnOwner; // 0x160(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PawnMovementComponent");
			return ret;
		}

		void ServerAsyncPhysicsStateAction(UPrimitiveComponent ActionComponent, FName BoneName, FAsyncPhysicsTimestamp Timestamp, EPhysicsStateAction ActionType, FVector ActionDatas, FVector ActionPosition); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Private|NetServer|HasDefaults 0x7FF413EEBBD0
		void MulticastAsyncPhysicsStateAction(UPrimitiveComponent ActionComponent, FName BoneName, FAsyncPhysicsTimestamp Timestamp, EPhysicsStateAction ActionType, FVector ActionDatas, FVector ActionPosition); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults 0x7FF413EEBAF0
		bool IsMoveInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEBA10
		FVector GetPendingInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEB930
		APawn GetPawnOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEB850
		FVector GetLastInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEB770
		FVector ConsumeInputVector(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF413EEB690
		void AddInputVector(FVector WorldVector, bool bForce); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF413EEB5B0
	};


	// Class Engine.CharacterMovementComponent
	// Inherited from UPawnMovementComponent -> UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0xE18 (0xF80 - 0x168)
	class UCharacterMovementComponent : public UPawnMovementComponent	
	{
	public:
		unsigned char UnknownData26_3[0x10]; // 0x168(0x10) UNKNOWN PROPERTY
		ACharacter CharacterOwner; // 0x178(0x8)
		float GravityScale; // 0x180(0x4)
		float MaxStepHeight; // 0x184(0x4)
		float JumpZVelocity; // 0x188(0x4)
		float JumpOffJumpZFactor; // 0x18C(0x4)
		unsigned char UnknownData27_6[0x1C]; // 0x190(0x1C) UNKNOWN PROPERTY
		float WalkableFloorAngle; // 0x1AC(0x4)
		float WalkableFloorZ; // 0x1B0(0x4)
		unsigned char UnknownData28_6[0x4]; // 0x1B4(0x4) UNKNOWN PROPERTY
		FVector GravityDirection; // 0x1B8(0x18)
		FQuat WorldToGravityTransform; // 0x1D0(0x20)
		FQuat GravityToWorldTransform; // 0x1F0(0x20)
		unsigned char UnknownData29_6[0x1]; // 0x210(0x1) UNKNOWN PROPERTY
		TEnumAsByte MovementMode; // 0x211(0x1)
		char CustomMovementMode; // 0x212(0x1)
		ENetworkSmoothingMode NetworkSmoothingMode; // 0x213(0x1)
		float GroundFriction; // 0x214(0x4)
		unsigned char UnknownData30_6[0x40]; // 0x218(0x40) UNKNOWN PROPERTY
		float MaxWalkSpeed; // 0x258(0x4)
		float MaxWalkSpeedCrouched; // 0x25C(0x4)
		float MaxSwimSpeed; // 0x260(0x4)
		float MaxFlySpeed; // 0x264(0x4)
		float MaxCustomMovementSpeed; // 0x268(0x4)
		float MaxAcceleration; // 0x26C(0x4)
		float MinAnalogWalkSpeed; // 0x270(0x4)
		float BrakingFrictionFactor; // 0x274(0x4)
		float BrakingFriction; // 0x278(0x4)
		float BrakingSubStepTime; // 0x27C(0x4)
		float BrakingDecelerationWalking; // 0x280(0x4)
		float BrakingDecelerationFalling; // 0x284(0x4)
		float BrakingDecelerationSwimming; // 0x288(0x4)
		float BrakingDecelerationFlying; // 0x28C(0x4)
		float AirControl; // 0x290(0x4)
		float AirControlBoostMultiplier; // 0x294(0x4)
		float AirControlBoostVelocityThreshold; // 0x298(0x4)
		float FallingLateralFriction; // 0x29C(0x4)
		float CrouchedHalfHeight; // 0x2A0(0x4)
		float Buoyancy; // 0x2A4(0x4)
		float PerchRadiusThreshold; // 0x2A8(0x4)
		float PerchAdditionalHeight; // 0x2AC(0x4)
		FRotator RotationRate; // 0x2B0(0x18)
		bool bUseSeparateBrakingFriction : 1; // 0x2C8:0(0x1)
		bool bApplyGravityWhileJumping : 1; // 0x2C8:1(0x1)
		bool bUseControllerDesiredRotation : 1; // 0x2C8:2(0x1)
		bool bOrientRotationToMovement : 1; // 0x2C8:3(0x1)
		bool bSweepWhileNavWalking : 1; // 0x2C8:4(0x1)
		unsigned char UnknownBit31 : 1; // 0x2C8:5(0x1) UNKNOWN PROPERTY
		bool bMovementInProgress : 1; // 0x2C8:6(0x1)
		bool bEnableScopedMovementUpdates : 1; // 0x2C8:7(0x1)
		bool bEnableServerDualMoveScopedMovementUpdates : 1; // 0x2C9:0(0x1)
		bool bForceMaxAccel : 1; // 0x2C9:1(0x1)
		bool bRunPhysicsWithNoController : 1; // 0x2C9:2(0x1)
		bool bForceNextFloorCheck : 1; // 0x2C9:3(0x1)
		bool bShrinkProxyCapsule : 1; // 0x2C9:4(0x1)
		bool bCanWalkOffLedges : 1; // 0x2C9:5(0x1)
		bool bCanWalkOffLedgesWhenCrouching : 1; // 0x2C9:6(0x1)
		unsigned char UnknownBit32 : 1; // 0x2C9:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit33 : 1; // 0x2CA:0(0x1) UNKNOWN PROPERTY
		bool bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x2CA:1(0x1)
		bool bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x2CA:2(0x1)
		bool bDeferUpdateMoveComponent : 1; // 0x2CA:3(0x1)
		bool bEnablePhysicsInteraction : 1; // 0x2CA:4(0x1)
		bool bTouchForceScaledToMass : 1; // 0x2CA:5(0x1)
		bool bPushForceScaledToMass : 1; // 0x2CA:6(0x1)
		bool bPushForceUsingZOffset : 1; // 0x2CA:7(0x1)
		bool bScalePushForceToVelocity : 1; // 0x2CB:0(0x1)
		unsigned char UnknownData34_5[0x4]; // 0x2CC(0x4) UNKNOWN PROPERTY
		USceneComponent DeferredUpdatedMoveComponent; // 0x2D0(0x8)
		float MaxOutOfWaterStepHeight; // 0x2D8(0x4)
		float OutofWaterZ; // 0x2DC(0x4)
		float Mass; // 0x2E0(0x4)
		float StandingDownwardForceScale; // 0x2E4(0x4)
		float InitialPushForceFactor; // 0x2E8(0x4)
		float PushForceFactor; // 0x2EC(0x4)
		float PushForcePointZOffsetFactor; // 0x2F0(0x4)
		float TouchForceFactor; // 0x2F4(0x4)
		float MinTouchForce; // 0x2F8(0x4)
		float MaxTouchForce; // 0x2FC(0x4)
		float RepulsionForce; // 0x300(0x4)
		unsigned char UnknownData35_6[0x4]; // 0x304(0x4) UNKNOWN PROPERTY
		FVector Acceleration; // 0x308(0x18)
		FQuat LastUpdateRotation; // 0x320(0x20)
		FVector LastUpdateLocation; // 0x340(0x18)
		FVector LastUpdateVelocity; // 0x358(0x18)
		float ServerLastTransformUpdateTimeStamp; // 0x370(0x4)
		float ServerLastClientGoodMoveAckTime; // 0x374(0x4)
		float ServerLastClientAdjustmentTime; // 0x378(0x4)
		unsigned char UnknownData36_6[0x4]; // 0x37C(0x4) UNKNOWN PROPERTY
		FVector PendingImpulseToApply; // 0x380(0x18)
		FVector PendingForceToApply; // 0x398(0x18)
		float AnalogInputModifier; // 0x3B0(0x4)
		unsigned char UnknownData37_6[0xC]; // 0x3B4(0xC) UNKNOWN PROPERTY
		float MaxSimulationTimeStep; // 0x3C0(0x4)
		int32_t MaxSimulationIterations; // 0x3C4(0x4)
		int32_t MaxJumpApexAttemptsPerSimulation; // 0x3C8(0x4)
		float MaxDepenetrationWithGeometry; // 0x3CC(0x4)
		float MaxDepenetrationWithGeometryAsProxy; // 0x3D0(0x4)
		float MaxDepenetrationWithPawn; // 0x3D4(0x4)
		float MaxDepenetrationWithPawnAsProxy; // 0x3D8(0x4)
		float NetworkSimulatedSmoothLocationTime; // 0x3DC(0x4)
		float NetworkSimulatedSmoothRotationTime; // 0x3E0(0x4)
		float ListenServerNetworkSimulatedSmoothLocationTime; // 0x3E4(0x4)
		float ListenServerNetworkSimulatedSmoothRotationTime; // 0x3E8(0x4)
		float NetProxyShrinkRadius; // 0x3EC(0x4)
		float NetProxyShrinkHalfHeight; // 0x3F0(0x4)
		float NetworkMaxSmoothUpdateDistance; // 0x3F4(0x4)
		float NetworkNoSmoothUpdateDistance; // 0x3F8(0x4)
		float NetworkMinTimeBetweenClientAckGoodMoves; // 0x3FC(0x4)
		float NetworkMinTimeBetweenClientAdjustments; // 0x400(0x4)
		float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x404(0x4)
		float NetworkLargeClientCorrectionDistance; // 0x408(0x4)
		float LedgeCheckThreshold; // 0x40C(0x4)
		float JumpOutOfWaterPitch; // 0x410(0x4)
		unsigned char UnknownData38_6[0x4]; // 0x414(0x4) UNKNOWN PROPERTY
		FFindFloorResult CurrentFloor; // 0x418(0x108)
		TEnumAsByte DefaultLandMovementMode; // 0x520(0x1)
		TEnumAsByte DefaultWaterMovementMode; // 0x521(0x1)
		TEnumAsByte GroundMovementMode; // 0x522(0x1)
		unsigned char UnknownData39_6[0x9]; // 0x523(0x9) UNKNOWN PROPERTY
		bool bMaintainHorizontalGroundVelocity : 1; // 0x52C:0(0x1)
		bool bImpartBaseVelocityX : 1; // 0x52C:1(0x1)
		bool bImpartBaseVelocityY : 1; // 0x52C:2(0x1)
		bool bImpartBaseVelocityZ : 1; // 0x52C:3(0x1)
		bool bImpartBaseAngularVelocity : 1; // 0x52C:4(0x1)
		bool bJustTeleported : 1; // 0x52C:5(0x1)
		bool bNetworkUpdateReceived : 1; // 0x52C:6(0x1)
		bool bNetworkMovementModeChanged : 1; // 0x52C:7(0x1)
		bool bNetworkGravityDirectionChanged : 1; // 0x52D:0(0x1)
		bool bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x52D:1(0x1)
		bool bServerAcceptClientAuthoritativePosition : 1; // 0x52D:2(0x1)
		bool bNotifyApex : 1; // 0x52D:3(0x1)
		bool bCheatFlying : 1; // 0x52D:4(0x1)
		bool bWantsToCrouch : 1; // 0x52D:5(0x1)
		bool bCrouchMaintainsBaseLocation : 1; // 0x52D:6(0x1)
		bool bIgnoreBaseRotation : 1; // 0x52D:7(0x1)
		bool bFastAttachedMove : 1; // 0x52E:0(0x1)
		bool bAlwaysCheckFloor : 1; // 0x52E:1(0x1)
		bool bUseFlatBaseForFloorChecks : 1; // 0x52E:2(0x1)
		bool bPerformingJumpOff : 1; // 0x52E:3(0x1)
		bool bWantsToLeaveNavWalking : 1; // 0x52E:4(0x1)
		bool bUseRVOAvoidance : 1; // 0x52E:5(0x1)
		bool bRequestedMoveUseAcceleration : 1; // 0x52E:6(0x1)
		unsigned char UnknownBit40 : 1; // 0x52E:7(0x1) UNKNOWN PROPERTY
		bool bWasSimulatingRootMotion : 1; // 0x52F:0(0x1)
		bool bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x52F:1(0x1)
		float FormerBaseVelocityDecayHalfLife; // 0x530(0x4)
		bool bHasRequestedVelocity : 1; // 0x534:0(0x1)
		bool bRequestedMoveWithMaxSpeed : 1; // 0x534:1(0x1)
		bool bWasAvoidanceUpdated : 1; // 0x534:2(0x1)
		unsigned char UnknownBit41 : 1; // 0x534:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit42 : 1; // 0x534:4(0x1) UNKNOWN PROPERTY
		bool bProjectNavMeshWalking : 1; // 0x534:5(0x1)
		bool bProjectNavMeshOnBothWorldChannels : 1; // 0x534:6(0x1)
		unsigned char UnknownData43_5[0x1F]; // 0x535(0x1F) UNKNOWN PROPERTY
		float AvoidanceConsiderationRadius; // 0x554(0x4)
		FVector RequestedVelocity; // 0x558(0x18)
		FVector LastUpdateRequestedVelocity; // 0x570(0x18)
		int32_t AvoidanceUID; // 0x588(0x4)
		FNavAvoidanceMask AvoidanceGroup; // 0x58C(0x4)
		FNavAvoidanceMask GroupsToAvoid; // 0x590(0x4)
		FNavAvoidanceMask GroupsToIgnore; // 0x594(0x4)
		float AvoidanceWeight; // 0x598(0x4)
		unsigned char UnknownData44_6[0x4]; // 0x59C(0x4) UNKNOWN PROPERTY
		FVector PendingLaunchVelocity; // 0x5A0(0x18)
		unsigned char UnknownData45_6[0x140]; // 0x5B8(0x140) UNKNOWN PROPERTY
		float NavMeshProjectionInterval; // 0x6F8(0x4)
		float NavMeshProjectionTimer; // 0x6FC(0x4)
		float NavMeshProjectionInterpSpeed; // 0x700(0x4)
		float NavMeshProjectionHeightScaleUp; // 0x704(0x4)
		float NavMeshProjectionHeightScaleDown; // 0x708(0x4)
		float NavWalkingFloorDistTolerance; // 0x70C(0x4)
		bool bBasedMovementIgnorePhysicsBase; // 0x710(0x1)
		bool bBaseOnAttachmentRoot; // 0x711(0x1)
		bool bStayBasedInAir; // 0x712(0x1)
		unsigned char UnknownData46_6[0x1]; // 0x713(0x1) UNKNOWN PROPERTY
		float StayBasedInAirHeight; // 0x714(0x4)
		unsigned char UnknownData47_6[0x30]; // 0x718(0x30) UNKNOWN PROPERTY
		FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x748(0x30)
		unsigned char UnknownData48_6[0x18]; // 0x778(0x18) UNKNOWN PROPERTY
		float MinTimeBetweenTimeStampResets; // 0x790(0x4)
		unsigned char UnknownData49_6[0x544]; // 0x794(0x544) UNKNOWN PROPERTY
		FRootMotionSourceGroup CurrentRootMotion; // 0xCD8(0x48)
		FRootMotionSourceGroup ServerCorrectionRootMotion; // 0xD20(0x48)
		unsigned char UnknownData50_6[0x168]; // 0xD68(0x168) UNKNOWN PROPERTY
		FRootMotionMovementParams RootMotionParams; // 0xED0(0x70)
		FVector AnimRootMotionVelocity; // 0xF40(0x18)
		unsigned char UnknownData51_7[0x20]; // 0xF58(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CharacterMovementComponent");
			return ret;
		}

		void SetWalkableFloorZ(float InWalkableFloorZ); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEE2F0
		void SetWalkableFloorAngle(float InWalkableFloorAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEE210
		void SetMovementMode(TEnumAsByte NewMovementMode, char NewCustomMode); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEE130
		void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF413EEE050
		void SetGroupsToIgnore(int32_t GroupFlags); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEDF70
		void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF413EEDE90
		void SetGroupsToAvoid(int32_t GroupFlags); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEDDB0
		void SetGravityDirection(FVector& GravityDir); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF413EEDCD0
		void SetCrouchedHalfHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEDBF0
		void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF413EEDA50
		void SetAvoidanceGroup(int32_t GroupFlags); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EED970
		void SetAvoidanceEnabled(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EED890
		float K2_GetWalkableFloorZ(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EED7B0
		float K2_GetWalkableFloorAngle(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EED6D0
		void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EED5F0
		void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EED450
		bool IsWalking(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EED370
		bool IsWalkable(FHitResult& Hit); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF413EED290
		bool HasCustomGravity(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EED1B0
		float GetValidPerchRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EED0D0
		float GetPerchRadiusThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECFF0
		UPrimitiveComponent GetMovementBase(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECF10
		float GetMinAnalogSpeed(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECE30
		float GetMaxJumpHeightWithJumpTime(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECD50
		float GetMaxJumpHeight(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECC70
		float GetMaxBrakingDeceleration(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECB90
		float GetMaxAcceleration(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EECAB0
		FVector GetLastUpdateVelocity(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC9D0
		FRotator GetLastUpdateRotation(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC8F0
		FVector GetLastUpdateRequestedVelocity(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC810
		FVector GetLastUpdateLocation(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC730
		FVector GetImpartedMovementBaseVelocity(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC650
		FVector GetGravityDirection(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC570
		FVector GetCurrentAcceleration(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC490
		float GetCrouchedHalfHeight(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC3B0
		ACharacter GetCharacterOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC2D0
		float GetAnalogInputModifier(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF413EEC1F0
		void DisableMovement(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEC110
		void ClearAccumulatedForces(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEC030
		void CapsuleTouched(UPrimitiveComponent OverlappedComp, AActor Other, UPrimitiveComponent OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // Flags: RequiredAPI|Native|Protected|HasOutParms 0x7FF413EEBF50
		void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF413EEBE70
		void AddImpulse(FVector Impulse, bool bVelocityChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF413EEBD90
		void AddForce(FVector Force); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF413EEBCB0
	};


	// Class Engine.DecalComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x70 (0x290 - 0x220)
	class UDecalComponent : public USceneComponent	
	{
	public:
		UMaterialInterface DecalMaterial; // 0x220(0x8)
		int32_t SortOrder; // 0x228(0x4)
		float FadeScreenSize; // 0x22C(0x4)
		float FadeStartDelay; // 0x230(0x4)
		float FadeDuration; // 0x234(0x4)
		float FadeInDuration; // 0x238(0x4)
		float FadeInStartDelay; // 0x23C(0x4)
		bool bDestroyOwnerAfterFade : 1; // 0x240:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x241(0x7) UNKNOWN PROPERTY
		FVector DecalSize; // 0x248(0x18)
		FLinearColor DecalColor; // 0x260(0x10)
		unsigned char UnknownData03_7[0x20]; // 0x270(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DecalComponent");
			return ret;
		}

		void SetSortOrder(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511898
		void SetFadeScreenSize(float NewFadeScreenSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145117B8
		void SetFadeOut(float StartDelay, float duration, bool DestroyOwnerAfterFade); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145116D8
		void SetFadeIn(float StartDelay, float duration); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145115F8
		void SetDecalMaterial(UMaterialInterface NewDecalMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511518
		void SetDecalColor(FLinearColor& Color); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414511438
		float GetFadeStartDelay(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414511358
		float GetFadeInStartDelay(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414511278
		float GetFadeInDuration(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414511198
		float GetFadeDuration(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145110B8
		UMaterialInterface GetDecalMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414510FD8
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414510EF8
	};


	// Class Engine.LightComponent
	// Inherited from ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x118 (0x380 - 0x268)
	class ULightComponent : public ULightComponentBase	
	{
	public:
		float Temperature; // 0x268(0x4)
		float MaxDrawDistance; // 0x26C(0x4)
		float MaxDistanceFadeRange; // 0x270(0x4)
		bool bUseTemperature : 1; // 0x274:0(0x1)
		unsigned char UnknownData08_5[0x3]; // 0x275(0x3) UNKNOWN PROPERTY
		int32_t ShadowMapChannel; // 0x278(0x4)
		int32_t PreviewShadowMapChannel; // 0x27C(0x4)
		float MinRoughness; // 0x280(0x4)
		float SpecularScale; // 0x284(0x4)
		float DiffuseScale; // 0x288(0x4)
		float ShadowResolutionScale; // 0x28C(0x4)
		float ShadowBias; // 0x290(0x4)
		float ShadowSlopeBias; // 0x294(0x4)
		float ShadowSharpen; // 0x298(0x4)
		float ContactShadowLength; // 0x29C(0x4)
		bool ContactShadowLengthInWS : 1; // 0x2A0:0(0x1)
		unsigned char UnknownData09_5[0x3]; // 0x2A1(0x3) UNKNOWN PROPERTY
		float ContactShadowCastingIntensity; // 0x2A4(0x4)
		float ContactShadowNonCastingIntensity; // 0x2A8(0x4)
		bool InverseSquaredFalloff : 1; // 0x2AC:0(0x1)
		bool CastTranslucentShadows : 1; // 0x2AC:1(0x1)
		bool bCastShadowsFromCinematicObjectsOnly : 1; // 0x2AC:2(0x1)
		bool bForceCachedShadowsForMovablePrimitives : 1; // 0x2AC:3(0x1)
		unsigned char UnknownData10_5[0x3]; // 0x2AD(0x3) UNKNOWN PROPERTY
		FLightingChannels LightingChannels; // 0x2B0(0x1)
		unsigned char UnknownData11_6[0x7]; // 0x2B1(0x7) UNKNOWN PROPERTY
		UMaterialInterface LightFunctionMaterial; // 0x2B8(0x8)
		FVector LightFunctionScale; // 0x2C0(0x18)
		UTextureLightProfile IESTexture; // 0x2D8(0x8)
		bool bUseIESBrightness : 1; // 0x2E0:0(0x1)
		unsigned char UnknownData12_5[0x3]; // 0x2E1(0x3) UNKNOWN PROPERTY
		float IESBrightnessScale; // 0x2E4(0x4)
		float LightFunctionFadeDistance; // 0x2E8(0x4)
		float DisabledBrightness; // 0x2EC(0x4)
		bool bEnableLightShaftBloom : 1; // 0x2F0:0(0x1)
		unsigned char UnknownData13_5[0x3]; // 0x2F1(0x3) UNKNOWN PROPERTY
		float BloomScale; // 0x2F4(0x4)
		float BloomThreshold; // 0x2F8(0x4)
		float BloomMaxBrightness; // 0x2FC(0x4)
		FColor BloomTint; // 0x300(0x4)
		bool bUseRayTracedDistanceFieldShadows; // 0x304(0x1)
		unsigned char UnknownData14_6[0x3]; // 0x305(0x3) UNKNOWN PROPERTY
		float RayStartOffsetDepthScale; // 0x308(0x4)
		unsigned char UnknownData15_7[0x6C]; // 0x30C(0x6C) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightComponent");
			return ret;
		}

		void SetVolumetricScatteringIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513038
		void SetUseTemperature(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512F58
		void SetUseIESBrightness(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512E78
		void SetTransmission(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512D98
		void SetTemperature(float NewTemperature); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512CB8
		void SetSpecularScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512BD8
		void SetShadowSlopeBias(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512AF8
		void SetShadowBias(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512A18
		void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512938
		void SetLightFunctionScale(FVector NewLightFunctionScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414512858
		void SetLightFunctionMaterial(UMaterialInterface NewLightFunctionMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512778
		void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512698
		void SetLightFunctionDisabledBrightness(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145125B8
		void SetLightFColor(FColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults 0x7FF4145124D8
		void SetLightColor(FLinearColor NewLightColor, bool bSRGB); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145123F8
		void SetIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512318
		void SetIndirectLightingIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512238
		void SetIESTexture(UTextureLightProfile NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512158
		void SetIESBrightnessScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414512078
		void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511F98
		void SetEnableLightShaftBloom(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511EB8
		void SetDiffuseScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511DD8
		void SetBloomTint(FColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414511CF8
		void SetBloomThreshold(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511C18
		void SetBloomScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511B38
		void SetBloomMaxBrightness(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511A58
		void SetAffectTranslucentLighting(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414511978
	};


	// Class Engine.DirectionalLightComponent
	// Inherited from ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0xD8 (0x450 - 0x378)
	class UDirectionalLightComponent : public ULightComponent	
	{
	public:
		float ShadowCascadeBiasDistribution; // 0x378(0x4)
		bool bEnableLightShaftOcclusion : 1; // 0x37C:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x37D(0x3) UNKNOWN PROPERTY
		float OcclusionMaskDarkness; // 0x380(0x4)
		float OcclusionDepthRange; // 0x384(0x4)
		FVector LightShaftOverrideDirection; // 0x388(0x18)
		float WholeSceneDynamicShadowRadius; // 0x3A0(0x4)
		float DynamicShadowDistanceMovableLight; // 0x3A4(0x4)
		float DynamicShadowDistanceStationaryLight; // 0x3A8(0x4)
		int32_t DynamicShadowCascades; // 0x3AC(0x4)
		float CascadeDistributionExponent; // 0x3B0(0x4)
		float CascadeTransitionFraction; // 0x3B4(0x4)
		float ShadowDistanceFadeoutFraction; // 0x3B8(0x4)
		bool bUseInsetShadowsForMovableObjects : 1; // 0x3BC:0(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x3BD(0x3) UNKNOWN PROPERTY
		int32_t FarShadowCascadeCount; // 0x3C0(0x4)
		float FarShadowDistance; // 0x3C4(0x4)
		float DistanceFieldShadowDistance; // 0x3C8(0x4)
		int32_t ForwardShadingPriority; // 0x3CC(0x4)
		float LightSourceAngle; // 0x3D0(0x4)
		float LightSourceSoftAngle; // 0x3D4(0x4)
		float ShadowSourceAngleFactor; // 0x3D8(0x4)
		float TraceDistance; // 0x3DC(0x4)
		bool bUsedAsAtmosphereSunLight : 1; // 0x3E0:0(0x1)
		bool bAtmosphereSunLight : 1; // 0x3E0:1(0x1)
		unsigned char UnknownData08_5[0x3]; // 0x3E1(0x3) UNKNOWN PROPERTY
		int32_t AtmosphereSunLightIndex; // 0x3E4(0x4)
		FLinearColor AtmosphereSunDiskColorScale; // 0x3E8(0x10)
		bool bPerPixelAtmosphereTransmittance : 1; // 0x3F8:0(0x1)
		bool bCastShadowsOnClouds : 1; // 0x3F8:1(0x1)
		bool bCastShadowsOnAtmosphere : 1; // 0x3F8:2(0x1)
		bool bCastCloudShadows : 1; // 0x3F8:3(0x1)
		unsigned char UnknownData09_5[0x3]; // 0x3F9(0x3) UNKNOWN PROPERTY
		float CloudShadowStrength; // 0x3FC(0x4)
		float CloudShadowOnAtmosphereStrength; // 0x400(0x4)
		float CloudShadowOnSurfaceStrength; // 0x404(0x4)
		float CloudShadowDepthBias; // 0x408(0x4)
		float CloudShadowExtent; // 0x40C(0x4)
		float CloudShadowMapResolutionScale; // 0x410(0x4)
		float CloudShadowRaySampleCountScale; // 0x414(0x4)
		FLinearColor CloudScatteredLuminanceScale; // 0x418(0x10)
		FLightmassDirectionalLightSettings LightmassSettings; // 0x428(0x10)
		bool bCastModulatedShadows : 1; // 0x438:0(0x1)
		unsigned char UnknownData10_5[0x3]; // 0x439(0x3) UNKNOWN PROPERTY
		FColor ModulatedShadowColor; // 0x43C(0x4)
		float ShadowAmount; // 0x440(0x4)
		unsigned char UnknownData11_7[0xC]; // 0x444(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DirectionalLightComponent");
			return ret;
		}

		void SetShadowSourceAngleFactor(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145140D8
		void SetShadowDistanceFadeoutFraction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513FF8
		void SetShadowCascadeBiasDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513F18
		void SetShadowAmount(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513E38
		void SetOcclusionMaskDarkness(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513D58
		void SetOcclusionDepthRange(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513C78
		void SetLightSourceSoftAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513B98
		void SetLightSourceAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513AB8
		void SetLightShaftOverrideDirection(FVector NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145139D8
		void SetForwardShadingPriority(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145138F8
		void SetEnableLightShaftOcclusion(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513818
		void SetDynamicShadowDistanceStationaryLight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513738
		void SetDynamicShadowDistanceMovableLight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513658
		void SetDynamicShadowCascades(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513578
		void SetCascadeTransitionFraction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414513498
		void SetCascadeDistributionExponent(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145133B8
		void SetAtmosphereSunLightIndex(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145132D8
		void SetAtmosphereSunLight(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145131F8
		void SetAtmosphereSunDiskColorScale(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414513118
	};


	// Class Engine.DrawFrustumComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UDrawFrustumComponent : public UPrimitiveComponent	
	{
	public:
		bool bFrustumEnabled; // 0x4C8(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x4C9(0x3) UNKNOWN PROPERTY
		FColor FrustumColor; // 0x4CC(0x4)
		float FrustumAngle; // 0x4D0(0x4)
		float FrustumAspectRatio; // 0x4D4(0x4)
		float FrustumStartDist; // 0x4D8(0x4)
		float FrustumEndDist; // 0x4DC(0x4)
		UTexture Texture; // 0x4E0(0x8)
		unsigned char UnknownData03_7[0x8]; // 0x4E8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DrawFrustumComponent");
			return ret;
		}
	};


	// Class Engine.SphereComponent
	// Inherited from UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x4F0 - 0x4E8)
	class USphereComponent : public UShapeComponent	
	{
	public:
		float SphereRadius; // 0x4E8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4EC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SphereComponent");
			return ret;
		}

		void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514458
		float GetUnscaledSphereRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414514378
		float GetShapeScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414514298
		float GetScaledSphereRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145141B8
	};


	// Class Engine.DrawSphereComponent
	// Inherited from USphereComponent -> UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x4F0 - 0x4F0)
	class UDrawSphereComponent : public USphereComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DrawSphereComponent");
			return ret;
		}
	};


	// Class Engine.ForceFeedbackComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xF0 (0x310 - 0x220)
	class UForceFeedbackComponent : public USceneComponent	
	{
	public:
		UForceFeedbackEffect ForceFeedbackEffect; // 0x220(0x8)
		bool bAutoDestroy : 1; // 0x228:0(0x1)
		bool bStopWhenOwnerDestroyed : 1; // 0x228:1(0x1)
		bool bLooping : 1; // 0x228:2(0x1)
		bool bIgnoreTimeDilation : 1; // 0x228:3(0x1)
		bool bOverrideAttenuation : 1; // 0x228:4(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x229(0x3) UNKNOWN PROPERTY
		float IntensityMultiplier; // 0x22C(0x4)
		UForceFeedbackAttenuation AttenuationSettings; // 0x230(0x8)
		FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x238(0xC0)
		FMulticastInlineDelegate OnForceFeedbackFinished; // 0x2F8(0x10)
		unsigned char UnknownData03_7[0x8]; // 0x308(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ForceFeedbackComponent");
			return ret;
		}

		void Stop(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514998
		void SetIntensityMultiplier(float NewIntensityMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145148B8
		void SetForceFeedbackEffect(UForceFeedbackEffect NewForceFeedbackEffect); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145147D8
		void Play(float StartTime); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145146F8
		bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414514618
		void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414514538
	};


	// Class Engine.HeterogeneousVolumeComponent
	// Inherited from UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0xB8 (0x5B0 - 0x4F8)
	class UHeterogeneousVolumeComponent : public UMeshComponent	
	{
	public:
		FIntVector VolumeResolution; // 0x4F8(0xC)
		unsigned char UnknownData05_6[0xC]; // 0x504(0xC) UNKNOWN PROPERTY
		FTransform FrameTransform; // 0x510(0x60)
		float Frame; // 0x570(0x4)
		float FrameRate; // 0x574(0x4)
		float StartFrame; // 0x578(0x4)
		float EndFrame; // 0x57C(0x4)
		bool bPlaying : 1; // 0x580:0(0x1)
		bool bLooping : 1; // 0x580:1(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x581(0x3) UNKNOWN PROPERTY
		float StreamingMipBias; // 0x584(0x4)
		bool bIssueBlockingRequests : 1; // 0x588:0(0x1)
		bool bPivotAtCentroid : 1; // 0x588:1(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x589(0x3) UNKNOWN PROPERTY
		float StepFactor; // 0x58C(0x4)
		float ShadowStepFactor; // 0x590(0x4)
		float ShadowBiasFactor; // 0x594(0x4)
		float LightingDownsampleFactor; // 0x598(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x59C(0x4) UNKNOWN PROPERTY
		UMaterialInstanceDynamic MaterialInstanceDynamic; // 0x5A0(0x8)
		unsigned char UnknownData09_7[0x8]; // 0x5A8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HeterogeneousVolumeComponent");
			return ret;
		}

		void SetVolumeResolution(FIntVector NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414515178
		void SetStreamingMipBias(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414515098
		void SetStartFrame(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514FB8
		void SetPlaying(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514ED8
		void SetLooping(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514DF8
		void SetFrameRate(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514D18
		void SetFrame(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514C38
		void SetEndFrame(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514B58
		void Play(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414514A78
	};


	// Class Engine.HeterogeneousVolume
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AHeterogeneousVolume : public AInfo	
	{
	public:
		UHeterogeneousVolumeComponent HeterogeneousVolumeComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HeterogeneousVolume");
			return ret;
		}
	};


	// Class Engine.InputComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x88 (0x128 - 0xA0)
	class UInputComponent : public UActorComponent	
	{
	public:
		unsigned char UnknownData02_3[0x70]; // 0xA0(0x70) UNKNOWN PROPERTY
		TArray CachedKeyToActionInfo; // 0x110(0x10)
		unsigned char UnknownData03_7[0x8]; // 0x120(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputComponent");
			return ret;
		}

		bool WasControllerKeyJustReleased(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 0x7FF414515A38
		bool WasControllerKeyJustPressed(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 0x7FF414515958
		void OnInputOwnerEndPlayed(AActor InOwner, TEnumAsByte EndPlayReason); // Flags: Final|RequiredAPI|Native|Private 0x7FF414515878
		bool IsControllerKeyDown(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 0x7FF414515798
		void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4145156B8
		FVector GetControllerVectorKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145155D8
		void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4145154F8
		float GetControllerKeyTimeDown(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 0x7FF414515418
		void GetControllerAnalogStickState(TEnumAsByte WhichStick, float& StickX, float& StickY); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414515338
		float GetControllerAnalogKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const 0x7FF414515258
	};


	// Class Engine.InterpToMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0xB8 (0x1C0 - 0x108)
	class UInterpToMovementComponent : public UMovementComponent	
	{
	public:
		float duration; // 0x108(0x4)
		bool bPauseOnImpact : 1; // 0x10C:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		bool bSweep; // 0x110(0x1)
		ETeleportType TeleportType; // 0x111(0x1)
		EInterpToBehaviourType BehaviourType; // 0x112(0x1)
		bool bCheckIfStillInWorld; // 0x113(0x1)
		bool bForceSubStepping : 1; // 0x114:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInterpToReverse; // 0x118(0x10)
		FMulticastInlineDelegate OnInterpToStop; // 0x128(0x10)
		FMulticastInlineDelegate OnWaitBeginDelegate; // 0x138(0x10)
		FMulticastInlineDelegate OnWaitEndDelegate; // 0x148(0x10)
		FMulticastInlineDelegate OnResetDelegate; // 0x158(0x10)
		float MaxSimulationTimeStep; // 0x168(0x4)
		float SpeedMultiplier; // 0x16C(0x4)
		int32_t MaxSimulationIterations; // 0x170(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x174(0x4) UNKNOWN PROPERTY
		TArray ControlPoints; // 0x178(0x10)
		unsigned char UnknownData07_7[0x38]; // 0x188(0x38) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InterpToMovementComponent");
			return ret;
		}

		void StopSimulating(FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF410FA3818
		void RestartMovement(float InitialDirection); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA3738
		void ResetControlPoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA3658
		void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FA3578
		void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FA3498
		void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FA33B8
		void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FA32D8
		void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FA31F8
		void FinaliseControlPoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FA3118
		void AddControlPointPosition(FVector Pos, bool bPositionIsRelative); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF410FA3038
	};


	// Class Engine.LineBatchComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x48 (0x510 - 0x4C8)
	class ULineBatchComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData01_1[0x48]; // 0x4C8(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LineBatchComponent");
			return ret;
		}
	};


	// Class Engine.LocalFogVolumeComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x40 (0x260 - 0x220)
	class ULocalFogVolumeComponent : public USceneComponent	
	{
	public:
		float RadialFogExtinction; // 0x220(0x4)
		float HeightFogExtinction; // 0x224(0x4)
		float HeightFogFalloff; // 0x228(0x4)
		float HeightFogOffset; // 0x22C(0x4)
		float FogPhaseG; // 0x230(0x4)
		FLinearColor FogAlbedo; // 0x234(0x10)
		FLinearColor FogEmissive; // 0x244(0x10)
		int32_t FogSortPriority; // 0x254(0x4)
		unsigned char UnknownData01_7[0x8]; // 0x258(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalFogVolumeComponent");
			return ret;
		}

		void SetRadialFogExtinction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516058
		void SetHeightFogOffset(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414515F78
		void SetHeightFogFalloff(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414515E98
		void SetHeightFogExtinction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414515DB8
		void SetFogPhaseG(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414515CD8
		void SetFogEmissive(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414515BF8
		void SetFogAlbedo(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414515B18
	};


	// Class Engine.LocalLightComponent
	// Inherited from ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x3A0 - 0x378)
	class ULocalLightComponent : public ULightComponent	
	{
	public:
		ELightUnits IntensityUnits; // 0x378(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x379(0x3) UNKNOWN PROPERTY
		float InverseExposureBlend; // 0x37C(0x4)
		float Radius; // 0x380(0x4)
		float AttenuationRadius; // 0x384(0x4)
		FLightmassPointLightSettings LightmassSettings; // 0x388(0xC)
		unsigned char UnknownData03_7[0x4]; // 0x394(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalLightComponent");
			return ret;
		}

		void SetIntensityUnits(ELightUnits NewIntensityUnits); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145162F8
		void SetAttenuationRadius(float NewRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516218
		float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414516138
	};


	// Class Engine.LODSyncComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x98 (0x138 - 0xA0)
	class ULODSyncComponent : public UActorComponent	
	{
	public:
		int32_t NumLODs; // 0xA0(0x4)
		int32_t ForcedLOD; // 0xA4(0x4)
		int32_t MinLOD; // 0xA8(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xAC(0x4) UNKNOWN PROPERTY
		TArray ComponentsToSync; // 0xB0(0x10)
		TMap CustomLODMapping; // 0xC0(0x50)
		int32_t CurrentLOD; // 0x110(0x4)
		int32_t CurrentNumLODs; // 0x114(0x4)
		TArray DriveComponents; // 0x118(0x10)
		TArray SubComponents; // 0x128(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LODSyncComponent");
			return ret;
		}

		FString GetLODSyncDebugText(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145163D8
	};


	// Class Engine.MaterialBillboardComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UMaterialBillboardComponent : public UPrimitiveComponent	
	{
	public:
		TArray Elements; // 0x4C8(0x10)
		unsigned char UnknownData01_7[0x8]; // 0x4D8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialBillboardComponent");
			return ret;
		}

		void SetElements(TArray& NewElements); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414516598
		void AddElement(UMaterialInterface Material, UCurveFloat DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat DistanceToSizeCurve); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145164B8
	};


	// Class Engine.ModelComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x48 (0x510 - 0x4C8)
	class UModelComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData02_3[0x18]; // 0x4C8(0x18) UNKNOWN PROPERTY
		UBodySetup ModelBodySetup; // 0x4E0(0x8)
		unsigned char UnknownData03_7[0x28]; // 0x4E8(0x28) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ModelComponent");
			return ret;
		}
	};


	// Class Engine.PawnNoiseEmitterComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x38 (0xD8 - 0xA0)
	class UPawnNoiseEmitterComponent : public UActorComponent	
	{
	public:
		bool bAIPerceptionSystemCompatibilityMode : 1; // 0xA0:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0xA1(0x7) UNKNOWN PROPERTY
		FVector LastRemoteNoisePosition; // 0xA8(0x18)
		float NoiseLifetime; // 0xC0(0x4)
		float LastRemoteNoiseVolume; // 0xC4(0x4)
		float LastRemoteNoiseTime; // 0xC8(0x4)
		float LastLocalNoiseVolume; // 0xCC(0x4)
		float LastLocalNoiseTime; // 0xD0(0x4)
		unsigned char UnknownData03_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PawnNoiseEmitterComponent");
			return ret;
		}

		void MakeNoise(AActor NoiseMaker, float Loudness, FVector& NoiseLocation); // Flags: RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414516678
	};


	// Class Engine.PlatformEventsComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x20 (0xC0 - 0xA0)
	class UPlatformEventsComponent : public UActorComponent	
	{
	public:
		FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xA0(0x10)
		FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xB0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformEventsComponent");
			return ret;
		}

		bool SupportsConvertibleLaptops(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FB3930
		void PlatformEventDelegate__DelegateSignature(); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB3850
		bool IsInTabletMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FB3770
		bool IsInLaptopMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FB3690
	};


	// Class Engine.PointLightComponent
	// Inherited from ULocalLightComponent -> ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x3B0 - 0x398)
	class UPointLightComponent : public ULocalLightComponent	
	{
	public:
		bool bUseInverseSquaredFalloff : 1; // 0x398:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x399(0x3) UNKNOWN PROPERTY
		float LightFalloffExponent; // 0x39C(0x4)
		float SourceRadius; // 0x3A0(0x4)
		float SoftSourceRadius; // 0x3A4(0x4)
		float SourceLength; // 0x3A8(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x3AC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PointLightComponent");
			return ret;
		}

		void SetUseInverseSquaredFalloff(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516BB8
		void SetSourceRadius(float bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516AD8
		void SetSourceLength(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145169F8
		void SetSoftSourceRadius(float bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516918
		void SetLightFalloffExponent(float NewLightFalloffExponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516838
		void SetInverseExposureBlend(float NewInverseExposureBlend); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516758
	};


	// Class Engine.PoseableMeshComponent
	// Inherited from USkinnedMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x160 (0x9C0 - 0x860)
	class UPoseableMeshComponent : public USkinnedMeshComponent	
	{
	public:
		unsigned char UnknownData01_1[0x160]; // 0x860(0x160) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseableMeshComponent");
			return ret;
		}

		void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414517478
		void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414517398
		void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145172B8
		void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145171D8
		void ResetBoneTransformByName(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145170F8
		FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414517018
		FVector GetBoneScaleByName(FName BoneName, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414516F38
		FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414516E58
		FVector GetBoneLocationByName(FName BoneName, TEnumAsByte BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414516D78
		void CopyPoseFromSkeletalComponent(USkeletalMeshComponent InComponentToCopy); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414516C98
	};


	// Class Engine.PostProcessComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x710 (0x930 - 0x220)
	class UPostProcessComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData02_3[0x10]; // 0x220(0x10) UNKNOWN PROPERTY
		FPostProcessSettings Settings; // 0x230(0x6F0)
		float Priority; // 0x920(0x4)
		float BlendRadius; // 0x924(0x4)
		float BlendWeight; // 0x928(0x4)
		bool bEnabled : 1; // 0x92C:0(0x1)
		bool bUnbound : 1; // 0x92C:1(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x92D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PostProcessComponent");
			return ret;
		}

		void AddOrUpdateBlendable(TScriptInterface InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414517558
	};


	// Class Engine.ProjectileMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0x158 (0x260 - 0x108)
	class UProjectileMovementComponent : public UMovementComponent	
	{
	public:
		float InitialSpeed; // 0x108(0x4)
		float MaxSpeed; // 0x10C(0x4)
		bool bRotationFollowsVelocity : 1; // 0x110:0(0x1)
		bool bRotationRemainsVertical : 1; // 0x110:1(0x1)
		bool bShouldBounce : 1; // 0x110:2(0x1)
		bool bInitialVelocityInLocalSpace : 1; // 0x110:3(0x1)
		bool bForceSubStepping : 1; // 0x110:4(0x1)
		bool bSimulationEnabled : 1; // 0x110:5(0x1)
		bool bSweepCollision : 1; // 0x110:6(0x1)
		bool bIsHomingProjectile : 1; // 0x110:7(0x1)
		bool bBounceAngleAffectsFriction : 1; // 0x111:0(0x1)
		bool bIsSliding : 1; // 0x111:1(0x1)
		bool bInterpMovement : 1; // 0x111:2(0x1)
		bool bInterpRotation : 1; // 0x111:3(0x1)
		bool bThrottleInterpolation : 1; // 0x111:4(0x1)
		unsigned char UnknownData03_3[0x6]; // 0x112(0x6) UNKNOWN PROPERTY
		bool bSimulationUseScopedMovement : 1; // 0x118:0(0x1)
		bool bInterpolationUseScopedMovement : 1; // 0x118:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x119(0x3) UNKNOWN PROPERTY
		float PreviousHitTime; // 0x11C(0x4)
		FVector PreviousHitNormal; // 0x120(0x18)
		float ProjectileGravityScale; // 0x138(0x4)
		float Buoyancy; // 0x13C(0x4)
		float Bounciness; // 0x140(0x4)
		float Friction; // 0x144(0x4)
		float BounceVelocityStopSimulatingThreshold; // 0x148(0x4)
		float MinFrictionFraction; // 0x14C(0x4)
		FMulticastInlineDelegate OnProjectileBounce; // 0x150(0x10)
		FMulticastInlineDelegate OnProjectileStop; // 0x160(0x10)
		float HomingAccelerationMagnitude; // 0x170(0x4)
		TWeakObjectPtr HomingTargetComponent; // 0x174(0x8)
		float MaxSimulationTimeStep; // 0x17C(0x4)
		int32_t MaxSimulationIterations; // 0x180(0x4)
		int32_t BounceAdditionalIterations; // 0x184(0x4)
		float InterpLocationTime; // 0x188(0x4)
		float InterpRotationTime; // 0x18C(0x4)
		float InterpLocationMaxLagDistance; // 0x190(0x4)
		float InterpLocationSnapToTargetDistance; // 0x194(0x4)
		float ThrottleInterpolationThresholdNotRenderedShortTime; // 0x198(0x4)
		float ThrottleInterpolationThresholdNotRenderedLongTime; // 0x19C(0x4)
		int32_t ThrottleInterpolationSkipFramesRecent; // 0x1A0(0x4)
		int32_t ThrottleInterpolationSkipFramesNotRecent; // 0x1A4(0x4)
		unsigned char UnknownData05_7[0xB8]; // 0x1A8(0xB8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ProjectileMovementComponent");
			return ret;
		}

		void StopSimulating(FHitResult& HitResult); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF410FB4FD0
		void SetVelocityInLocalSpace(FVector NewVelocity); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF410FB4EF0
		void SetInterpolatedComponent(USceneComponent Component); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FB4E10
		void ResetInterpolation(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF410FB4D30
		void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FB4C50
		void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity); // Flags: MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 0x7FF410FB4B70
		void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB4A90
		FVector LimitVelocity(FVector NewVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF410FB49B0
		bool IsVelocityUnderSimulationThreshold(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FB48D0
		bool IsInterpolationComplete(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF410FB47F0
	};


	// Class Engine.RectLightComponent
	// Inherited from ULocalLightComponent -> ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x3C0 - 0x398)
	class URectLightComponent : public ULocalLightComponent	
	{
	public:
		float SourceWidth; // 0x398(0x4)
		float SourceHeight; // 0x39C(0x4)
		float BarnDoorAngle; // 0x3A0(0x4)
		float BarnDoorLength; // 0x3A4(0x4)
		UTexture SourceTexture; // 0x3A8(0x8)
		unsigned char UnknownData01_7[0x10]; // 0x3B0(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RectLightComponent");
			return ret;
		}

		void SetSourceWidth(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145179B8
		void SetSourceTexture(UTexture NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145178D8
		void SetSourceHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145177F8
		void SetBarnDoorLength(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414517718
		void SetBarnDoorAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414517638
	};


	// Class Engine.RotatingMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0x38 (0x140 - 0x108)
	class URotatingMovementComponent : public UMovementComponent	
	{
	public:
		FRotator RotationRate; // 0x108(0x18)
		FVector PivotTranslation; // 0x120(0x18)
		bool bRotationInLocalSpace : 1; // 0x138:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x139(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RotatingMovementComponent");
			return ret;
		}
	};


	// Class Engine.RuntimeVirtualTextureComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x90 (0x2B0 - 0x220)
	class URuntimeVirtualTextureComponent : public USceneComponent	
	{
	public:
		TWeakObjectPtr BoundsAlignActor; // 0x220(0x20)
		bool bSetBoundsButton; // 0x240(0x1)
		bool bSnapBoundsToLandscape; // 0x241(0x1)
		unsigned char UnknownData05_6[0x2]; // 0x242(0x2) UNKNOWN PROPERTY
		float ExpandBounds; // 0x244(0x4)
		URuntimeVirtualTexture VirtualTexture; // 0x248(0x8)
		FPerPlatformBool EnableInGamePerPlatform; // 0x250(0x1)
		bool bEnableForNaniteOnly; // 0x251(0x1)
		bool bUseMinMaterialQuality; // 0x252(0x1)
		ERuntimeVirtualTextureMaterialQuality MinInGameMaterialQuality; // 0x253(0x1)
		bool bEnableScalability; // 0x254(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x255(0x3) UNKNOWN PROPERTY
		uint32_t ScalabilityGroup; // 0x258(0x4)
		bool bHidePrimitives; // 0x25C(0x1)
		unsigned char UnknownData07_6[0x3]; // 0x25D(0x3) UNKNOWN PROPERTY
		UVirtualTextureBuilder StreamingTexture; // 0x260(0x8)
		int32_t StreamLowMips; // 0x268(0x4)
		bool bBuildStreamingMipsButton; // 0x26C(0x1)
		TEnumAsByte LossyCompressionAmount; // 0x26D(0x1)
		bool bUseStreamingMipsFixedColor; // 0x26E(0x1)
		unsigned char UnknownData08_6[0x1]; // 0x26F(0x1) UNKNOWN PROPERTY
		FLinearColor StreamingMipsFixedColor; // 0x270(0x10)
		bool bUseStreamingMipsOnly; // 0x280(0x1)
		bool bUseStreamingMipsInEditor; // 0x281(0x1)
		unsigned char UnknownData09_7[0x2E]; // 0x282(0x2E) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTextureComponent");
			return ret;
		}

		void Invalidate(FBoxSphereBounds& WorldBounds); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414517A98
	};


	// Class Engine.SkyAtmosphere
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ASkyAtmosphere : public AInfo	
	{
	public:
		USkyAtmosphereComponent SkyAtmosphereComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyAtmosphere");
			return ret;
		}
	};


	// Class Engine.SplineMetadata
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USplineMetadata : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineMetadata");
			return ret;
		}
	};


	// Class Engine.SplineComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x98 (0x560 - 0x4C8)
	class USplineComponent : public UPrimitiveComponent	
	{
	public:
		FSplineCurves SplineCurves; // 0x4C8(0x68)
		int32_t ReparamStepsPerSegment; // 0x530(0x4)
		float duration; // 0x534(0x4)
		bool bStationaryEndpoints; // 0x538(0x1)
		bool bSplineHasBeenEdited; // 0x539(0x1)
		bool bModifiedByConstructionScript; // 0x53A(0x1)
		bool bInputSplinePointsToConstructionScript; // 0x53B(0x1)
		bool bDrawDebug; // 0x53C(0x1)
		bool bClosedLoop; // 0x53D(0x1)
		bool bLoopPositionOverride; // 0x53E(0x1)
		unsigned char UnknownData02_6[0x1]; // 0x53F(0x1) UNKNOWN PROPERTY
		float LoopPosition; // 0x540(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x544(0x4) UNKNOWN PROPERTY
		FVector DefaultUpVector; // 0x548(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineComponent");
			return ret;
		}

		void UpdateSpline(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414523798
		void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145236B8
		void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145235D8
		void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145234F8
		void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414523418
		void SetTangentColor(FLinearColor& TangentColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414523338
		void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414523258
		void SetSplineWorldPoints(TArray& Points); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414523178
		void SetSplinePointType(int32_t PointIndex, TEnumAsByte Type, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414523098
		void SetSplinePoints(TArray& Points, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414522FB8
		void SetSplineLocalPoints(TArray& Points); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414522ED8
		void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414522DF8
		void SetScaleAtSplinePoint(int32_t PointIndex, FVector& InScaleVector, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414522D18
		void SetRotationAtSplinePoint(int32_t PointIndex, FRotator& InRotation, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414522C38
		void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414522B58
		void SetDrawDebug(bool bShow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414522A78
		void SetDefaultUpVector(FVector& UpVector, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414522998
		void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145228B8
		void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145227D8
		void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145226F8
		bool IsClosedLoop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414522618
		FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414522538
		FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414522458
		FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414522378
		FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414522298
		FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145221B8
		FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145220D8
		FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521FF8
		FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521F18
		FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521E38
		FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521D58
		FVector GetUpVectorAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521C78
		FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521B98
		FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521AB8
		FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145219D8
		FTransform GetTransformAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145218F8
		FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521818
		FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521738
		FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521658
		float GetTimeAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414521578
		FVector GetTangentAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414521498
		FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145213B8
		FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145212D8
		FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145211F8
		TEnumAsByte GetSplinePointType(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414521118
		FSplinePoint GetSplinePointAt(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414521038
		float GetSplineLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414520F58
		FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520E78
		FVector GetScaleAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520D98
		FVector GetScaleAtSplineInputKey(float InKey); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520CB8
		FVector GetScaleAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520BD8
		FRotator GetRotationAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520AF8
		FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520A18
		FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520938
		FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520858
		float GetRollAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414520778
		float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414520698
		float GetRollAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145205B8
		float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145204D8
		FVector GetRightVectorAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145203F8
		FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520318
		FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520238
		FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414520158
		int32_t GetNumberOfSplineSegments(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414520078
		int32_t GetNumberOfSplinePoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451FF98
		FVector GetLocationAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451FEB8
		FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451FDD8
		FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451FCF8
		FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451FC18
		void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451FB38
		void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451FA58
		FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451F978
		float GetInputKeyValueAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F898
		float GetInputKeyValueAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F7B8
		float GetInputKeyAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F6D8
		float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F5F8
		float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F518
		float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F438
		float GetDistanceAlongSplineAtSplineInputKey(float InKey); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41451F358
		float GetDistanceAlongSplineAtLocation(FVector& InLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451F278
		FVector GetDirectionAtTime(float Time, TEnumAsByte CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451F198
		FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451F0B8
		FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451EFD8
		FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451EEF8
		FVector GetDefaultUpVector(TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451EE18
		FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451ED38
		FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451EC58
		FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451EB78
		FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451EA98
		FVector FindScaleClosestToWorldLocation(FVector& WorldLocation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E9B8
		FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E8D8
		float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E7F8
		FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E718
		FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E638
		float FindInputKeyClosestToWorldLocation(FVector& WorldLocation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E558
		FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41451E478
		bool DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, TArray& OutPoints, TArray& OutDistancesAlongSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41451E398
		bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, TArray& OutPoints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41451E2B8
		bool ConvertSplineToPolyLineWithDistances(TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, TArray& OutPoints, TArray& OutDistancesAlongSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|Const 0x7FF41451E1D8
		bool ConvertSplineToPolyline_InTimeRange(TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, float StartTimeAlongSpline, float EndTimeAlongSpline, bool bUseConstantVelocity, TArray& OutPoints, TArray& OutDistancesAlongSpline, bool bAllowWrappingIfClosed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|Const 0x7FF41451E0F8
		bool ConvertSplineToPolyline_InDistanceRange(TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, float StartDistAlongSpline, float EndDistAlongSpline, TArray& OutPoints, TArray& OutDistancesAlongSpline, bool bAllowWrappingIfClosed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|Const 0x7FF41451E018
		bool ConvertSplineToPolyLine(TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, TArray& OutPoints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41451DF38
		bool ConvertSplineSegmentToPolyLine(int32_t SplinePointStartIndex, TEnumAsByte CoordinateSpace, float MaxSquareDistanceFromSpline, TArray& OutPoints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41451DE58
		void ClearSplinePoints(bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41451DD78
		void AddSplineWorldPoint(FVector& Position); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451DC98
		void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451DBB8
		void AddSplinePoint(FVector& Position, TEnumAsByte CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451DAD8
		void AddSplineLocalPoint(FVector& Position); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41451D9F8
		void AddPoints(TArray& Points, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451D918
		void AddPoint(FSplinePoint& Point, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41451D838
	};


	// Class Engine.SplineMeshComponent
	// Inherited from UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x130 (0x6C0 - 0x590)
	class USplineMeshComponent : public UStaticMeshComponent	
	{
	public:
		unsigned char UnknownData03_3[0x8]; // 0x590(0x8) UNKNOWN PROPERTY
		FSplineMeshParams SplineParams; // 0x598(0xB0)
		FVector SplineUpDir; // 0x648(0x18)
		float SplineBoundaryMin; // 0x660(0x4)
		FGuid CachedMeshBodySetupGuid; // 0x664(0x10)
		float VirtualTextureMainPassMaxDrawDistance; // 0x674(0x4)
		unsigned char UnknownData04_6[0x38]; // 0x678(0x38) UNKNOWN PROPERTY
		UBodySetup BodySetup; // 0x6B0(0x8)
		float SplineBoundaryMax; // 0x6B8(0x4)
		TEnumAsByte ForwardAxis; // 0x6BC(0x1)
		bool bAllowSplineEditingPerInstance : 1; // 0x6BD:0(0x1)
		bool bSmoothInterpRollScale : 1; // 0x6BD:1(0x1)
		bool bMeshDirty : 1; // 0x6BD:2(0x1)
		bool bNeverNeedsCookedCollisionData : 1; // 0x6BD:3(0x1)
		unsigned char UnknownData05_7[0x2]; // 0x6BE(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineMeshComponent");
			return ret;
		}

		void UpdateMesh(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525398
		void SetStartTangent(FVector StartTangent, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145252B8
		void SetStartScale(FVector2D StartScale, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145251D8
		void SetStartRollDegrees(float StartRollDegrees, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145250F8
		void SetStartRoll(float StartRoll, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525018
		void SetStartPosition(FVector StartPos, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414524F38
		void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414524E58
		void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414524D78
		void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414524C98
		void SetForwardAxis(TEnumAsByte InForwardAxis, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414524BB8
		void SetEndTangent(FVector EndTangent, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414524AD8
		void SetEndScale(FVector2D EndScale, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145249F8
		void SetEndRollDegrees(float EndRollDegrees, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414524918
		void SetEndRoll(float EndRoll, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414524838
		void SetEndPosition(FVector EndPos, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414524758
		void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414524678
		void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414524598
		void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145244B8
		FVector GetStartTangent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145243D8
		FVector2D GetStartScale(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145242F8
		float GetStartRoll(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414524218
		FVector GetStartPosition(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414524138
		FVector2D GetStartOffset(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414524058
		FVector GetSplineUpDir(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414523F78
		TEnumAsByte GetForwardAxis(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414523E98
		FVector GetEndTangent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414523DB8
		FVector2D GetEndScale(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414523CD8
		float GetEndRoll(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414523BF8
		FVector GetEndPosition(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414523B18
		FVector2D GetEndOffset(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414523A38
		float GetBoundaryMin(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414523958
		float GetBoundaryMax(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414523878
	};


	// Class Engine.SpotLightComponent
	// Inherited from UPointLightComponent -> ULocalLightComponent -> ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x3C0 - 0x3B0)
	class USpotLightComponent : public UPointLightComponent	
	{
	public:
		float InnerConeAngle; // 0x3B0(0x4)
		float OuterConeAngle; // 0x3B4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpotLightComponent");
			return ret;
		}

		void SetOuterConeAngle(float NewOuterConeAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525558
		void SetInnerConeAngle(float NewInnerConeAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525478
	};


	// Class Engine.VolumetricCloudComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x80 (0x2A0 - 0x220)
	class UVolumetricCloudComponent : public USceneComponent	
	{
	public:
		float LayerBottomAltitude; // 0x220(0x4)
		float LayerHeight; // 0x224(0x4)
		float TracingStartMaxDistance; // 0x228(0x4)
		float TracingStartDistanceFromCamera; // 0x22C(0x4)
		EVolumetricCloudTracingMaxDistanceMode TracingMaxDistanceMode; // 0x230(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x231(0x3) UNKNOWN PROPERTY
		float TracingMaxDistance; // 0x234(0x4)
		float PlanetRadius; // 0x238(0x4)
		FColor GroundAlbedo; // 0x23C(0x4)
		UMaterialInterface Material; // 0x240(0x8)
		bool bUsePerSampleAtmosphericLightTransmittance : 1; // 0x248:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x249(0x3) UNKNOWN PROPERTY
		float SkyLightCloudBottomOcclusion; // 0x24C(0x4)
		float ViewSampleCountScale; // 0x250(0x4)
		float ReflectionViewSampleCountScaleValue; // 0x254(0x4)
		float ReflectionViewSampleCountScale; // 0x258(0x4)
		float ReflectionSampleCountScale; // 0x25C(0x4)
		float ShadowViewSampleCountScale; // 0x260(0x4)
		float ShadowReflectionViewSampleCountScaleValue; // 0x264(0x4)
		float ShadowReflectionViewSampleCountScale; // 0x268(0x4)
		float ShadowReflectionSampleCountScale; // 0x26C(0x4)
		float ShadowTracingDistance; // 0x270(0x4)
		float StopTracingTransmittanceThreshold; // 0x274(0x4)
		float AerialPespectiveRayleighScatteringStartDistance; // 0x278(0x4)
		float AerialPespectiveRayleighScatteringFadeDistance; // 0x27C(0x4)
		float AerialPespectiveMieScatteringStartDistance; // 0x280(0x4)
		float AerialPespectiveMieScatteringFadeDistance; // 0x284(0x4)
		bool bHoldout : 1; // 0x288:0(0x1)
		bool bRenderInMainPass : 1; // 0x288:1(0x1)
		unsigned char UnknownData05_7[0x17]; // 0x289(0x17) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumetricCloudComponent");
			return ret;
		}

		void SetViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145266D8
		void SetTracingStartMaxDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145265F8
		void SetTracingStartDistanceFromCamera(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414526518
		void SetTracingMaxDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414526438
		void SetStopTracingTransmittanceThreshold(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414526358
		void SetSkyLightCloudBottomOcclusion(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414526278
		void SetShadowViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414526198
		void SetShadowTracingDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145260B8
		void SetShadowReflectionViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525FD8
		void SetShadowReflectionSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525EF8
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525E18
		void SetReflectionViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525D38
		void SetReflectionSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525C58
		void SetPlanetRadius(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525B78
		void SetMaterial(UMaterialInterface NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525A98
		void SetLayerHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145259B8
		void SetLayerBottomAltitude(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145258D8
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145257F8
		void SetGroundAlbedo(FColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414525718
		void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414525638
	};


	// Class Engine.VolumetricCloud
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AVolumetricCloud : public AInfo	
	{
	public:
		UVolumetricCloudComponent VolumetricCloudComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumetricCloud");
			return ret;
		}
	};


	// Class Engine.WorldPartitionStreamingSourceComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x58 (0xF8 - 0xA0)
	class UWorldPartitionStreamingSourceComponent : public UActorComponent	
	{
	public:
		unsigned char UnknownData03_3[0x8]; // 0xA0(0x8) UNKNOWN PROPERTY
		EStreamingSourceTargetBehavior TargetBehavior; // 0xA8(0x1)
		unsigned char UnknownData04_6[0x7]; // 0xA9(0x7) UNKNOWN PROPERTY
		TArray TargetGrids; // 0xB0(0x10)
		FName TargetGrid; // 0xC0(0x4)
		FColor DebugColor; // 0xC4(0x4)
		TArray TargetHLODLayers; // 0xC8(0x10)
		UHLODLayer TargetHLODLayer; // 0xD8(0x8)
		TArray Shapes; // 0xE0(0x10)
		EStreamingSourcePriority Priority; // 0xF0(0x1)
		bool bStreamingSourceEnabled; // 0xF1(0x1)
		EStreamingSourceTargetState TargetState; // 0xF2(0x1)
		unsigned char UnknownData05_7[0x5]; // 0xF3(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionStreamingSourceComponent");
			return ret;
		}

		bool IsStreamingSourceEnabled(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414526A58
		bool IsStreamingCompleted(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414526978
		void EnableStreamingSource(); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414526898
		void DisableStreamingSource(); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4145267B8
	};


	// Class Engine.CurveTable
	// Inherited from UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UCurveTable : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x78]; // 0x28(0x78) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveTable");
			return ret;
		}
	};


	// Class Engine.CompositeCurveTable
	// Inherited from UCurveTable -> UObject
	// Size: 0x28 (0xC8 - 0xA0)
	class UCompositeCurveTable : public UCurveTable	
	{
	public:
		TArray ParentTables; // 0xA0(0x10)
		TArray OldParentTables; // 0xB0(0x10)
		unsigned char UnknownData01_7[0x8]; // 0xC0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CompositeCurveTable");
			return ret;
		}
	};


	// Class Engine.CompositeDataTable
	// Inherited from UDataTable -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UCompositeDataTable : public UDataTable	
	{
	public:
		TArray ParentTables; // 0xB0(0x10)
		TArray OldParentTables; // 0xC0(0x10)
		unsigned char UnknownData01_7[0x8]; // 0xD0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CompositeDataTable");
			return ret;
		}
	};


	// Class Engine.StreamingSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UStreamingSettings : public UDeveloperSettings	
	{
	public:
		bool AsyncLoadingThreadEnabled : 1; // 0x30:0(0x1)
		bool WarnIfTimeLimitExceeded : 1; // 0x30:1(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		float TimeLimitExceededMultiplier; // 0x34(0x4)
		float TimeLimitExceededMinTime; // 0x38(0x4)
		int32_t MinBulkDataSizeForAsyncLoading; // 0x3C(0x4)
		bool UseBackgroundLevelStreaming : 1; // 0x40:0(0x1)
		bool AsyncLoadingUseFullTimeLimit : 1; // 0x40:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		float AsyncLoadingTimeLimit; // 0x44(0x4)
		float PriorityAsyncLoadingExtraTime; // 0x48(0x4)
		float LevelStreamingActorsUpdateTimeLimit; // 0x4C(0x4)
		float PriorityLevelStreamingActorsUpdateExtraTime; // 0x50(0x4)
		int32_t LevelStreamingComponentsRegistrationGranularity; // 0x54(0x4)
		int32_t LevelStreamingAddPrimitiveGranularity; // 0x58(0x4)
		float LevelStreamingUnregisterComponentsTimeLimit; // 0x5C(0x4)
		int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x60(0x4)
		bool FlushStreamingOnExit : 1; // 0x64:0(0x1)
		bool EventDrivenLoaderEnabled : 1; // 0x64:1(0x1)
		unsigned char UnknownData05_7[0x3]; // 0x65(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamingSettings");
			return ret;
		}
	};


	// Class Engine.GarbageCollectionSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UGarbageCollectionSettings : public UDeveloperSettings	
	{
	public:
		float TimeBetweenPurgingPendingKillObjects; // 0x30(0x4)
		bool FlushStreamingOnGC : 1; // 0x34:0(0x1)
		bool AllowParallelGC : 1; // 0x34:1(0x1)
		bool IncrementalBeginDestroyEnabled : 1; // 0x34:2(0x1)
		bool CreateGCClusters : 1; // 0x34:3(0x1)
		bool AssetClusteringEnabled : 1; // 0x34:4(0x1)
		bool ActorClusteringEnabled : 1; // 0x34:5(0x1)
		bool VerifyUObjectsAreNotFGCObjects : 1; // 0x34:6(0x1)
		bool GarbageEliminationEnabled : 1; // 0x34:7(0x1)
		bool DumpObjectCountsToLogWhenMaxObjectLimitExceeded : 1; // 0x35:0(0x1)
		unsigned char UnknownData02_5[0x2]; // 0x36(0x2) UNKNOWN PROPERTY
		int32_t MinGCClusterSize; // 0x38(0x4)
		int32_t NumRetriesBeforeForcingGC; // 0x3C(0x4)
		int32_t MaxObjectsNotConsideredByGC; // 0x40(0x4)
		int32_t MaxObjectsInGame; // 0x44(0x4)
		int32_t MaxObjectsInEditor; // 0x48(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GarbageCollectionSettings");
			return ret;
		}
	};


	// Class Engine.CullDistanceVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x18 (0x2E0 - 0x2C8)
	class ACullDistanceVolume : public AVolume	
	{
	public:
		TArray CullDistances; // 0x2C8(0x10)
		bool bEnabled : 1; // 0x2D8:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x2D9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CullDistanceVolume");
			return ret;
		}
	};


	// Class Engine.CurveBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UCurveBase : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveBase");
			return ret;
		}

		void GetValueRange(float& MinValue, float& MaxValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414526C18
		void GetTimeRange(float& MinTime, float& MaxTime); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414526B38
	};


	// Class Engine.CurveEdPresetCurve
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCurveEdPresetCurve : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveEdPresetCurve");
			return ret;
		}
	};


	// Class Engine.CurveFloat
	// Inherited from UCurveBase -> UObject
	// Size: 0x88 (0xB8 - 0x30)
	class UCurveFloat : public UCurveBase	
	{
	public:
		FRichCurve FloatCurve; // 0x30(0x80)
		bool bIsEventCurve; // 0xB0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveFloat");
			return ret;
		}

		float GetFloatValue(float InTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414526CF8
	};


	// Class Engine.CurveLinearColor
	// Inherited from UCurveBase -> UObject
	// Size: 0x220 (0x250 - 0x30)
	class UCurveLinearColor : public UCurveBase	
	{
	public:
		FRichCurve FloatCurves; // 0x30(0x200)
		float AdjustHue; // 0x230(0x4)
		float AdjustSaturation; // 0x234(0x4)
		float AdjustBrightness; // 0x238(0x4)
		float AdjustBrightnessCurve; // 0x23C(0x4)
		float AdjustVibrance; // 0x240(0x4)
		float AdjustMinAlpha; // 0x244(0x4)
		float AdjustMaxAlpha; // 0x248(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x24C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveLinearColor");
			return ret;
		}

		FLinearColor GetUnadjustedLinearColorValue(float InTime); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414526F98
		FLinearColor GetLinearColorValue(float InTime); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414526EB8
		FLinearColor GetClampedLinearColorValue(float InTime); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414526DD8
	};


	// Class Engine.CurveLinearColorAtlas
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x170 - 0x150)
	class UCurveLinearColorAtlas : public UTexture2D	
	{
	public:
		uint32_t TextureSize; // 0x150(0x4)
		bool bSquareResolution : 1; // 0x154:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x155(0x3) UNKNOWN PROPERTY
		uint32_t TextureHeight; // 0x158(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x15C(0x4) UNKNOWN PROPERTY
		TArray GradientCurves; // 0x160(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveLinearColorAtlas");
			return ret;
		}

		bool GetCurvePosition(UCurveLinearColor InCurve, float& Position); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414527078
	};


	// Class Engine.CurveVector
	// Inherited from UCurveBase -> UObject
	// Size: 0x180 (0x1B0 - 0x30)
	class UCurveVector : public UCurveBase	
	{
	public:
		FRichCurve FloatCurves; // 0x30(0x180)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveVector");
			return ret;
		}

		FVector GetVectorValue(float InTime); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414527158
	};


	// Class Engine.DamageType
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UDamageType : public UObject	
	{
	public:
		bool bCausedByWorld : 1; // 0x28:0(0x1)
		bool bScaleMomentumByMass : 1; // 0x28:1(0x1)
		bool bRadialDamageVelChange : 1; // 0x28:2(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float DamageImpulse; // 0x2C(0x4)
		float DestructibleImpulse; // 0x30(0x4)
		float DestructibleDamageSpreadScale; // 0x34(0x4)
		float DamageFalloff; // 0x38(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DamageType");
			return ret;
		}
	};


	// Class Engine.PrimaryDataAsset
	// Inherited from UDataAsset -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UPrimaryDataAsset : public UDataAsset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrimaryDataAsset");
			return ret;
		}
	};


	// Class Engine.DataDrivenCVarEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem	
	{
	public:
		FMulticastInlineDelegate OnDataDrivenCVarDelegate; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataDrivenCVarEngineSubsystem");
			return ret;
		}

		void OnDataDrivenCVarChanged__DelegateSignature(FString CVarName); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FA1D70
	};


	// Class Engine.DataDrivenConsoleVariableSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UDataDrivenConsoleVariableSettings : public UDeveloperSettings	
	{
	public:
		unsigned char UnknownData02_3[0x18]; // 0x30(0x18) UNKNOWN PROPERTY
		TArray CVarsArray; // 0x48(0x10)
		unsigned char UnknownData03_7[0x10]; // 0x58(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataDrivenConsoleVariableSettings");
			return ret;
		}
	};


	// Class Engine.DataTableFunctionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataTableFunctionLibrary");
			return ret;
		}

		UScriptStruct GetDataTableRowStruct(UDataTable Table); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414527938
		void GetDataTableRowNames(UDataTable Table, TArray& OutRowNames); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414527858
		bool GetDataTableRowFromName(UDataTable Table, FName RowName, FTableRowBase& OutRow); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414527778
		void GetDataTableColumnNames(UDataTable Table, TArray& OutColumnNames); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414527698
		bool GetDataTableColumnNameFromExportName(UDataTable Table, FString ColumnExportName, FName& OutColumnName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145275B8
		void GetDataTableColumnExportNames(UDataTable Table, TArray& OutExportColumnNames); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145274D8
		TArray GetDataTableColumnAsString(UDataTable DataTable, FName PropertyName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145273F8
		void EvaluateCurveTableRow(UCurveTable CurveTable, FName RowName, float InXY, TEnumAsByte& OutResult, float& OutXY, FString ContextString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414527318
		bool DoesDataTableRowExist(UDataTable Table, FName RowName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414527238
	};


	// Class Engine.DebugCameraController
	// Inherited from APlayerController -> AController -> AActor -> UObject
	// Size: 0x190 (0x9D8 - 0x848)
	class ADebugCameraController : public APlayerController	
	{
	public:
		bool bShowSelectedInfo : 1; // 0x848:0(0x1)
		bool bIsFrozenRendering : 1; // 0x848:1(0x1)
		bool bIsOrbitingSelectedActor : 1; // 0x848:2(0x1)
		bool bOrbitPivotUseCenter : 1; // 0x848:3(0x1)
		bool bEnableBufferVisualization : 1; // 0x848:4(0x1)
		bool bEnableBufferVisualizationFullMode : 1; // 0x848:5(0x1)
		bool bIsBufferVisualizationInputSetup : 1; // 0x848:6(0x1)
		bool bLastDisplayEnabled : 1; // 0x848:7(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x849(0x7) UNKNOWN PROPERTY
		UDrawFrustumComponent DrawFrustum; // 0x850(0x8)
		TWeakObjectPtr SelectedActor; // 0x858(0x8)
		TWeakObjectPtr SelectedComponent; // 0x860(0x8)
		FHitResult SelectedHitPoint; // 0x868(0xF8)
		APlayerController OriginalControllerRef; // 0x960(0x8)
		UPlayer OriginalPlayer; // 0x968(0x8)
		float SpeedScale; // 0x970(0x4)
		float InitialMaxSpeed; // 0x974(0x4)
		float InitialAccel; // 0x978(0x4)
		float InitialDecel; // 0x97C(0x4)
		unsigned char UnknownData03_7[0x58]; // 0x980(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugCameraController");
			return ret;
		}

		void ToggleDisplay(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414527F58
		void ShowDebugSelectedInfo(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414527E78
		void SetPawnMovementSpeedScale(float NewSpeedScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414527D98
		void ReceiveOnDeactivate(APlayerController RestoredPC); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414527CB8
		void ReceiveOnActorSelected(AActor NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // Flags: RequiredAPI|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 0x7FF414527BD8
		void ReceiveOnActivate(APlayerController OriginalPC); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF414527AF8
		AActor GetSelectedActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414527A18
	};


	// Class Engine.DebugCameraControllerSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UDebugCameraControllerSettings : public UDeveloperSettings	
	{
	public:
		TArray CycleViewModes; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugCameraControllerSettings");
			return ret;
		}
	};


	// Class Engine.DebugCameraHUD
	// Inherited from AHUD -> AActor -> UObject
	// Size: 0x0 (0x380 - 0x380)
	class ADebugCameraHUD : public AHUD	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugCameraHUD");
			return ret;
		}
	};


	// Class Engine.DebugDrawService
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDebugDrawService : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugDrawService");
			return ret;
		}
	};


	// Class Engine.ReporterBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UReporterBase : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReporterBase");
			return ret;
		}
	};


	// Class Engine.ReporterGraph
	// Inherited from UReporterBase -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UReporterGraph : public UReporterBase	
	{
	public:
		unsigned char UnknownData01_1[0x98]; // 0x30(0x98) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReporterGraph");
			return ret;
		}
	};


	// Class Engine.DecalActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ADecalActor : public AActor	
	{
	public:
		UDecalComponent Decal; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DecalActor");
			return ret;
		}

		void SetDecalMaterial(UMaterialInterface NewDecalMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529B58
		UMaterialInterface GetDecalMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414529A78
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529998
	};


	// Class Engine.DefaultPawn
	// Inherited from APawn -> AActor -> UObject
	// Size: 0x28 (0x338 - 0x310)
	class ADefaultPawn : public APawn	
	{
	public:
		float BaseTurnRate; // 0x310(0x4)
		float BaseLookUpRate; // 0x314(0x4)
		UPawnMovementComponent MovementComponent; // 0x318(0x8)
		USphereComponent CollisionComponent; // 0x320(0x8)
		UStaticMeshComponent MeshComponent; // 0x328(0x8)
		bool bAddDefaultMovementBindings : 1; // 0x330:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x331(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DefaultPawn");
			return ret;
		}

		void TurnAtRate(float Rate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529FB8
		void MoveUp_World(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529ED8
		void MoveRight(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529DF8
		void MoveForward(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529D18
		void LookUpAtRate(float Rate); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414529C38
	};


	// Class Engine.PhysicsVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x10 (0x2D8 - 0x2C8)
	class APhysicsVolume : public AVolume	
	{
	public:
		float TerminalVelocity; // 0x2C8(0x4)
		int32_t Priority; // 0x2CC(0x4)
		float FluidFriction; // 0x2D0(0x4)
		bool bWaterVolume : 1; // 0x2D4:0(0x1)
		bool bPhysicsOnContact : 1; // 0x2D4:1(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x2D5(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsVolume");
			return ret;
		}
	};


	// Class Engine.DefaultPhysicsVolume
	// Inherited from APhysicsVolume -> AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2D8 - 0x2D8)
	class ADefaultPhysicsVolume : public APhysicsVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DefaultPhysicsVolume");
			return ret;
		}
	};


	// Class Engine.DeformableInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDeformableInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeformableInterface");
			return ret;
		}
	};


	// Class Engine.NetDriver
	// Inherited from UObject
	// Size: 0x868 (0x890 - 0x28)
	class UNetDriver : public UObject	
	{
	public:
		unsigned char UnknownData19_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FString NetConnectionClassName; // 0x30(0x10)
		FString ReplicationDriverClassName; // 0x40(0x10)
		FString ReplicationBridgeClassName; // 0x50(0x10)
		FNetDriverReplicationSystemConfig ReplicationSystemConfigServer; // 0x60(0x1C)
		FNetDriverReplicationSystemConfig ReplicationSystemConfigClient; // 0x7C(0x1C)
		int32_t MaxDownloadSize; // 0x98(0x4)
		bool bClampListenServerTickRate : 1; // 0x9C:0(0x1)
		unsigned char UnknownData20_5[0x3]; // 0x9D(0x3) UNKNOWN PROPERTY
		int32_t NetServerMaxTickRate; // 0xA0(0x4)
		unsigned char UnknownData21_6[0x1C]; // 0xA4(0x1C) UNKNOWN PROPERTY
		int32_t MaxNetTickRate; // 0xC0(0x4)
		int32_t MaxInternetClientRate; // 0xC4(0x4)
		int32_t MaxClientRate; // 0xC8(0x4)
		float ServerTravelPause; // 0xCC(0x4)
		float SpawnPrioritySeconds; // 0xD0(0x4)
		float RelevantTimeout; // 0xD4(0x4)
		float KeepAliveTime; // 0xD8(0x4)
		float InitialConnectTimeout; // 0xDC(0x4)
		float ConnectionTimeout; // 0xE0(0x4)
		float GracefulCloseConnectionTimeout; // 0xE4(0x4)
		float TimeoutMultiplierForUnoptimizedBuilds; // 0xE8(0x4)
		unsigned char UnknownData22_6[0x4]; // 0xEC(0x4) UNKNOWN PROPERTY
		UNetConnection ServerConnection; // 0xF0(0x8)
		TArray ClientConnections; // 0xF8(0x10)
		unsigned char UnknownData23_6[0x60]; // 0x108(0x60) UNKNOWN PROPERTY
		int32_t RecentlyDisconnectedTrackingTime; // 0x168(0x4)
		unsigned char UnknownData24_6[0x3C]; // 0x16C(0x3C) UNKNOWN PROPERTY
		UWorld World; // 0x1A8(0x8)
		UPackage WorldPackage; // 0x1B0(0x8)
		unsigned char UnknownData25_6[0x20]; // 0x1B8(0x20) UNKNOWN PROPERTY
		UClass NetConnectionClass; // 0x1D8(0x8)
		UClass ReplicationDriverClass; // 0x1E0(0x8)
		UClass ReplicationBridgeClass; // 0x1E8(0x8)
		unsigned char UnknownData26_6[0x10]; // 0x1F0(0x10) UNKNOWN PROPERTY
		FName NetDriverName; // 0x200(0x4)
		unsigned char UnknownData27_6[0x4]; // 0x204(0x4) UNKNOWN PROPERTY
		TArray ChannelDefinitions; // 0x208(0x10)
		TMap ChannelDefinitionMap; // 0x218(0x50)
		TArray ActorChannelPool; // 0x268(0x10)
		unsigned char UnknownData28_6[0x8]; // 0x278(0x8) UNKNOWN PROPERTY
		UNetworkMetricsDatabase NetworkMetricsDatabase; // 0x280(0x8)
		TMap NetworkMetricsListeners; // 0x288(0x50)
		unsigned char UnknownData29_6[0x29]; // 0x2D8(0x29) UNKNOWN PROPERTY
		unsigned char UnknownBit30 : 1; // 0x301:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit31 : 1; // 0x301:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit32 : 1; // 0x301:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit33 : 1; // 0x301:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit34 : 1; // 0x301:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit35 : 1; // 0x301:5(0x1) UNKNOWN PROPERTY
		bool bNoTimeouts : 1; // 0x301:6(0x1)
		bool bNeverApplyNetworkEmulationSettings : 1; // 0x301:7(0x1)
		unsigned char UnknownData36_5[0x4F6]; // 0x302(0x4F6) UNKNOWN PROPERTY
		UReplicationDriver ReplicationDriver; // 0x7F8(0x8)
		unsigned char UnknownData37_7[0x90]; // 0x800(0x90) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetDriver");
			return ret;
		}
	};


	// Class Engine.DemoNetDriver
	// Inherited from UNetDriver -> UObject
	// Size: 0xCC0 (0x1550 - 0x890)
	class UDemoNetDriver : public UNetDriver	
	{
	public:
		unsigned char UnknownData04_3[0x38]; // 0x890(0x38) UNKNOWN PROPERTY
		TMap RollbackNetStartupActors; // 0x8C8(0x50)
		unsigned char UnknownData05_6[0xE4]; // 0x918(0xE4) UNKNOWN PROPERTY
		float CheckpointSaveMaxMSPerFrame; // 0x9FC(0x4)
		unsigned char UnknownData06_6[0x18]; // 0xA00(0x18) UNKNOWN PROPERTY
		TArray MulticastRecordOptions; // 0xA18(0x10)
		TArray SpectatorControllers; // 0xA28(0x10)
		unsigned char UnknownData07_7[0xB18]; // 0xA38(0xB18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DemoNetDriver");
			return ret;
		}
	};


	// Class Engine.DestructibleInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDestructibleInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DestructibleInterface");
			return ret;
		}
	};


	// Class Engine.TextureLODSettings
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UTextureLODSettings : public UObject	
	{
	public:
		TArray TextureLODGroups; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureLODSettings");
			return ret;
		}
	};


	// Class Engine.DeviceProfile
	// Inherited from UTextureLODSettings -> UObject
	// Size: 0x98 (0xD0 - 0x38)
	class UDeviceProfile : public UTextureLODSettings	
	{
	public:
		FString DeviceType; // 0x38(0x10)
		FString BaseProfileName; // 0x48(0x10)
		bool bIsVisibleForAssets : 1; // 0x58:0(0x1)
		unsigned char UnknownData03_5[0x7]; // 0x59(0x7) UNKNOWN PROPERTY
		UDeviceProfile Parent; // 0x60(0x8)
		unsigned char UnknownData04_6[0x28]; // 0x68(0x28) UNKNOWN PROPERTY
		TArray CVars; // 0x90(0x10)
		TArray MatchingRules; // 0xA0(0x10)
		unsigned char UnknownData05_7[0x20]; // 0xB0(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeviceProfile");
			return ret;
		}
	};


	// Class Engine.DeviceProfileManager
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class UDeviceProfileManager : public UObject	
	{
	public:
		TArray Profiles; // 0x28(0x10)
		TArray BackupProfiles; // 0x38(0x10)
		unsigned char UnknownData01_7[0x48]; // 0x48(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeviceProfileManager");
			return ret;
		}
	};


	// Class Engine.DialogueVoice
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UDialogueVoice : public UObject	
	{
	public:
		TEnumAsByte Gender; // 0x28(0x1)
		TEnumAsByte Plurality; // 0x29(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x2A(0x2) UNKNOWN PROPERTY
		FGuid LocalizationGUID; // 0x2C(0x10)
		unsigned char UnknownData03_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DialogueVoice");
			return ret;
		}
	};


	// Class Engine.DialogueWave
	// Inherited from UObject
	// Size: 0x48 (0x70 - 0x28)
	class UDialogueWave : public UObject	
	{
	public:
		bool bMature : 1; // 0x28:0(0x1)
		bool bOverride_SubtitleOverride : 1; // 0x28:1(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		FString SpokenText; // 0x30(0x10)
		FString SubtitleOverride; // 0x40(0x10)
		TArray ContextMappings; // 0x50(0x10)
		FGuid LocalizationGUID; // 0x60(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DialogueWave");
			return ret;
		}
	};


	// Class Engine.DocumentationActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ADocumentationActor : public AActor	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DocumentationActor");
			return ret;
		}
	};


	// Class Engine.DPICustomScalingRule
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDPICustomScalingRule : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DPICustomScalingRule");
			return ret;
		}
	};


	// Class Engine.EdGraphNode_Documentation
	// Inherited from UEdGraphNode -> UObject
	// Size: 0x20 (0xB8 - 0x98)
	class UEdGraphNode_Documentation : public UEdGraphNode	
	{
	public:
		FString Link; // 0x98(0x10)
		FString Excerpt; // 0xA8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphNode_Documentation");
			return ret;
		}
	};


	// Class Engine.AssetImportData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAssetImportData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetImportData");
			return ret;
		}
	};


	// Class Engine.ThumbnailInfo
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UThumbnailInfo : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ThumbnailInfo");
			return ret;
		}
	};


	// Class Engine.ActorElementAssetDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementAssetDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementAssetDataInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementCounterInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementCounterInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementCounterInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementHierarchyInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementHierarchyInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementHierarchyInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementObjectInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementObjectInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementObjectInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementWorldInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementWorldInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementWorldInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementCounterInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementCounterInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementCounterInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementHierarchyInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementHierarchyInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementHierarchyInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementObjectInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementObjectInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementObjectInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementWorldInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementWorldInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementWorldInterface");
			return ret;
		}
	};


	// Class Engine.EngineElementsLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineElementsLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineElementsLibrary");
			return ret;
		}
	};


	// Class Engine.TypedElementCommonActions
	// Inherited from UObject
	// Size: 0x800 (0x828 - 0x28)
	class UTypedElementCommonActions : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x800]; // 0x28(0x800) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TypedElementCommonActions");
			return ret;
		}

		TArray PasteNormalizedElementsFromString(FScriptTypedElementListProxy& ElementList, UWorld World, FTypedElementPasteOptions& PasteOption, FString InputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452AA38
		TArray PasteElementsFromString(UTypedElementSelectionSet SelectionSet, UWorld World, FTypedElementPasteOptions& PasteOption, FString InputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A958
		TArray K2_PasteNormalizedElements(FScriptTypedElementListProxy& ElementList, UWorld World, FTypedElementPasteOptions& PasteOption); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A878
		TArray K2_PasteElements(UTypedElementSelectionSet SelectionSet, UWorld World, FTypedElementPasteOptions& PasteOption); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A798
		TArray K2_DuplicateSelectedElements(UTypedElementSelectionSet SelectionSet, UWorld World, FVector& LocationOffset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452A6B8
		TArray DuplicateNormalizedElements(FScriptTypedElementListProxy ElementList, UWorld World, FVector& LocationOffset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452A5D8
		bool DeleteSelectedElements(UTypedElementSelectionSet SelectionSet, UWorld World, FTypedElementDeletionOptions& DeletionOptions); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A4F8
		bool DeleteNormalizedElements(FScriptTypedElementListProxy ElementList, UWorld World, UTypedElementSelectionSet InSelectionSet, FTypedElementDeletionOptions& DeletionOptions); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A418
		bool CopySelectedElementsToString(UTypedElementSelectionSet SelectionSet, FString& OutputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A338
		bool CopySelectedElements(UTypedElementSelectionSet SelectionSet); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452A258
		bool CopyNormalizedElementsToString(FScriptTypedElementListProxy& ElementList, FString& OutputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A178
		bool CopyNormalizedElements(FScriptTypedElementListProxy& ElementList); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452A098
	};


	// Class Engine.TypedElementWorldInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UTypedElementWorldInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TypedElementWorldInterface");
			return ret;
		}

		bool SetWorldTransform(FScriptTypedElementHandle& InElementHandle, FTransform& InTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452BD78
		bool SetRelativeTransform(FScriptTypedElementHandle& InElementHandle, FTransform& InTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452BC98
		bool SetPivotOffset(FScriptTypedElementHandle& InElementHandle, FVector& InPivotOffset); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452BBB8
		FScriptTypedElementHandle PromoteElement(FScriptTypedElementHandle& InElementHandle, UWorld OverrideWorld); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452BAD8
		void NotifyMovementStarted(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B9F8
		void NotifyMovementOngoing(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B918
		void NotifyMovementEnded(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B838
		bool IsTemplateElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B758
		bool GetWorldTransform(FScriptTypedElementHandle& InElementHandle, FTransform& OutTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452B678
		bool GetRelativeTransform(FScriptTypedElementHandle& InElementHandle, FTransform& OutTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452B598
		bool GetPivotOffset(FScriptTypedElementHandle& InElementHandle, FVector& OutPivotOffset); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452B4B8
		UWorld GetOwnerWorld(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B3D8
		ULevel GetOwnerLevel(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B2F8
		bool GetBounds(FScriptTypedElementHandle& InElementHandle, FBoxSphereBounds& OutBounds); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452B218
		FScriptTypedElementHandle DuplicateElement(FScriptTypedElementHandle& InElementHandle, UWorld InWorld, FVector& InLocationOffset); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452B138
		bool DeleteElement(FScriptTypedElementHandle& InElementHandle, UWorld InWorld, UTypedElementSelectionSet InSelectionSet, FTypedElementDeletionOptions& InDeletionOptions); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452B058
		bool CanScaleElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452AF78
		bool CanPromoteElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452AE98
		bool CanMoveElement(FScriptTypedElementHandle& InElementHandle, ETypedElementWorldType InWorldType); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452ADB8
		bool CanEditElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452ACD8
		bool CanDuplicateElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452ABF8
		bool CanDeleteElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452AB18
	};


	// Class Engine.ObjectElementAssetDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementAssetDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementAssetDataInterface");
			return ret;
		}
	};


	// Class Engine.ObjectElementCounterInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementCounterInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementCounterInterface");
			return ret;
		}
	};


	// Class Engine.ObjectElementObjectInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementObjectInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementObjectInterface");
			return ret;
		}
	};


	// Class Engine.ObjectElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementAssetDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementAssetDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementAssetDataInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementHierarchyInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementHierarchyInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementHierarchyInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementIdMapTransactor
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USMInstanceElementIdMapTransactor : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementIdMapTransactor");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementPrimitiveCustomDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementPrimitiveCustomDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementPrimitiveCustomDataInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementWorldInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementWorldInterface : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementWorldInterface");
			return ret;
		}
	};


	// Class Engine.LocalMessage
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULocalMessage : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalMessage");
			return ret;
		}
	};


	// Class Engine.EngineMessage
	// Inherited from ULocalMessage -> UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UEngineMessage : public ULocalMessage	
	{
	public:
		FString FailedPlaceMessage; // 0x28(0x10)
		FString MaxedOutMessage; // 0x38(0x10)
		FString EnteredMessage; // 0x48(0x10)
		FString LeftMessage; // 0x58(0x10)
		FString GlobalNameChange; // 0x68(0x10)
		FString SpecEnteredMessage; // 0x78(0x10)
		FString NewPlayerMessage; // 0x88(0x10)
		FString NewSpecMessage; // 0x98(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineMessage");
			return ret;
		}
	};


	// Class Engine.AutoDestroySubsystem
	// Inherited from UTickableWorldSubsystem -> UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x50 - 0x40)
	class UAutoDestroySubsystem : public UTickableWorldSubsystem	
	{
	public:
		TArray ActorsToPoll; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoDestroySubsystem");
			return ret;
		}

		void OnActorEndPlay(AActor Actor, TEnumAsByte EndPlayReason); // Flags: Final|Native|Private 0x7FF41452BE58
	};


	// Class Engine.CancellableAsyncAction
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UCancellableAsyncAction : public UBlueprintAsyncActionBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CancellableAsyncAction");
			return ret;
		}

		bool IsActive(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4116AC410
		void Cancel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4116AC330
	};


	// Class Engine.LODSyncInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULODSyncInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LODSyncInterface");
			return ret;
		}
	};


	// Class Engine.PoseWatchFolder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatchFolder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatchFolder");
			return ret;
		}
	};


	// Class Engine.PoseWatchElement
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatchElement : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatchElement");
			return ret;
		}
	};


	// Class Engine.PoseWatchPoseElement
	// Inherited from UPoseWatchElement -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatchPoseElement : public UPoseWatchElement	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatchPoseElement");
			return ret;
		}
	};


	// Class Engine.PoseWatch
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatch : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatch");
			return ret;
		}
	};


	// Class Engine.ServerStatReplicator
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xC8 (0x358 - 0x290)
	class AServerStatReplicator : public AInfo	
	{
	public:
		bool bUpdateStatNet; // 0x290(0x1)
		bool bOverwriteClientStats; // 0x291(0x1)
		unsigned char UnknownData03_6[0x2]; // 0x292(0x2) UNKNOWN PROPERTY
		uint32_t Channels; // 0x294(0x4)
		uint32_t InRate; // 0x298(0x4)
		uint32_t OutRate; // 0x29C(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x2A0(0x4) UNKNOWN PROPERTY
		uint32_t MaxPacketOverhead; // 0x2A4(0x4)
		uint32_t InRateClientMax; // 0x2A8(0x4)
		uint32_t InRateClientMin; // 0x2AC(0x4)
		uint32_t InRateClientAvg; // 0x2B0(0x4)
		uint32_t InPacketsClientMax; // 0x2B4(0x4)
		uint32_t InPacketsClientMin; // 0x2B8(0x4)
		uint32_t InPacketsClientAvg; // 0x2BC(0x4)
		uint32_t OutRateClientMax; // 0x2C0(0x4)
		uint32_t OutRateClientMin; // 0x2C4(0x4)
		uint32_t OutRateClientAvg; // 0x2C8(0x4)
		uint32_t OutPacketsClientMax; // 0x2CC(0x4)
		uint32_t OutPacketsClientMin; // 0x2D0(0x4)
		uint32_t OutPacketsClientAvg; // 0x2D4(0x4)
		uint32_t NetNumClients; // 0x2D8(0x4)
		uint32_t InPackets; // 0x2DC(0x4)
		uint32_t OutPackets; // 0x2E0(0x4)
		uint32_t InBunches; // 0x2E4(0x4)
		uint32_t OutBunches; // 0x2E8(0x4)
		uint32_t OutLoss; // 0x2EC(0x4)
		uint32_t InLoss; // 0x2F0(0x4)
		uint32_t VoiceBytesSent; // 0x2F4(0x4)
		uint32_t VoiceBytesRecv; // 0x2F8(0x4)
		uint32_t VoicePacketsSent; // 0x2FC(0x4)
		uint32_t VoicePacketsRecv; // 0x300(0x4)
		uint32_t PercentInVoice; // 0x304(0x4)
		uint32_t PercentOutVoice; // 0x308(0x4)
		uint32_t NumActorChannels; // 0x30C(0x4)
		uint32_t NumConsideredActors; // 0x310(0x4)
		uint32_t PrioritizedActors; // 0x314(0x4)
		uint32_t NumRelevantActors; // 0x318(0x4)
		uint32_t NumRelevantDeletedActors; // 0x31C(0x4)
		uint32_t NumReplicatedActorAttempts; // 0x320(0x4)
		uint32_t NumReplicatedActors; // 0x324(0x4)
		uint32_t NumActors; // 0x328(0x4)
		uint32_t NumNetActors; // 0x32C(0x4)
		uint32_t NumDormantActors; // 0x330(0x4)
		uint32_t NumInitiallyDormantActors; // 0x334(0x4)
		uint32_t NumNetGUIDsAckd; // 0x338(0x4)
		uint32_t NumNetGUIDsPending; // 0x33C(0x4)
		uint32_t NumNetGUIDsUnAckd; // 0x340(0x4)
		uint32_t ObjPathBytes; // 0x344(0x4)
		uint32_t NetGUIDOutRate; // 0x348(0x4)
		uint32_t NetGUIDInRate; // 0x34C(0x4)
		uint32_t NetSaturated; // 0x350(0x4)
		unsigned char UnknownData05_7[0x4]; // 0x354(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ServerStatReplicator");
			return ret;
		}
	};


	// Class Engine.SystemTimeTimecodeProvider
	// Inherited from UTimecodeProvider -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class USystemTimeTimecodeProvider : public UTimecodeProvider	
	{
	public:
		FFrameRate FrameRate; // 0x30(0x8)
		bool bGenerateFullFrame; // 0x38(0x1)
		bool bUseHighPerformanceClock; // 0x39(0x1)
		unsigned char UnknownData01_7[0x6]; // 0x3A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SystemTimeTimecodeProvider");
			return ret;
		}
	};


	// Class Engine.ViewportStatsSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UViewportStatsSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x20]; // 0x30(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ViewportStatsSubsystem");
			return ret;
		}

		void RemoveDisplayDelegate(int32_t IndexToRemove); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452C0F8
		void AddTimedDisplay(FText Text, FLinearColor Color, float duration, FVector2D& DisplayOffset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452C018
		int32_t AddDisplayDelegate(FDelegateProperty& Delegate); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452BF38
	};


	// Class Engine.FloatingPawnMovement
	// Inherited from UPawnMovementComponent -> UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x180 - 0x168)
	class UFloatingPawnMovement : public UPawnMovementComponent	
	{
	public:
		float MaxSpeed; // 0x168(0x4)
		float Acceleration; // 0x16C(0x4)
		float Deceleration; // 0x170(0x4)
		float TurningBoost; // 0x174(0x4)
		bool bPositionCorrected : 1; // 0x178:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x179(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FloatingPawnMovement");
			return ret;
		}
	};


	// Class Engine.Font
	// Inherited from UObject
	// Size: 0x1B0 (0x1D8 - 0x28)
	class UFont : public UObject	
	{
	public:
		unsigned char UnknownData05_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		EFontCacheType FontCacheType; // 0x30(0x1)
		EFontRasterizationMode FontRasterizationMode; // 0x31(0x1)
		unsigned char UnknownData06_6[0x2]; // 0x32(0x2) UNKNOWN PROPERTY
		FFontSdfSettings SdfSettings; // 0x34(0x4)
		TArray Characters; // 0x38(0x10)
		TArray Textures; // 0x48(0x10)
		int32_t IsRemapped; // 0x58(0x4)
		float EmScale; // 0x5C(0x4)
		float Ascent; // 0x60(0x4)
		float Descent; // 0x64(0x4)
		float Leading; // 0x68(0x4)
		int32_t Kerning; // 0x6C(0x4)
		FFontImportOptionsData ImportOptions; // 0x70(0xB0)
		int32_t NumCharacters; // 0x120(0x4)
		unsigned char UnknownData07_6[0x4]; // 0x124(0x4) UNKNOWN PROPERTY
		TArray MaxCharHeight; // 0x128(0x10)
		float ScalingFactor; // 0x138(0x4)
		int32_t LegacyFontSize; // 0x13C(0x4)
		FName LegacyFontName; // 0x140(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x144(0x4) UNKNOWN PROPERTY
		FCompositeFont CompositeFont; // 0x148(0x40)
		unsigned char UnknownData09_7[0x50]; // 0x188(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Font");
			return ret;
		}
	};


	// Class Engine.FontFace
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UFontFace : public UObject	
	{
	public:
		unsigned char UnknownData05_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FString SourceFilename; // 0x30(0x10)
		EFontHinting Hinting; // 0x40(0x1)
		EFontLoadingPolicy LoadingPolicy; // 0x41(0x1)
		EFontLayoutMethod LayoutMethod; // 0x42(0x1)
		unsigned char UnknownData06_6[0x1]; // 0x43(0x1) UNKNOWN PROPERTY
		int32_t AscendOverriddenValue; // 0x44(0x4)
		bool bIsAscendOverridden; // 0x48(0x1)
		unsigned char UnknownData07_6[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		int32_t DescendOverriddenValue; // 0x4C(0x4)
		bool bIsDescendOverridden; // 0x50(0x1)
		unsigned char UnknownData08_6[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		int32_t StrikeBrushHeightPercentage; // 0x54(0x4)
		unsigned char UnknownData09_7[0x10]; // 0x58(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FontFace");
			return ret;
		}
	};


	// Class Engine.GameEngine
	// Inherited from UEngine -> UObject
	// Size: 0x58 (0xF78 - 0xF20)
	class UGameEngine : public UEngine	
	{
	public:
		float MaxDeltaTime; // 0xF20(0x4)
		float ServerFlushLogInterval; // 0xF24(0x4)
		UGameInstance GameInstance; // 0xF28(0x8)
		unsigned char UnknownData01_7[0x48]; // 0xF30(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameEngine");
			return ret;
		}
	};


	// Class Engine.AsyncActionHandleSaveGame
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x30(0x10)
		unsigned char UnknownData01_6[0x20]; // 0x40(0x20) UNKNOWN PROPERTY
		USaveGame SaveGameObject; // 0x60(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionHandleSaveGame");
			return ret;
		}

		UAsyncActionHandleSaveGame AsyncSaveGameToSlot(UObject WorldContextObject, USaveGame SaveGameObject, FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452C2B8
		UAsyncActionHandleSaveGame AsyncLoadGameFromSlot(UObject WorldContextObject, FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452C1D8
	};


	// Class Engine.ForceFeedbackEffect
	// Inherited from UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UForceFeedbackEffect : public UObject	
	{
	public:
		TArray ChannelDetails; // 0x28(0x10)
		TMap PerDeviceOverrides; // 0x38(0x50)
		TArray DeviceProperties; // 0x88(0x10)
		float duration; // 0x98(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x9C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ForceFeedbackEffect");
			return ret;
		}
	};


	// Class Engine.InputDeviceProperty
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UInputDeviceProperty : public UObject	
	{
	public:
		float PropertyDuration; // 0x28(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceProperty");
			return ret;
		}

		void ResetDeviceProperty(FPlatformUserId PlatformUser, FInputDeviceId DeviceID, bool bForceReset); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF41452C558
		void EvaluateDeviceProperty(FPlatformUserId PlatformUser, FInputDeviceId DeviceID, float DeltaTime, float duration); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF41452C478
		void ApplyDeviceProperty(FPlatformUserId UserId, FInputDeviceId DeviceID); // Flags: RequiredAPI|Native|Protected 0x7FF41452C398
	};


	// Class Engine.ColorInputDeviceProperty
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UColorInputDeviceProperty : public UInputDeviceProperty	
	{
	public:
		FDeviceColorData ColorData; // 0x30(0x8)
		TMap DeviceOverrideData; // 0x38(0x50)
		unsigned char UnknownData01_7[0x10]; // 0x88(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ColorInputDeviceProperty");
			return ret;
		}
	};


	// Class Engine.ColorInputDeviceCurveProperty
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x70 (0xA0 - 0x30)
	class UColorInputDeviceCurveProperty : public UInputDeviceProperty	
	{
	public:
		FDeviceColorCurveData ColorData; // 0x30(0x10)
		TMap DeviceOverrideData; // 0x40(0x50)
		unsigned char UnknownData01_7[0x10]; // 0x90(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ColorInputDeviceCurveProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerEffect
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UInputDeviceTriggerEffect : public UInputDeviceProperty	
	{
	public:
		FDeviceTriggerBaseData BaseTriggerData; // 0x30(0x2)
		unsigned char UnknownData01_7[0xE]; // 0x32(0xE) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerEffect");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerFeedbackProperty
	// Inherited from UInputDeviceTriggerEffect -> UInputDeviceProperty -> UObject
	// Size: 0x70 (0xB0 - 0x40)
	class UInputDeviceTriggerFeedbackProperty : public UInputDeviceTriggerEffect	
	{
	public:
		FDeviceTriggerFeedbackData TriggerData; // 0x40(0x10)
		TMap DeviceOverrideData; // 0x50(0x50)
		unsigned char UnknownData01_7[0x10]; // 0xA0(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerFeedbackProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerResistanceProperty
	// Inherited from UInputDeviceTriggerEffect -> UInputDeviceProperty -> UObject
	// Size: 0x78 (0xB8 - 0x40)
	class UInputDeviceTriggerResistanceProperty : public UInputDeviceTriggerEffect	
	{
	public:
		FDeviceTriggerTriggerResistanceData TriggerData; // 0x40(0x10)
		TMap DeviceOverrideData; // 0x50(0x50)
		unsigned char UnknownData01_7[0x18]; // 0xA0(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerResistanceProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerVibrationProperty
	// Inherited from UInputDeviceTriggerEffect -> UInputDeviceProperty -> UObject
	// Size: 0x80 (0xC0 - 0x40)
	class UInputDeviceTriggerVibrationProperty : public UInputDeviceTriggerEffect	
	{
	public:
		FDeviceTriggerTriggerVibrationData TriggerData; // 0x40(0x18)
		TMap DeviceOverrideData; // 0x58(0x50)
		unsigned char UnknownData01_7[0x18]; // 0xA8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerVibrationProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceAudioBasedVibrationProperty
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x58 (0x88 - 0x30)
	class UInputDeviceAudioBasedVibrationProperty : public UInputDeviceProperty	
	{
	public:
		FAudioBasedVibrationData Data; // 0x30(0x8)
		TMap DeviceOverrideData; // 0x38(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceAudioBasedVibrationProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x168 (0x198 - 0x30)
	class UInputDeviceSubsystem : public UEngineSubsystem	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x30(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInputHardwareDeviceChanged; // 0x38(0x10)
		TSet ActiveProperties; // 0x48(0x50)
		TSet PropertiesPendingRemoval; // 0x98(0x50)
		unsigned char UnknownData03_7[0xB0]; // 0xE8(0xB0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceSubsystem");
			return ret;
		}

		void RemoveDevicePropertyHandles(TSet& HandlesToRemove); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452CC58
		void RemoveDevicePropertyByHandle(FInputDevicePropertyHandle HandleToRemove); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452CB78
		void RemoveAllDeviceProperties(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452CA98
		bool IsPropertyActive(FInputDevicePropertyHandle Handle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452C9B8
		FHardwareDeviceIdentifier GetMostRecentlyUsedHardwareDevice(FPlatformUserId InUserId); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452C8D8
		FHardwareDeviceIdentifier GetInputDeviceHardwareIdentifier(FInputDeviceId InputDevice); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452C7F8
		UInputDeviceProperty GetActiveDeviceProperty(FInputDevicePropertyHandle Handle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452C718
		FInputDevicePropertyHandle ActivateDevicePropertyOfClass(UClass PropertyClass, FActivateDevicePropertyParams& Params); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41452C638
	};


	// Class Engine.PlayerStateCountLimiterConfig
	// Inherited from UNetObjectCountLimiterConfig -> UNetObjectPrioritizerConfig -> UObject
	// Size: 0x0 (0x40 - 0x40)
	class UPlayerStateCountLimiterConfig : public UNetObjectCountLimiterConfig	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerStateCountLimiterConfig");
			return ret;
		}
	};


	// Class Engine.SaveGame
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USaveGame : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SaveGame");
			return ret;
		}
	};


	// Class Engine.LocalPlayerSaveGame
	// Inherited from USaveGame -> UObject
	// Size: 0x30 (0x58 - 0x28)
	class ULocalPlayerSaveGame : public USaveGame	
	{
	public:
		ULocalPlayer OwningPlayer; // 0x28(0x8)
		FString SaveSlotName; // 0x30(0x10)
		int32_t SavedDataVersion; // 0x40(0x4)
		int32_t LoadedDataVersion; // 0x44(0x4)
		int32_t CurrentSaveRequest; // 0x48(0x4)
		int32_t LastSuccessfulSaveRequest; // 0x4C(0x4)
		int32_t LastErrorSaveRequest; // 0x50(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalPlayerSaveGame");
			return ret;
		}

		bool WasSaveRequested(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452DDD8
		bool WasLoaded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452DCF8
		bool WasLastSaveSuccessful(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452DC18
		bool SaveGameToSlotForLocalPlayer(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452DB38
		void ResetToDefault(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452DA58
		void OnResetToDefault(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41452D978
		void OnPreSave(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41452D898
		void OnPostSave(bool bSuccess); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41452D7B8
		void OnPostLoad(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF41452D6D8
		ULocalPlayerSaveGame LoadOrCreateSaveGameForLocalPlayer(UClass SaveGameClass, APlayerController LocalPlayerController, FString SlotName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452D5F8
		bool IsSaveInProgress(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452D518
		FString GetSaveSlotName(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452D438
		int32_t GetSavedDataVersion(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452D358
		int32_t GetPlatformUserIndex(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452D278
		FPlatformUserId GetPlatformUserId(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452D198
		APlayerController GetLocalPlayerController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452D0B8
		int32_t GetLatestDataVersion(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452CFD8
		int32_t GetInvalidDataVersion(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452CEF8
		bool AsyncSaveGameToSlotForLocalPlayer(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41452CE18
		bool AsyncLoadOrCreateSaveGameForLocalPlayer(UClass SaveGameClass, APlayerController LocalPlayerController, FString SlotName, FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452CD38
	};


	// Class Engine.SpringArmComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x100 (0x320 - 0x220)
	class USpringArmComponent : public USceneComponent	
	{
	public:
		float TargetArmLength; // 0x220(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x224(0x4) UNKNOWN PROPERTY
		FVector SocketOffset; // 0x228(0x18)
		FVector TargetOffset; // 0x240(0x18)
		float ProbeSize; // 0x258(0x4)
		TEnumAsByte ProbeChannel; // 0x25C(0x1)
		unsigned char UnknownData05_6[0x3]; // 0x25D(0x3) UNKNOWN PROPERTY
		bool bDoCollisionTest : 1; // 0x260:0(0x1)
		bool bUsePawnControlRotation : 1; // 0x260:1(0x1)
		bool bInheritPitch : 1; // 0x260:2(0x1)
		bool bInheritYaw : 1; // 0x260:3(0x1)
		bool bInheritRoll : 1; // 0x260:4(0x1)
		bool bEnableCameraLag : 1; // 0x260:5(0x1)
		bool bEnableCameraRotationLag : 1; // 0x260:6(0x1)
		bool bUseCameraLagSubstepping : 1; // 0x260:7(0x1)
		bool bDrawDebugLagMarkers : 1; // 0x261:0(0x1)
		unsigned char UnknownData06_5[0x2]; // 0x262(0x2) UNKNOWN PROPERTY
		float CameraLagSpeed; // 0x264(0x4)
		float CameraRotationLagSpeed; // 0x268(0x4)
		float CameraLagMaxTimeStep; // 0x26C(0x4)
		float CameraLagMaxDistance; // 0x270(0x4)
		bool bClampToMaxPhysicsDeltaTime : 1; // 0x274:0(0x1)
		unsigned char UnknownData07_7[0xAB]; // 0x275(0xAB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpringArmComponent");
			return ret;
		}

		bool IsCollisionFixApplied(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41452E078
		FVector GetUnfixedCameraPosition(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41452DF98
		FRotator GetTargetRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41452DEB8
	};


	// Class Engine.TouchInterface
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UTouchInterface : public UObject	
	{
	public:
		TArray Controls; // 0x28(0x10)
		float ActiveOpacity; // 0x38(0x4)
		float InactiveOpacity; // 0x3C(0x4)
		float TimeUntilDeactive; // 0x40(0x4)
		float TimeUntilReset; // 0x44(0x4)
		float ActivationDelay; // 0x48(0x4)
		bool bPreventRecenter; // 0x4C(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		float StartupDelay; // 0x50(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TouchInterface");
			return ret;
		}
	};


	// Class Engine.GameInstance
	// Inherited from UObject
	// Size: 0x198 (0x1C0 - 0x28)
	class UGameInstance : public UObject	
	{
	public:
		unsigned char UnknownData04_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TArray LocalPlayers; // 0x38(0x10)
		UOnlineSession OnlineSession; // 0x48(0x8)
		TArray ReferencedObjects; // 0x50(0x10)
		unsigned char UnknownData05_6[0x18]; // 0x60(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnPawnControllerChangedDelegates; // 0x78(0x10)
		unsigned char UnknownData06_6[0x18]; // 0x88(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInputDeviceConnectionChange; // 0xA0(0x10)
		FMulticastInlineDelegate OnUserInputDevicePairingChange; // 0xB0(0x10)
		unsigned char UnknownData07_7[0x100]; // 0xC0(0x100) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameInstance");
			return ret;
		}

		void ReceiveShutdown(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FB3F40
		void ReceiveInit(); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FB3E60
		void HandleTravelError(TEnumAsByte FailureType); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FB3D18
		void HandleNetworkError(TEnumAsByte FailureType, bool bIsServer); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF410FB3BD0
		void DebugRemovePlayer(int32_t ControllerId); // Flags: RequiredAPI|Exec|Native|Public 0x7FF410FB3AF0
		void DebugCreatePlayer(int32_t ControllerId); // Flags: RequiredAPI|Exec|Native|Public 0x7FF410FB3A10
	};


	// Class Engine.GameModeBase
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x98 (0x328 - 0x290)
	class AGameModeBase : public AInfo	
	{
	public:
		FString OptionsString; // 0x290(0x10)
		UClass GameSessionClass; // 0x2A0(0x8)
		UClass GameStateClass; // 0x2A8(0x8)
		UClass PlayerControllerClass; // 0x2B0(0x8)
		UClass PlayerStateClass; // 0x2B8(0x8)
		UClass HUDClass; // 0x2C0(0x8)
		UClass DefaultPawnClass; // 0x2C8(0x8)
		UClass SpectatorClass; // 0x2D0(0x8)
		UClass ReplaySpectatorPlayerControllerClass; // 0x2D8(0x8)
		UClass ServerStatReplicatorClass; // 0x2E0(0x8)
		AGameSession GameSession; // 0x2E8(0x8)
		AGameStateBase GameState; // 0x2F0(0x8)
		AServerStatReplicator ServerStatReplicator; // 0x2F8(0x8)
		FText DefaultPlayerName; // 0x300(0x10)
		bool bUseSeamlessTravel : 1; // 0x310:0(0x1)
		bool bStartPlayersAsSpectators : 1; // 0x310:1(0x1)
		bool bPauseable : 1; // 0x310:2(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x311(0x3) UNKNOWN PROPERTY
		EReplicationSystem GameNetDriverReplicationSystem; // 0x314(0x1)
		unsigned char UnknownData03_7[0x13]; // 0x315(0x13) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameModeBase");
			return ret;
		}

		void StartPlay(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B33C00
		APawn SpawnDefaultPawnFor(AController NewPlayer, AActor StartSpot); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B33B20
		APawn SpawnDefaultPawnAtTransform(AController NewPlayer, FTransform& SpawnTransform); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 0x7FF412B33A40
		bool ShouldReset(AActor ActorToReset); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B33960
		void ReturnToMainMenuHost(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B33880
		void RestartPlayerAtTransform(AController NewPlayer, FTransform& SpawnTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF412B337A0
		void RestartPlayerAtPlayerStart(AController NewPlayer, AActor StartSpot); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B336C0
		void RestartPlayer(AController NewPlayer); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B335E0
		void ResetLevel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B33500
		bool PlayerCanRestart(APlayerController Player); // Flags: RequiredAPI|Native|Event|Public|BlueprintCallable|BlueprintEvent 0x7FF412B33420
		bool MustSpectate(APlayerController NewPlayerController); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF412B33340
		void K2_PostLogin(APlayerController NewPlayer); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412B33260
		void K2_OnSwapPlayerControllers(APlayerController OldPC, APlayerController NewPC); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF412B33180
		void K2_OnRestartPlayer(AController NewPlayer); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412B330A0
		void K2_OnLogout(AController ExitingController); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412B32FC0
		void K2_OnChangeName(AController Other, FString NewName, bool bNameChange); // Flags: RequiredAPI|Event|Public|BlueprintEvent 0x7FF412B32EE0
		AActor K2_FindPlayerStart(AController Player, FString IncomingName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure 0x7FF412B32E00
		void InitStartSpot(AActor StartSpot, AController NewPlayer); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B32D20
		void InitializeHUDForPlayer(APlayerController NewPlayer); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF412B32C40
		bool HasMatchStarted(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412B32B60
		bool HasMatchEnded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412B32A80
		void HandleStartingNewPlayer(APlayerController NewPlayer); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B329A0
		int32_t GetNumSpectators(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B328C0
		int32_t GetNumPlayers(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B327E0
		UClass GetDefaultPawnClassForController(AController InController); // Flags: RequiredAPI|Native|Event|Public|BlueprintCallable|BlueprintEvent 0x7FF412B32700
		AActor FindPlayerStart(AController Player, FString IncomingName); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B32620
		AActor ChoosePlayerStart(AController Player); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B32540
		void ChangeName(AController Controller, FString NewName, bool bNameChange); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B32460
		bool CanSpectate(APlayerController Viewer, APlayerState ViewTarget); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent 0x7FF412B12380
	};


	// Class Engine.GameMode
	// Inherited from AGameModeBase -> AInfo -> AActor -> UObject
	// Size: 0x48 (0x370 - 0x328)
	class AGameMode : public AGameModeBase	
	{
	public:
		FName MatchState; // 0x328(0x4)
		bool bDelayedStart : 1; // 0x32C:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x32D(0x3) UNKNOWN PROPERTY
		int32_t NumSpectators; // 0x330(0x4)
		int32_t NumPlayers; // 0x334(0x4)
		int32_t NumBots; // 0x338(0x4)
		float MinRespawnDelay; // 0x33C(0x4)
		int32_t NumTravellingPlayers; // 0x340(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x344(0x4) UNKNOWN PROPERTY
		UClass EngineMessageClass; // 0x348(0x8)
		TArray InactivePlayerArray; // 0x350(0x10)
		float InactivePlayerStateLifeSpan; // 0x360(0x4)
		int32_t MaxInactivePlayers; // 0x364(0x4)
		bool bHandleDedicatedServerReplays; // 0x368(0x1)
		unsigned char UnknownData05_7[0x7]; // 0x369(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameMode");
			return ret;
		}

		void StartMatch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B344C0
		void Say(FString Msg); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable 0x7FF412B343E0
		void RestartGame(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B34300
		bool ReadyToStartMatch(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF412B34220
		bool ReadyToEndMatch(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF412B34140
		void K2_OnSetMatchState(FName NewState); // Flags: RequiredAPI|Event|Protected|BlueprintEvent 0x7FF412B34060
		bool IsMatchInProgress(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412B33F80
		FName GetMatchState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412B33EA0
		void EndMatch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B33DC0
		void AbortMatch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF412B33CE0
	};


	// Class Engine.GameplayStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UGameplayStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameplayStatics");
			return ret;
		}

		void UnRetainAllSoundsInSoundClass(USoundClass InSoundClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414535BD8
		void UnloadStreamLevelBySoftObjectPtr(UObject WorldContextObject, TWeakObjectPtr Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414535AF8
		void UnloadStreamLevel(UObject WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414535A18
		FVector TransformWorldToFirstPerson(FMinimalViewInfo& ViewInfo, FVector& WorldPosition, bool bIgnoreFirstPersonScale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414535938
		bool SuggestProjectileVelocity_MovingTarget(UObject WorldContextObject, FVector& OutLaunchVelocity, FVector ProjectileStartLocation, AActor TargetActor, FVector TargetLocationOffset, double GravityZOverride, double TimeToTarget, TEnumAsByte DrawDebugType, float DrawDebugTime, FLinearColor DrawDebugColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414535858
		bool SuggestProjectileVelocity_CustomArc(UObject WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414535778
		UAudioComponent SpawnSoundAttached(USoundBase Sound, USceneComponent AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation AttenuationSettings, USoundConcurrency ConcurrencySettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414535698
		UAudioComponent SpawnSoundAtLocation(UObject WorldContextObject, USoundBase Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation AttenuationSettings, USoundConcurrency ConcurrencySettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF4145355B8
		UAudioComponent SpawnSound2D(UObject WorldContextObject, USoundBase Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 0x7FF4145354D8
		UObject SpawnObject(UClass ObjectClass, UObject Outer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145353F8
		UForceFeedbackComponent SpawnForceFeedbackAttached(UForceFeedbackEffect ForceFeedbackEffect, USceneComponent AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414535318
		UForceFeedbackComponent SpawnForceFeedbackAtLocation(UObject WorldContextObject, UForceFeedbackEffect ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414535238
		UParticleSystemComponent SpawnEmitterAttached(UParticleSystem EmitterTemplate, USceneComponent AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414535158
		UParticleSystemComponent SpawnEmitterAtLocation(UObject WorldContextObject, UParticleSystem EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414535078
		UAudioComponent SpawnDialogueAttached(UDialogueWave Dialogue, FDialogueContext& Context, USceneComponent AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414534F98
		UAudioComponent SpawnDialogueAtLocation(UObject WorldContextObject, UDialogueWave Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414534EB8
		UAudioComponent SpawnDialogue2D(UObject WorldContextObject, UDialogueWave Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414534DD8
		UDecalComponent SpawnDecalAttached(UMaterialInterface DecalMaterial, FVector DecalSize, USceneComponent AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte LocationType, float LifeSpan); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414534CF8
		UDecalComponent SpawnDecalAtLocation(UObject WorldContextObject, UMaterialInterface DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414534C18
		void SetWorldOriginLocation(UObject WorldContextObject, FIntVector NewLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414534B38
		void SetViewportMouseCaptureMode(UObject WorldContextObject, EMouseCaptureMode MouseCaptureMode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414534A58
		void SetSubtitlesEnabled(bool bEnabled); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414534978
		void SetSoundMixClassOverride(UObject WorldContextObject, USoundMix InSoundMixModifier, USoundClass InSoundClass, float Volume, float pitch, float FadeInTime, bool bApplyToChildren); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414534898
		void SetSoundClassDistanceScale(UObject WorldContextObject, USoundClass SoundClass, float DistanceAttenuationScale, float TimeSec); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 0x7FF4145347B8
		void SetPlayerPlatformUserId(APlayerController PlayerController, FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145346D8
		void SetPlayerControllerID(APlayerController Player, int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145345F8
		void SetMaxAudioChannelsScaled(UObject WorldContextObject, float MaxChannelCountScale); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414534518
		void SetGlobalTimeDilation(UObject WorldContextObject, float TimeDilation); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414534438
		void SetGlobalPitchModulation(UObject WorldContextObject, float PitchModulation, float TimeSec); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 0x7FF414534358
		void SetGlobalListenerFocusParameters(UObject WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 0x7FF414534278
		bool SetGamePaused(UObject WorldContextObject, bool bPaused); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414534198
		void SetForceDisableSplitscreen(UObject WorldContextObject, bool bDisable); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145340B8
		void SetEnableWorldRendering(UObject WorldContextObject, bool bEnable); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533FD8
		void SetBaseSoundMix(UObject WorldContextObject, USoundMix InSoundMix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533EF8
		bool SetActiveSpatialPluginByName(UObject WorldContextObject, FName InPluginName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533E18
		bool SaveGameToSlot(USaveGame SaveGameObject, FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533D38
		void RemovePlayer(APlayerController Player, bool bDestroyPawn); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533C58
		FVector RebaseZeroOriginOntoLocal(UObject WorldContextObject, FVector WorldLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414533B78
		FVector RebaseLocalOriginOntoZero(UObject WorldContextObject, FVector WorldLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414533A98
		void PushSoundMixModifier(UObject WorldContextObject, USoundMix InSoundMixModifier); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145339B8
		bool ProjectWorldToScreen(APlayerController Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145338D8
		void PrimeSound(USoundBase InSound); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145337F8
		void PrimeAllSoundsInSoundClass(USoundClass InSoundClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533718
		void PopSoundMixModifier(UObject WorldContextObject, USoundMix InSoundMixModifier); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533638
		void PlayWorldCameraShake(UObject WorldContextObject, UClass Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414533558
		void PlaySoundAtLocation(UObject WorldContextObject, USoundBase Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation AttenuationSettings, USoundConcurrency ConcurrencySettings, AActor OwningActor, UInitialActiveSoundParams InitialParams); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414533478
		void PlaySound2D(UObject WorldContextObject, USoundBase Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency ConcurrencySettings, AActor OwningActor, bool bIsUISound); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 0x7FF414533398
		void PlayDialogueAtLocation(UObject WorldContextObject, UDialogueWave Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation AttenuationSettings); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145332B8
		void PlayDialogue2D(UObject WorldContextObject, UDialogueWave Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145331D8
		FString ParseOption(FString Options, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145330F8
		void OpenLevelBySoftObjectPtr(UObject WorldContextObject, TWeakObjectPtr Level, bool bAbsolute, FString Options); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414533018
		void OpenLevel(UObject WorldContextObject, FName LevelName, bool bAbsolute, FString Options); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414532F38
		bool ObjectIsA(UObject Object, UClass ObjectClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532E58
		FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, UPhysicalMaterial PhysMat, AActor HitActor, UPrimitiveComponent HitComponent, FName HitBoneName, FName BoneName, int32_t HitItem, int32_t ElementIndex, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414532D78
		void LoadStreamLevelBySoftObjectPtr(UObject WorldContextObject, TWeakObjectPtr Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414532C98
		void LoadStreamLevel(UObject WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414532BB8
		USaveGame LoadGameFromSlot(FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414532AD8
		bool IsSplitscreenForceDisabled(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145329F8
		bool IsGamePaused(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532918
		bool IsAnyLocalPlayerCameraWithinRange(UObject WorldContextObject, FVector& Location, float MaximumRange); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414532838
		bool HasOption(FString Options, FString InKey); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532758
		bool HasLaunchOption(FString OptionToCheck); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532678
		int32_t GrassOverlappingSphereCount(UObject WorldContextObject, UStaticMesh StaticMesh, FVector CenterPosition, float Radius); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414532598
		FIntVector GetWorldOriginLocation(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145324B8
		double GetWorldDeltaSeconds(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145323D8
		void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix& ViewMatrix, FMatrix& ProjectionMatrix, FMatrix& ViewProjectionMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145322F8
		EMouseCaptureMode GetViewportMouseCaptureMode(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532218
		double GetUnpausedTimeSeconds(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532138
		double GetTimeSeconds(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414532058
		TEnumAsByte GetSurfaceType(FHitResult& Hit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414531F78
		ULevelStreaming GetStreamingLevel(UObject WorldContextObject, FName PackageName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531E98
		double GetRealTimeSeconds(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531DB8
		APlayerState GetPlayerStateFromUniqueNetId(UObject WorldContextObject, FUniqueNetIdRepl& UniqueID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414531CD8
		APlayerState GetPlayerState(UObject WorldContextObject, int32_t PlayerStateIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531BF8
		APawn GetPlayerPawn(UObject WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531B18
		int32_t GetPlayerControllerID(APlayerController Player); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531A38
		APlayerController GetPlayerControllerFromPlatformUser(UObject WorldContextObject, FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531958
		APlayerController GetPlayerControllerFromID(UObject WorldContextObject, int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531878
		APlayerController GetPlayerController(UObject WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531798
		ACharacter GetPlayerCharacter(UObject WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145316B8
		APlayerCameraManager GetPlayerCameraManager(UObject WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145315D8
		FString GetPlatformName(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145314F8
		UClass GetObjectClass(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531418
		int32_t GetNumPlayerStates(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531338
		int32_t GetNumPlayerControllers(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531258
		int32_t GetNumLocalPlayerControllers(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414531178
		int32_t GetMaxAudioChannelCount(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414531098
		void GetKeyValue(FString Pair, FString& Key, FString& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414530FB8
		int32_t GetIntOption(FString Options, FString Key, int32_t DefaultValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414530ED8
		float GetGlobalTimeDilation(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414530DF8
		AGameStateBase GetGameState(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414530D18
		AGameModeBase GetGameMode(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414530C38
		UGameInstance GetGameInstance(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414530B58
		bool GetEnableWorldRendering(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414530A78
		UReverbEffect GetCurrentReverbEffect(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414530998
		FString GetCurrentLevelName(UObject WorldContextObject, bool bRemovePrefixString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145308B8
		bool GetClosestListenerLocation(UObject WorldContextObject, FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, FVector& ListenerPosition); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145307D8
		TArray GetAvailableSpatialPluginNames(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145306F8
		double GetAudioTimeSeconds(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414530618
		void GetAllActorsWithTag(UObject WorldContextObject, FName tag, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414530538
		void GetAllActorsWithInterface(UObject WorldContextObject, UClass Interface, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414530458
		void GetAllActorsOfClassWithTag(UObject WorldContextObject, UClass ActorClass, FName tag, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414530378
		void GetAllActorsOfClass(UObject WorldContextObject, UClass ActorClass, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414530298
		AActor GetActorOfClass(UObject WorldContextObject, UClass ActorClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145301B8
		void GetActorArrayBounds(TArray& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145300D8
		FVector GetActorArrayAverageLocation(TArray& Actors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452FFF8
		FName GetActiveSpatialPluginName(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452FF18
		void GetAccurateRealTime(int32_t& Seconds, double& PartialSeconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41452FE38
		void FlushLevelStreaming(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452FD58
		AActor FinishSpawningActor(AActor Actor, FTransform& SpawnTransform, ESpawnActorScaleMethod TransformScaleMethod); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452FC78
		AActor FindNearestActor(FVector Origin, TArray& ActorsToCheck, float& Distance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41452FB98
		bool FindCollisionUV(FHitResult& Hit, int32_t UVChannel, FVector2D& UV); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41452FAB8
		void EnableLiveStreaming(bool Enable); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F9D8
		bool DoesSaveGameExist(FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F8F8
		bool DeprojectScreenToWorld(APlayerController Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41452F818
		bool DeprojectSceneCaptureToWorld(ASceneCapture2D SceneCapture2D, FVector2D& TargetUV, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41452F738
		bool DeprojectSceneCaptureComponentToWorld(USceneCaptureComponent2D SceneCaptureComponent2D, FVector2D& TargetUV, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41452F658
		bool DeleteGameInSlot(FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F578
		void DeactivateReverbEffect(UObject WorldContextObject, FName TagName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F498
		UAudioComponent CreateSound2D(UObject WorldContextObject, USoundBase Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 0x7FF41452F3B8
		USaveGame CreateSaveGameObject(UClass SaveGameClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F2D8
		APlayerController CreatePlayerFromPlatformUser(UObject WorldContextObject, FPlatformUserId UserId, bool bSpawnPlayerController); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F1F8
		APlayerController CreatePlayer(UObject WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F118
		void ClearSoundMixModifiers(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452F038
		void ClearSoundMixClassOverride(UObject WorldContextObject, USoundMix InSoundMixModifier, USoundClass InSoundClass, float FadeOutTime); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452EF58
		void CancelAsyncLoading(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452EE78
		void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, UPhysicalMaterial& PhysMat, AActor& HitActor, UPrimitiveComponent& HitComponent, FName& HitBoneName, FName& BoneName, int32_t& HitItem, int32_t& ElementIndex, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41452ED98
		bool BlueprintSuggestProjectileVelocity(UObject WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, bool bAcceptClosestOnNoSolutions); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452ECB8
		bool Blueprint_PredictProjectilePath_ByTraceChannel(UObject WorldContextObject, FHitResult& OutHit, TArray& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452EBD8
		bool Blueprint_PredictProjectilePath_ByObjectType(UObject WorldContextObject, FHitResult& OutHit, TArray& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452EAF8
		bool Blueprint_PredictProjectilePath_Advanced(UObject WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41452EA18
		AActor BeginSpawningActorFromBlueprint(UObject WorldContextObject, UBlueprint Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452E938
		AActor BeginDeferredActorSpawnFromClass(UObject WorldContextObject, UClass ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, AActor Owner, ESpawnActorScaleMethod TransformScaleMethod); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452E858
		bool AreSubtitlesEnabled(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41452E778
		bool AreAnyListenersWithinRange(UObject WorldContextObject, FVector& Location, float MaximumRange); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452E698
		bool ApplyRadialDamageWithFalloff(UObject WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass DamageTypeClass, TArray& IgnoreActors, AActor DamageCauser, AController InstigatedByController, TEnumAsByte DamagePreventionChannel); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452E5B8
		bool ApplyRadialDamage(UObject WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, UClass DamageTypeClass, TArray& IgnoreActors, AActor DamageCauser, AController InstigatedByController, bool bDoFullDamage, TEnumAsByte DamagePreventionChannel); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452E4D8
		float ApplyPointDamage(AActor DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, AController EventInstigator, AActor DamageCauser, UClass DamageTypeClass); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41452E3F8
		float ApplyDamage(AActor DamagedActor, float BaseDamage, AController EventInstigator, AActor DamageCauser, UClass DamageTypeClass); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 0x7FF41452E318
		void AnnounceAccessibleString(FString AnnouncementString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452E238
		void ActivateReverbEffect(UObject WorldContextObject, UReverbEffect ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41452E158
	};


	// Class Engine.GameSession
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x28 (0x2B8 - 0x290)
	class AGameSession : public AInfo	
	{
	public:
		int32_t MaxSpectators; // 0x290(0x4)
		int32_t MaxPlayers; // 0x294(0x4)
		int32_t MaxPartySize; // 0x298(0x4)
		char MaxSplitscreensPerConnection; // 0x29C(0x1)
		bool bRequiresPushToTalk; // 0x29D(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x29E(0x2) UNKNOWN PROPERTY
		FName SessionName; // 0x2A0(0x4)
		unsigned char UnknownData03_7[0x14]; // 0x2A4(0x14) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameSession");
			return ret;
		}
	};


	// Class Engine.GameStateBase
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x58 (0x2E8 - 0x290)
	class AGameStateBase : public AInfo	
	{
	public:
		UClass GameModeClass; // 0x290(0x8)
		AGameModeBase AuthorityGameMode; // 0x298(0x8)
		UClass SpectatorClass; // 0x2A0(0x8)
		TArray PlayerArray; // 0x2A8(0x10)
		bool bReplicatedHasBegunPlay; // 0x2B8(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x2B9(0x3) UNKNOWN PROPERTY
		float ReplicatedWorldTimeSeconds; // 0x2BC(0x4)
		double ReplicatedWorldTimeSecondsDouble; // 0x2C0(0x8)
		float ServerWorldTimeSecondsDelta; // 0x2C8(0x4)
		float ServerWorldTimeSecondsUpdateFrequency; // 0x2CC(0x4)
		unsigned char UnknownData03_7[0x18]; // 0x2D0(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameStateBase");
			return ret;
		}

		void OnRep_SpectatorClass(); // Flags: RequiredAPI|Native|Protected 0x7FF412D78428
		void OnRep_ReplicatedWorldTimeSecondsDouble(); // Flags: RequiredAPI|Native|Protected 0x7FF412D78348
		void OnRep_ReplicatedWorldTimeSeconds(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF412D78268
		void OnRep_ReplicatedHasBegunPlay(); // Flags: RequiredAPI|Native|Protected 0x7FF412D78188
		void OnRep_GameModeClass(); // Flags: RequiredAPI|Native|Protected 0x7FF412D780A8
		bool HasMatchStarted(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412D77FC8
		bool HasMatchEnded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412D77EE8
		bool HasBegunPlay(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412D77E08
		double GetServerWorldTimeSeconds(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412D77D28
		float GetPlayerStartTime(AController Controller); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412D77C48
		float GetPlayerRespawnDelay(AController Controller); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF412D77B68
	};


	// Class Engine.GameState
	// Inherited from AGameStateBase -> AInfo -> AActor -> UObject
	// Size: 0x18 (0x300 - 0x2E8)
	class AGameState : public AGameStateBase	
	{
	public:
		FName MatchState; // 0x2E8(0x4)
		FName PreviousMatchState; // 0x2EC(0x4)
		int32_t ElapsedTime; // 0x2F0(0x4)
		unsigned char UnknownData01_7[0xC]; // 0x2F4(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameState");
			return ret;
		}

		void OnRep_MatchState(); // Flags: RequiredAPI|Native|Public 0x7FF412D785E8
		void OnRep_ElapsedTime(); // Flags: RequiredAPI|Native|Public 0x7FF412D78508
	};


	// Class Engine.GameUserSettings
	// Inherited from UObject
	// Size: 0x120 (0x148 - 0x28)
	class UGameUserSettings : public UObject	
	{
	public:
		bool bUseVSync; // 0x28(0x1)
		bool bUseDynamicResolution; // 0x29(0x1)
		unsigned char UnknownData06_6[0x5E]; // 0x2A(0x5E) UNKNOWN PROPERTY
		uint32_t ResolutionSizeX; // 0x88(0x4)
		uint32_t ResolutionSizeY; // 0x8C(0x4)
		uint32_t LastUserConfirmedResolutionSizeX; // 0x90(0x4)
		uint32_t LastUserConfirmedResolutionSizeY; // 0x94(0x4)
		int32_t WindowPosX; // 0x98(0x4)
		int32_t WindowPosY; // 0x9C(0x4)
		int32_t FullscreenMode; // 0xA0(0x4)
		int32_t LastConfirmedFullscreenMode; // 0xA4(0x4)
		int32_t PreferredFullscreenMode; // 0xA8(0x4)
		uint32_t Version; // 0xAC(0x4)
		int32_t AudioQualityLevel; // 0xB0(0x4)
		int32_t LastConfirmedAudioQualityLevel; // 0xB4(0x4)
		float FrameRateLimit; // 0xB8(0x4)
		unsigned char UnknownData07_6[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY
		int32_t DesiredScreenWidth; // 0xC0(0x4)
		bool bUseDesiredScreenHeight; // 0xC4(0x1)
		unsigned char UnknownData08_6[0x3]; // 0xC5(0x3) UNKNOWN PROPERTY
		int32_t DesiredScreenHeight; // 0xC8(0x4)
		int32_t LastUserConfirmedDesiredScreenWidth; // 0xCC(0x4)
		int32_t LastUserConfirmedDesiredScreenHeight; // 0xD0(0x4)
		float LastRecommendedScreenWidth; // 0xD4(0x4)
		float LastRecommendedScreenHeight; // 0xD8(0x4)
		float LastCPUBenchmarkResult; // 0xDC(0x4)
		float LastGPUBenchmarkResult; // 0xE0(0x4)
		unsigned char UnknownData09_6[0x4]; // 0xE4(0x4) UNKNOWN PROPERTY
		TArray LastCPUBenchmarkSteps; // 0xE8(0x10)
		TArray LastGPUBenchmarkSteps; // 0xF8(0x10)
		float LastGPUBenchmarkMultiplier; // 0x108(0x4)
		bool bUseHDRDisplayOutput; // 0x10C(0x1)
		unsigned char UnknownData10_6[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		int32_t HDRDisplayOutputNits; // 0x110(0x4)
		unsigned char UnknownData11_6[0x24]; // 0x114(0x24) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x138(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameUserSettings");
			return ret;
		}

		void ValidateSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539AD8
		bool SupportsHDRDisplayOutput(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145399F8
		void SetVSyncEnabled(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539918
		void SetVisualEffectQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539838
		void SetViewDistanceQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539758
		void SetToDefaults(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539678
		void SetTextureQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539598
		void SetShadowQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145394B8
		void SetShadingQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145393D8
		void SetScreenResolution(FIntPoint Resolution); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145392F8
		void SetResolutionScaleValueEx(float NewScaleValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539218
		void SetResolutionScaleNormalized(float NewScaleNormalized); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539138
		void SetReflectionQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414539058
		void SetPostProcessingQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538F78
		void SetOverallScalabilityLevel(int32_t Value); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538E98
		void SetGlobalIlluminationQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538DB8
		void SetFullscreenMode(TEnumAsByte InFullscreenMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538CD8
		void SetFrameRateLimit(float NewLimit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538BF8
		void SetFoliageQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538B18
		void SetDynamicResolutionEnabled(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538A38
		void SetBenchmarkFallbackValues(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538958
		void SetAudioQualityLevel(int32_t QualityLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538878
		void SetAntiAliasingQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538798
		void SaveSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145386B8
		void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145385D8
		void RevertVideoMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145384F8
		void ResetToCurrentSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538418
		void LoadSettings(bool bForceReload); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414538338
		bool IsVSyncEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414538258
		bool IsVSyncDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414538178
		bool IsScreenResolutionDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414538098
		bool IsHDREnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537FB8
		bool IsFullscreenModeDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537ED8
		bool IsDynamicResolutionEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537DF8
		bool IsDynamicResolutionDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537D18
		bool IsDirty(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537C38
		int32_t GetVisualEffectQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537B58
		int32_t GetViewDistanceQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537A78
		int32_t GetTextureQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537998
		int32_t GetSyncInterval(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145378B8
		int32_t GetShadowQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145377D8
		int32_t GetShadingQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145376F8
		FIntPoint GetScreenResolution(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414537618
		float GetResolutionScaleNormalized(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537538
		void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414537458
		int32_t GetReflectionQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414537378
		float GetRecommendedResolutionScale(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414537298
		TEnumAsByte GetPreferredFullscreenMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145371B8
		int32_t GetPostProcessingQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145370D8
		int32_t GetOverallScalabilityLevel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414536FF8
		FIntPoint GetLastConfirmedScreenResolution(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414536F18
		TEnumAsByte GetLastConfirmedFullscreenMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414536E38
		int32_t GetGlobalIlluminationQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414536D58
		UGameUserSettings GetGameUserSettings(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414536C78
		TEnumAsByte GetFullscreenMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414536B98
		float GetFrameRateLimit(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414536AB8
		int32_t GetFramePace(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145369D8
		int32_t GetFoliageQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145368F8
		FIntPoint GetDesktopResolution(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414536818
		FIntPoint GetDefaultWindowPosition(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414536738
		TEnumAsByte GetDefaultWindowMode(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414536658
		float GetDefaultResolutionScale(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414536578
		FIntPoint GetDefaultResolution(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414536498
		int32_t GetCurrentHDRDisplayNits(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145363B8
		int32_t GetAudioQualityLevel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145362D8
		int32_t GetAntiAliasingQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145361F8
		void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414536118
		void ConfirmVideoMode(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414536038
		void ApplySettings(bool bCheckForCommandLineOverrides); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414535F58
		void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414535E78
		void ApplyNonResolutionSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414535D98
		void ApplyHardwareBenchmarkResults(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414535CB8
	};


	// Class Engine.ScriptViewportClient
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UScriptViewportClient : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ScriptViewportClient");
			return ret;
		}
	};


	// Class Engine.GameViewportClient
	// Inherited from UScriptViewportClient -> UObject
	// Size: 0x370 (0x3A8 - 0x38)
	class UGameViewportClient : public UScriptViewportClient	
	{
	public:
		unsigned char UnknownData04_3[0x8]; // 0x38(0x8) UNKNOWN PROPERTY
		UConsole ViewportConsole; // 0x40(0x8)
		TArray DebugProperties; // 0x48(0x10)
		unsigned char UnknownData05_6[0x10]; // 0x58(0x10) UNKNOWN PROPERTY
		int32_t MaxSplitscreenPlayers; // 0x68(0x4)
		unsigned char UnknownData06_6[0xC]; // 0x6C(0xC) UNKNOWN PROPERTY
		UWorld World; // 0x78(0x8)
		UGameInstance GameInstance; // 0x80(0x8)
		unsigned char UnknownData07_7[0x320]; // 0x88(0x320) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameViewportClient");
			return ret;
		}

		void SSSwapControllers(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414539D78
		void ShowTitleSafeArea(); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414539C98
		void SetConsoleTarget(int32_t PlayerIndex); // Flags: RequiredAPI|Exec|Native|Public 0x7FF414539BB8
	};


	// Class Engine.HLODProxy
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class UHLODProxy : public UObject	
	{
	public:
		TArray ProxyMeshes; // 0x28(0x10)
		TMap HLODActors; // 0x38(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODProxy");
			return ret;
		}
	};


	// Class Engine.HLODEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UHLODEngineSubsystem : public UEngineSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.HLODProxyDesc
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHLODProxyDesc : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODProxyDesc");
			return ret;
		}
	};


	// Class Engine.ImportantToggleSettingInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UImportantToggleSettingInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ImportantToggleSettingInterface");
			return ret;
		}
	};


	// Class Engine.InheritableComponentHandler
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UInheritableComponentHandler : public UObject	
	{
	public:
		TArray Records; // 0x28(0x10)
		TArray UnnecessaryComponents; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InheritableComponentHandler");
			return ret;
		}
	};


	// Class Engine.InputDelegateBinding
	// Inherited from UDynamicBlueprintBinding -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInputDelegateBinding : public UDynamicBlueprintBinding	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputActionDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputActionDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray InputActionDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputActionDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputAxisDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputAxisDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray InputAxisDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputAxisDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputAxisKeyDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputAxisKeyDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray InputAxisKeyDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputAxisKeyDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputDeviceLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInputDeviceLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceLibrary");
			return ret;
		}

		FPlatformUserId PlatformUserId_None(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453B198
		bool NotEqual_PlatformUserId(FPlatformUserId A, FPlatformUserId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453B0B8
		bool NotEqual_InputDeviceId(FInputDeviceId A, FInputDeviceId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453AFD8
		bool IsValidPlatformId(FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453AEF8
		bool IsValidInputDevice(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453AE18
		bool IsUnpairedUserId(FPlatformUserId PlatformId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453AD38
		bool IsInputDeviceMappedToUnpairedUser(FInputDeviceId InputDevice); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453AC58
		bool IsDevicePropertyHandleValid(FInputDevicePropertyHandle& InHandle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453AB78
		FInputDeviceId InputDeviceId_None(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453AA98
		FPlatformUserId GetUserForUnpairedInputDevices(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453A9B8
		FPlatformUserId GetUserForInputDevice(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41453A8D8
		FPlatformUserId GetPrimaryPlatformUser(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453A7F8
		FInputDeviceId GetPrimaryInputDeviceForUser(FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41453A718
		APlayerController GetPlayerControllerFromPlatformUser(FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41453A638
		APlayerController GetPlayerControllerFromInputDevice(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41453A558
		EInputDeviceConnectionState GetInputDeviceConnectionState(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41453A478
		FInputDeviceId GetDefaultInputDevice(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453A398
		int32_t GetAllInputDevicesForUser(FPlatformUserId UserId, TArray& OutInputDevices); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453A2B8
		int32_t GetAllInputDevices(TArray& OutInputDevices); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453A1D8
		int32_t GetAllConnectedInputDevices(TArray& OutInputDevices); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453A0F8
		int32_t GetAllActiveUsers(TArray& OutUsers); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453A018
		bool EqualEqual_PlatformUserId(FPlatformUserId A, FPlatformUserId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414539F38
		bool EqualEqual_InputDeviceId(FInputDeviceId A, FInputDeviceId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414539E58
	};


	// Class Engine.InputKeyDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputKeyDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray InputKeyDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputKeyDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputTouchDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputTouchDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray InputTouchDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputTouchDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputVectorAxisDelegateBinding
	// Inherited from UInputAxisKeyDelegateBinding -> UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputVectorAxisDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InstancedPlacemenClientSettings
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInstancedPlacemenClientSettings : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InstancedPlacemenClientSettings");
			return ret;
		}
	};


	// Class Engine.InstancedPlacementPartitionActor
	// Inherited from AISMPartitionActor -> APartitionActor -> AActor -> UObject
	// Size: 0x0 (0x2A0 - 0x2A0)
	class AInstancedPlacementPartitionActor : public AISMPartitionActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InstancedPlacementPartitionActor");
			return ret;
		}
	};


	// Class Engine.StringTable
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UStringTable : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x18]; // 0x28(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StringTable");
			return ret;
		}
	};


	// Class Engine.InterpCurveEdSetup
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UInterpCurveEdSetup : public UObject	
	{
	public:
		TArray Tabs; // 0x28(0x10)
		int32_t ActiveTab; // 0x38(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InterpCurveEdSetup");
			return ret;
		}
	};


	// Class Engine.IntSerialization
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UIntSerialization : public UObject	
	{
	public:
		uint16_t UnsignedInt16Variable; // 0x28(0x2)
		unsigned char UnknownData04_6[0x2]; // 0x2A(0x2) UNKNOWN PROPERTY
		uint32_t UnsignedInt32Variable; // 0x2C(0x4)
		uint64_t UnsignedInt64Variable; // 0x30(0x8)
		int8_t SignedInt8Variable; // 0x38(0x1)
		unsigned char UnknownData05_6[0x1]; // 0x39(0x1) UNKNOWN PROPERTY
		int16_t SignedInt16Variable; // 0x3A(0x2)
		unsigned char UnknownData06_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		int64_t SignedInt64Variable; // 0x40(0x8)
		char UnsignedInt8Variable; // 0x48(0x1)
		unsigned char UnknownData07_6[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		int32_t SignedInt32Variable; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.IntSerialization");
			return ret;
		}
	};


	// Class Engine.KillZVolume
	// Inherited from APhysicsVolume -> AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2D8 - 0x2D8)
	class AKillZVolume : public APhysicsVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KillZVolume");
			return ret;
		}
	};


	// Class Engine.KismetArrayLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetArrayLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetArrayLibrary");
			return ret;
		}

		void SortStringArray(TArray& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453CD98
		void SortNameArray(TArray& TargetArray, bool bStableSort, bool bLexicalSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453CCB8
		void SortIntArray(TArray& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453CBD8
		void SortInt64Array(TArray& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453CAF8
		void SortFloatArray(TArray& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453CA18
		void SortByteArray(TArray& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C938
		void SetArrayPropertyByName(UObject Object, FName PropertyName, TArray& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C858
		void FilterArray(TArray& TargetArray, UClass FilterClass, TArray& FilteredArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C778
		void Array_Swap(TArray& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C698
		void Array_ShuffleFromStream(TArray& TargetArray, FRandomStream& RandomStream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41453C5B8
		void Array_Shuffle(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C4D8
		void Array_Set(TArray& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C3F8
		void Array_Reverse(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C318
		void Array_Resize(TArray& TargetArray, int32_t Size); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C238
		bool Array_RemoveItem(TArray& TargetArray, int32_t& Item); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C158
		void Array_Remove(TArray& TargetArray, int32_t IndexToRemove); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453C078
		void Array_RandomFromStream(TArray& TargetArray, FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453BF98
		void Array_Random(TArray& TargetArray, int32_t& OutItem, int32_t& OutIndex); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453BEB8
		int32_t Array_Length(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453BDD8
		int32_t Array_LastIndex(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453BCF8
		bool Array_IsValidIndex(TArray& TargetArray, int32_t IndexToTest); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453BC18
		bool Array_IsNotEmpty(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453BB38
		bool Array_IsEmpty(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453BA58
		void Array_Insert(TArray& TargetArray, int32_t& NewItem, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453B978
		bool Array_Identical(TArray& ArrayA, TArray& ArrayB); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453B898
		void Array_Get(TArray& TargetArray, int32_t Index, int32_t& Item); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453B7B8
		int32_t Array_Find(TArray& TargetArray, int32_t& ItemToFind); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453B6D8
		bool Array_Contains(TArray& TargetArray, int32_t& ItemToFind); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453B5F8
		void Array_Clear(TArray& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453B518
		void Array_Append(TArray& TargetArray, TArray& SourceArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453B438
		int32_t Array_AddUnique(TArray& TargetArray, int32_t& NewItem); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453B358
		int32_t Array_Add(TArray& TargetArray, int32_t& NewItem); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41453B278
	};


	// Class Engine.KismetGuidLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetGuidLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetGuidLibrary");
			return ret;
		}

		void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453D3B8
		bool NotEqual_GuidGuid(FGuid& A, FGuid& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453D2D8
		FGuid NewGuid(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453D1F8
		bool IsValid_Guid(FGuid& InGUID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453D118
		void Invalidate_Guid(FGuid& InGUID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41453D038
		bool EqualEqual_GuidGuid(FGuid& A, FGuid& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453CF58
		FString Conv_GuidToString(FGuid& InGUID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453CE78
	};


	// Class Engine.KismetInputLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetInputLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetInputLibrary");
			return ret;
		}

		bool PointerEvent_IsTouchEvent(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145402F8
		bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414540218
		float PointerEvent_GetWheelDelta(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414540138
		int32_t PointerEvent_GetUserIndex(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414540058
		int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453FF78
		FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453FE98
		int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453FDB8
		FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453FCD8
		ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453FBF8
		FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453FB18
		FKey PointerEvent_GetEffectingButton(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453FA38
		FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41453F958
		bool ModifierKeysState_IsShiftDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F878
		bool ModifierKeysState_IsControlDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F798
		bool ModifierKeysState_IsCommandDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F6B8
		bool ModifierKeysState_IsAltDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F5D8
		bool Key_IsVectorAxis(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F4F8
		bool Key_IsValid(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F418
		bool Key_IsMouseButton(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F338
		bool Key_IsModifierKey(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F258
		bool Key_IsKeyboardKey(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F178
		bool Key_IsGamepadKey(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453F098
		bool Key_IsDigital(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453EFB8
		bool Key_IsButtonAxis(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453EED8
		bool Key_IsAxis3D(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453EDF8
		bool Key_IsAxis2D(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453ED18
		bool Key_IsAxis1D(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453EC38
		bool Key_IsAnalog(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453EB58
		EUINavigation Key_GetNavigationDirectionFromKey(FKeyEvent& InKeyEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453EA78
		EUINavigation Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent& InAnalogEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E998
		EUINavigationAction Key_GetNavigationActionFromKey(FKeyEvent& InKeyEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E8B8
		EUINavigationAction Key_GetNavigationAction(FKey& InKey); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E7D8
		FText Key_GetDisplayName(FKey& Key, bool bLongDisplayName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E6F8
		bool InputEvent_IsShiftDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E618
		bool InputEvent_IsRightShiftDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E538
		bool InputEvent_IsRightControlDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E458
		bool InputEvent_IsRightCommandDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E378
		bool InputEvent_IsRightAltDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E298
		bool InputEvent_IsRepeat(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E1B8
		bool InputEvent_IsLeftShiftDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453E0D8
		bool InputEvent_IsLeftControlDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DFF8
		bool InputEvent_IsLeftCommandDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DF18
		bool InputEvent_IsLeftAltDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DE38
		bool InputEvent_IsControlDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DD58
		bool InputEvent_IsCommandDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DC78
		bool InputEvent_IsAltDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DB98
		FText InputChord_GetDisplayName(FInputChord& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453DAB8
		int32_t GetUserIndex(FKeyEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453D9D8
		FSlateModifierKeysState GetModifierKeysState(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453D8F8
		FKey GetKey(FKeyEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453D818
		float GetAnalogValue(FAnalogInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41453D738
		bool EqualEqual_KeyKey(FKey A, FKey B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453D658
		bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41453D578
		void CalibrateTilt(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41453D498
	};


	// Class Engine.KismetInternationalizationLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetInternationalizationLibrary");
			return ret;
		}

		bool SetCurrentLocale(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414541018
		bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414540F38
		bool SetCurrentLanguage(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414540E58
		bool SetCurrentCulture(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414540D78
		bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414540C98
		bool IsCultureRightToLeft(FString Culture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414540BB8
		FString GetSuitableCulture(TArray& AvailableCultures, FString CultureToMatch, FString FallbackCulture); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414540AD8
		FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145409F8
		TArray GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414540918
		FString GetCurrentLocale(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414540838
		FString GetCurrentLanguage(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414540758
		FString GetCurrentCulture(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414540678
		FString GetCurrentAssetGroupCulture(FName AssetGroup); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414540598
		FString GetCultureDisplayName(FString Culture, bool Localized); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145404B8
		void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145403D8
	};


	// Class Engine.KismetMaterialLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetMaterialLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetMaterialLibrary");
			return ret;
		}

		void SetVectorParameterValue(UObject WorldContextObject, UMaterialParameterCollection Collection, FName ParameterName, FLinearColor& ParameterValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414541478
		void SetScalarParameterValue(UObject WorldContextObject, UMaterialParameterCollection Collection, FName ParameterName, float ParameterValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414541398
		FLinearColor GetVectorParameterValue(UObject WorldContextObject, UMaterialParameterCollection Collection, FName ParameterName); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF4145412B8
		float GetScalarParameterValue(UObject WorldContextObject, UMaterialParameterCollection Collection, FName ParameterName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145411D8
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(UObject WorldContextObject, UMaterialInterface Parent, FName OptionalName, EMIDCreationFlags CreationFlags); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145410F8
	};


	// Class Engine.KismetMathLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetMathLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetMathLibrary");
			return ret;
		}

		int32_t Xor_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145696B8
		int64_t Xor_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145695D8
		int32_t wrap(int32_t Value, int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145694F8
		FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414569418
		FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414569338
		float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414569258
		double VSizeXYSquared(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414569178
		double VSizeXY(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414569098
		double VSizeSquared(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568FB8
		double VSize2DSquared(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568ED8
		double VSize2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568DF8
		double VSize(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568D18
		FVector VLerp(FVector A, FVector B, float Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568C38
		FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568B58
		FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568A78
		FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, FVector MinValue, FVector MaxValue, bool bInitializeFromTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414568998
		FVector Vector_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145688B8
		FVector Vector_Up(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145687D8
		void Vector_UnwindEuler(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145686F8
		FVector2D Vector_UnitCartesianToSpherical(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568618
		FVector Vector_ToRadians(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568538
		FVector Vector_ToDegrees(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568458
		FVector Vector_SnappedToGrid(FVector InVect, float InGridSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568378
		FVector Vector_SlerpVectorToDirection(FVector Vector, FVector Direction, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414568298
		FVector Vector_SlerpNormals(FVector NormalA, FVector NormalB, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145681B8
		void Vector_Set(FVector& A, double X, double Y, double Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145680D8
		FVector Vector_Right(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567FF8
		FVector Vector_Reciprocal(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567F18
		FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567E38
		FVector Vector_One(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567D58
		FVector Vector_NormalUnsafe(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567C78
		void Vector_Normalize(FVector& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414567B98
		FVector Vector_Normal2D(FVector A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567AB8
		FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145679D8
		FVector Vector_Left(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145678F8
		bool Vector_IsZero(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567818
		bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567738
		bool Vector_IsUniform(FVector& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567658
		bool Vector_IsNormal(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567578
		bool Vector_IsNearlyZero(FVector& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567498
		bool Vector_IsNAN(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145673B8
		double Vector_HeadingAngle(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145672D8
		FVector Vector_GetSignVector(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145671F8
		FVector Vector_GetProjection(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567118
		double Vector_GetAbsMin(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414567038
		double Vector_GetAbsMax(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566F58
		FVector Vector_GetAbs(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566E78
		FVector Vector_Forward(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566D98
		FVector Vector_Down(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566CB8
		double Vector_DistanceSquared(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566BD8
		double Vector_Distance2DSquared(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566AF8
		double Vector_Distance2D(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566A18
		double Vector_Distance(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566938
		double Vector_CosineAngle2D(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566858
		FVector Vector_ComponentMin(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566778
		FVector Vector_ComponentMax(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566698
		FVector Vector_ClampSizeMax2D(FVector A, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145665B8
		FVector Vector_ClampSizeMax(FVector A, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145664D8
		FVector Vector_ClampSize2D(FVector A, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145663F8
		FVector Vector_BoundedToCube(FVector InVect, float InRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566318
		FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566238
		FVector Vector_Backward(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414566158
		void Vector_Assign(FVector& A, FVector& InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414566078
		void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414565F98
		FVector4 Vector4_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565EB8
		double Vector4_SizeSquared3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565DD8
		double Vector4_SizeSquared(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565CF8
		double Vector4_Size3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565C18
		double Vector4_Size(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565B38
		void Vector4_Set(FVector4& A, double X, double Y, double Z, double W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414565A58
		FVector4 Vector4_NormalUnsafe3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565978
		void Vector4_Normalize3(FVector4& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414565898
		FVector4 Vector4_Normal3(FVector4& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145657B8
		FVector4 Vector4_Negated(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145656D8
		FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145655F8
		bool Vector4_IsZero(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565518
		bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565438
		bool Vector4_IsNormal3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565358
		bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565278
		bool Vector4_IsNAN(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414565198
		double Vector4_DotProduct3(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145650B8
		double Vector4_DotProduct(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564FD8
		FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564EF8
		void Vector4_Assign(FVector4& A, FVector4& InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414564E18
		FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564D38
		FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564C58
		FVector2D Vector2D_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564B78
		FVector2D Vector2D_Unit45Deg(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564A98
		FVector2D Vector2D_One(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145649B8
		FVector VEase(FVector A, FVector B, float Alpha, TEnumAsByte EasingFunc, float BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145648D8
		FDateTime UtcNow(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145647F8
		FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564718
		FRotator TransformRotation(FTransform& T, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564638
		FVector TransformLocation(FTransform& T, FVector Location); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564558
		FVector TransformDirection(FTransform& T, FVector Direction); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564478
		float Transform_Determinant(FTransform& Transform); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564398
		double ToUnixTimestampDouble(FDateTime& Time); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145642B8
		int64_t ToUnixTimestamp(FDateTime& Time); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145641D8
		FVector2D ToSign2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145640F8
		FVector2D ToRounded2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414564018
		FString ToHex_LinearColor(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563F38
		void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, double& OutLength); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563E58
		FDateTime Today(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563D78
		FTransform TLerp(FTransform& A, FTransform& B, float Alpha, TEnumAsByte InterpMode); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563C98
		FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563BB8
		FTimespan TimespanZeroValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563AD8
		float TimespanRatio(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145639F8
		FTimespan TimespanMinValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563918
		FTimespan TimespanMaxValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563838
		bool TimespanFromString(FString TimespanString, FTimespan& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563758
		FTransform TEase(FTransform& A, FTransform& B, float Alpha, TEnumAsByte EasingFunc, float BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563678
		double tan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414563598
		FVector Subtract_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145634B8
		FVector Subtract_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145633D8
		FVector Subtract_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145632F8
		FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563218
		FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563138
		FVector2D Subtract_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414563058
		FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562F78
		FQuat Subtract_QuatQuat(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562E98
		FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562DB8
		FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562CD8
		FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562BF8
		int32_t Subtract_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562B18
		int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562A38
		double Subtract_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562958
		FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562878
		FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562798
		char Subtract_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145626B8
		double Square(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145625D8
		double sqrt(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145624F8
		FVector Spherical2DToUnitCartesian(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414562418
		double sin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562338
		int64_t SignOfInteger64(int64_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562258
		int32_t SignOfInteger(int32_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562178
		double SignOfFloat(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414562098
		void SetVectorSpringStateVelocity(FVectorSpringState& SpringState, FVector Velocity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414561FB8
		void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414561ED8
		void SetQuaternionSpringStateAngularVelocity(FQuaternionSpringState& SpringState, FVector AngularVelocity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414561DF8
		void SetFloatSpringStateVelocity(FFloatSpringState& SpringState, float Velocity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414561D18
		void Set2D(FVector2D& A, double X, double Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414561C38
		FVector SelectVector(FVector A, FVector B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414561B58
		FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414561A78
		FText SelectText(FText A, FText B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414561998
		FString SelectString(FString A, FString B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145618B8
		FRotator SelectRotator(FRotator A, FRotator B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145617D8
		UObject SelectObject(UObject A, UObject B, bool bSelectA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145616F8
		FName SelectName(FName A, FName B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414561618
		int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414561538
		double SelectFloat(double A, double B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414561458
		FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414561378
		UClass SelectClass(UClass A, UClass B, bool bSelectA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414561298
		void SeedRandomStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145611B8
		double SafeDivide(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145610D8
		int64_t Round64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414560FF8
		int32_t round(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414560F18
		FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560E38
		FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560D58
		FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560C78
		FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560B98
		FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560AB8
		void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145609D8
		void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145608F8
		FLinearColor RGBLinearToHSV(FLinearColor RGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560818
		void ResetVectorSpringState(FVectorSpringState& SpringState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414560738
		void ResetRandomStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414560658
		void ResetQuaternionSpringState(FQuaternionSpringState& SpringState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414560578
		void ResetFloatSpringState(FFloatSpringState& SpringState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414560498
		FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte EasingFunc, float BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145603B8
		FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FRandomStream& Stream, FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145602D8
		FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145601F8
		FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FRandomStream& Stream, FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560118
		FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414560038
		FVector RandomUnitVectorInConeInRadiansFromStream(FRandomStream& Stream, FVector& ConeDir, float ConeHalfAngleInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FF58
		FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FE78
		FVector RandomUnitVectorInConeInDegreesFromStream(FRandomStream& Stream, FVector& ConeDir, float ConeHalfAngleInDegrees); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FD98
		FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FCB8
		FVector RandomUnitVectorFromStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FBD8
		FVector RandomUnitVector(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FAF8
		FRotator RandomRotatorFromStream(FRandomStream& Stream, bool bRoll); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455FA18
		FRotator RandomRotator(bool bRoll); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F938
		FVector RandomPointInBoundingBoxFromStream_Box(FRandomStream& Stream, FBox Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F858
		FVector RandomPointInBoundingBoxFromStream(FRandomStream& Stream, FVector Center, FVector HalfSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F778
		FVector RandomPointInBoundingBox_Box(FBox Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F698
		FVector RandomPointInBoundingBox(FVector Center, FVector HalfSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F5B8
		int32_t RandomIntegerInRangeFromStream(FRandomStream& Stream, int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F4D8
		int32_t RandomIntegerInRange(int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455F3F8
		int32_t RandomIntegerFromStream(FRandomStream& Stream, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455F318
		int64_t RandomInteger64InRange(int64_t Min, int64_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455F238
		int64_t RandomInteger64(int64_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455F158
		int32_t RandomInteger(int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455F078
		float RandomFloatInRangeFromStream(FRandomStream& Stream, float Min, float Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455EF98
		double RandomFloatInRange(double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455EEB8
		float RandomFloatFromStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455EDD8
		double RandomFloat(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455ECF8
		bool RandomBoolWithWeightFromStream(FRandomStream& RandomStream, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455EC18
		bool RandomBoolWithWeight(float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455EB38
		bool RandomBoolFromStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455EA58
		bool RandomBool(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455E978
		double RadiansToDegrees(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455E898
		FQuat QuaternionSpringInterp(FQuat Current, FQuat Target, FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41455E7B8
		FVector Quat_VectorUp(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E6D8
		FVector Quat_VectorRight(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E5F8
		FVector Quat_VectorForward(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E518
		FVector Quat_UnrotateVector(FQuat& Q, FVector& V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E438
		FQuat Quat_Slerp(FQuat& A, FQuat& B, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E358
		float Quat_SizeSquared(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E278
		float Quat_Size(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455E198
		void Quat_SetFromEuler(FQuat& Q, FVector& Euler); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41455E0B8
		void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41455DFD8
		FRotator Quat_Rotator(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455DEF8
		FVector Quat_RotateVector(FQuat& Q, FVector& V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455DE18
		FQuat Quat_Normalized(FQuat& Q, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455DD38
		void Quat_Normalize(FQuat& Q, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41455DC58
		FQuat Quat_MakeFromEuler(FVector& Euler); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455DB78
		FQuat Quat_Log(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455DA98
		bool Quat_IsNormalized(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D9B8
		bool Quat_IsNonFinite(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D8D8
		bool Quat_IsIdentity(FQuat& Q, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D7F8
		bool Quat_IsFinite(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D718
		FQuat Quat_Inversed(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D638
		FQuat Quat_Identity(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D558
		FVector Quat_GetRotationAxis(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D478
		FVector Quat_GetAxisZ(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D398
		FVector Quat_GetAxisY(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D2B8
		FVector Quat_GetAxisX(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D1D8
		float Quat_GetAngle(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D0F8
		FQuat Quat_FindBetweenVectors(FVector Start, FVector End); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455D018
		FQuat Quat_FindBetweenNormals(FVector StartNormal, FVector EndNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455CF38
		FQuat Quat_Exp(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455CE58
		FVector Quat_Euler(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455CD78
		void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41455CC98
		float Quat_AngularDistance(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455CBB8
		FVector ProjectVectorOnToVector(FVector V, FVector Target); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455CAD8
		FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455C9F8
		FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455C918
		bool PointsAreCoplanar(TArray& Points, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41455C838
		float PerlinNoise1D(float Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C758
		int32_t Percent_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C678
		int64_t Percent_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C598
		double Percent_FloatFloat(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C4B8
		char Percent_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C3D8
		int32_t Or_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C2F8
		int64_t Or_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455C218
		FDateTime Now(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455C138
		bool NotEqualExactly_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455C058
		bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BF78
		bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BE98
		bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BDB8
		bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BCD8
		bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BBF8
		bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BB18
		bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455BA38
		bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455B958
		bool NotEqual_ObjectObject(UObject A, UObject B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455B878
		bool NotEqual_NameName(FName A, FName B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455B798
		bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455B6B8
		bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455B5D8
		bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455B4F8
		bool NotEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455B418
		bool NotEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455B338
		bool NotEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455B258
		bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455B178
		bool NotEqual_ClassClass(UClass A, UClass B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455B098
		bool NotEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455AFB8
		bool NotEqual_BoolBool(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455AED8
		bool Not_PreBool(bool A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455ADF8
		int64_t Not_Int64(int64_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455AD18
		int32_t Not_Int(int32_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455AC38
		FVector2D NormalSafe2D(FVector2D A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455AB58
		double NormalizeToRange(double Value, double RangeMin, double RangeMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455AA78
		FRotator NormalizedDeltaRotator(FRotator A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A998
		float NormalizeAxis(float Angle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455A8B8
		void Normalize2D(FVector2D& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41455A7D8
		FVector2D Normal2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A6F8
		FVector Normal(FVector A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A618
		FVector NegateVector(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A538
		FRotator NegateRotator(FRotator A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A458
		FVector2D Negated2D(FVector2D& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A378
		bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41455A298
		bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455A1B8
		double MultiplyMultiply_FloatFloat(double base, double exp); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41455A0D8
		double MultiplyByPi(double Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414559FF8
		FVector Multiply_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559F18
		FVector Multiply_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559E38
		FVector Multiply_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559D58
		FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559C78
		FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559B98
		FVector2D Multiply_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559AB8
		FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145599D8
		FRotator Multiply_RotatorInt(FRotator A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145598F8
		FRotator Multiply_RotatorFloat(FRotator A, float B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559818
		FQuat Multiply_QuatQuat(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559738
		FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559658
		FMatrix Multiply_MatrixFloat(FMatrix& A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559578
		FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414559498
		FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145593B8
		FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145592D8
		FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145591F8
		int32_t Multiply_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414559118
		double Multiply_IntFloat(int32_t A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414559038
		int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558F58
		double Multiply_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558E78
		char Multiply_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558D98
		FVector MirrorVectorByNormal(FVector InVect, FVector InNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414558CB8
		void MinOfIntArray(TArray& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414558BD8
		void MinOfFloatArray(TArray& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414558AF8
		void MinOfByteArray(TArray& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414558A18
		int64_t MinInt64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558938
		void MinimumAreaRectangle(UObject WorldContextObject, TArray& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414558858
		void MinAreaRectangle(UObject WorldContextObject, TArray& InPoints, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutRectLengthX, float& OutRectLengthY, bool bDebugDraw); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414558778
		int32_t Min(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558698
		void MedianOfIntArray(TArray IntArray, float& MedianValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145585B8
		void MaxOfIntArray(TArray& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145584D8
		void MaxOfFloatArray(TArray& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145583F8
		void MaxOfByteArray(TArray& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414558318
		int64_t MaxInt64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558238
		int32_t Max(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414558158
		FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414558078
		FVector4 Matrix_TransformVector(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557F98
		FVector4 Matrix_TransformPosition(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557EB8
		FQuat Matrix_ToQuat(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557DD8
		void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414557CF8
		void Matrix_SetColumn(FMatrix& M, TEnumAsByte Column, FVector Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414557C18
		void Matrix_SetAxis(FMatrix& M, TEnumAsByte Axis, FVector AxisVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414557B38
		FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557A58
		FMatrix Matrix_RemoveTranslation(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557978
		void Matrix_RemoveScaling(FMatrix& M, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414557898
		FMatrix Matrix_Mirror(FMatrix& M, TEnumAsByte MirrorAxis, TEnumAsByte FlipAxis); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145577B8
		FVector Matrix_InverseTransformVector(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145576D8
		FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145575F8
		FMatrix Matrix_Identity(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557518
		FVector Matrix_GetUnitAxis(FMatrix& M, TEnumAsByte Axis); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557438
		void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557358
		FMatrix Matrix_GetTransposed(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557278
		FMatrix Matrix_GetTransposeAdjoint(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414557198
		FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145570B8
		FVector Matrix_GetScaledAxis(FMatrix& M, TEnumAsByte Axis); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556FD8
		void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556EF8
		float Matrix_GetRotDeterminant(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556E18
		FRotator Matrix_GetRotator(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556D38
		FVector Matrix_GetOrigin(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556C58
		float Matrix_GetMaximumAxisScale(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556B78
		FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556A98
		FMatrix Matrix_GetInverse(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145569B8
		bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145568D8
		bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145567F8
		bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556718
		bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556638
		bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556558
		bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556478
		float Matrix_GetDeterminant(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556398
		FVector Matrix_GetColumn(FMatrix& M, TEnumAsByte Column); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145562B8
		bool Matrix_ContainsNaN(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145561D8
		FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145560F8
		FMatrix Matrix_ApplyScale(FMatrix& M, float Scale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414556018
		double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414555F38
		double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414555E58
		FVector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414555D78
		FVector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414555C98
		FVector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414555BB8
		FVector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414555AD8
		FVector4 MakeVector4(double X, double Y, double Z, double W); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145559F8
		FVector2D MakeVector2D(double X, double Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555918
		FVector MakeVector(double X, double Y, double Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555838
		FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555758
		FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555678
		FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555598
		FRotator MakeRotFromZY(FVector& Z, FVector& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145554B8
		FRotator MakeRotFromZX(FVector& Z, FVector& X); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145553D8
		FRotator MakeRotFromZ(FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145552F8
		FRotator MakeRotFromYZ(FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555218
		FRotator MakeRotFromYX(FVector& Y, FVector& X); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555138
		FRotator MakeRotFromY(FVector& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414555058
		FRotator MakeRotFromXZ(FVector& X, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554F78
		FRotator MakeRotFromXY(FVector& X, FVector& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554E98
		FRotator MakeRotFromX(FVector& X); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554DB8
		FRotator MakeRotator(float Roll, float pitch, float Yaw); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554CD8
		FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554BF8
		FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554B18
		FRandomStream MakeRandomStream(int32_t InitialSeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554A38
		FQuat MakeQuat(float X, float Y, float Z, float W); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554958
		FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554878
		float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414554798
		FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145546B8
		FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145545D8
		FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145544F8
		FLinearColor MakeColor(float R, float G, float B, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554418
		FBox MakeBoxWithOrigin(FVector& Origin, FVector& Extent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554338
		FBoxSphereBounds MakeBoxSphereBounds(FVector Origin, FVector BoxExtent, float SphereRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554258
		FBox2D MakeBox2D(FVector2D Min, FVector2D Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554178
		FBox MakeBox(FVector Min, FVector Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414554098
		double Loge(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414553FB8
		double Log(double A, double base); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414553ED8
		bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414553DF8
		bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414553D18
		FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414553C38
		FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414553B58
		FLinearColor LinearColor_Yellow(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414553A78
		FLinearColor LinearColor_White(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414553998
		FLinearColor LinearColor_Transparent(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145538B8
		FColor LinearColor_ToRGBE(FLinearColor InLinearColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145537D8
		FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145536F8
		void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414553618
		void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414553538
		void LinearColor_SetRandomHue(FLinearColor& InOutColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414553458
		void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414553378
		void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414553298
		void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145531B8
		void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145530D8
		FLinearColor LinearColor_Red(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552FF8
		FColor LinearColor_QuantizeRound(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552F18
		FColor LinearColor_Quantize(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552E38
		bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552D58
		FLinearColor LinearColor_Green(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552C78
		FLinearColor LinearColor_Gray(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552B98
		float LinearColor_GetMin(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552AB8
		float LinearColor_GetMax(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145529D8
		float LinearColor_GetLuminance(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145528F8
		float LinearColor_Distance(FLinearColor C1, FLinearColor C2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552818
		FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552738
		FLinearColor LinearColor_Blue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552658
		FLinearColor LinearColor_Black(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552578
		FVector LessLess_VectorRotator(FVector A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552498
		bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145523B8
		bool LessEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145522D8
		bool LessEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145521F8
		bool LessEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414552118
		bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414552038
		bool LessEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551F58
		bool Less_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551E78
		bool Less_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551D98
		bool Less_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551CB8
		bool Less_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551BD8
		bool Less_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551AF8
		bool Less_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551A18
		double Lerp(double A, double B, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551938
		bool IsZero2D(FVector2D& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551858
		bool IsPointInBoxWithTransform_Box(FVector Point, FTransform& BoxWorldTransform, FBox BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551778
		bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551698
		bool IsPointInBox_Box(FVector Point, FBox Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145515B8
		bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145514D8
		bool IsNearlyZero2D(FVector2D& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145513F8
		bool IsMorning(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551318
		bool IsLeapYear(int32_t Year); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414551238
		bool IsAfternoon(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551158
		FTransform InvertTransform(FTransform& T); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414551078
		FRotator InverseTransformRotation(FTransform& T, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550F98
		FVector InverseTransformLocation(FTransform& T, FVector Location); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550EB8
		FVector InverseTransformDirection(FTransform& T, FVector Direction); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550DD8
		FIntPoint IntPoint_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550CF8
		FIntPoint IntPoint_Up(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550C18
		FIntPoint IntPoint_Right(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550B38
		FIntPoint IntPoint_One(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550A58
		FIntPoint IntPoint_Left(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550978
		FIntPoint IntPoint_Down(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550898
		bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145507B8
		bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145506D8
		bool InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145505F8
		double Hypotenuse(double Width, double Height); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414550518
		FLinearColor HSVToRGBLinear(FLinearColor HSV); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550438
		void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550358
		FLinearColor HSVToRGB(float H, float S, float V, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414550278
		double GridSnap_Float(double Location, double GridSize); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414550198
		FVector GreaterGreater_VectorRotator(FVector A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145500B8
		bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454FFD8
		bool GreaterEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454FEF8
		bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454FE18
		bool GreaterEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454FD38
		bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454FC58
		bool GreaterEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454FB78
		bool Greater_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454FA98
		bool Greater_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454F9B8
		bool Greater_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454F8D8
		bool Greater_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454F7F8
		bool Greater_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F718
		bool Greater_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454F638
		int32_t GetYear(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F558
		void GetYawPitchFromVector(FVector InVec, float& Yaw, float& pitch); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F478
		FVector GetVectorArrayAverage(TArray& Vectors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F398
		FVector GetUpVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F2B8
		float GetTotalSeconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F1D8
		float GetTotalMinutes(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F0F8
		float GetTotalMilliseconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454F018
		float GetTotalHours(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454EF38
		float GetTotalDays(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454EE58
		FTimespan GetTimeOfDay(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454ED78
		double GetTAU(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454EC98
		void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454EBB8
		int32_t GetSeconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454EAD8
		int32_t GetSecond(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E9F8
		float GetRuntimeFloatCurveValue(FRuntimeFloatCurve& Curve, float InTime, float InDefaultValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41454E918
		FVector2D GetRotated2D(FVector2D A, float AngleDeg); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E838
		FVector GetRightVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E758
		FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E678
		float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E598
		float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E4B8
		double GetPI(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454E3D8
		int32_t GetMonth(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E2F8
		int32_t GetMinutes(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E218
		int32_t GetMinute(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E138
		double GetMinElement(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454E058
		double GetMin2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DF78
		int32_t GetMilliseconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DE98
		int32_t GetMillisecond(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DDB8
		double GetMaxElement(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DCD8
		double GetMax2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DBF8
		int32_t GetHours(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DB18
		int32_t GetHour12(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454DA38
		int32_t GetHour(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D958
		FVector GetForwardVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D878
		FTimespan GetDuration(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D798
		FVector GetDirectionUnitVector(FVector From, FVector To); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D6B8
		int32_t GetDays(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D5D8
		int32_t GetDayOfYear(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D4F8
		int32_t GetDay(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D418
		FDateTime GetDate(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D338
		double GetBoxVolume(FBox& InBox); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D258
		FVector GetBoxSize(FBox& InBox); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D178
		FVector GetBoxCenter(FBox& InBox); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454D098
		void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454CFB8
		void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454CED8
		double GetAbsMax2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454CDF8
		FVector2D GetAbs2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454CD18
		double FWrap(double Value, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454CC38
		FIntVector FTruncVector(FVector& InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454CB58
		int64_t FTrunc64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454CA78
		int32_t FTrunc(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454C998
		FDateTime FromUnixTimestamp(int64_t UnixTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454C8B8
		FTimespan FromSeconds(float Seconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454C7D8
		FTimespan FromMinutes(float Minutes); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454C6F8
		FTimespan FromMilliseconds(float Milliseconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454C618
		FTimespan FromHours(float Hours); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454C538
		FTimespan FromDays(float Days); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454C458
		double Fraction(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454C378
		int64_t FMod64(double Dividend, double Divisor, double& Remainder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41454C298
		int32_t FMod(double Dividend, double Divisor, double& Remainder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41454C1B8
		double FMin(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454C0D8
		double FMax(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454BFF8
		float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41454BF18
		float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454BE38
		double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454BD58
		double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454BC78
		double FInterpEaseInOut(double A, double B, double Alpha, double Exponent); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454BB98
		FRotator FindRelativeLookAtRotation(FTransform& StartTransform, FVector& TargetLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454BAB8
		void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454B9D8
		FRotator FindLookAtRotation(FVector& Start, FVector& Target); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454B8F8
		FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454B818
		FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454B738
		int64_t FFloor64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454B658
		int32_t FFloor(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454B578
		double FClamp(double Value, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454B498
		int64_t FCeil64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454B3B8
		int32_t FCeil(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454B2D8
		double exp(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454B1F8
		bool EqualExactly_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454B118
		bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454B038
		bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454AF58
		bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454AE78
		bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454AD98
		bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454ACB8
		bool EqualEqual_TransformTransform(FTransform& A, FTransform& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454ABD8
		bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454AAF8
		bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454AA18
		bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454A938
		bool EqualEqual_ObjectObject(UObject A, UObject B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A858
		bool EqualEqual_NameName(FName A, FName B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A778
		bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454A698
		bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454A5B8
		bool EqualEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A4D8
		bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A3F8
		bool EqualEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A318
		bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41454A238
		bool EqualEqual_ClassClass(UClass A, UClass B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A158
		bool EqualEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41454A078
		bool EqualEqual_BoolBool(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414549F98
		bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549EB8
		double Ease(double A, double B, double Alpha, TEnumAsByte EasingFunc, double BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414549DD8
		FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549CF8
		FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549C18
		float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414549B38
		double DotProduct2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549A58
		double Dot_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549978
		FVector Divide_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549898
		FVector Divide_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145497B8
		FVector Divide_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145496D8
		FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145495F8
		FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549518
		FVector2D Divide_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549438
		FTimespan Divide_TimespanFloat(FTimespan A, float Scalar); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549358
		FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549278
		FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414549198
		FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145490B8
		int32_t Divide_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548FD8
		int64_t Divide_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548EF8
		double Divide_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548E18
		char Divide_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548D38
		double DistanceSquared2D(FVector2D v1, FVector2D v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414548C58
		double Distance2D(FVector2D v1, FVector2D v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414548B78
		double DegTan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548A98
		double DegSin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145489B8
		double DegreesToRadians(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145488D8
		double DegCos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145487F8
		double DegAtan2(double Y, double X); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548718
		double DegAtan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548638
		double DegAsin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548558
		double DegAcos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548478
		int32_t DaysInYear(int32_t Year); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414548398
		int32_t DaysInMonth(int32_t Year, int32_t Month); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145482B8
		FDateTime DateTimeMinValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145481D8
		FDateTime DateTimeMaxValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145480F8
		bool DateTimeFromString(FString DateTimeString, FDateTime& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414548018
		bool DateTimeFromIsoString(FString IsoString, FDateTime& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547F38
		double CrossProduct2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547E58
		FVector Cross_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547D78
		FVector CreateVectorFromYawPitch(float Yaw, float pitch, float Length); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547C98
		double cos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414547BB8
		int32_t Convert3DTo1D(FIntVector& Index3D, int32_t XSize, int32_t YSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547AD8
		int32_t Convert2DTo1D(FIntPoint& Index2D, int32_t XSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145479F8
		FIntVector Convert1DTo3D(int32_t Index1D, int32_t XSize, int32_t YSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547918
		FIntPoint Convert1DTo2D(int32_t Index1D, int32_t XSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547838
		FVector2D Conv_VectorToVector2D(FVector InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547758
		FTransform Conv_VectorToTransform(FVector InLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547678
		FRotator Conv_VectorToRotator(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547598
		FQuat Conv_VectorToQuaternion(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145474B8
		FLinearColor Conv_VectorToLinearColor(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145473D8
		FVector Conv_Vector4ToVector(FVector4& InVector4); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145472F8
		FRotator Conv_Vector4ToRotator(FVector4& InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547218
		FQuat Conv_Vector4ToQuaternion(FVector4& InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547138
		FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414547058
		FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546F78
		FMatrix Conv_TransformToMatrix(FTransform& Transform); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546E98
		FVector Conv_RotatorToVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546DB8
		FTransform Conv_RotatorToTransform(FRotator& InRotator); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546CD8
		FQuat Conv_RotatorToQuaternion(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546BF8
		FTransform Conv_MatrixToTransform(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546B18
		FRotator Conv_MatrixToRotator(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546A38
		FVector Conv_LinearColorToVector(FLinearColor InLinearColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546958
		FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546878
		FVector Conv_IntVectorToVector(FIntVector& InIntVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546798
		FVector Conv_IntToVector(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145466B8
		FIntVector Conv_IntToIntVector(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145465D8
		int64_t Conv_IntToInt64(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145464F8
		double Conv_IntToDouble(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414546418
		char Conv_IntToByte(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414546338
		bool Conv_IntToBool(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414546258
		FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414546178
		int32_t Conv_Int64ToInt(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414546098
		double Conv_Int64ToDouble(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545FB8
		char Conv_Int64ToByte(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545ED8
		double Conv_FloatToDouble(float InFloat); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545DF8
		FVector2D Conv_DoubleToVector2D(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414545D18
		FVector Conv_DoubleToVector(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414545C38
		FLinearColor Conv_DoubleToLinearColor(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414545B58
		int64_t Conv_DoubleToInt64(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545A78
		float Conv_DoubleToFloat(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545998
		FLinearColor Conv_ColorToLinearColor(FColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145458B8
		int64_t Conv_ByteToInt64(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145457D8
		int32_t Conv_ByteToInt(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145456F8
		double Conv_ByteToDouble(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545618
		int32_t Conv_BoolToInt(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545538
		double Conv_BoolToDouble(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545458
		char Conv_BoolToByte(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414545378
		FTransform ComposeTransforms(FTransform& A, FTransform& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414545298
		FRotator ComposeRotators(FRotator A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145451B8
		bool ClassIsChildOf(UClass TestClass, UClass ParentClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145450D8
		FVector ClampVectorSize(FVector A, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544FF8
		int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414544F18
		float ClampAxis(float Angle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414544E38
		FVector2D ClampAxes2D(FVector2D A, double MinAxisVal, double MaxAxisVal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544D58
		double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414544C78
		int32_t clamp(int32_t Value, int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414544B98
		FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544AB8
		void BreakVector_NetQuantizeNormal(FVector_NetQuantizeNormal InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145449D8
		void BreakVector_NetQuantize100(FVector_NetQuantize100 InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145448F8
		void BreakVector_NetQuantize10(FVector_NetQuantize10 InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414544818
		void BreakVector_NetQuantize(FVector_NetQuantize InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414544738
		void BreakVector4(FVector4& InVec, double& X, double& Y, double& Z, double& W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544658
		void BreakVector2D(FVector2D InVec, double& X, double& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544578
		void BreakVector(FVector InVec, double& X, double& Y, double& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544498
		void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145443B8
		void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145442D8
		void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145441F8
		void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544118
		void BreakRotator(FRotator InRot, float& Roll, float& pitch, float& Yaw); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414544038
		void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543F58
		void BreakQuat(FQuat& InQuat, float& X, float& Y, float& Z, float& W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543E78
		void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543D98
		void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414543CB8
		void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543BD8
		void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543AF8
		void BreakBoxSphereBounds(FBoxSphereBounds& InBoxSphereBounds, FVector& Origin, FVector& BoxExtent, float& SphereRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543A18
		FBox Box_Overlap(FBox& A, FBox& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543938
		bool Box_IsPointInside(FBox& Box, FVector& Point); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543858
		bool Box_IsInsideOrOn(FBox& InnerTest, FBox& OuterTest); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543778
		bool Box_IsInside(FBox& InnerTest, FBox& OuterTest); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414543698
		bool Box_Intersects(FBox& A, FBox& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145435B8
		FVector Box_GetClosestPointTo(FBox& Box, FVector& Point); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145434D8
		FBox Box_ExpandBy(FBox& Box, FVector& Negative, FVector& Positive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145433F8
		bool BooleanXOR(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414543318
		bool BooleanOR(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414543238
		bool BooleanNOR(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414543158
		bool BooleanNAND(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414543078
		bool BooleanAND(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542F98
		char BMin(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542EB8
		char BMax(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542DD8
		void AverageOfIntArray(TArray& IntArray, float& AverageValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414542CF8
		double Atan2(double Y, double X); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542C18
		double atan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542B38
		double asin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542A58
		int32_t And_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542978
		int64_t And_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414542898
		FVector Add_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145427B8
		FVector Add_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145426D8
		FVector Add_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145425F8
		FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414542518
		FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414542438
		FVector2D Add_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414542358
		FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414542278
		FQuat Add_QuatQuat(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414542198
		FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145420B8
		FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414541FD8
		FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414541EF8
		FIntPoint Add_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414541E18
		int32_t Add_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414541D38
		int64_t Add_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414541C58
		double Add_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414541B78
		FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414541A98
		FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF4145419B8
		char Add_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145418D8
		double acos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145417F8
		int64_t Abs_Int64(int64_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414541718
		int32_t Abs_Int(int32_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414541638
		double abs(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414541558
	};


	// Class Engine.KismetNodeHelperLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetNodeHelperLibrary");
			return ret;
		}

		void MarkBit(int32_t& Data, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41456A218
		bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456A138
		bool HasMarkedBit(int32_t Data, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456A058
		char GetValidValue(UEnum Enum, char EnumeratorValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414569F78
		int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414569E98
		int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414569DB8
		int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414569CD8
		char GetEnumeratorValueFromIndex(UEnum Enum, char EnumeratorIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414569BF8
		FString GetEnumeratorUserFriendlyName(UEnum Enum, char EnumeratorValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414569B18
		FName GetEnumeratorName(UEnum Enum, char EnumeratorValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414569A38
		void ClearBit(int32_t& Data, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414569958
		void ClearAllBits(int32_t& Data); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414569878
		bool BitIsMarked(int32_t Data, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414569798
	};


	// Class Engine.KismetRenderingLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetRenderingLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetRenderingLibrary");
			return ret;
		}

		void SetCastInsetShadowForAllAttachments(UPrimitiveComponent PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456C0B8
		void ResizeRenderTarget2D(UTextureRenderTarget2D TextureRenderTarget, int32_t Width, int32_t Height); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BFD8
		UVolumeTexture RenderTargetCreateStaticVolumeTextureEditorOnly(UTextureRenderTargetVolume RenderTarget, FString Name, TEnumAsByte CompressionSettings, TEnumAsByte MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BEF8
		UTextureCube RenderTargetCreateStaticTextureCubeEditorOnly(UTextureRenderTargetCube RenderTarget, FString Name, TEnumAsByte CompressionSettings, TEnumAsByte MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BE18
		UTexture2D RenderTargetCreateStaticTexture2DEditorOnly(UTextureRenderTarget2D RenderTarget, FString Name, TEnumAsByte CompressionSettings, TEnumAsByte MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BD38
		UTexture2DArray RenderTargetCreateStaticTexture2DArrayEditorOnly(UTextureRenderTarget2DArray RenderTarget, FString Name, TEnumAsByte CompressionSettings, TEnumAsByte MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BC58
		void ReleaseRenderTarget2D(UTextureRenderTarget2D TextureRenderTarget); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BB78
		void RefreshPathTracingOutput(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456BA98
		FColor ReadRenderTargetUV(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, float U, float V); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456B9B8
		TArray ReadRenderTargetRawUVArea(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, FBox2D Area, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456B8D8
		FLinearColor ReadRenderTargetRawUV(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, float U, float V, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456B7F8
		TArray ReadRenderTargetRawPixelArea(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, int32_t MinX, int32_t MinY, int32_t MaxX, int32_t MaxY, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456B718
		FLinearColor ReadRenderTargetRawPixel(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, int32_t X, int32_t Y, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456B638
		bool ReadRenderTargetRaw(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, TArray& OutLinearSamples, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41456B558
		FColor ReadRenderTargetPixel(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, int32_t X, int32_t Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456B478
		bool ReadRenderTarget(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, TArray& OutSamples, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41456B398
		FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456B2B8
		UTexture2D ImportFileAsTexture2D(UObject WorldContextObject, FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456B1D8
		UTexture2D ImportBufferAsTexture2D(UObject WorldContextObject, TArray& Buffer); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41456B0F8
		void ExportTexture2D(UObject WorldContextObject, UTexture2D Texture, FString FilePath, FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456B018
		void ExportRenderTarget(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, FString FilePath, FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456AF38
		void EndDrawCanvasToRenderTarget(UObject WorldContextObject, FDrawToRenderTargetContext& Context); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41456AE58
		void EnablePathTracing(bool bEnablePathTracer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456AD78
		void DrawMaterialToRenderTarget(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, UMaterialInterface Material); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456AC98
		UTextureRenderTargetVolume CreateRenderTargetVolume(UObject WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, TEnumAsByte Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456ABB8
		UTextureRenderTarget2DArray CreateRenderTarget2DArray(UObject WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, TEnumAsByte Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456AAD8
		UTextureRenderTarget2D CreateRenderTarget2D(UObject WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456A9F8
		void ConvertRenderTargetToTextureVolumeEditorOnly(UObject WorldContextObject, UTextureRenderTargetVolume RenderTarget, UVolumeTexture Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456A918
		void ConvertRenderTargetToTextureCubeEditorOnly(UObject WorldContextObject, UTextureRenderTargetCube RenderTarget, UTextureCube Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456A838
		void ConvertRenderTargetToTexture2DEditorOnly(UObject WorldContextObject, UTextureRenderTarget2D RenderTarget, UTexture2D Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456A758
		void ConvertRenderTargetToTexture2DArrayEditorOnly(UObject WorldContextObject, UTextureRenderTarget2DArray RenderTarget, UTexture2DArray Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41456A678
		void ClearRenderTarget2D(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, FLinearColor ClearColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41456A598
		FMatrix CalculateProjectionMatrix(FMinimalViewInfo& MinimalViewInfo); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456A4B8
		void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41456A3D8
		void BeginDrawCanvasToRenderTarget(UObject WorldContextObject, UTextureRenderTarget2D TextureRenderTarget, UCanvas& Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41456A2F8
	};


	// Class Engine.KismetStringLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetStringLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetStringLibrary");
			return ret;
		}

		FString TrimTrailing(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570178
		FString Trim(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570098
		FString ToUpper(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456FFB8
		FString ToLower(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456FED8
		FString TimeSecondsToString(float InSeconds); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456FDF8
		bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456FD18
		bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte SearchCase, TEnumAsByte SearchDir); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41456FC38
		FString RightPad(FString SourceString, int32_t ChCount); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456FB58
		FString RightChop(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456FA78
		FString Right(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F998
		FString Reverse(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F8B8
		int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41456F7D8
		FString Replace(FString SourceString, FString From, FString To, TEnumAsByte SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F6F8
		TArray ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F618
		bool NotEqual_StrStr(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F538
		bool NotEqual_StriStri(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F458
		FString Mid(FString SourceString, int32_t Start, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F378
		bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F298
		int32_t Len(FString S); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F1B8
		FString LeftPad(FString SourceString, int32_t ChCount); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456F0D8
		FString LeftChop(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456EFF8
		FString Left(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456EF18
		FString JoinStringArray(TArray& SourceArray, FString Separator); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41456EE38
		bool IsNumeric(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456ED58
		bool IsEmpty(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456EC78
		FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456EB98
		int32_t GetCharacterAsNumber(FString SourceString, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456EAB8
		TArray GetCharacterArrayFromString(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456E9D8
		int32_t FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456E8F8
		bool EqualEqual_StrStr(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456E818
		bool EqualEqual_StriStri(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456E738
		bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456E658
		int32_t CullArray(FString SourceString, TArray& inArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF41456E578
		FString Conv_VectorToString(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456E498
		FString Conv_Vector3fToString(FVector3f InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456E3B8
		FString Conv_Vector2dToString(FVector2D InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456E2D8
		FString Conv_TransformToString(FTransform& InTrans); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456E1F8
		void Conv_StringToVector3f(FString InString, FVector3f& OutConvertedVector, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456E118
		void Conv_StringToVector2D(FString InString, FVector2D& OutConvertedVector2D, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456E038
		void Conv_StringToVector(FString InString, FVector& OutConvertedVector, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456DF58
		void Conv_StringToRotator(FString InString, FRotator& OutConvertedRotator, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456DE78
		FName Conv_StringToName(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456DD98
		int64_t Conv_StringToInt64(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456DCB8
		int32_t Conv_StringToInt(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456DBD8
		double Conv_StringToDouble(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456DAF8
		void Conv_StringToColor(FString InString, FLinearColor& OutConvertedColor, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456DA18
		FString Conv_RotatorToString(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456D938
		FString Conv_PlatformUserIdToString(FPlatformUserId InPlatformUserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D858
		FString Conv_ObjectToString(UObject InObj); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D778
		FString Conv_NameToString(FName InName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D698
		FString Conv_MatrixToString(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456D5B8
		FString Conv_IntVectorToString(FIntVector InIntVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456D4D8
		FString Conv_IntToString(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D3F8
		FString Conv_IntPointToString(FIntPoint InIntPoint); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456D318
		FString Conv_Int64ToString(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D238
		FString Conv_InputDeviceIdToString(FInputDeviceId InDeviceId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D158
		FString Conv_DoubleToString(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456D078
		FString Conv_ColorToString(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456CF98
		FString Conv_ByteToString(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456CEB8
		FString Conv_BoxToString(FBox& Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456CDD8
		FString Conv_BoxCenterAndExtentsToString(FBox& Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456CCF8
		FString Conv_BoolToString(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456CC18
		bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456CB38
		FString Concat_StrStr(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456CA58
		FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456C978
		FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456C898
		FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456C7B8
		FString BuildString_Object(FString AppendTo, FString Prefix, UObject InObj, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456C6D8
		FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456C5F8
		FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456C518
		FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456C438
		FString BuildString_Double(FString AppendTo, FString Prefix, double InDouble, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456C358
		FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF41456C278
		FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF41456C198
	};


	// Class Engine.KismetStringTableLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetStringTableLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetStringTableLibrary");
			return ret;
		}

		bool IsRegisteredTableId(FName TableId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570878
		bool IsRegisteredTableEntry(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570798
		FString GetTableNamespace(FName TableId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145706B8
		FString GetTableEntrySourceString(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145705D8
		FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145704F8
		TArray GetRegisteredStringTables(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570418
		TArray GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570338
		TArray GetKeysFromStringTable(FName TableId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570258
	};


	// Class Engine.KismetSystemLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetSystemLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetSystemLibrary");
			return ret;
		}

		void UnregisterForRemoteNotifications(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB35B0
		void UnloadPrimaryAssetList(TArray& PrimaryAssetIdList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB34D0
		void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FB33F0
		void TransactObject(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB3310
		void StackTrace(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB3230
		bool SphereTraceSingleForObjects(UObject WorldContextObject, FVector Start, FVector End, float Radius, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB3150
		bool SphereTraceSingleByProfile(UObject WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB3070
		bool SphereTraceSingle(UObject WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2F90
		bool SphereTraceMultiForObjects(UObject WorldContextObject, FVector Start, FVector End, float Radius, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2EB0
		bool SphereTraceMultiByProfile(UObject WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2DD0
		bool SphereTraceMulti(UObject WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2CF0
		bool SphereOverlapComponents(UObject WorldContextObject, FVector SpherePos, float SphereRadius, TArray& ObjectTypes, UClass ComponentClassFilter, TArray& ActorsToIgnore, TArray& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2C10
		bool SphereOverlapActors(UObject WorldContextObject, FVector SpherePos, float SphereRadius, TArray& ObjectTypes, UClass ActorClassFilter, TArray& ActorsToIgnore, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2B30
		void SnapshotObject(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB2A50
		void ShowPlatformSpecificLeaderboardScreen(FString CategoryName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB2970
		void ShowPlatformSpecificAchievementsScreen(APlayerController SpecificPlayer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB2890
		void ShowInterstitialAd(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB27B0
		void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB26D0
		void SetWindowTitle(FText& Title); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB25F0
		void SetVolumeButtonsHandledBySystem(bool bEnabled); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB2510
		void SetVectorPropertyByName(UObject Object, FName PropertyName, FVector& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2430
		void SetVector3fPropertyByName(UObject Object, FName PropertyName, FVector3f& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB2350
		void SetUserActivity(FUserActivity& UserActivity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB21B0
		void SetTransformPropertyByName(UObject Object, FName PropertyName, FTransform& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB20D0
		void SetTextPropertyByName(UObject Object, FName PropertyName, FText& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB1FF0
		void SetSuppressViewportTransitionMessage(UObject WorldContextObject, bool bState); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB1F10
		void SetStructurePropertyByName(UObject Object, FName PropertyName, FGenericStruct& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB1D70
		void SetStringPropertyByName(UObject Object, FName PropertyName, FString Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB1C90
		void SetSoftObjectPropertyByName(UObject Object, FName PropertyName, TWeakObjectPtr& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB1BB0
		void SetSoftClassPropertyByName(UObject Object, FName PropertyName, TWeakObjectPtr& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB1AD0
		void SetRotatorPropertyByName(UObject Object, FName PropertyName, FRotator& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB19F0
		void SetObjectPropertyByName(UObject Object, FName PropertyName, UObject Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB1910
		void SetNamePropertyByName(UObject Object, FName PropertyName, FName& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB1830
		void SetLinearColorPropertyByName(UObject Object, FName PropertyName, FLinearColor& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB1750
		void SetIntPropertyByName(UObject Object, FName PropertyName, int32_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB1670
		void SetInterfacePropertyByName(UObject Object, FName PropertyName, TScriptInterface& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB1590
		void SetInt64PropertyByName(UObject Object, FName PropertyName, int64_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB14B0
		void SetGamepadsBlockDeviceFeedback(bool bBlock); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB13D0
		void SetFieldPathPropertyByName(UObject Object, FName PropertyName, Value& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB12F0
		void SetDoublePropertyByName(UObject Object, FName PropertyName, double Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB1210
		void SetColorPropertyByName(UObject Object, FName PropertyName, FColor& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FB1130
		void SetCollisionProfileNameProperty(UObject Object, FName PropertyName, FCollisionProfileName& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB0F90
		void SetClassPropertyByName(UObject Object, FName PropertyName, UClass Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0EB0
		void SetBytePropertyByName(UObject Object, FName PropertyName, char Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0DD0
		void SetBoolPropertyByName(UObject Object, FName PropertyName, bool Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0CF0
		void RetriggerableDelay(UObject WorldContextObject, float duration, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0C10
		void ResetGamepadAssignmentToController(int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0B30
		void ResetGamepadAssignments(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0A50
		void RegisterForRemoteNotifications(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0970
		void QuitGame(UObject WorldContextObject, APlayerController SpecificPlayer, TEnumAsByte QuitPreference, bool bIgnorePlatformRestrictions); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0828
		void PrintWarning(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FB0748
		void PrintText(UObject WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float duration, FName Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FB0668
		void PrintString(UObject WorldContextObject, FString InString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float duration, FName Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FB0588
		bool ParseParamValue(FString InString, FString InParam, FString& OutValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FB04A8
		bool ParseParam(FString InString, FString InParam); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FB03C8
		void ParseCommandLine(FString InCmdLine, TArray& OutTokens, TArray& OutSwitches, TMap& OutParams); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FB02E8
		void OnAssetLoaded__DelegateSignature(UObject Loaded); // Flags: Public|Delegate 0x7FF410FAECA0
		void OnAssetClassLoaded__DelegateSignature(UClass Loaded); // Flags: Public|Delegate 0x7FF410FAEF40
		bool NotEqual_SoftObjectReference(TWeakObjectPtr& A, TWeakObjectPtr& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FB0208
		bool NotEqual_SoftClassReference(TWeakObjectPtr& A, TWeakObjectPtr& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FB0128
		bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FB0048
		bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAFF68
		FString NormalizeFilename(FString InFilename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAFE88
		void MoveComponentTo(USceneComponent Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte MoveAction, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FAFD40
		FTopLevelAssetPath MakeTopLevelAssetPath(FString PackageName, FString AssetName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAFC60
		FSoftObjectPath MakeSoftObjectPath(FString PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAFB80
		FSoftClassPath MakeSoftClassPath(FString PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAFAA0
		FText MakeLiteralText(FText Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF9C0
		FString MakeLiteralString(FString Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF8E0
		FName MakeLiteralName(FName Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF800
		int64_t MakeLiteralInt64(int64_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF720
		int32_t MakeLiteralInt(int32_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF640
		double MakeLiteralDouble(double Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF560
		char MakeLiteralByte(char Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF480
		bool MakeLiteralBool(bool Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAF3A0
		FARFilter MakeARFilter(TArray& PackageNames, TArray& PackagePaths, TArray& SoftObjectPaths, TArray& ClassPaths, TSet& RecursiveClassPathsExclusionSet, TArray& ClassNames, TSet& RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAF2C0
		void LogString(FString InString, bool bPrintToLog); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAF1E0
		void LoadInterstitialAd(int32_t AdIdIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAF100
		UClass LoadClassAsset_Blocking(TWeakObjectPtr AssetClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAF020
		void LoadAssetClass(UObject WorldContextObject, TWeakObjectPtr AssetClass, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAEE60
		UObject LoadAsset_Blocking(TWeakObjectPtr Asset); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAED80
		void LoadAsset(UObject WorldContextObject, TWeakObjectPtr Asset, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAEBC0
		bool LineTraceSingleForObjects(UObject WorldContextObject, FVector Start, FVector End, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAEAE0
		bool LineTraceSingleByProfile(UObject WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAEA00
		bool LineTraceSingle(UObject WorldContextObject, FVector Start, FVector End, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAE920
		bool LineTraceMultiForObjects(UObject WorldContextObject, FVector Start, FVector End, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAE840
		bool LineTraceMultiByProfile(UObject WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAE760
		bool LineTraceMulti(UObject WorldContextObject, FVector Start, FVector End, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAE680
		void LaunchURL(FString URL); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAE5A0
		void LaunchExternalUrl(TArray& InDomainStrings, FString URL); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FAE4C0
		void K2_UnPauseTimerHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAE3E0
		void K2_UnPauseTimerDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAE300
		void K2_UnPauseTimer(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAE220
		bool K2_TimerExistsHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAE140
		bool K2_TimerExistsDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAE060
		bool K2_TimerExists(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FADF80
		FTimerHandle K2_SetTimerForNextTickDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FADEA0
		FTimerHandle K2_SetTimerForNextTick(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FADDC0
		FTimerHandle K2_SetTimerDelegate(FDelegateProperty Delegate, float Time, bool bLooping, bool bMaxOncePerFrame, float InitialStartDelay, float InitialStartDelayVariance); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FADCE0
		FTimerHandle K2_SetTimer(UObject Object, FString FunctionName, float Time, bool bLooping, bool bMaxOncePerFrame, float InitialStartDelay, float InitialStartDelayVariance); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FADC00
		void K2_PauseTimerHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FADB20
		void K2_PauseTimerDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FADA40
		void K2_PauseTimer(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAD960
		bool K2_IsValidTimerHandle(FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD880
		bool K2_IsTimerPausedHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD7A0
		bool K2_IsTimerPausedDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD6C0
		bool K2_IsTimerPaused(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD5E0
		bool K2_IsTimerActiveHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD500
		bool K2_IsTimerActiveDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD420
		bool K2_IsTimerActive(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD340
		FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FAD260
		float K2_GetTimerRemainingTimeHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD180
		float K2_GetTimerRemainingTimeDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAD0A0
		float K2_GetTimerRemainingTime(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FACFC0
		float K2_GetTimerElapsedTimeHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FACEE0
		float K2_GetTimerElapsedTimeDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FACE00
		float K2_GetTimerElapsedTime(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FACD20
		void K2_ClearTimerHandle(UObject WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FACC40
		void K2_ClearTimerDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FACB60
		void K2_ClearTimer(UObject Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FACA80
		void K2_ClearAndInvalidateTimerHandle(UObject WorldContextObject, FTimerHandle& Handle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FAC8E0
		bool IsValidSoftObjectReference(TWeakObjectPtr& SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FAC800
		bool IsValidSoftClassReference(TWeakObjectPtr& SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FAC720
		bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAC640
		bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAC560
		bool IsValidInterface(TScriptInterface& Interface); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FAC480
		bool IsValidClass(UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAC3A0
		bool IsValid(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAC2C0
		bool IsUnattended(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAC1E0
		bool IsStandalone(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAC100
		bool IsSplitScreen(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAC020
		bool IsServer(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FABF40
		bool IsScreensaverEnabled(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FABE60
		bool IsPackagedForDistribution(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FABD80
		bool IsObjectOfSoftClass(UObject Object, TWeakObjectPtr SoftClass); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF410FABCA0
		bool IsLoggedIn(APlayerController SpecificPlayer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FABBC0
		bool IsInterstitialAdRequested(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FABAE0
		bool IsInterstitialAdAvailable(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FABA00
		bool IsDedicatedServer(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB920
		bool IsControllerAssignedToGamepad(int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB840
		void HideAdBanner(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAB760
		bool HasMultipleLocalPlayers(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB680
		bool GetVolumeButtonsHandledBySystem(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB5A0
		FString GetUniqueDeviceId(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB4C0
		FString GetSystemPath(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB3E0
		bool GetSupportedFullscreenResolutions(TArray& Resolutions); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FAB300
		FTopLevelAssetPath GetStructTopLevelAssetPath(UScriptStruct Struct); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAB220
		TWeakObjectPtr GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAB140
		FSoftObjectPath GetSoftObjectPath(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAB060
		FTopLevelAssetPath GetSoftClassTopLevelAssetPath(TWeakObjectPtr SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAAF80
		TWeakObjectPtr GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAAEA0
		FSoftClassPath GetSoftClassPath(UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAADC0
		int32_t GetRenderingMaterialQualityLevel(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAACE0
		int32_t GetRenderingDetailMode(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAAC00
		FString GetProjectSavedDirectory(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAAB20
		FString GetProjectDirectory(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAAA40
		FString GetProjectContentDirectory(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAA960
		void GetPrimaryAssetsWithBundleState(TArray& RequiredBundles, TArray& ExcludedBundles, TArray& ValidTypes, bool bForceCurrentState, TArray& OutPrimaryAssetIdList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FAA880
		void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray& OutPrimaryAssetIdList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FAA7A0
		FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TWeakObjectPtr SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAA6C0
		FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TWeakObjectPtr SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAA5E0
		FPrimaryAssetId GetPrimaryAssetIdFromObject(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAA500
		FPrimaryAssetId GetPrimaryAssetIdFromClass(UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FAA420
		TArray GetPreferredLanguages(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FAA340
		FString GetPlatformUserName(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAA260
		FString GetPlatformUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAA180
		FString GetPathName(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FAA0A0
		UObject GetOuterObject(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9FC0
		FString GetObjectName(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9EE0
		UObject GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA9E00
		int32_t GetMinYResolutionForUI(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9D20
		int32_t GetMinYResolutionFor3DView(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9C40
		FString GetLocalCurrencySymbol(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA9B60
		FString GetLocalCurrencyCode(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA9A80
		double GetGameTimeInSeconds(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA99A0
		FString GetGamepadControllerName(int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA98C0
		UTexture2D GetGamepadButtonGlyph(FString ButtonKey, int32_t ControllerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA97E0
		FString GetGameName(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9700
		FString GetGameBundleId(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9620
		int64_t GetFrameCount(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9540
		FTopLevelAssetPath GetEnumTopLevelAssetPath(UEnum Enum); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9460
		FString GetEngineVersion(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9380
		FString GetDisplayName(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA92A0
		FString GetDeviceId(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA91C0
		FString GetDefaultLocale(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA90E0
		FString GetDefaultLanguage(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA9000
		bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray& OutBundles); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA8F20
		bool GetConvenientWindowedResolutions(TArray& Resolutions); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FA8E40
		FString GetConsoleVariableStringValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8D60
		int32_t GetConsoleVariableIntValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8C80
		float GetConsoleVariableFloatValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8BA0
		bool GetConsoleVariableBoolValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8AC0
		void GetComponentBounds(USceneComponent Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA89E0
		FString GetCommandLine(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8900
		FTopLevelAssetPath GetClassTopLevelAssetPath(UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA8820
		UClass GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA8740
		FString GetClassDisplayName(UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA8660
		FString GetBuildVersion(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA8580
		FString GetBuildConfiguration(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA84A0
		int32_t GetAdIDCount(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA83C0
		void GetActorListFromComponentList(TArray& ComponentList, UClass ActorClassFilter, TArray& OutActorList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FA82E0
		void GetActorBounds(AActor Actor, FVector& Origin, FVector& BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA8200
		void ForceCloseAdBanner(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8120
		void FlushPersistentDebugLines(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA8040
		void FlushDebugStrings(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA7F60
		void ExecuteConsoleCommand(UObject WorldContextObject, FString Command, APlayerController SpecificPlayer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA7E80
		bool EqualEqual_SoftObjectReference(TWeakObjectPtr& A, TWeakObjectPtr& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA7DA0
		bool EqualEqual_SoftClassReference(TWeakObjectPtr& A, TWeakObjectPtr& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA7CC0
		bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA7BE0
		bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA7B00
		int32_t EndTransaction(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA7A20
		void DrawDebugString(UObject WorldContextObject, FVector TextLocation, FString Text, AActor TestBaseActor, FLinearColor TextColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA7940
		void DrawDebugSphere(UObject WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA7860
		void DrawDebugPoint(UObject WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA7780
		void DrawDebugPlane(UObject WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA76A0
		void DrawDebugLine(UObject WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA75C0
		void DrawDebugFrustum(UObject WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA74E0
		void DrawDebugFloatHistoryTransform(UObject WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA7400
		void DrawDebugFloatHistoryLocation(UObject WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA7320
		void DrawDebugCylinder(UObject WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA7240
		void DrawDebugCoordinateSystem(UObject WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA7160
		void DrawDebugConeInDegrees(UObject WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA7080
		void DrawDebugCone(UObject WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA6FA0
		void DrawDebugCircle(UObject WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA6EC0
		void DrawDebugCapsule(UObject WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA6DE0
		void DrawDebugCamera(ACameraActor CameraActor, FLinearColor CameraColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA6D00
		void DrawDebugBox(UObject WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA6C20
		void DrawDebugArrow(UObject WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF410FA6B40
		bool DoesImplementInterface(UObject TestObject, UClass Interface); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA6A60
		bool DoesClassImplementInterface(UClass TestClass, UClass Interface); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA6980
		void DelayUntilNextTick(UObject WorldContextObject, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA68A0
		void Delay(UObject WorldContextObject, float duration, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA6700
		void CreateCopyForUndoBuffer(UObject ObjectToModify); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA6620
		FString ConvertToRelativePath(FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA6540
		FString ConvertToAbsolutePath(FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA6460
		FSoftObjectPath Conv_SoftObjRefToSoftObjPath(TWeakObjectPtr SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA6380
		FSoftClassPath Conv_SoftObjRefToSoftClassPath(TWeakObjectPtr SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA62A0
		TWeakObjectPtr Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA61C0
		FString Conv_SoftObjectReferenceToString(TWeakObjectPtr& SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA60E0
		UObject Conv_SoftObjectReferenceToObject(TWeakObjectPtr& SoftObject); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA6000
		FString Conv_SoftClassReferenceToString(TWeakObjectPtr& SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA5F20
		UClass Conv_SoftClassReferenceToClass(TWeakObjectPtr& SoftClass); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA5E40
		TWeakObjectPtr Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA5D60
		FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA5C80
		FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA5BA0
		TWeakObjectPtr Conv_ObjectToSoftObjectReference(UObject Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA5AC0
		UClass Conv_ObjectToClass(UObject Object, UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF410FA59E0
		UObject Conv_InterfaceToObject(TScriptInterface& Interface); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA5900
		FSoftComponentReference Conv_ComponentReferenceToSoftComponentReference(FComponentReference& ComponentReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA55E0
		TWeakObjectPtr Conv_ClassToSoftClassReference(UClass& Class); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA5500
		void ControlScreensaver(bool bAllowScreenSaver); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA5420
		bool ComponentOverlapComponents(UPrimitiveComponent Component, FTransform& ComponentTransform, TArray& ObjectTypes, UClass ComponentClassFilter, TArray& ActorsToIgnore, TArray& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA5340
		bool ComponentOverlapActors(UPrimitiveComponent Component, FTransform& ComponentTransform, TArray& ObjectTypes, UClass ActorClassFilter, TArray& ActorsToIgnore, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA5260
		void CollectGarbage(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA5180
		bool CapsuleTraceSingleForObjects(UObject WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA50A0
		bool CapsuleTraceSingleByProfile(UObject WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4FC0
		bool CapsuleTraceSingle(UObject WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4EE0
		bool CapsuleTraceMultiForObjects(UObject WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4E00
		bool CapsuleTraceMultiByProfile(UObject WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4D20
		bool CapsuleTraceMulti(UObject WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4C40
		bool CapsuleOverlapComponents(UObject WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray& ObjectTypes, UClass ComponentClassFilter, TArray& ActorsToIgnore, TArray& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4B60
		bool CapsuleOverlapActors(UObject WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray& ObjectTypes, UClass ActorClassFilter, TArray& ActorsToIgnore, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4A80
		bool CanLaunchURL(FString URL); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA49A0
		void CancelTransaction(int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA48C0
		void BreakTopLevelAssetPath(FTopLevelAssetPath& TopLevelAssetPath, FString& PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF410FA47E0
		void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA4700
		void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA4620
		void BreakARFilter(FARFilter InARFilter, TArray& PackageNames, TArray& PackagePaths, TArray& SoftObjectPaths, TArray& ClassPaths, TSet& RecursiveClassPathsExclusionSet, TArray& ClassNames, TSet& RecursiveClassesExclusionSet, bool& bRecursivePaths, bool& bRecursiveClasses, bool& bIncludeOnlyOnDiskAssets); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF410FA4540
		bool BoxTraceSingleForObjects(UObject WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4460
		bool BoxTraceSingleByProfile(UObject WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA4380
		bool BoxTraceSingle(UObject WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA42A0
		bool BoxTraceMultiForObjects(UObject WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TArray& ObjectTypes, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA41C0
		bool BoxTraceMultiByProfile(UObject WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, FName ProfileName, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA40E0
		bool BoxTraceMulti(UObject WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TEnumAsByte TraceChannel, bool bTraceComplex, TArray& ActorsToIgnore, TEnumAsByte DrawDebugType, TArray& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA3F30
		bool BoxOverlapComponents(UObject WorldContextObject, FVector BoxPos, FVector Extent, TArray& ObjectTypes, UClass ComponentClassFilter, TArray& ActorsToIgnore, TArray& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA3E50
		bool BoxOverlapActors(UObject WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray& ObjectTypes, UClass ActorClassFilter, TArray& ActorsToIgnore, TArray& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF410FA3D08
		int32_t BeginTransaction(FString Context, FText Description, UObject PrimaryObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF410FA3C28
		FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF410FA3A88
	};


	// Class Engine.BlueprintPathsLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintPathsLibrary");
			return ret;
		}

		FString VideoCaptureDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414575038
		void ValidatePath(FString InPath, bool& bDidSucceed, FText& OutReason); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414574F58
		void Split(FString InPath, FString& PathPart, FString& FilenamePart, FString& ExtensionPart); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414574E78
		FString SourceConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574D98
		bool ShouldSaveToUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574CB8
		FString ShaderWorkingDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574BD8
		void SetProjectFilePath(FString NewGameProjectFilePath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414574AF8
		FString SetExtension(FString InPath, FString InNewExtension); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574A18
		FString ScreenShotDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574938
		FString SandboxesDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574858
		FString RootDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574778
		void RemoveDuplicateSlashes(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414574698
		FString ProjectUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145745B8
		FString ProjectSavedDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145744D8
		FString ProjectPluginsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145743F8
		FString ProjectPersistentDownloadDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574318
		FString ProjectModsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574238
		FString ProjectLogDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574158
		FString ProjectIntermediateDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414574078
		FString ProjectDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573F98
		FString ProjectContentDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573EB8
		FString ProjectConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573DD8
		FString ProfilingDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573CF8
		void NormalizeFilename(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414573C18
		void NormalizeDirectoryName(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414573B38
		FString MakeValidFileName(FString InString, FString InReplacementChar); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573A58
		void MakeStandardFilename(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414573978
		void MakePlatformFilename(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414573898
		bool MakePathRelativeTo(FString InPath, FString InRelativeTo, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF4145737B8
		FString LaunchDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145736D8
		bool IsSamePath(FString PathA, FString PathB); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145735F8
		bool IsRestrictedPath(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573518
		bool IsRelative(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573438
		bool IsProjectFilePathSet(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573358
		bool IsDrive(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573278
		bool HasProjectPersistentDownloadDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414573198
		TArray GetToolTipLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145730B8
		TArray GetRestrictedFolderNames(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572FD8
		FString GetRelativePathToRoot(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572EF8
		TArray GetPropertyNameLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572E18
		FString GetProjectFilePath(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572D38
		FString GetPath(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572C58
		FString GetInvalidFileSystemChars(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572B78
		TArray GetGameLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572A98
		FString GetExtension(FString InPath, bool bIncludeDot); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145729B8
		TArray GetEngineLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145728D8
		TArray GetEditorLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145727F8
		FString GetCleanFilename(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572718
		FString GetBaseFilename(FString InPath, bool bRemovePath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572638
		FString GeneratedConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572558
		FString GameUserDeveloperDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572478
		FString GameSourceDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572398
		FString GameDevelopersDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145722B8
		FString GameAgnosticSavedDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145721D8
		bool FileExists(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145720F8
		FString FeaturePackDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414572018
		FString EnterprisePluginsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571F38
		FString EnterpriseFeaturePackDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571E58
		FString EnterpriseDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571D78
		FString EngineVersionAgnosticUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571C98
		FString EngineUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571BB8
		FString EngineSourceDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571AD8
		FString EngineSavedDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145719F8
		FString EnginePluginsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571918
		FString EngineIntermediateDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571838
		FString EngineDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571758
		FString EngineContentDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571678
		FString EngineConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571598
		bool DirectoryExists(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145714B8
		FString DiffDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145713D8
		FString CreateTempFilename(FString Path, FString Prefix, FString Extension); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145712F8
		FString ConvertToSandboxPath(FString InPath, FString InSandboxName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571218
		FString ConvertRelativePathToFull(FString InPath, FString InBasePath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571138
		FString ConvertFromSandboxPath(FString InPath, FString InSandboxName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414571058
		FString Combine(TArray& InPaths); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414570F78
		bool CollapseRelativeDirectories(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414570E98
		FString CloudDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570DB8
		FString ChangeExtension(FString InPath, FString InNewExtension); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570CD8
		FString BugItDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570BF8
		FString AutomationTransientDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570B18
		FString AutomationLogDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570A38
		FString AutomationDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414570958
	};


	// Class Engine.PlatformGameInstance
	// Inherited from UGameInstance -> UObject
	// Size: 0xD0 (0x290 - 0x1C0)
	class UPlatformGameInstance : public UGameInstance	
	{
	public:
		FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x1C0(0x10)
		FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1D0(0x10)
		FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1E0(0x10)
		FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1F0(0x10)
		FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x200(0x10)
		FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x210(0x10)
		FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x220(0x10)
		FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x230(0x10)
		FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x240(0x10)
		FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x250(0x10)
		FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x260(0x10)
		FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x270(0x10)
		FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x280(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformGameInstance");
			return ret;
		}

		void PlatformStartupArgumentsDelegate__DelegateSignature(TArray& StartupArguments); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FB4710
		void PlatformScreenOrientationChangedDelegate__DelegateSignature(TEnumAsByte inScreenOrientation); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB45C8
		void PlatformRegisteredForUserNotificationsDelegate__DelegateSignature(int32_t inInt); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB44E8
		void PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(TArray& inArray); // Flags: MulticastDelegate|Public|Delegate|HasOutParms 0x7FF410FB4408
		void PlatformReceivedRemoteNotificationDelegate__DelegateSignature(FString InString, TEnumAsByte inAppState); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB4328
		void PlatformReceivedLocalNotificationDelegate__DelegateSignature(FString InString, int32_t inInt, TEnumAsByte inAppState); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB41E0
		void PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(FString InString); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB4100
		void PlatformDelegate__DelegateSignature(); // Flags: MulticastDelegate|Public|Delegate 0x7FF410FB4020
	};


	// Class Engine.BlueprintPlatformLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintPlatformLibrary");
			return ret;
		}

		void SetAllowedDeviceOrientation(TEnumAsByte NewAllowedDeviceOrientation); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145759D8
		int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF4145758F8
		void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414575818
		int32_t ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414575738
		int32_t ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414575658
		void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF414575578
		TEnumAsByte GetDeviceOrientation(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414575498
		TEnumAsByte GetAllowedDeviceOrientation(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF4145753B8
		void ClearAllLocalNotifications(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145752D8
		void CancelLocalNotificationById(int32_t NotificationID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF4145751F8
		void CancelLocalNotification(FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414575118
	};


	// Class Engine.BlueprintTypeConversions
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintTypeConversions : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintTypeConversions");
			return ret;
		}

		TSet ConvertSetType(TSet& Inset); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms 0x7FF414576C38
		TMap ConvertMapType(TMap& InMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms 0x7FF414576B58
		int32_t ConvertFVector4fToFVector4d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576A78
		int32_t ConvertFVector4dToFVector4f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576998
		int32_t ConvertFVector3fToFVector3d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF4145768B8
		int32_t ConvertFVector3dToFVector3f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF4145767D8
		int32_t ConvertFVector2fToFVector2d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF4145766F8
		int32_t ConvertFVector2dToFVector2f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576618
		int32_t ConvertFTransform3fToFTransform3d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576538
		int32_t ConvertFTransform3dToFTransform3f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576458
		int32_t ConvertFRotator3fToFRotator3d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576378
		int32_t ConvertFRotator3dToFRotator3f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414576298
		int32_t ConvertFQuat4fToFQuat4d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF4145761B8
		int32_t ConvertFQuat4dToFQuat4f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF4145760D8
		int32_t ConvertFPlane4fToFPlane4d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414575FF8
		int32_t ConvertFPlane4dToFPlane4f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414575F18
		int32_t ConvertFMatrix44fToFMatrix44d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414575E38
		int32_t ConvertFMatrix44dToFMatrix44f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414575D58
		int32_t ConvertFBox2fToFBox2d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414575C78
		int32_t ConvertFBox2dToFBox2f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public 0x7FF414575B98
		TArray ConvertArrayType(TArray& inArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms 0x7FF414575AB8
	};


	// Class Engine.ImportanceSamplingLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ImportanceSamplingLibrary");
			return ret;
		}

		float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414577418
		FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414577338
		FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414577258
		float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414577178
		FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414577098
		FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414576FB8
		FImportanceTexture MakeImportanceTexture(UTexture2D Texture, TEnumAsByte WeightingFunc); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414576ED8
		void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 0x7FF414576DF8
		void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, UTexture2D& Texture, TEnumAsByte& WeightingFunc); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 0x7FF414576D18
	};


	// Class Engine.Layer
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class ULayer : public UObject	
	{
	public:
		FName LayerName; // 0x28(0x4)
		bool bIsVisible : 1; // 0x2C:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		TArray ActorStats; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Layer");
			return ret;
		}
	};


	// Class Engine.ActorContainer
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UActorContainer : public UObject	
	{
	public:
		TMap Actors; // 0x28(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorContainer");
			return ret;
		}
	};


	// Class Engine.LevelActorContainer
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class ULevelActorContainer : public UObject	
	{
	public:
		TArray Actors; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelActorContainer");
			return ret;
		}
	};


	// Class Engine.LevelBounds
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ALevelBounds : public AActor	
	{
	public:
		UBoxComponent BoxComponent; // 0x290(0x8)
		bool bAutoUpdateBounds; // 0x298(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelBounds");
			return ret;
		}
	};


	// Class Engine.LevelInstance
	// Inherited from AActor -> UObject
	// Size: 0x98 (0x328 - 0x290)
	class ALevelInstance : public AActor	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		ULevelInstanceComponent LevelInstanceComponent; // 0x298(0x8)
		TWeakObjectPtr CookedWorldAsset; // 0x2A0(0x20)
		FGuid LevelInstanceSpawnGuid; // 0x2C0(0x10)
		unsigned char UnknownData03_7[0x58]; // 0x2D0(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstance");
			return ret;
		}

		void OnRep_LevelInstanceSpawnGuid(); // Flags: Final|RequiredAPI|Native|Public 0x7FF4145774F8
	};


	// Class Engine.LevelInstanceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x220 - 0x220)
	class ULevelInstanceComponent : public USceneComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceComponent");
			return ret;
		}
	};


	// Class Engine.LevelInstanceEditorInstanceActor
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ALevelInstanceEditorInstanceActor : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceEditorInstanceActor");
			return ret;
		}
	};


	// Class Engine.LevelStreamingLevelInstanceEditor
	// Inherited from ULevelStreamingAlwaysLoaded -> ULevelStreaming -> UObject
	// Size: 0x0 (0x1A0 - 0x1A0)
	class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingLevelInstanceEditor");
			return ret;
		}
	};


	// Class Engine.LevelInstanceEditorObject
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceEditorObject : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceEditorObject");
			return ret;
		}
	};


	// Class Engine.LevelInstancePivot
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALevelInstancePivot : public AActor	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePivot");
			return ret;
		}
	};


	// Class Engine.LevelStreamingLevelInstanceEditorPropertyOverride
	// Inherited from ULevelStreamingDynamic -> ULevelStreaming -> UObject
	// Size: 0x0 (0x1A0 - 0x1A0)
	class ULevelStreamingLevelInstanceEditorPropertyOverride : public ULevelStreamingDynamic	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingLevelInstanceEditorPropertyOverride");
			return ret;
		}
	};


	// Class Engine.LevelInstanceInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceInterface");
			return ret;
		}

		void UnloadLevelInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414577A38
		bool SetWorldAsset(TWeakObjectPtr WorldAsset); // Flags: Native|Public|BlueprintCallable 0x7FF414577958
		void LoadLevelInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414577878
		bool IsLoaded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414577798
		TWeakObjectPtr GetWorldAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145776B8
		ULevel GetLoadedLevel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145775D8
	};


	// Class Engine.LevelStreamingLevelInstance
	// Inherited from ULevelStreamingDynamic -> ULevelStreaming -> UObject
	// Size: 0x30 (0x1D0 - 0x1A0)
	class ULevelStreamingLevelInstance : public ULevelStreamingDynamic	
	{
	public:
		unsigned char UnknownData01_1[0x30]; // 0x1A0(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingLevelInstance");
			return ret;
		}
	};


	// Class Engine.LevelInstanceSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x198 (0x1C8 - 0x30)
	class ULevelInstanceSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x198]; // 0x30(0x198) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceSubsystem");
			return ret;
		}
	};


	// Class Engine.LevelScriptActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALevelScriptActor : public AActor	
	{
	public:
		bool bInputEnabled : 1; // 0x290:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x291(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelScriptActor");
			return ret;
		}

		void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation); // Flags: RequiredAPI|Event|Public|HasDefaults|BlueprintEvent 0x7FF414577DB8
		void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414577CD8
		bool RemoteEvent(FName EventName); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414577BF8
		void LevelReset(); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent 0x7FF414577B18
	};


	// Class Engine.LevelScriptBlueprint
	// Inherited from UBlueprint -> UBlueprintCore -> UObject
	// Size: 0x0 (0xA8 - 0xA8)
	class ULevelScriptBlueprint : public UBlueprint	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelScriptBlueprint");
			return ret;
		}
	};


	// Class Engine.LightmappedSurfaceCollection
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class ULightmappedSurfaceCollection : public UObject	
	{
	public:
		UModel SourceModel; // 0x28(0x8)
		TArray Surfaces; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmappedSurfaceCollection");
			return ret;
		}
	};


	// Class Engine.LightmassCharacterIndirectDetailVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ALightmassCharacterIndirectDetailVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassCharacterIndirectDetailVolume");
			return ret;
		}
	};


	// Class Engine.LightmassImportanceVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ALightmassImportanceVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassImportanceVolume");
			return ret;
		}
	};


	// Class Engine.LightmassPrimitiveSettingsObject
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class ULightmassPrimitiveSettingsObject : public UObject	
	{
	public:
		FLightmassPrimitiveSettings LightmassSettings; // 0x28(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassPrimitiveSettingsObject");
			return ret;
		}
	};


	// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULightWeightInstanceBlueprintFunctionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightWeightInstanceBlueprintFunctionLibrary");
			return ret;
		}

		FActorInstanceHandle CreateNewLightWeightInstance(UClass ActorClass, FTransform Transform, UDataLayerInstance Layer, UWorld World); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414577F78
		FActorInstanceHandle ConvertActorToLightWeightInstance(AActor Actor); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414577E98
	};


	// Class Engine.LightWeightInstanceManager
	// Inherited from AActor -> UObject
	// Size: 0xB8 (0x348 - 0x290)
	class ALightWeightInstanceManager : public AActor	
	{
	public:
		unsigned char UnknownData02_3[0x18]; // 0x290(0x18) UNKNOWN PROPERTY
		UClass RepresentedClass; // 0x2A8(0x8)
		UClass AcceptedClass; // 0x2B0(0x8)
		TArray InstanceTransforms; // 0x2B8(0x10)
		TMap Actors; // 0x2C8(0x50)
		unsigned char UnknownData03_6[0x10]; // 0x318(0x10) UNKNOWN PROPERTY
		TArray FreeIndices; // 0x328(0x10)
		TArray ValidIndices; // 0x338(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightWeightInstanceManager");
			return ret;
		}

		void OnSpawnedActorDestroyed(AActor DestroyedActor); // Flags: Final|RequiredAPI|Native|Private 0x7FF414578138
		void OnRep_Transforms(); // Flags: RequiredAPI|Native|Protected 0x7FF414578058
	};


	// Class Engine.LightWeightInstanceStaticMeshManager
	// Inherited from ALightWeightInstanceManager -> AActor -> UObject
	// Size: 0x60 (0x3A8 - 0x348)
	class ALightWeightInstanceStaticMeshManager : public ALightWeightInstanceManager	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x348(0x8) UNKNOWN PROPERTY
		TWeakObjectPtr StaticMesh; // 0x350(0x20)
		UInstancedStaticMeshComponent ISMComponent; // 0x370(0x8)
		TArray RenderingIndicesToDataIndices; // 0x378(0x10)
		TArray DataIndicesToRenderingIndices; // 0x388(0x10)
		unsigned char UnknownData03_7[0x10]; // 0x398(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightWeightInstanceStaticMeshManager");
			return ret;
		}

		void OnRep_StaticMesh(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF414578218
	};


	// Class Engine.LocalPlayer
	// Inherited from UPlayer -> UObject
	// Size: 0x268 (0x2B0 - 0x48)
	class ULocalPlayer : public UPlayer	
	{
	public:
		unsigned char UnknownData05_3[0x30]; // 0x48(0x30) UNKNOWN PROPERTY
		UGameViewportClient ViewportClient; // 0x78(0x8)
		unsigned char UnknownData06_6[0x38]; // 0x80(0x38) UNKNOWN PROPERTY
		TEnumAsByte AspectRatioAxisConstraint; // 0xB8(0x1)
		unsigned char UnknownData07_6[0x7]; // 0xB9(0x7) UNKNOWN PROPERTY
		UClass PendingLevelPlayerControllerClass; // 0xC0(0x8)
		bool bSentSplitJoin : 1; // 0xC8:0(0x1)
		unsigned char UnknownData08_5[0x17]; // 0xC9(0x17) UNKNOWN PROPERTY
		int32_t ControllerId; // 0xE0(0x4)
		unsigned char UnknownData09_7[0x1CC]; // 0xE4(0x1CC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalPlayer");
			return ret;
		}
	};


	// Class Engine.LocationVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x10 (0x2D8 - 0x2C8)
	class ALocationVolume : public AVolume	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x2C8(0x8) UNKNOWN PROPERTY
		FColor DebugColor; // 0x2D0(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x2D4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocationVolume");
			return ret;
		}

		void Unload(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145784B8
		void Load(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145783D8
		bool IsLoaded(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145782F8
	};


	// Class Engine.LODActor
	// Inherited from AActor -> UObject
	// Size: 0x88 (0x318 - 0x290)
	class ALODActor : public AActor	
	{
	public:
		UStaticMeshComponent StaticMeshComponent; // 0x290(0x8)
		TMap InstancedStaticMeshComponents; // 0x298(0x50)
		UHLODProxy Proxy; // 0x2E8(0x8)
		FName Key; // 0x2F0(0x4)
		float LODDrawDistance; // 0x2F4(0x4)
		int32_t LODLevel; // 0x2F8(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x2FC(0x4) UNKNOWN PROPERTY
		TArray SubActors; // 0x300(0x10)
		char CachedNumHLODLevels; // 0x310(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x311(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LODActor");
			return ret;
		}

		void OnSubActorEndPlay(AActor Actor, TEnumAsByte Reason); // Flags: Final|RequiredAPI|Native|Private 0x7FF414578598
	};


	// Class Engine.MaterialInstanceActor
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AMaterialInstanceActor : public AActor	
	{
	public:
		TArray TargetActors; // 0x290(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceActor");
			return ret;
		}
	};


	// Class Engine.MaterialEditorOnlyData
	// Inherited from UMaterialInterfaceEditorOnlyData -> UObject
	// Size: 0x638 (0x678 - 0x40)
	class UMaterialEditorOnlyData : public UMaterialInterfaceEditorOnlyData	
	{
	public:
		FColorMaterialInput BaseColor; // 0x40(0x30)
		FScalarMaterialInput Metallic; // 0x70(0x30)
		FScalarMaterialInput Specular; // 0xA0(0x30)
		FScalarMaterialInput Roughness; // 0xD0(0x30)
		FScalarMaterialInput Anisotropy; // 0x100(0x30)
		FVectorMaterialInput Normal; // 0x130(0x38)
		FVectorMaterialInput Tangent; // 0x168(0x38)
		FColorMaterialInput EmissiveColor; // 0x1A0(0x30)
		FScalarMaterialInput Opacity; // 0x1D0(0x30)
		FScalarMaterialInput OpacityMask; // 0x200(0x30)
		FVectorMaterialInput WorldPositionOffset; // 0x230(0x38)
		FScalarMaterialInput Displacement; // 0x268(0x30)
		FColorMaterialInput SubsurfaceColor; // 0x298(0x30)
		FScalarMaterialInput ClearCoat; // 0x2C8(0x30)
		FScalarMaterialInput ClearCoatRoughness; // 0x2F8(0x30)
		FScalarMaterialInput AmbientOcclusion; // 0x328(0x30)
		FScalarMaterialInput Refraction; // 0x358(0x30)
		FVector2MaterialInput CustomizedUVs; // 0x388(0x1C0)
		FMaterialAttributesInput MaterialAttributes; // 0x548(0x30)
		FScalarMaterialInput PixelDepthOffset; // 0x578(0x30)
		FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x5A8(0x28)
		unsigned char UnknownData02_6[0x8]; // 0x5D0(0x8) UNKNOWN PROPERTY
		FScalarMaterialInput SurfaceThickness; // 0x5D8(0x30)
		FSubstrateMaterialInput FrontMaterial; // 0x608(0x28)
		unsigned char UnknownData03_6[0x8]; // 0x630(0x8) UNKNOWN PROPERTY
		FMaterialExpressionCollection ExpressionCollection; // 0x638(0x30)
		TArray ParameterGroupData; // 0x668(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.Material
	// Inherited from UMaterialInterface -> UObject
	// Size: 0x178 (0x230 - 0xB8)
	class UMaterial : public UMaterialInterface	
	{
	public:
		UPhysicalMaterial PhysMaterial; // 0xB8(0x8)
		UPhysicalMaterialMask PhysMaterialMask; // 0xC0(0x8)
		UPhysicalMaterial PhysicalMaterialMap; // 0xC8(0x40)
		TArray RenderTracePhysicalMaterialOutputs; // 0x108(0x10)
		TEnumAsByte MaterialDomain; // 0x118(0x1)
		TEnumAsByte BlendMode; // 0x119(0x1)
		TEnumAsByte DecalBlendMode; // 0x11A(0x1)
		TEnumAsByte MaterialDecalResponse; // 0x11B(0x1)
		unsigned char UnknownData11_6[0x4]; // 0x11C(0x4) UNKNOWN PROPERTY
		FMaterialOverrideNanite NaniteOverrideMaterial; // 0x120(0x30)
		FDisplacementScaling DisplacementScaling; // 0x150(0x8)
		FDisplacementFadeRange DisplacementFadeRange; // 0x158(0x8)
		TEnumAsByte ShadingModel; // 0x160(0x1)
		bool bCastDynamicShadowAsMasked : 1; // 0x161:0(0x1)
		FMaterialShadingModelField ShadingModels; // 0x162(0x2)
		float OpacityMaskClipValue; // 0x164(0x4)
		bool bEnableSeparateTranslucency : 1; // 0x168:0(0x1)
		bool bEnableResponsiveAA : 1; // 0x168:1(0x1)
		bool bScreenSpaceReflections : 1; // 0x168:2(0x1)
		bool bContactShadows : 1; // 0x168:3(0x1)
		bool TwoSided : 1; // 0x168:4(0x1)
		bool bIsThinSurface : 1; // 0x168:5(0x1)
		bool DitheredLODTransition : 1; // 0x168:6(0x1)
		bool DitherOpacityMask : 1; // 0x168:7(0x1)
		bool bAllowNegativeEmissiveColor : 1; // 0x169:0(0x1)
		bool bHasPixelAnimation : 1; // 0x169:1(0x1)
		bool bEnableTessellation : 1; // 0x169:2(0x1)
		bool bEnableDisplacementFade : 1; // 0x169:3(0x1)
		TEnumAsByte TranslucencyPass; // 0x16A(0x1)
		TEnumAsByte TranslucencyLightingMode; // 0x16B(0x1)
		bool bEnableMobileSeparateTranslucency : 1; // 0x16C:0(0x1)
		unsigned char UnknownData12_5[0x3]; // 0x16D(0x3) UNKNOWN PROPERTY
		int32_t NumCustomizedUVs; // 0x170(0x4)
		float TranslucencyDirectionalLightingIntensity; // 0x174(0x4)
		float TranslucentShadowDensityScale; // 0x178(0x4)
		float TranslucentSelfShadowDensityScale; // 0x17C(0x4)
		float TranslucentSelfShadowSecondDensityScale; // 0x180(0x4)
		float TranslucentSelfShadowSecondOpacity; // 0x184(0x4)
		float TranslucentBackscatteringExponent; // 0x188(0x4)
		FLinearColor TranslucentMultipleScatteringExtinction; // 0x18C(0x10)
		float TranslucentShadowStartOffset; // 0x19C(0x4)
		bool bDisableDepthTest : 1; // 0x1A0:0(0x1)
		bool bWriteOnlyAlpha : 1; // 0x1A0:1(0x1)
		bool bGenerateSphericalParticleNormals : 1; // 0x1A0:2(0x1)
		bool bTangentSpaceNormal : 1; // 0x1A0:3(0x1)
		bool bUseEmissiveForDynamicAreaLighting : 1; // 0x1A0:4(0x1)
		bool bUsedAsSpecialEngineMaterial : 1; // 0x1A0:5(0x1)
		bool bUsedWithSkeletalMesh : 1; // 0x1A0:6(0x1)
		bool bUsedWithEditorCompositing : 1; // 0x1A0:7(0x1)
		bool bUsedWithParticleSprites : 1; // 0x1A1:0(0x1)
		bool bUsedWithBeamTrails : 1; // 0x1A1:1(0x1)
		bool bUsedWithMeshParticles : 1; // 0x1A1:2(0x1)
		bool bUsedWithNiagaraSprites : 1; // 0x1A1:3(0x1)
		bool bUsedWithNiagaraRibbons : 1; // 0x1A1:4(0x1)
		bool bUsedWithNiagaraMeshParticles : 1; // 0x1A1:5(0x1)
		bool bUsedWithGeometryCache : 1; // 0x1A1:6(0x1)
		bool bUsedWithStaticLighting : 1; // 0x1A1:7(0x1)
		bool bUsedWithMorphTargets : 1; // 0x1A2:0(0x1)
		bool bUsedWithSplineMeshes : 1; // 0x1A2:1(0x1)
		bool bUsedWithInstancedStaticMeshes : 1; // 0x1A2:2(0x1)
		bool bUsedWithGeometryCollections : 1; // 0x1A2:3(0x1)
		bool bUsesDistortion : 1; // 0x1A2:4(0x1)
		bool bRootNodeOverridesDefaultDistortion : 1; // 0x1A2:5(0x1)
		bool bUsedWithClothing : 1; // 0x1A2:6(0x1)
		unsigned char UnknownData13_3[0x1]; // 0x1A3(0x1) UNKNOWN PROPERTY
		bool bUsedWithWater : 1; // 0x1A4:0(0x1)
		bool bUsedWithHairStrands : 1; // 0x1A4:1(0x1)
		bool bUsedWithLidarPointCloud : 1; // 0x1A4:2(0x1)
		bool bUsedWithVirtualHeightfieldMesh : 1; // 0x1A4:3(0x1)
		bool bUsedWithNanite : 1; // 0x1A4:4(0x1)
		bool bUsedWithVolumetricCloud : 1; // 0x1A4:5(0x1)
		bool bUsedWithHeterogeneousVolumes : 1; // 0x1A4:6(0x1)
		unsigned char UnknownData14_3[0x3]; // 0x1A5(0x3) UNKNOWN PROPERTY
		bool bUsedWithUI : 1; // 0x1A8:0(0x1)
		bool bForceCompatibleWithLightFunctionAtlas : 1; // 0x1A8:1(0x1)
		bool bAutomaticallySetUsageInEditor : 1; // 0x1A8:2(0x1)
		bool bFullyRough : 1; // 0x1A8:3(0x1)
		bool bUseFullPrecision : 1; // 0x1A8:4(0x1)
		TEnumAsByte FloatPrecisionMode; // 0x1A9(0x1)
		bool bUseLightmapDirectionality : 1; // 0x1AA:0(0x1)
		bool bMobileEnableHighQualityBRDF : 1; // 0x1AA:1(0x1)
		bool bUseAlphaToCoverage : 1; // 0x1AA:2(0x1)
		unsigned char UnknownData15_3[0x1]; // 0x1AB(0x1) UNKNOWN PROPERTY
		bool bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x1AC:0(0x1)
		unsigned char UnknownData16_3[0x3]; // 0x1AD(0x3) UNKNOWN PROPERTY
		bool bUseHQForwardReflections : 1; // 0x1B0:0(0x1)
		bool bForwardBlendsSkyLightCubemaps : 1; // 0x1B0:1(0x1)
		bool bUsePlanarForwardReflections : 1; // 0x1B0:2(0x1)
		bool bNormalCurvatureToRoughness : 1; // 0x1B0:3(0x1)
		bool AllowTranslucentCustomDepthWrites : 1; // 0x1B0:4(0x1)
		bool bAllowFrontLayerTranslucency : 1; // 0x1B0:5(0x1)
		bool Wireframe : 1; // 0x1B0:6(0x1)
		TEnumAsByte ShadingRate; // 0x1B1(0x1)
		bool bAllowVariableRateShading : 1; // 0x1B2:0(0x1)
		bool bCanMaskedBeAssumedOpaque : 1; // 0x1B2:1(0x1)
		bool bIsMasked : 1; // 0x1B2:2(0x1)
		bool bIsPreviewMaterial : 1; // 0x1B2:3(0x1)
		bool bIsFunctionPreviewMaterial : 1; // 0x1B2:4(0x1)
		bool bUseMaterialAttributes : 1; // 0x1B2:5(0x1)
		bool bEnableExecWire : 1; // 0x1B2:6(0x1)
		bool bEnableNewHLSLGenerator : 1; // 0x1B2:7(0x1)
		bool bCastRayTracedShadows : 1; // 0x1B3:0(0x1)
		bool bUseTranslucencyVertexFog : 1; // 0x1B3:1(0x1)
		bool bApplyCloudFogging : 1; // 0x1B3:2(0x1)
		bool bIsSky : 1; // 0x1B3:3(0x1)
		bool bComputeFogPerPixel : 1; // 0x1B3:4(0x1)
		bool bOutputTranslucentVelocity : 1; // 0x1B3:5(0x1)
		bool bAllowDevelopmentShaderCompile : 1; // 0x1B3:6(0x1)
		bool bIsMaterialEditorStatsMaterial : 1; // 0x1B3:7(0x1)
		TEnumAsByte BlendableLocation; // 0x1B4(0x1)
		bool BlendableOutputAlpha : 1; // 0x1B5:0(0x1)
		unsigned char UnknownData17_5[0x2]; // 0x1B6(0x2) UNKNOWN PROPERTY
		FName UserSceneTexture; // 0x1B8(0x4)
		FIntPoint UserTextureDivisor; // 0x1BC(0x8)
		FName ResolutionRelativeToInput; // 0x1C4(0x4)
		bool bDisablePreExposureScale : 1; // 0x1C8:0(0x1)
		bool bUsedWithNeuralNetworks : 1; // 0x1C8:1(0x1)
		bool bEnableStencilTest : 1; // 0x1C8:2(0x1)
		TEnumAsByte StencilCompare; // 0x1C9(0x1)
		char StencilRefValue; // 0x1CA(0x1)
		int8_t NeuralProfileId; // 0x1CB(0x1)
		TEnumAsByte RefractionMode; // 0x1CC(0x1)
		TEnumAsByte RefractionMethod; // 0x1CD(0x1)
		TEnumAsByte RefractionCoverageMode; // 0x1CE(0x1)
		TEnumAsByte PixelDepthOffsetMode; // 0x1CF(0x1)
		int32_t BlendablePriority; // 0x1D0(0x4)
		bool bIsBlendable : 1; // 0x1D4:0(0x1)
		unsigned char UnknownData18_5[0x1]; // 0x1D5(0x1) UNKNOWN PROPERTY
		uint16_t PreshaderGap; // 0x1D6(0x2)
		uint32_t UsageFlagWarnings; // 0x1D8(0x4)
		unsigned char UnknownData19_6[0x4]; // 0x1DC(0x4) UNKNOWN PROPERTY
		float RefractionDepthBias; // 0x1E0(0x4)
		float MaxWorldPositionOffsetDisplacement; // 0x1E4(0x4)
		bool bAlwaysEvaluateWorldPositionOffset; // 0x1E8(0x1)
		unsigned char UnknownData20_6[0x7]; // 0x1E9(0x7) UNKNOWN PROPERTY
		FGuid StateId; // 0x1F0(0x10)
		unsigned char UnknownData21_7[0x30]; // 0x200(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Material");
			return ret;
		}
	};


	// Class Engine.MaterialInstanceEditorOnlyData
	// Inherited from UMaterialInterfaceEditorOnlyData -> UObject
	// Size: 0xA0 (0xE0 - 0x40)
	class UMaterialInstanceEditorOnlyData : public UMaterialInterfaceEditorOnlyData	
	{
	public:
		FStaticParameterSetEditorOnlyData StaticParameters; // 0x40(0xA0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialInstanceDynamic
	// Inherited from UMaterialInstance -> UMaterialInterface -> UObject
	// Size: 0x50 (0x2F8 - 0x2A8)
	class UMaterialInstanceDynamic : public UMaterialInstance	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x2A8(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceDynamic");
			return ret;
		}

		void SetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145798D8
		void SetVectorParameterValue(FName ParameterName, FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145797F8
		void SetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, UTexture Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414579718
		void SetTextureParameterValue(FName ParameterName, UTexture Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414579638
		void SetSparseVolumeTextureParameterValue(FName ParameterName, USparseVolumeTexture Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414579558
		void SetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, float Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414579478
		void SetScalarParameterValue(FName ParameterName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414579398
		bool SetScalarParameterByIndex(int32_t ParameterIndex, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145792B8
		void SetRuntimeVirtualTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, URuntimeVirtualTexture Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145791D8
		void SetRuntimeVirtualTextureParameterValue(FName ParameterName, URuntimeVirtualTexture Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145790F8
		void SetDoubleVectorParameterValue(FName ParameterName, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414579018
		void K2_InterpolateMaterialInstanceParams(UMaterialInstance SourceA, UMaterialInstance SourceB, float Alpha); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414578F38
		FLinearColor K2_GetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414578E58
		FLinearColor K2_GetVectorParameterValue(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414578D78
		UTexture K2_GetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414578C98
		UTexture K2_GetTextureParameterValue(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414578BB8
		float K2_GetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414578AD8
		float K2_GetScalarParameterValue(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145789F8
		void K2_CopyMaterialInstanceParameters(UMaterialInterface Source, bool bQuickParametersOnly); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414578918
		bool InitializeScalarParameterAndGetIndex(FName& ParameterName, float Value, int32_t& OutParameterIndex); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414578838
		void CopyParameterOverrides(UMaterialInstance MaterialInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414578758
		void CopyInterpParameters(UMaterialInstance Source); // Flags: Final|RequiredAPI|Native|Public 0x7FF414578678
	};


	// Class Engine.MaterialParameterCollection
	// Inherited from UObject
	// Size: 0x48 (0x70 - 0x28)
	class UMaterialParameterCollection : public UObject	
	{
	public:
		FGuid StateId; // 0x28(0x10)
		TArray ScalarParameters; // 0x38(0x10)
		TArray VectorParameters; // 0x48(0x10)
		unsigned char UnknownData01_7[0x18]; // 0x58(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialParameterCollection");
			return ret;
		}

		TArray GetVectorParameterNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414579C58
		FLinearColor GetVectorParameterDefaultValue(FName ParameterName, bool& bParameterFound); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414579B78
		TArray GetScalarParameterNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414579A98
		float GetScalarParameterDefaultValue(FName ParameterName, bool& bParameterFound); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4145799B8
	};


	// Class Engine.MeshMergeCullingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AMeshMergeCullingVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshMergeCullingVolume");
			return ret;
		}
	};


	// Class Engine.MeshSimplificationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UMeshSimplificationSettings : public UDeveloperSettings	
	{
	public:
		FName MeshReductionModuleName; // 0x30(0x4)
		bool bMeshReductionBackwardCompatible; // 0x34(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x35(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshSimplificationSettings");
			return ret;
		}
	};


	// Class Engine.MeshVertexPainterKismetLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshVertexPainterKismetLibrary");
			return ret;
		}

		void RemovePaintedVertices(UStaticMeshComponent StaticMeshComponent); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF414579EF8
		void PaintVerticesSingleColor(UStaticMeshComponent StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414579E18
		void PaintVerticesLerpAlongAxis(UStaticMeshComponent StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414579D38
	};


	// Class Engine.Model
	// Inherited from UObject
	// Size: 0x240 (0x268 - 0x28)
	class UModel : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x240]; // 0x28(0x240) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Model");
			return ret;
		}
	};


	// Class Engine.SimulatedClientNetConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0x0 (0x1E10 - 0x1E10)
	class USimulatedClientNetConnection : public UNetConnection	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SimulatedClientNetConnection");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsBaseListener
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UNetworkMetricsBaseListener : public UObject	
	{
	public:
		double IntervalSeconds; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsBaseListener");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsCSV
	// Inherited from UNetworkMetricsBaseListener -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UNetworkMetricsCSV : public UNetworkMetricsBaseListener	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x30(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsCSV");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsCSV_Replication
	// Inherited from UNetworkMetricsCSV -> UNetworkMetricsBaseListener -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UNetworkMetricsCSV_Replication : public UNetworkMetricsCSV	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsCSV_Replication");
			return ret;
		}
	};


	// Class Engine.NetworkSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UNetworkSettings : public UDeveloperSettings	
	{
	public:
		bool bVerifyPeer : 1; // 0x30:0(0x1)
		bool bEnableMultiplayerWorldOriginRebasing : 1; // 0x30:1(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TArray NetworkEmulationProfiles; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkSettings");
			return ret;
		}
	};


	// Class Engine.BandwidthTestActor
	// Inherited from AActor -> UObject
	// Size: 0x20 (0x2B0 - 0x290)
	class ABandwidthTestActor : public AActor	
	{
	public:
		FBandwidthTestGenerator BandwidthGenerator; // 0x290(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BandwidthTestActor");
			return ret;
		}
	};


	// Class Engine.DataStreamChannel
	// Inherited from UChannel -> UObject
	// Size: 0x2030 (0x2098 - 0x68)
	class UDataStreamChannel : public UChannel	
	{
	public:
		unsigned char UnknownData01_1[0x2030]; // 0x68(0x2030) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataStreamChannel");
			return ret;
		}
	};


	// Class Engine.ActorReplicationBridge
	// Inherited from UObjectReplicationBridge -> UReplicationBridge -> UObject
	// Size: 0x20 (0x5C0 - 0x5A0)
	class UActorReplicationBridge : public UObjectReplicationBridge	
	{
	public:
		unsigned char UnknownData02_3[0x10]; // 0x5A0(0x10) UNKNOWN PROPERTY
		UIrisObjectReferencePackageMap ObjectReferencePackageMap; // 0x5B0(0x8)
		unsigned char UnknownData03_7[0x8]; // 0x5B8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorReplicationBridge");
			return ret;
		}
	};


	// Class Engine.NetFaultConfig
	// Inherited from UEscalationManagerConfig -> UStatePerObjectConfig -> UObject
	// Size: 0x0 (0x88 - 0x88)
	class UNetFaultConfig : public UEscalationManagerConfig	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetFaultConfig");
			return ret;
		}
	};


	// Class Engine.NetPushModelHelpers
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNetPushModelHelpers : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetPushModelHelpers");
			return ret;
		}

		void MarkPropertyDirtyFromRepIndex(UObject Object, int32_t RepIndex, FName PropertyName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41457A0B8
		void MarkPropertyDirty(UObject Object, FName PropertyName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414579FD8
	};


	// Class Engine.NetworkMetricsConfig
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UNetworkMetricsConfig : public UObject	
	{
	public:
		TArray Listeners; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsConfig");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsDatabase
	// Inherited from UObject
	// Size: 0x190 (0x1B8 - 0x28)
	class UNetworkMetricsDatabase : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x190]; // 0x28(0x190) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsDatabase");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsPerfCounters
	// Inherited from UNetworkMetricsBaseListener -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UNetworkMetricsPerfCounters : public UNetworkMetricsBaseListener	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsPerfCounters");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsStats
	// Inherited from UNetworkMetricsBaseListener -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UNetworkMetricsStats : public UNetworkMetricsBaseListener	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x30(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsStats");
			return ret;
		}
	};


	// Class Engine.RPCDoSDetectionConfig
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class URPCDoSDetectionConfig : public UObject	
	{
	public:
		bool bRPCDoSDetection; // 0x28(0x1)
		bool bRPCDoSAnalytics; // 0x29(0x1)
		unsigned char UnknownData03_6[0x2]; // 0x2A(0x2) UNKNOWN PROPERTY
		int32_t HitchTimeQuotaMS; // 0x2C(0x4)
		int32_t HitchSuspendDetectionTimeMS; // 0x30(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		TArray DetectionSeverity; // 0x38(0x10)
		int32_t InitialConnectToleranceMS; // 0x48(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY
		TArray RPCBlockWhitelist; // 0x50(0x10)
		TArray RPCBlockAllowlist; // 0x60(0x10)
		TArray RPCAnalyticsThresholds; // 0x70(0x10)
		double RPCAnalyticsOverrideChance; // 0x80(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RPCDoSDetectionConfig");
			return ret;
		}
	};


	// Class Engine.NetworkSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x50 (0x80 - 0x30)
	class UNetworkSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x30(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkSubsystem");
			return ret;
		}
	};


	// Class Engine.Note
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ANote : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Note");
			return ret;
		}
	};


	// Class Engine.ObjectLibrary
	// Inherited from UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UObjectLibrary : public UObject	
	{
	public:
		UClass ObjectBaseClass; // 0x28(0x8)
		bool bHasBlueprintClasses; // 0x30(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TArray Objects; // 0x38(0x10)
		TArray WeakObjects; // 0x48(0x10)
		bool bUseWeakReferences; // 0x58(0x1)
		bool bIsFullyLoaded; // 0x59(0x1)
		unsigned char UnknownData03_7[0x4E]; // 0x5A(0x4E) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectLibrary");
			return ret;
		}
	};


	// Class Engine.ObjectReferencer
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UObjectReferencer : public UObject	
	{
	public:
		TArray ReferencedObjects; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectReferencer");
			return ret;
		}
	};


	// Class Engine.ObjectTraceWorldSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UObjectTraceWorldSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x30(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectTraceWorldSubsystem");
			return ret;
		}
	};


	// Class Engine.OnlineBlueprintCallProxyBase
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.OnlineBlueprintCallProxyBase");
			return ret;
		}
	};


	// Class Engine.OnlineEngineInterface
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UOnlineEngineInterface : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.OnlineEngineInterface");
			return ret;
		}
	};


	// Class Engine.OnlineSession
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UOnlineSession : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.OnlineSession");
			return ret;
		}
	};


	// Class Engine.PackageMapClient
	// Inherited from UPackageMap -> UObject
	// Size: 0x328 (0x408 - 0xE0)
	class UPackageMapClient : public UPackageMap	
	{
	public:
		unsigned char UnknownData01_1[0x328]; // 0xE0(0x328) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PackageMapClient");
			return ret;
		}
	};


	// Class Engine.PackedLevelActor
	// Inherited from ALevelInstance -> AActor -> UObject
	// Size: 0x0 (0x328 - 0x328)
	class APackedLevelActor : public ALevelInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PackedLevelActor");
			return ret;
		}
	};


	// Class Engine.EngineHandlerComponentFactory
	// Inherited from UHandlerComponentFactory -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineHandlerComponentFactory : public UHandlerComponentFactory	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineHandlerComponentFactory");
			return ret;
		}
	};


	// Class Engine.PainCausingVolume
	// Inherited from APhysicsVolume -> AVolume -> ABrush -> AActor -> UObject
	// Size: 0x28 (0x300 - 0x2D8)
	class APainCausingVolume : public APhysicsVolume	
	{
	public:
		bool bPainCausing : 1; // 0x2D8:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x2D9(0x3) UNKNOWN PROPERTY
		float DamagePerSec; // 0x2DC(0x4)
		UClass DamageType; // 0x2E0(0x8)
		float PainInterval; // 0x2E8(0x4)
		bool bEntryPain : 1; // 0x2EC:0(0x1)
		bool BACKUP_bPainCausing : 1; // 0x2EC:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x2ED(0x3) UNKNOWN PROPERTY
		AController DamageInstigator; // 0x2F0(0x8)
		unsigned char UnknownData05_7[0x8]; // 0x2F8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PainCausingVolume");
			return ret;
		}
	};


	// Class Engine.ParticleEventManager
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class AParticleEventManager : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleEventManager");
			return ret;
		}
	};


	// Class Engine.AsyncPhysicsInputComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x28 (0xC8 - 0xA0)
	class UAsyncPhysicsInputComponent : public UActorComponent	
	{
	public:
		UClass DataClass; // 0xA0(0x8)
		TArray BufferedData; // 0xA8(0x10)
		UAsyncPhysicsData DataToConsume; // 0xB8(0x8)
		UAsyncPhysicsData DataToWrite; // 0xC0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncPhysicsInputComponent");
			return ret;
		}

		void ServerRPCBufferInput(UAsyncPhysicsData AsyncPhysicsData); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer 0x7FF41457A358
		UAsyncPhysicsData GetDataToWrite(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41457A278
		UAsyncPhysicsData GetDataToConsume(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41457A198
	};


	// Class Engine.ClusterUnionActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AClusterUnionActor : public AActor	
	{
	public:
		UClusterUnionComponent ClusterUnion; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ClusterUnionActor");
			return ret;
		}

		UClusterUnionComponent GetClusterUnionComponent(); // Flags: Final|Native|Public|Const 0x7FF41457A438
	};


	// Class Engine.ClusterUnionComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x248 (0x710 - 0x4C8)
	class UClusterUnionComponent : public UPrimitiveComponent	
	{
	public:
		bool bEnableDamageFromCollision; // 0x4C8(0x1)
		unsigned char UnknownData04_6[0x7]; // 0x4C9(0x7) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnComponentAddedEvent; // 0x4D0(0x10)
		FMulticastInlineDelegate OnComponentRemovedEvent; // 0x4E0(0x10)
		FMulticastInlineDelegate OnComponentBoundsChangedEvent; // 0x4F0(0x10)
		unsigned char UnknownData05_6[0x98]; // 0x500(0x98) UNKNOWN PROPERTY
		TArray ClusteredComponentsReferences; // 0x598(0x10)
		int32_t GravityGroupIndexOverride; // 0x5A8(0x4)
		unsigned char UnknownData06_6[0x104]; // 0x5AC(0x104) UNKNOWN PROPERTY
		FClusterUnionReplicatedData ReplicatedRigidState; // 0x6B0(0x2)
		unsigned char UnknownData07_7[0x5E]; // 0x6B2(0x5E) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ClusterUnionComponent");
			return ret;
		}

		void SetIsAnchored(bool bIsAnchored); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457AF98
		void SetEnableDamageFromCollision(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457AEB8
		void RemoveComponentFromCluster(UPrimitiveComponent InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457ADD8
		void RemoveComponentBonesFromCluster(UPrimitiveComponent InComponent, TArray& BoneIds); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41457ACF8
		void OnRep_RigidState(); // Flags: RequiredAPI|Native|Protected 0x7FF41457AC18
		bool IsComponentAdded(UPrimitiveComponent Component); // Flags: Final|Native|Public 0x7FF41457AB38
		bool IsAuthority(); // Flags: Final|RequiredAPI|Native|Protected|Const 0x7FF41457AA58
		void HandleComponentPhysicsStateChangePostAddIntoClusterUnion(UPrimitiveComponent ChangedComponent, EComponentPhysicsStateChange StateChange); // Flags: Final|RequiredAPI|Native|Private 0x7FF41457A978
		void HandleComponentPhysicsStateChange(UPrimitiveComponent ChangedComponent, EComponentPhysicsStateChange StateChange); // Flags: Final|RequiredAPI|Native|Private 0x7FF41457A898
		TArray GetPrimitiveComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457A7B8
		TArray GetActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457A6D8
		void ForceSetChildToParent(UPrimitiveComponent InComponent, TArray& BoneIds, TArray& ChildToParent); // Flags: Final|RequiredAPI|Native|Public|HasOutParms 0x7FF41457A5F8
		void AddComponentToCluster(UPrimitiveComponent InComponent, TArray& BoneIds, bool bRebuildGeometry); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41457A518
	};


	// Class Engine.ClusterUnionReplicatedProxyComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x90 (0x130 - 0xA0)
	class UClusterUnionReplicatedProxyComponent : public UActorComponent	
	{
	public:
		TWeakObjectPtr ParentClusterUnion; // 0xA0(0x8)
		TWeakObjectPtr ChildClusteredComponent; // 0xA8(0x8)
		TArray ParticleBoneIds; // 0xB0(0x10)
		unsigned char UnknownData02_6[0x50]; // 0xC0(0x50) UNKNOWN PROPERTY
		TArray ParticleChildToParents; // 0x110(0x10)
		bool bNetUpdateParentClusterUnion; // 0x120(0x1)
		bool bNetUpdateChildClusteredComponent; // 0x121(0x1)
		bool bNetUpdateParticleBoneIds; // 0x122(0x1)
		bool bNetUpdateParticleChildToParents; // 0x123(0x1)
		bool bIsPendingDeletion; // 0x124(0x1)
		unsigned char UnknownData03_7[0xB]; // 0x125(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ClusterUnionReplicatedProxyComponent");
			return ret;
		}

		void SetParticleChildToParent(int32_t BoneID, FTransform& ChildToParent); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults 0x7FF41457BAF8
		void SetParticleBoneIds(TArray& InIds); // Flags: Final|RequiredAPI|Native|Public|HasOutParms 0x7FF41457BA18
		void SetParentClusterUnion(UClusterUnionComponent InComponent); // Flags: Final|RequiredAPI|Native|Public 0x7FF41457B938
		void SetChildClusteredComponent(UPrimitiveComponent InComponent); // Flags: Final|RequiredAPI|Native|Public 0x7FF41457B858
		void OnRep_ParticleChildToParents(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41457B778
		void OnRep_ParticleBoneIds(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41457B698
		void OnRep_ParentClusterUnion(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41457B5B8
		void OnRep_ChildClusteredComponent(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41457B4D8
		void MarkPendingDeletion(); // Flags: Final|Native|Public 0x7FF41457B3F8
		bool IsPendingDeletion(); // Flags: Final|Native|Public 0x7FF41457B318
		TArray GetParticleBoneIds(); // Flags: Final|RequiredAPI|Native|Public|Const 0x7FF41457B238
		UClusterUnionComponent GetParentClusterUnionComponent(); // Flags: Final|RequiredAPI|Native|Public|Const 0x7FF41457B158
		UPrimitiveComponent GetChildClusteredComponent(); // Flags: Final|RequiredAPI|Native|Public|Const 0x7FF41457B078
	};


	// Class Engine.ConstraintInstanceBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UConstraintInstanceBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ConstraintInstanceBlueprintLibrary");
			return ret;
		}

		void SetProjectionParams(FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457EBF8
		void SetParentDominates(FConstraintInstanceAccessor& Accessor, bool bParentDominates); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457EB18
		void SetOrientationDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457EA38
		void SetOrientationDriveSLERP(FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E958
		void SetMassConditioningEnabled(FConstraintInstanceAccessor& Accessor, bool bEnableMassConditioning); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E878
		void SetLinearVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457E798
		void SetLinearVelocityDrive(FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E6B8
		void SetLinearSoftLimitParams(FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E5D8
		void SetLinearPositionTarget(FConstraintInstanceAccessor& Accessor, FVector& InPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457E4F8
		void SetLinearPositionDrive(FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E418
		void SetLinearPlasticity(FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte PlasticityType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E338
		void SetLinearLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte XMotion, TEnumAsByte YMotion, TEnumAsByte ZMotion, float Limit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E258
		void SetLinearDriveParams(FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E178
		void SetLinearBreakable(FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457E098
		void SetDisableCollision(FConstraintInstanceAccessor& Accessor, bool bDisableCollision); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457DFB8
		void SetContactTransferScale(FConstraintInstanceAccessor& Accessor, float ContactTransferScale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457DED8
		void SetAngularVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457DDF8
		void SetAngularVelocityDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457DD18
		void SetAngularVelocityDriveSLERP(FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457DC38
		void SetAngularSoftTwistLimitParams(FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457DB58
		void SetAngularSoftSwingLimitParams(FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457DA78
		void SetAngularPlasticity(FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D998
		void SetAngularOrientationTarget(FConstraintInstanceAccessor& Accessor, FRotator& InPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457D8B8
		void SetAngularLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte Swing1MotionType, float Swing1LimitAngle, TEnumAsByte Swing2MotionType, float Swing2LimitAngle, TEnumAsByte TwistMotionType, float TwistLimitAngle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D7D8
		void SetAngularDriveParams(FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D6F8
		void SetAngularDriveMode(FConstraintInstanceAccessor& Accessor, TEnumAsByte DriveMode); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D618
		void SetAngularBreakable(FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D538
		void GetProjectionParams(FConstraintInstanceAccessor& Accessor, bool& bEnableProjection, float& ProjectionLinearAlpha, float& ProjectionAngularAlpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D458
		bool GetParentDominates(FConstraintInstanceAccessor& Accessor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D378
		void GetOrientationDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D298
		void GetOrientationDriveSLERP(FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D1B8
		bool GetMassConditioningEnabled(FConstraintInstanceAccessor& Accessor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457D0D8
		void GetLinearVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& OutVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457CFF8
		void GetLinearVelocityDrive(FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457CF18
		void GetLinearSoftLimitParams(FConstraintInstanceAccessor& Accessor, bool& bSoftLinearLimit, float& LinearLimitStiffness, float& LinearLimitDamping, float& LinearLimitRestitution, float& LinearLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457CE38
		void GetLinearPositionTarget(FConstraintInstanceAccessor& Accessor, FVector& OutPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457CD58
		void GetLinearPositionDrive(FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457CC78
		void GetLinearPlasticity(FConstraintInstanceAccessor& Accessor, bool& bLinearPlasticity, float& LinearPlasticityThreshold, TEnumAsByte& PlasticityType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457CB98
		void GetLinearLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte& XMotion, TEnumAsByte& YMotion, TEnumAsByte& ZMotion, float& Limit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457CAB8
		void GetLinearDriveParams(FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C9D8
		void GetLinearBreakable(FConstraintInstanceAccessor& Accessor, bool& bLinearBreakable, float& LinearBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C8F8
		bool GetDisableCollsion(FConstraintInstanceAccessor& Accessor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C818
		void GetContactTransferScale(FConstraintInstanceAccessor& Accessor, float& ContactTransferScale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C738
		void GetAttachedBodyNames(FConstraintInstanceAccessor& Accessor, FName& ParentBody, FName& ChildBody); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C658
		void GetAngularVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& OutVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457C578
		void GetAngularVelocityDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C498
		void GetAngularVelocityDriveSLERP(FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C3B8
		void GetAngularSoftTwistLimitParams(FConstraintInstanceAccessor& Accessor, bool& bSoftTwistLimit, float& TwistLimitStiffness, float& TwistLimitDamping, float& TwistLimitRestitution, float& TwistLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C2D8
		void GetAngularSoftSwingLimitParams(FConstraintInstanceAccessor& Accessor, bool& bSoftSwingLimit, float& SwingLimitStiffness, float& SwingLimitDamping, float& SwingLimitRestitution, float& SwingLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C1F8
		void GetAngularPlasticity(FConstraintInstanceAccessor& Accessor, bool& bAngularPlasticity, float& AngularPlasticityThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457C118
		void GetAngularOrientationTarget(FConstraintInstanceAccessor& Accessor, FRotator& OutPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457C038
		void GetAngularLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte& Swing1MotionType, float& Swing1LimitAngle, TEnumAsByte& Swing2MotionType, float& Swing2LimitAngle, TEnumAsByte& TwistMotionType, float& TwistLimitAngle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457BF58
		void GetAngularDriveParams(FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457BE78
		void GetAngularDriveMode(FConstraintInstanceAccessor& Accessor, TEnumAsByte& OutDriveMode); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457BD98
		void GetAngularBreakable(FConstraintInstanceAccessor& Accessor, bool& bAngularBreakable, float& AngularBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457BCB8
		void CopyParams(FConstraintInstanceAccessor& Accessor, FConstraintInstanceAccessor& SourceAccessor, bool bKeepPosition, bool bKeepRotation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41457BBD8
	};


	// Class Engine.NetworkPhysicsSystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UNetworkPhysicsSystem : public UWorldSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPhysicsSystem");
			return ret;
		}
	};


	// Class Engine.NetworkPhysicsComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x98 (0x138 - 0xA0)
	class UNetworkPhysicsComponent : public UActorComponent	
	{
	public:
		FNetworkPhysicsRewindDataImportantInputProxy ReplicatedImportantInput; // 0xA0(0x10)
		FNetworkPhysicsRewindDataImportantStateProxy ReplicatedImportantState; // 0xB0(0x10)
		FNetworkPhysicsRewindDataInputProxy ReplicatedInputs; // 0xC0(0x10)
		FNetworkPhysicsRewindDataStateProxy ReplicatedStates; // 0xD0(0x10)
		unsigned char UnknownData01_7[0x58]; // 0xE0(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPhysicsComponent");
			return ret;
		}

		void ServerReceiveInputsDatas(FNetworkPhysicsRewindDataInputProxy ClientInputs); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer 0x7FF41457F218
		void ServerReceiveInputData(FNetworkPhysicsRewindDataInputProxy ClientInputs); // Flags: RequiredAPI|Net|Native|Event|Protected|NetServer 0x7FF41457F138
		void ServerReceiveImportantInputData(FNetworkPhysicsRewindDataImportantInputProxy ClientInputs); // Flags: RequiredAPI|Net|NetReliableNative|Event|Protected|NetServer 0x7FF41457F058
		void OnRep_SetReplicatedStates(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41457EF78
		void OnRep_SetReplicatedInputs(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41457EE98
		void MulticastReceiveImportantStateData(FNetworkPhysicsRewindDataImportantStateProxy ServerStates); // Flags: RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Protected 0x7FF41457EDB8
		void MulticastReceiveImportantInputData(FNetworkPhysicsRewindDataImportantInputProxy ServerInputs); // Flags: RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Protected 0x7FF41457ECD8
	};


	// Class Engine.PhysicalAnimationComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x40 (0xE0 - 0xA0)
	class UPhysicalAnimationComponent : public UActorComponent	
	{
	public:
		float StrengthMultiplyer; // 0xA0(0x4)
		unsigned char UnknownData02_6[0x4]; // 0xA4(0x4) UNKNOWN PROPERTY
		USkeletalMeshComponent SkeletalMeshComponent; // 0xA8(0x8)
		unsigned char UnknownData03_7[0x30]; // 0xB0(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicalAnimationComponent");
			return ret;
		}

		void SetStrengthMultiplyer(float InStrengthMultiplyer); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457F758
		void SetSkeletalMeshComponent(USkeletalMeshComponent InSkeletalMeshComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457F678
		FTransform GetBodyTargetTransform(FName BodyName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41457F598
		void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41457F4B8
		void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41457F3D8
		void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457F2F8
	};


	// Class Engine.PhysicalMaterialMask
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UPhysicalMaterialMask : public UObject	
	{
	public:
		int32_t UVChannelIndex; // 0x28(0x4)
		TEnumAsByte AddressX; // 0x2C(0x1)
		TEnumAsByte AddressY; // 0x2D(0x1)
		unsigned char UnknownData01_7[0xA]; // 0x2E(0xA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicalMaterialMask");
			return ret;
		}
	};


	// Class Engine.PhysicsAsset
	// Inherited from UObject
	// Size: 0x128 (0x150 - 0x28)
	class UPhysicsAsset : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		TArray BoundsBodies; // 0x30(0x10)
		TArray SkeletalBodySetups; // 0x40(0x10)
		TArray ConstraintSetup; // 0x50(0x10)
		FPhysicsAssetSolverSettings SolverSettings; // 0x60(0x1C)
		FSolverIterations SolverIterations; // 0x7C(0x18)
		EPhysicsAssetSolverType SolverType; // 0x94(0x1)
		bool bNotForDedicatedServer : 1; // 0x95:0(0x1)
		unsigned char UnknownData03_5[0xA2]; // 0x96(0xA2) UNKNOWN PROPERTY
		UThumbnailInfo ThumbnailInfo; // 0x138(0x8)
		TArray BodySetup; // 0x140(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsAsset");
			return ret;
		}
	};


	// Class Engine.PhysicsCollisionHandler
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UPhysicsCollisionHandler : public UObject	
	{
	public:
		float ImpactThreshold; // 0x28(0x4)
		float ImpactReFireDelay; // 0x2C(0x4)
		USoundBase DefaultImpactSound; // 0x30(0x8)
		float LastImpactSoundTime; // 0x38(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsCollisionHandler");
			return ret;
		}
	};


	// Class Engine.PhysicsConstraintActor
	// Inherited from ARigidBodyBase -> AActor -> UObject
	// Size: 0x20 (0x2B0 - 0x290)
	class APhysicsConstraintActor : public ARigidBodyBase	
	{
	public:
		UPhysicsConstraintComponent ConstraintComp; // 0x290(0x8)
		AActor ConstraintActor1; // 0x298(0x8)
		AActor ConstraintActor2; // 0x2A0(0x8)
		bool bDisableCollision : 1; // 0x2A8:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x2A9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsConstraintActor");
			return ret;
		}
	};


	// Class Engine.PhysicsConstraintComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x2C0 (0x4E0 - 0x220)
	class UPhysicsConstraintComponent : public USceneComponent	
	{
	public:
		AActor ConstraintActor1; // 0x220(0x8)
		FConstrainComponentPropName ComponentName1; // 0x228(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x22C(0x4) UNKNOWN PROPERTY
		AActor ConstraintActor2; // 0x230(0x8)
		FConstrainComponentPropName ComponentName2; // 0x238(0x4)
		unsigned char UnknownData03_6[0x14]; // 0x23C(0x14) UNKNOWN PROPERTY
		UPhysicsConstraintTemplate ConstraintSetup; // 0x250(0x8)
		FMulticastInlineDelegate OnConstraintBroken; // 0x258(0x10)
		FMulticastInlineDelegate OnPlasticDeformation; // 0x268(0x10)
		FConstraintInstance ConstraintInstance; // 0x278(0x268)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsConstraintComponent");
			return ret;
		}

		void SetProjectionParams(float ProjectionLinearAlpha, float ProjectionAngularAlpha, float ProjectionLinearTolerance, float ProjectionAngularTolerance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581DD8
		void SetProjectionEnabled(bool bProjectionEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581CF8
		void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581C18
		void SetOrientationDriveSLERP(bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581B38
		void SetLinearZLimit(TEnumAsByte ConstraintType, float LimitSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581A58
		void SetLinearYLimit(TEnumAsByte ConstraintType, float LimitSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581978
		void SetLinearXLimit(TEnumAsByte ConstraintType, float LimitSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581898
		void SetLinearVelocityTarget(FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145817B8
		void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145816D8
		void SetLinearPositionTarget(FVector& InPosTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145815F8
		void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581518
		void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte PlasticityType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581438
		void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581358
		void SetLinearDriveAccelerationMode(bool bAccelerationMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581278
		void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414581198
		void SetDisableCollision(bool bDisableCollision); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145810B8
		void SetContactTransferScale(float ContactTransferScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580FD8
		void SetConstraintReferencePosition(TEnumAsByte Frame, FVector& RefPosition); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414580EF8
		void SetConstraintReferenceOrientation(TEnumAsByte Frame, FVector& PriAxis, FVector& SecAxis); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414580E18
		void SetConstraintReferenceFrame(TEnumAsByte Frame, FTransform& RefFrame); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414580D38
		void SetConstrainedComponents(UPrimitiveComponent Component1, FName BoneName1, UPrimitiveComponent Component2, FName BoneName2); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580C58
		void SetAngularVelocityTarget(FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414580B78
		void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580A98
		void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145809B8
		void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Flags: Final|Native|Public|BlueprintCallable 0x7FF4145808D8
		void SetAngularTwistLimit(TEnumAsByte ConstraintType, float TwistLimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145807F8
		void SetAngularSwing2Limit(TEnumAsByte MotionType, float Swing2LimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580718
		void SetAngularSwing1Limit(TEnumAsByte MotionType, float Swing1LimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580638
		void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580558
		void SetAngularOrientationTarget(FRotator& InPosTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414580478
		void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414580398
		void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145802B8
		void SetAngularDriveMode(TEnumAsByte DriveMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145801D8
		void SetAngularDriveAccelerationMode(bool bAccelerationMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145800F8
		void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414580018
		bool IsProjectionEnabled(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41457FF38
		bool IsBroken(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457FE58
		float GetCurrentTwist(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41457FD78
		float GetCurrentSwing2(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41457FC98
		float GetCurrentSwing1(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41457FBB8
		void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41457FAD8
		FConstraintInstanceAccessor GetConstraint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457F9F8
		void GetConstrainedComponents(UPrimitiveComponent& OutComponent1, FName& OutBoneName1, UPrimitiveComponent& OutComponent2, FName& OutBoneName2); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF41457F918
		void BreakConstraint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41457F838
	};


	// Class Engine.PhysicsConstraintTemplate
	// Inherited from UObject
	// Size: 0x3D8 (0x400 - 0x28)
	class UPhysicsConstraintTemplate : public UObject	
	{
	public:
		FConstraintInstance DefaultInstance; // 0x28(0x268)
		TArray ProfileHandles; // 0x290(0x10)
		FConstraintProfileProperties DefaultProfile; // 0x2A0(0x160)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsConstraintTemplate");
			return ret;
		}
	};


	// Class Engine.PhysicsHandleComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x420 (0x4C0 - 0xA0)
	class UPhysicsHandleComponent : public UActorComponent	
	{
	public:
		UPrimitiveComponent GrabbedComponent; // 0xA0(0x8)
		unsigned char UnknownData05_6[0x4]; // 0xA8(0x4) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0xAC:0(0x1) UNKNOWN PROPERTY
		bool bSoftAngularConstraint : 1; // 0xAC:1(0x1)
		bool bSoftLinearConstraint : 1; // 0xAC:2(0x1)
		bool bInterpolateTarget : 1; // 0xAC:3(0x1)
		unsigned char UnknownData07_5[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY
		float LinearDamping; // 0xB0(0x4)
		float LinearStiffness; // 0xB4(0x4)
		float AngularDamping; // 0xB8(0x4)
		float AngularStiffness; // 0xBC(0x4)
		unsigned char UnknownData08_6[0xC0]; // 0xC0(0xC0) UNKNOWN PROPERTY
		float InterpolationSpeed; // 0x180(0x4)
		unsigned char UnknownData09_7[0x33C]; // 0x184(0x33C) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsHandleComponent");
			return ret;
		}

		void SetTargetRotation(FRotator NewRotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414582A18
		void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414582938
		void SetTargetLocation(FVector NewLocation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414582858
		void SetLinearStiffness(float NewLinearStiffness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414582778
		void SetLinearDamping(float NewLinearDamping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414582698
		void SetInterpolationSpeed(float NewInterpolationSpeed); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145825B8
		void SetAngularStiffness(float NewAngularStiffness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145824D8
		void SetAngularDamping(float NewAngularDamping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145823F8
		void ReleaseComponent(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414582318
		void GrabComponentAtLocationWithRotation(UPrimitiveComponent Component, FName InBoneName, FVector Location, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414582238
		void GrabComponentAtLocation(UPrimitiveComponent Component, FName InBoneName, FVector GrabLocation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414582158
		void GrabComponent(UPrimitiveComponent Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414582078
		void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414581F98
		UPrimitiveComponent GetGrabbedComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414581EB8
	};


	// Class Engine.PhysicsSettings
	// Inherited from UPhysicsSettingsCore -> UDeveloperSettings -> UObject
	// Size: 0x110 (0x1F0 - 0xE0)
	class UPhysicsSettings : public UPhysicsSettingsCore	
	{
	public:
		FPhysicsPredictionSettings PhysicsPrediction; // 0xE0(0xC)
		FRigidBodyErrorCorrection PhysicErrorCorrection; // 0xEC(0x34)
		TEnumAsByte LockedAxis; // 0x120(0x1)
		TEnumAsByte DefaultDegreesOfFreedom; // 0x121(0x1)
		bool bSuppressFaceRemapTable; // 0x122(0x1)
		bool bSupportUVFromHitResults; // 0x123(0x1)
		bool bDisableActiveActors; // 0x124(0x1)
		bool bDisableKinematicStaticPairs; // 0x125(0x1)
		bool bDisableKinematicKinematicPairs; // 0x126(0x1)
		bool bDisableCCD; // 0x127(0x1)
		float AnimPhysicsMinDeltaTime; // 0x128(0x4)
		bool bSimulateAnimPhysicsAfterReset; // 0x12C(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x12D(0x3) UNKNOWN PROPERTY
		float MinPhysicsDeltaTime; // 0x130(0x4)
		float MaxPhysicsDeltaTime; // 0x134(0x4)
		bool bSubstepping; // 0x138(0x1)
		bool bSubsteppingAsync; // 0x139(0x1)
		bool bTickPhysicsAsync; // 0x13A(0x1)
		unsigned char UnknownData05_6[0x1]; // 0x13B(0x1) UNKNOWN PROPERTY
		float AsyncFixedTimeStepSize; // 0x13C(0x4)
		float MaxSubstepDeltaTime; // 0x140(0x4)
		int32_t MaxSubsteps; // 0x144(0x4)
		float SyncSceneSmoothingFactor; // 0x148(0x4)
		float InitialAverageFrameRate; // 0x14C(0x4)
		int32_t PhysXTreeRebuildRate; // 0x150(0x4)
		unsigned char UnknownData06_6[0x4]; // 0x154(0x4) UNKNOWN PROPERTY
		TArray PhysicalSurfaces; // 0x158(0x10)
		FBroadphaseSettings DefaultBroadphaseSettings; // 0x168(0x80)
		float MinDeltaVelocityForHitEvents; // 0x1E8(0x4)
		FChaosPhysicsSettings ChaosSettings; // 0x1EC(0x3)
		unsigned char UnknownData07_7[0x1]; // 0x1EF(0x1) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsSettings");
			return ret;
		}

		int32_t GetPhysicsHistoryCount(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414582AF8
	};


	// Class Engine.PhysicsThruster
	// Inherited from ARigidBodyBase -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class APhysicsThruster : public ARigidBodyBase	
	{
	public:
		UPhysicsThrusterComponent ThrusterComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsThruster");
			return ret;
		}
	};


	// Class Engine.RadialForceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x30 (0x250 - 0x220)
	class URadialForceComponent : public USceneComponent	
	{
	public:
		float Radius; // 0x220(0x4)
		TEnumAsByte Falloff; // 0x224(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x225(0x3) UNKNOWN PROPERTY
		float ImpulseStrength; // 0x228(0x4)
		bool bImpulseVelChange : 1; // 0x22C:0(0x1)
		bool bIgnoreOwningActor : 1; // 0x22C:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x22D(0x3) UNKNOWN PROPERTY
		float ForceStrength; // 0x230(0x4)
		float DestructibleDamage; // 0x234(0x4)
		TArray ObjectTypesToAffect; // 0x238(0x10)
		unsigned char UnknownData05_7[0x8]; // 0x248(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RadialForceComponent");
			return ret;
		}

		void RemoveObjectTypeToAffect(TEnumAsByte ObjectType); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414582D98
		void FireImpulse(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414582CB8
		void AddObjectTypeToAffect(TEnumAsByte ObjectType); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF414582BD8
	};


	// Class Engine.PhysicsFieldComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xE0 (0x300 - 0x220)
	class UPhysicsFieldComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData01_1[0xE0]; // 0x220(0xE0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsFieldComponent");
			return ret;
		}
	};


	// Class Engine.PhysicsFieldStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsFieldStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsFieldStatics");
			return ret;
		}

		FVector EvalPhysicsVectorField(UObject WorldContextObject, FVector& WorldPosition, TEnumAsByte VectorType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414583038
		float EvalPhysicsScalarField(UObject WorldContextObject, FVector& WorldPosition, TEnumAsByte ScalarType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414582F58
		int32_t EvalPhysicsIntegerField(UObject WorldContextObject, FVector& WorldPosition, TEnumAsByte IntegerType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF414582E78
	};


	// Class Engine.PlayerStartPIE
	// Inherited from APlayerStart -> ANavigationObjectBase -> AActor -> UObject
	// Size: 0x0 (0x2C0 - 0x2C0)
	class APlayerStartPIE : public APlayerStart	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerStartPIE");
			return ret;
		}
	};


	// Class Engine.PostProcessVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x708 (0x9D0 - 0x2C8)
	class APostProcessVolume : public AVolume	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x2C8(0x8) UNKNOWN PROPERTY
		FPostProcessSettings Settings; // 0x2D0(0x6F0)
		float Priority; // 0x9C0(0x4)
		float BlendRadius; // 0x9C4(0x4)
		float BlendWeight; // 0x9C8(0x4)
		bool bEnabled : 1; // 0x9CC:0(0x1)
		bool bUnbound : 1; // 0x9CC:1(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x9CD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PostProcessVolume");
			return ret;
		}

		void AddOrUpdateBlendable(TScriptInterface InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414583118
	};


	// Class Engine.PrecomputedVisibilityVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class APrecomputedVisibilityVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrecomputedVisibilityVolume");
			return ret;
		}
	};


	// Class Engine.PrimaryAssetLabel
	// Inherited from UPrimaryDataAsset -> UDataAsset -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UPrimaryAssetLabel : public UPrimaryDataAsset	
	{
	public:
		FPrimaryAssetRules Rules; // 0x30(0xC)
		bool bLabelAssetsInMyDirectory : 1; // 0x3C:0(0x1)
		bool bIsRuntimeLabel : 1; // 0x3C:1(0x1)
		bool bIncludeRedirectors : 1; // 0x3C:2(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x3D(0x3) UNKNOWN PROPERTY
		TArray ExplicitAssets; // 0x40(0x10)
		TArray ExplicitBlueprints; // 0x50(0x10)
		FCollectionReference AssetCollection; // 0x60(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x64(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrimaryAssetLabel");
			return ret;
		}
	};


	// Class Engine.HealthSnapshotBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HealthSnapshotBlueprintLibrary");
			return ret;
		}

		void StopPerformanceSnapshots(); // Flags: Final|RequiredAPI|Exec|Native|Static|Public|BlueprintCallable 0x7FF4145833B8
		void StartPerformanceSnapshots(); // Flags: Final|RequiredAPI|Exec|Native|Static|Public|BlueprintCallable 0x7FF4145832D8
		void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats); // Flags: Final|RequiredAPI|Exec|Native|Static|Public|BlueprintCallable 0x7FF4145831F8
	};


	// Class Engine.LevelStreamingProfilingSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x90 (0xC0 - 0x30)
	class ULevelStreamingProfilingSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x90]; // 0x30(0x90) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingProfilingSubsystem");
			return ret;
		}
	};


	// Class Engine.ProxyLODMeshSimplificationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UProxyLODMeshSimplificationSettings : public UDeveloperSettings	
	{
	public:
		FName ProxyLODMeshReductionModuleName; // 0x30(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ProxyLODMeshSimplificationSettings");
			return ret;
		}
	};


	// Class Engine.RectLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ARectLight : public ALight	
	{
	public:
		URectLightComponent RectLightComponent; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RectLight");
			return ret;
		}
	};


	// Class Engine.RendererSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x1D8 (0x208 - 0x30)
	class URendererSettings : public UDeveloperSettings	
	{
	public:
		TEnumAsByte MobileShadingPath; // 0x30(0x1)
		unsigned char UnknownData48_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		bool bMobileSupportDeferredOnOpenGL : 1; // 0x34:0(0x1)
		bool bMobileSupportGPUScene : 1; // 0x34:1(0x1)
		unsigned char UnknownData49_5[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		TEnumAsByte MobileAntiAliasing; // 0x38(0x1)
		TEnumAsByte MobileFloatPrecisionMode; // 0x39(0x1)
		unsigned char UnknownData50_6[0x2]; // 0x3A(0x2) UNKNOWN PROPERTY
		bool bMobileAllowDitheredLODTransition : 1; // 0x3C:0(0x1)
		bool bMobileVirtualTextures : 1; // 0x3C:1(0x1)
		bool bDiscardUnusedQualityLevels : 1; // 0x3C:2(0x1)
		unsigned char UnknownData51_5[0x3]; // 0x3D(0x3) UNKNOWN PROPERTY
		TEnumAsByte ShaderCompressionFormat; // 0x40(0x1)
		unsigned char UnknownData52_6[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		bool bOcclusionCulling : 1; // 0x44:0(0x1)
		unsigned char UnknownData53_5[0x3]; // 0x45(0x3) UNKNOWN PROPERTY
		float MinScreenRadiusForLights; // 0x48(0x4)
		float MinScreenRadiusForEarlyZPass; // 0x4C(0x4)
		float MinScreenRadiusForCSMdepth; // 0x50(0x4)
		bool bPrecomputedVisibilityWarning : 1; // 0x54:0(0x1)
		bool bTextureStreaming : 1; // 0x54:1(0x1)
		bool bUseDXT5NormalMaps : 1; // 0x54:2(0x1)
		bool bVirtualTextures : 1; // 0x54:3(0x1)
		bool bVirtualTextureEnableAutoImport : 1; // 0x54:4(0x1)
		bool bVirtualTexturedLightmaps : 1; // 0x54:5(0x1)
		bool bVirtualTextureAnisotropicFiltering : 1; // 0x54:6(0x1)
		bool bEnableVirtualTextureOpacityMask : 1; // 0x54:7(0x1)
		unsigned char UnknownData54_5[0x3]; // 0x55(0x3) UNKNOWN PROPERTY
		uint32_t VirtualTextureTileSize; // 0x58(0x4)
		uint32_t VirtualTextureTileBorderSize; // 0x5C(0x4)
		uint32_t VirtualTextureFeedbackFactor; // 0x60(0x4)
		uint32_t MeshPaintVirtualTextureTileSize; // 0x64(0x4)
		uint32_t MeshPaintVirtualTextureTileBorderSize; // 0x68(0x4)
		bool bEnableRVTBaseColor; // 0x6C(0x1)
		bool bEnableRVTBaseColorRoughness; // 0x6D(0x1)
		bool bEnableRVTBaseColorSpecular; // 0x6E(0x1)
		bool bEnableRVTMask4; // 0x6F(0x1)
		bool bEnableRVTWorldHeight; // 0x70(0x1)
		bool bEnableRVTDisplacement; // 0x71(0x1)
		bool bUseHighQualityRVTHeightSampling; // 0x72(0x1)
		TEnumAsByte WorkingColorSpaceChoice; // 0x73(0x1)
		unsigned char UnknownData55_6[0x4]; // 0x74(0x4) UNKNOWN PROPERTY
		FVector2D RedChromaticityCoordinate; // 0x78(0x10)
		FVector2D GreenChromaticityCoordinate; // 0x88(0x10)
		FVector2D BlueChromaticityCoordinate; // 0x98(0x10)
		FVector2D WhiteChromaticityCoordinate; // 0xA8(0x10)
		bool bUseLegacyLuminanceFactors : 1; // 0xB8:0(0x1)
		bool bClearCoatEnableSecondNormal : 1; // 0xB8:1(0x1)
		unsigned char UnknownData56_5[0x3]; // 0xB9(0x3) UNKNOWN PROPERTY
		TEnumAsByte DynamicGlobalIllumination; // 0xBC(0x1)
		TEnumAsByte Reflections; // 0xBD(0x1)
		unsigned char UnknownData57_6[0x2]; // 0xBE(0x2) UNKNOWN PROPERTY
		int32_t ReflectionCaptureResolution; // 0xC0(0x4)
		bool ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0xC4:0(0x1)
		bool bUseHardwareRayTracingForLumen : 1; // 0xC4:1(0x1)
		unsigned char UnknownData58_5[0x3]; // 0xC5(0x3) UNKNOWN PROPERTY
		ELumenRayLightingMode LumenRayLightingMode; // 0xC8(0x1)
		unsigned char UnknownData59_6[0x3]; // 0xC9(0x3) UNKNOWN PROPERTY
		bool LumenFrontLayerTranslucencyReflections : 1; // 0xCC:0(0x1)
		unsigned char UnknownData60_5[0x3]; // 0xCD(0x3) UNKNOWN PROPERTY
		TEnumAsByte LumenSoftwareTracingMode; // 0xD0(0x1)
		unsigned char UnknownData61_6[0x3]; // 0xD1(0x3) UNKNOWN PROPERTY
		bool LumenRayTracedTranslucentRefractions : 1; // 0xD4:0(0x1)
		unsigned char UnknownData62_5[0x3]; // 0xD5(0x3) UNKNOWN PROPERTY
		TEnumAsByte ShadowMapMethod; // 0xD8(0x1)
		unsigned char UnknownData63_6[0x3]; // 0xD9(0x3) UNKNOWN PROPERTY
		bool bEnableRayTracing : 1; // 0xDC:0(0x1)
		bool bEnableRayTracingShadows : 1; // 0xDC:1(0x1)
		bool bEnableRayTracingSkylight : 1; // 0xDC:2(0x1)
		bool bEnableRayTracingTextureLOD : 1; // 0xDC:3(0x1)
		bool bEnablePathTracing : 1; // 0xDC:4(0x1)
		bool bGenerateMeshDistanceFields : 1; // 0xDC:5(0x1)
		unsigned char UnknownData64_5[0x3]; // 0xDD(0x3) UNKNOWN PROPERTY
		float DistanceFieldVoxelDensity; // 0xE0(0x4)
		bool bNanite : 1; // 0xE4:0(0x1)
		bool bAllowStaticLighting : 1; // 0xE4:1(0x1)
		bool bUseNormalMapsForStaticLighting : 1; // 0xE4:2(0x1)
		bool bForwardShading : 1; // 0xE4:3(0x1)
		bool bVertexFoggingForOpaque : 1; // 0xE4:4(0x1)
		bool bSeparateTranslucency : 1; // 0xE4:5(0x1)
		unsigned char UnknownData65_5[0x3]; // 0xE5(0x3) UNKNOWN PROPERTY
		TEnumAsByte TranslucentSortPolicy; // 0xE8(0x1)
		unsigned char UnknownData66_6[0x7]; // 0xE9(0x7) UNKNOWN PROPERTY
		FVector TranslucentSortAxis; // 0xF0(0x18)
		bool bLocalFogVolumeApplyOnTranslucent : 1; // 0x108:0(0x1)
		unsigned char UnknownData67_5[0x3]; // 0x109(0x3) UNKNOWN PROPERTY
		TEnumAsByte FoveationLevel; // 0x10C(0x1)
		unsigned char UnknownData68_6[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		bool bDynamicFoveation : 1; // 0x110:0(0x1)
		unsigned char UnknownData69_5[0x3]; // 0x111(0x3) UNKNOWN PROPERTY
		TEnumAsByte CustomDepthStencil; // 0x114(0x1)
		unsigned char UnknownData70_6[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		bool bCustomDepthTaaJitter : 1; // 0x118:0(0x1)
		unsigned char UnknownData71_5[0x3]; // 0x119(0x3) UNKNOWN PROPERTY
		TEnumAsByte bEnableAlphaChannelInPostProcessing; // 0x11C(0x1)
		unsigned char UnknownData72_6[0x3]; // 0x11D(0x3) UNKNOWN PROPERTY
		bool bDefaultFeatureBloom : 1; // 0x120:0(0x1)
		bool bDefaultFeatureAmbientOcclusion : 1; // 0x120:1(0x1)
		bool bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x120:2(0x1)
		bool bDefaultFeatureAutoExposure : 1; // 0x120:3(0x1)
		unsigned char UnknownData73_5[0x3]; // 0x121(0x3) UNKNOWN PROPERTY
		TEnumAsByte DefaultFeatureAutoExposure; // 0x124(0x1)
		unsigned char UnknownData74_6[0x3]; // 0x125(0x3) UNKNOWN PROPERTY
		float DefaultFeatureAutoExposureBias; // 0x128(0x4)
		bool bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0x12C:0(0x1)
		unsigned char UnknownData75_5[0x3]; // 0x12D(0x3) UNKNOWN PROPERTY
		float DefaultFeatureLocalExposureHighlightContrast; // 0x130(0x4)
		float DefaultFeatureLocalExposureShadowContrast; // 0x134(0x4)
		bool bDefaultFeatureMotionBlur : 1; // 0x138:0(0x1)
		bool bDefaultFeatureLensFlare : 1; // 0x138:1(0x1)
		bool bTemporalUpsampling : 1; // 0x138:2(0x1)
		unsigned char UnknownData76_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		TEnumAsByte DefaultFeatureAntiAliasing; // 0x13C(0x1)
		TEnumAsByte MSAASampleCount; // 0x13D(0x1)
		ELightUnits DefaultLightUnits; // 0x13E(0x1)
		TEnumAsByte DefaultBackBufferPixelFormat; // 0x13F(0x1)
		float DefaultManualScreenPercentage; // 0x140(0x4)
		EScreenPercentageMode DefaultScreenPercentageDesktopMode; // 0x144(0x4)
		EScreenPercentageMode DefaultScreenPercentageMobileMode; // 0x148(0x4)
		EScreenPercentageMode DefaultScreenPercentageVRMode; // 0x14C(0x4)
		EScreenPercentageMode DefaultScreenPercentagePathTracerMode; // 0x150(0x4)
		bool bRenderUnbuiltPreviewShadowsInGame : 1; // 0x154:0(0x1)
		bool bStencilForLODDither : 1; // 0x154:1(0x1)
		unsigned char UnknownData77_5[0x3]; // 0x155(0x3) UNKNOWN PROPERTY
		TEnumAsByte EarlyZPass; // 0x158(0x1)
		unsigned char UnknownData78_6[0x3]; // 0x159(0x3) UNKNOWN PROPERTY
		bool bEarlyZPassOnlyMaterialMasking : 1; // 0x15C:0(0x1)
		bool bEnableCSMCaching : 1; // 0x15C:1(0x1)
		bool bDBuffer : 1; // 0x15C:2(0x1)
		unsigned char UnknownData79_5[0x3]; // 0x15D(0x3) UNKNOWN PROPERTY
		TEnumAsByte ClearSceneMethod; // 0x160(0x1)
		TEnumAsByte VelocityPass; // 0x161(0x1)
		TEnumAsByte VertexDeformationOutputsVelocity; // 0x162(0x1)
		unsigned char UnknownData80_6[0x1]; // 0x163(0x1) UNKNOWN PROPERTY
		bool bSelectiveBasePassOutputs : 1; // 0x164:0(0x1)
		bool bDefaultParticleCutouts : 1; // 0x164:1(0x1)
		unsigned char UnknownData81_5[0x3]; // 0x165(0x3) UNKNOWN PROPERTY
		int32_t GPUSimulationTextureSizeX; // 0x168(0x4)
		int32_t GPUSimulationTextureSizeY; // 0x16C(0x4)
		bool bGlobalClipPlane : 1; // 0x170:0(0x1)
		unsigned char UnknownData82_5[0x3]; // 0x171(0x3) UNKNOWN PROPERTY
		TEnumAsByte GBufferFormat; // 0x174(0x1)
		unsigned char UnknownData83_6[0x3]; // 0x175(0x3) UNKNOWN PROPERTY
		bool bUseGPUMorphTargets : 1; // 0x178:0(0x1)
		unsigned char UnknownData84_5[0x3]; // 0x179(0x3) UNKNOWN PROPERTY
		float MorphTargetMaxBlendWeight; // 0x17C(0x4)
		bool bSupportSkyAtmosphere : 1; // 0x180:0(0x1)
		bool bSupportSkyAtmosphereAffectsHeightFog : 1; // 0x180:1(0x1)
		bool bSupportExpFogMatchesVolumetricFog : 1; // 0x180:2(0x1)
		bool bSupportLocalFogVolumes : 1; // 0x180:3(0x1)
		bool bSupportCloudShadowOnForwardLitTranslucent : 1; // 0x180:4(0x1)
		unsigned char UnknownData85_5[0x3]; // 0x181(0x3) UNKNOWN PROPERTY
		TEnumAsByte LightFunctionAtlasPixelFormat; // 0x184(0x1)
		unsigned char UnknownData86_6[0x3]; // 0x185(0x3) UNKNOWN PROPERTY
		bool bVolumetricFogUsesLightFunctionAtlas : 1; // 0x188:0(0x1)
		bool bDeferredLightingUsesLightFunctionAtlas : 1; // 0x188:1(0x1)
		bool bSingleLayerWaterUsesLightFunctionAtlas : 1; // 0x188:2(0x1)
		bool bTranslucentUsesLightFunctionAtlas : 1; // 0x188:3(0x1)
		bool bSupportIESProfileOnTranslucent : 1; // 0x188:4(0x1)
		bool bSupportRectLightOnTranslucent : 1; // 0x188:5(0x1)
		bool bGpuCrashDebugging : 1; // 0x188:6(0x1)
		bool bMultiView : 1; // 0x188:7(0x1)
		bool bMobilePostProcessing : 1; // 0x189:0(0x1)
		bool bMobileMultiView : 1; // 0x189:1(0x1)
		bool bMobileUseHWsRGBEncoding : 1; // 0x189:2(0x1)
		bool bRoundRobinOcclusion : 1; // 0x189:3(0x1)
		bool bMeshStreaming : 1; // 0x189:4(0x1)
		bool bEnableHeterogeneousVolumes : 1; // 0x189:5(0x1)
		bool bShouldHeterogeneousVolumesCastShadows : 1; // 0x189:6(0x1)
		bool bCompositeHeterogeneousVolumesWithTranslucency : 1; // 0x189:7(0x1)
		unsigned char UnknownData87_5[0x2]; // 0x18A(0x2) UNKNOWN PROPERTY
		float WireframeCullThreshold; // 0x18C(0x4)
		bool bSupportStationarySkylight : 1; // 0x190:0(0x1)
		bool bSupportLowQualityLightmaps : 1; // 0x190:1(0x1)
		bool bSupportPointLightWholeSceneShadows : 1; // 0x190:2(0x1)
		bool bSupportTranslucentPerObjectShadow : 1; // 0x190:3(0x1)
		bool bSupportCloudShadowOnSingleLayerWater : 1; // 0x190:4(0x1)
		bool bEnableSubstrate : 1; // 0x190:5(0x1)
		bool SubstrateOpaqueMaterialRoughRefraction : 1; // 0x190:6(0x1)
		bool SubstrateDebugAdvancedVisualizationShaders : 1; // 0x190:7(0x1)
		bool bMaterialRoughDiffuse : 1; // 0x191:0(0x1)
		bool bMaterialEnergyConservation : 1; // 0x191:1(0x1)
		bool bAutomaticallySetMaterialUsageInEditorDefault : 1; // 0x191:2(0x1)
		bool bOrderedIndependentTransparencyEnable : 1; // 0x191:3(0x1)
		bool bUseHairStrandsAutoLODMode : 1; // 0x191:4(0x1)
		bool bSupportSkinCacheShaders : 1; // 0x191:5(0x1)
		bool bSupportHardwareVariableRateShading : 1; // 0x191:6(0x1)
		bool bSkipCompilingGPUSkinVF : 1; // 0x191:7(0x1)
		unsigned char UnknownData88_5[0x2]; // 0x192(0x2) UNKNOWN PROPERTY
		ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0x194(0x1)
		unsigned char UnknownData89_6[0x3]; // 0x195(0x3) UNKNOWN PROPERTY
		float SkinCacheSceneMemoryLimitInMB; // 0x198(0x4)
		bool bMobileEnableStaticAndCSMShadowReceivers : 1; // 0x19C:0(0x1)
		bool bMobileEnableMovableLightCSMShaderCulling : 1; // 0x19C:1(0x1)
		unsigned char UnknownData90_5[0x3]; // 0x19D(0x3) UNKNOWN PROPERTY
		TEnumAsByte MobileLocalLightSetting; // 0x1A0(0x1)
		unsigned char UnknownData91_6[0x3]; // 0x1A1(0x3) UNKNOWN PROPERTY
		bool bMobileForwardEnableClusteredReflections : 1; // 0x1A4:0(0x1)
		bool bMobileEnableNoPrecomputedLightingCSMShader : 1; // 0x1A4:1(0x1)
		bool bMobileAllowDistanceFieldShadows : 1; // 0x1A4:2(0x1)
		bool bMobileAllowMovableDirectionalLights : 1; // 0x1A4:3(0x1)
		bool bMobileAllowMovableSpotlightShadows : 1; // 0x1A4:4(0x1)
		bool bSupport16BitBoneIndex : 1; // 0x1A4:5(0x1)
		bool bGPUSkinLimit2BoneInfluences : 1; // 0x1A4:6(0x1)
		bool bSupportDepthOnlyIndexBuffers : 1; // 0x1A4:7(0x1)
		bool bSupportReversedIndexBuffers : 1; // 0x1A5:0(0x1)
		bool bMobileAmbientOcclusion : 1; // 0x1A5:1(0x1)
		bool bMobileDBuffer : 1; // 0x1A5:2(0x1)
		bool bUseUnlimitedBoneInfluences : 1; // 0x1A5:3(0x1)
		bool bAlwaysUseDeformerForUnlimitedBoneInfluences : 1; // 0x1A5:4(0x1)
		unsigned char UnknownData92_5[0x2]; // 0x1A6(0x2) UNKNOWN PROPERTY
		int32_t UnlimitedBonInfluencesThreshold; // 0x1A8(0x4)
		FPerPlatformInt DefaultBoneInfluenceLimit; // 0x1AC(0x4)
		FPerPlatformInt MaxSkinBones; // 0x1B0(0x4)
		TEnumAsByte MobilePlanarReflectionMode; // 0x1B4(0x1)
		unsigned char UnknownData93_6[0x3]; // 0x1B5(0x3) UNKNOWN PROPERTY
		bool bMobileScreenSpaceReflections : 1; // 0x1B8:0(0x1)
		bool bMobileSupportsGen4TAA : 1; // 0x1B8:1(0x1)
		unsigned char UnknownData94_5[0x3]; // 0x1B9(0x3) UNKNOWN PROPERTY
		FPerPlatformBool bStreamSkeletalMeshLODs; // 0x1BC(0x1)
		FPerPlatformBool bDiscardSkeletalMeshOptionalLODs; // 0x1BD(0x1)
		unsigned char UnknownData95_6[0x2]; // 0x1BE(0x2) UNKNOWN PROPERTY
		FSoftObjectPath VisualizeCalibrationColorMaterialPath; // 0x1C0(0x18)
		FSoftObjectPath VisualizeCalibrationCustomMaterialPath; // 0x1D8(0x18)
		FSoftObjectPath VisualizeCalibrationGrayscaleMaterialPath; // 0x1F0(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RendererSettings");
			return ret;
		}
	};


	// Class Engine.RendererOverrideSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class URendererOverrideSettings : public UDeveloperSettings	
	{
	public:
		bool bSupportAllShaderPermutations : 1; // 0x30:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RendererOverrideSettings");
			return ret;
		}
	};


	// Class Engine.NeuralProfile
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UNeuralProfile : public UObject	
	{
	public:
		FNeuralProfileStruct Settings; // 0x28(0x48)
		FGuid Guid; // 0x70(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NeuralProfile");
			return ret;
		}
	};


	// Class Engine.SpecularProfile
	// Inherited from UObject
	// Size: 0x430 (0x458 - 0x28)
	class USpecularProfile : public UObject	
	{
	public:
		FSpecularProfileStruct Settings; // 0x28(0x420)
		FGuid Guid; // 0x448(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpecularProfile");
			return ret;
		}
	};


	// Class Engine.SubsurfaceProfile
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class USubsurfaceProfile : public UObject	
	{
	public:
		FSubsurfaceProfileStruct Settings; // 0x28(0x9C)
		unsigned char UnknownData01_7[0x4]; // 0xC4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SubsurfaceProfile");
			return ret;
		}
	};


	// Class Engine.ReplayNetConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0xA80 (0x2890 - 0x1E10)
	class UReplayNetConnection : public UNetConnection	
	{
	public:
		unsigned char UnknownData01_1[0xA80]; // 0x1E10(0xA80) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplayNetConnection");
			return ret;
		}
	};


	// Class Engine.GameInstanceSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UGameInstanceSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameInstanceSubsystem");
			return ret;
		}
	};


	// Class Engine.ReplaySubsystem
	// Inherited from UGameInstanceSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UReplaySubsystem : public UGameInstanceSubsystem	
	{
	public:
		bool bLoadDefaultMapOnStop; // 0x30(0x1)
		unsigned char UnknownData01_7[0xF]; // 0x31(0xF) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplaySubsystem");
			return ret;
		}

		void RequestCheckpoint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414583818
		bool IsRecording(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583738
		bool IsPlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583658
		float GetReplayCurrentTime(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583578
		FString GetActiveReplayName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583498
	};


	// Class Engine.ReverbEffect
	// Inherited from UObject
	// Size: 0x38 (0x60 - 0x28)
	class UReverbEffect : public UObject	
	{
	public:
		bool bBypassEarlyReflections; // 0x28(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float ReflectionsDelay; // 0x2C(0x4)
		float GainHF; // 0x30(0x4)
		float ReflectionsGain; // 0x34(0x4)
		bool bBypassLateReflections; // 0x38(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		float LateDelay; // 0x3C(0x4)
		float DecayTime; // 0x40(0x4)
		float Density; // 0x44(0x4)
		float Diffusion; // 0x48(0x4)
		float AirAbsorptionGainHF; // 0x4C(0x4)
		float DecayHFRatio; // 0x50(0x4)
		float LateGain; // 0x54(0x4)
		float Gain; // 0x58(0x4)
		float RoomRolloffFactor; // 0x5C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReverbEffect");
			return ret;
		}
	};


	// Class Engine.RuntimeOptionsBase
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class URuntimeOptionsBase : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeOptionsBase");
			return ret;
		}
	};


	// Class Engine.SCS_Node
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class USCS_Node : public UObject	
	{
	public:
		UClass ComponentClass; // 0x28(0x8)
		UActorComponent ComponentTemplate; // 0x30(0x8)
		FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38(0x48)
		FName AttachToName; // 0x80(0x4)
		FName ParentComponentOrVariableName; // 0x84(0x4)
		FName ParentComponentOwnerClassName; // 0x88(0x4)
		bool bIsParentComponentNative; // 0x8C(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x8D(0x3) UNKNOWN PROPERTY
		TArray ChildNodes; // 0x90(0x10)
		TArray MetaDataArray; // 0xA0(0x10)
		FGuid VariableGuid; // 0xB0(0x10)
		FName InternalVariableName; // 0xC0(0x4)
		unsigned char UnknownData03_7[0x4]; // 0xC4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SCS_Node");
			return ret;
		}
	};


	// Class Engine.SimpleConstructionScript
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class USimpleConstructionScript : public UObject	
	{
	public:
		TArray RootNodes; // 0x28(0x10)
		TArray AllNodes; // 0x38(0x10)
		USCS_Node DefaultSceneRootNode; // 0x48(0x8)
		unsigned char UnknownData01_7[0x60]; // 0x50(0x60) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SimpleConstructionScript");
			return ret;
		}
	};


	// Class Engine.SkinnedAsset
	// Inherited from UStreamableRenderAsset -> UObject
	// Size: 0x8 (0xD0 - 0xC8)
	class USkinnedAsset : public UStreamableRenderAsset	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0xC8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkinnedAsset");
			return ret;
		}

		USkeletalMeshSocket FindSocketInfo(FName InSocketName, FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145839D8
		USkeletalMeshSocket FindSocket(FName InSocketName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145838F8
	};


	// Class Engine.SkeletalMesh
	// Inherited from USkinnedAsset -> UStreamableRenderAsset -> UObject
	// Size: 0x458 (0x528 - 0xD0)
	class USkeletalMesh : public USkinnedAsset	
	{
	public:
		unsigned char UnknownData10_3[0x20]; // 0xD0(0x20) UNKNOWN PROPERTY
		USkeleton Skeleton; // 0xF0(0x8)
		FBoxSphereBounds ImportedBounds; // 0xF8(0x38)
		FBoxSphereBounds ExtendedBounds; // 0x130(0x38)
		FVector PositiveBoundsExtension; // 0x168(0x18)
		FVector NegativeBoundsExtension; // 0x180(0x18)
		TArray Materials; // 0x198(0x10)
		FMeshNaniteSettings NaniteSettings; // 0x1A8(0x40)
		TArray LODInfo; // 0x1E8(0x10)
		unsigned char UnknownData11_6[0x50]; // 0x1F8(0x50) UNKNOWN PROPERTY
		FPerQualityLevelInt MinQualityLevelLOD; // 0x248(0x68)
		FPerPlatformInt MinLOD; // 0x2B0(0x4)
		FPerPlatformBool DisableBelowMinLodStripping; // 0x2B4(0x1)
		bool bUseFullPrecisionUVs : 1; // 0x2B5:0(0x1)
		bool bUseHighPrecisionTangentBasis : 1; // 0x2B5:1(0x1)
		bool bHasVertexColors : 1; // 0x2B5:2(0x1)
		unsigned char UnknownBit12 : 1; // 0x2B5:3(0x1) UNKNOWN PROPERTY
		bool bEnablePerPolyCollision : 1; // 0x2B5:4(0x1)
		unsigned char UnknownData13_5[0x2]; // 0x2B6(0x2) UNKNOWN PROPERTY
		UBodySetup BodySetup; // 0x2B8(0x8)
		UPhysicsAsset PhysicsAsset; // 0x2C0(0x8)
		UPhysicsAsset ShadowPhysicsAsset; // 0x2C8(0x8)
		TArray NodeMappingData; // 0x2D0(0x10)
		bool bSupportRayTracing : 1; // 0x2E0:0(0x1)
		unsigned char UnknownData14_5[0x3]; // 0x2E1(0x3) UNKNOWN PROPERTY
		int32_t RayTracingMinLOD; // 0x2E4(0x4)
		EClothLODBiasMode ClothLODBiasMode; // 0x2E8(0x1)
		unsigned char UnknownData15_6[0x7]; // 0x2E9(0x7) UNKNOWN PROPERTY
		TArray MorphTargets; // 0x2F0(0x10)
		unsigned char UnknownData16_6[0x180]; // 0x300(0x180) UNKNOWN PROPERTY
		UClass PostProcessAnimBlueprint; // 0x480(0x8)
		int32_t PostProcessAnimBPLODThreshold; // 0x488(0x4)
		unsigned char UnknownData17_6[0x4]; // 0x48C(0x4) UNKNOWN PROPERTY
		TArray MeshClothingAssets; // 0x490(0x10)
		FSkeletalMeshSamplingInfo SamplingInfo; // 0x4A0(0x30)
		TArray AssetUserData; // 0x4D0(0x10)
		TArray Sockets; // 0x4E0(0x10)
		unsigned char UnknownData18_6[0x10]; // 0x4F0(0x10) UNKNOWN PROPERTY
		TArray SkinWeightProfiles; // 0x500(0x10)
		UMeshDeformer DefaultMeshDeformer; // 0x510(0x8)
		UMaterialInterface OverlayMaterial; // 0x518(0x8)
		float OverlayMaterialMaxDrawDistance; // 0x520(0x4)
		unsigned char UnknownData19_7[0x4]; // 0x524(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMesh");
			return ret;
		}

		void SetSkeleton(USkeleton InSkeleton); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414585418
		void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414585338
		void SetOverlayMaterial(UMaterialInterface NewOverlayMaterial); // Flags: Final|Native|Public|BlueprintCallable 0x7FF414585258
		void SetMorphTargets(TArray& InMorphTargets); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF414585178
		void SetMinLODForQualityLevels(TMap& QualityLevelMinimumLODs, int32_t Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF414585098
		void SetMeshClothingAssets(TArray& InMeshClothingAssets); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF414584FB8
		void SetMaterials(TArray& InMaterials); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414584ED8
		void SetLODSettings(USkeletalMeshLODSettings InLODSettings); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414584DF8
		void SetDefaultAnimatingRig(TWeakObjectPtr InAnimatingRig); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414584D18
		int32_t NumSockets(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584C38
		TArray K2_GetAllMorphTargetNames(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584B58
		bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584A78
		USkeletalMeshSocket GetSocketByIndex(int32_t Index); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584998
		USkeleton GetSkeleton(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145848B8
		UPhysicsAsset GetShadowPhysicsAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145847D8
		UPhysicsAsset GetPhysicsAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145846F8
		float GetOverlayMaterialMaxDrawDistance(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584618
		UMaterialInterface GetOverlayMaterial(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584538
		TArray GetNodeMappingData(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584458
		UNodeMappingContainer GetNodeMappingContainer(UBlueprint SourceAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584378
		TArray GetMorphTargetsPtrConv(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414584298
		void GetMinLODForQualityLevels(TMap& QualityLevelMinimumLODs, int32_t& Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4145841B8
		TArray GetMeshClothingAssets(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145840D8
		TArray GetMaterials(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583FF8
		USkeletalMeshLODSettings GetLODSettings(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583F18
		FBoxSphereBounds GetImportedBounds(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414583E38
		UMeshDeformer GetDefaultMeshDeformer(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583D58
		TWeakObjectPtr GetDefaultAnimatingRig(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414583C78
		FBoxSphereBounds GetBounds(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414583B98
		USkeletalMeshSocket FindSocketAndIndex(FName InSocketName, int32_t& OutIndex); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414583AB8
	};


	// Class Engine.SkeletalMeshEditorData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USkeletalMeshEditorData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshEditorData");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshLODSettings
	// Inherited from UDataAsset -> UObject
	// Size: 0x88 (0xB8 - 0x30)
	class USkeletalMeshLODSettings : public UDataAsset	
	{
	public:
		FPerQualityLevelInt MinQualityLevelLOD; // 0x30(0x68)
		FPerPlatformInt MinLOD; // 0x98(0x4)
		FPerPlatformBool DisableBelowMinLodStripping; // 0x9C(0x1)
		bool bOverrideLODStreamingSettings; // 0x9D(0x1)
		FPerPlatformBool bSupportLODStreaming; // 0x9E(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x9F(0x1) UNKNOWN PROPERTY
		FPerPlatformInt MaxNumStreamedLODs; // 0xA0(0x4)
		FPerPlatformInt MaxNumOptionalLODs; // 0xA4(0x4)
		TArray LODGroups; // 0xA8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshLODSettings");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshSimplificationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class USkeletalMeshSimplificationSettings : public UDeveloperSettings	
	{
	public:
		FName SkeletalMeshReductionModuleName; // 0x30(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshSimplificationSettings");
			return ret;
		}
	};


	// Class Engine.ButtonStyleAsset
	// Inherited from UObject
	// Size: 0x378 (0x3A0 - 0x28)
	class UButtonStyleAsset : public UObject	
	{
	public:
		unsigned char UnknownData01_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FButtonStyle ButtonStyle; // 0x30(0x370)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ButtonStyleAsset");
			return ret;
		}
	};


	// Class Engine.CheckBoxStyleAsset
	// Inherited from UObject
	// Size: 0x958 (0x980 - 0x28)
	class UCheckBoxStyleAsset : public UObject	
	{
	public:
		unsigned char UnknownData01_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FCheckBoxStyle CheckBoxStyle; // 0x30(0x950)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CheckBoxStyleAsset");
			return ret;
		}
	};


	// Class Engine.SlateBrushAsset
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class USlateBrushAsset : public UObject	
	{
	public:
		unsigned char UnknownData01_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FSlateBrush Brush; // 0x30(0xB0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SlateBrushAsset");
			return ret;
		}
	};


	// Class Engine.SlateTextureAtlasInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USlateTextureAtlasInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SlateTextureAtlasInterface");
			return ret;
		}
	};


	// Class Engine.SoundClass
	// Inherited from UObject
	// Size: 0x1C0 (0x1E8 - 0x28)
	class USoundClass : public UObject	
	{
	public:
		FSoundClassProperties Properties; // 0x28(0x198)
		TArray ChildClasses; // 0x1C0(0x10)
		TArray PassiveSoundMixModifiers; // 0x1D0(0x10)
		USoundClass ParentClass; // 0x1E0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundClass");
			return ret;
		}
	};


	// Class Engine.SoundConcurrency
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class USoundConcurrency : public UObject	
	{
	public:
		FSoundConcurrencySettings Concurrency; // 0x28(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundConcurrency");
			return ret;
		}
	};


	// Class Engine.SoundCue
	// Inherited from USoundBase -> UObject
	// Size: 0x3F8 (0x560 - 0x168)
	class USoundCue : public USoundBase	
	{
	public:
		USoundNode FirstNode; // 0x168(0x8)
		float VolumeMultiplier; // 0x170(0x4)
		float PitchMultiplier; // 0x174(0x4)
		FSoundAttenuationSettings AttenuationOverrides; // 0x178(0x3D0)
		float SubtitlePriority; // 0x548(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x54C(0x4) UNKNOWN PROPERTY
		bool bPrimeOnLoad : 1; // 0x550:0(0x1)
		bool bOverrideAttenuation : 1; // 0x550:1(0x1)
		bool bExcludeFromRandomNodeBranchCulling : 1; // 0x550:2(0x1)
		bool bHasPlayWhenSilent : 1; // 0x550:3(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x551(0x3) UNKNOWN PROPERTY
		int32_t CookedQualityIndex; // 0x554(0x4)
		unsigned char UnknownData05_7[0x8]; // 0x558(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundCue");
			return ret;
		}
	};


	// Class Engine.SoundMix
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class USoundMix : public UObject	
	{
	public:
		bool bApplyEQ : 1; // 0x28:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float EQPriority; // 0x2C(0x4)
		FAudioEQEffect EQSettings; // 0x30(0x40)
		TArray SoundClassEffects; // 0x70(0x10)
		float InitialDelay; // 0x80(0x4)
		float FadeInTime; // 0x84(0x4)
		float duration; // 0x88(0x4)
		float FadeOutTime; // 0x8C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundMix");
			return ret;
		}
	};


	// Class Engine.SoundNodeAssetReferencer
	// Inherited from USoundNode -> UObject
	// Size: 0x0 (0x48 - 0x48)
	class USoundNodeAssetReferencer : public USoundNode	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeAssetReferencer");
			return ret;
		}
	};


	// Class Engine.SoundNodeAttenuation
	// Inherited from USoundNode -> UObject
	// Size: 0x3E0 (0x428 - 0x48)
	class USoundNodeAttenuation : public USoundNode	
	{
	public:
		USoundAttenuation AttenuationSettings; // 0x48(0x8)
		FSoundAttenuationSettings AttenuationOverrides; // 0x50(0x3D0)
		bool bOverrideAttenuation : 1; // 0x420:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x421(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeAttenuation");
			return ret;
		}
	};


	// Class Engine.SoundNodeBranch
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeBranch : public USoundNode	
	{
	public:
		FName BoolParameterName; // 0x48(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeBranch");
			return ret;
		}
	};


	// Class Engine.SoundNodeConcatenator
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeConcatenator : public USoundNode	
	{
	public:
		TArray InputVolume; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeConcatenator");
			return ret;
		}
	};


	// Class Engine.SoundNodeDelay
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeDelay : public USoundNode	
	{
	public:
		float DelayMin; // 0x48(0x4)
		float DelayMax; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDelay");
			return ret;
		}
	};


	// Class Engine.SoundNodeDialoguePlayer
	// Inherited from USoundNode -> UObject
	// Size: 0x28 (0x70 - 0x48)
	class USoundNodeDialoguePlayer : public USoundNode	
	{
	public:
		FDialogueWaveParameter DialogueWaveParameter; // 0x48(0x20)
		bool bLooping : 1; // 0x68:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x69(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDialoguePlayer");
			return ret;
		}
	};


	// Class Engine.SoundNodeDistanceCrossFade
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeDistanceCrossFade : public USoundNode	
	{
	public:
		TArray CrossFadeInput; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDistanceCrossFade");
			return ret;
		}
	};


	// Class Engine.SoundNodeDoppler
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeDoppler : public USoundNode	
	{
	public:
		float DopplerIntensity; // 0x48(0x4)
		bool bUseSmoothing; // 0x4C(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		float SmoothingInterpSpeed; // 0x50(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDoppler");
			return ret;
		}
	};


	// Class Engine.SoundNodeEnveloper
	// Inherited from USoundNode -> UObject
	// Size: 0x148 (0x190 - 0x48)
	class USoundNodeEnveloper : public USoundNode	
	{
	public:
		float LoopStart; // 0x48(0x4)
		float LoopEnd; // 0x4C(0x4)
		float DurationAfterLoop; // 0x50(0x4)
		int32_t LoopCount; // 0x54(0x4)
		bool bLoopIndefinitely : 1; // 0x58:0(0x1)
		bool bLoop : 1; // 0x58:1(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x59(0x7) UNKNOWN PROPERTY
		UDistributionFloatConstantCurve VolumeInterpCurve; // 0x60(0x8)
		UDistributionFloatConstantCurve PitchInterpCurve; // 0x68(0x8)
		FRuntimeFloatCurve VolumeCurve; // 0x70(0x88)
		FRuntimeFloatCurve PitchCurve; // 0xF8(0x88)
		float PitchMin; // 0x180(0x4)
		float PitchMax; // 0x184(0x4)
		float VolumeMin; // 0x188(0x4)
		float VolumeMax; // 0x18C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeEnveloper");
			return ret;
		}
	};


	// Class Engine.SoundNodeGroupControl
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeGroupControl : public USoundNode	
	{
	public:
		TArray GroupSizes; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeGroupControl");
			return ret;
		}
	};


	// Class Engine.SoundNodeLooping
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeLooping : public USoundNode	
	{
	public:
		int32_t LoopCount; // 0x48(0x4)
		bool bLoopIndefinitely : 1; // 0x4C:0(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeLooping");
			return ret;
		}
	};


	// Class Engine.SoundNodeMature
	// Inherited from USoundNode -> UObject
	// Size: 0x0 (0x48 - 0x48)
	class USoundNodeMature : public USoundNode	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeMature");
			return ret;
		}
	};


	// Class Engine.SoundNodeMixer
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeMixer : public USoundNode	
	{
	public:
		TArray InputVolume; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeMixer");
			return ret;
		}
	};


	// Class Engine.SoundNodeModulator
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeModulator : public USoundNode	
	{
	public:
		float PitchMin; // 0x48(0x4)
		float PitchMax; // 0x4C(0x4)
		float VolumeMin; // 0x50(0x4)
		float VolumeMax; // 0x54(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeModulator");
			return ret;
		}
	};


	// Class Engine.SoundNodeOscillator
	// Inherited from USoundNode -> UObject
	// Size: 0x28 (0x70 - 0x48)
	class USoundNodeOscillator : public USoundNode	
	{
	public:
		bool bModulateVolume : 1; // 0x48:0(0x1)
		bool bModulatePitch : 1; // 0x48:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		float AmplitudeMin; // 0x4C(0x4)
		float AmplitudeMax; // 0x50(0x4)
		float FrequencyMin; // 0x54(0x4)
		float FrequencyMax; // 0x58(0x4)
		float OffsetMin; // 0x5C(0x4)
		float OffsetMax; // 0x60(0x4)
		float CenterMin; // 0x64(0x4)
		float CenterMax; // 0x68(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x6C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeOscillator");
			return ret;
		}
	};


	// Class Engine.SoundNodeParamCrossFade
	// Inherited from USoundNodeDistanceCrossFade -> USoundNode -> UObject
	// Size: 0x8 (0x60 - 0x58)
	class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade	
	{
	public:
		FName ParamName; // 0x58(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeParamCrossFade");
			return ret;
		}
	};


	// Class Engine.SoundNodeQualityLevel
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeQualityLevel : public USoundNode	
	{
	public:
		int32_t CookedQualityLevelIndex; // 0x48(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeQualityLevel");
			return ret;
		}
	};


	// Class Engine.SoundNodeRandom
	// Inherited from USoundNode -> UObject
	// Size: 0x30 (0x78 - 0x48)
	class USoundNodeRandom : public USoundNode	
	{
	public:
		TArray Weights; // 0x48(0x10)
		TArray HasBeenUsed; // 0x58(0x10)
		int32_t NumRandomUsed; // 0x68(0x4)
		int32_t PreselectAtLevelLoad; // 0x6C(0x4)
		bool bShouldExcludeFromBranchCulling : 1; // 0x70:0(0x1)
		bool bSoundCueExcludedFromBranchCulling : 1; // 0x70:1(0x1)
		bool bRandomizeWithoutReplacement : 1; // 0x70:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeRandom");
			return ret;
		}
	};


	// Class Engine.SoundNodeSoundClass
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeSoundClass : public USoundNode	
	{
	public:
		USoundClass SoundClassOverride; // 0x48(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x50(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeSoundClass");
			return ret;
		}
	};


	// Class Engine.SoundNodeSwitch
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeSwitch : public USoundNode	
	{
	public:
		FName IntParameterName; // 0x48(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeSwitch");
			return ret;
		}
	};


	// Class Engine.SoundNodeWaveParam
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeWaveParam : public USoundNode	
	{
	public:
		FName WaveParameterName; // 0x48(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeWaveParam");
			return ret;
		}
	};


	// Class Engine.SoundNodeWavePlayer
	// Inherited from USoundNodeAssetReferencer -> USoundNode -> UObject
	// Size: 0x30 (0x78 - 0x48)
	class USoundNodeWavePlayer : public USoundNodeAssetReferencer	
	{
	public:
		TWeakObjectPtr SoundWaveAssetPtr; // 0x48(0x20)
		USoundWave SoundWave; // 0x68(0x8)
		unsigned char UnknownBit02 : 1; // 0x70:0(0x1) UNKNOWN PROPERTY
		bool bLooping : 1; // 0x70:1(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeWavePlayer");
			return ret;
		}
	};


	// Class Engine.SoundSourceBus
	// Inherited from USoundWave -> USoundBase -> UObject
	// Size: 0x18 (0x408 - 0x3F0)
	class USoundSourceBus : public USoundWave	
	{
	public:
		ESourceBusChannels SourceBusChannels; // 0x3F0(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x3F1(0x3) UNKNOWN PROPERTY
		float SourceBusDuration; // 0x3F4(0x4)
		UAudioBus AudioBus; // 0x3F8(0x8)
		bool bAutoDeactivateWhenSilent : 1; // 0x400:0(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x401(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSourceBus");
			return ret;
		}
	};


	// Class Engine.SoundSubmixBase
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class USoundSubmixBase : public UObject	
	{
	public:
		bool bAutoDisable; // 0x28(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float AutoDisableTime; // 0x2C(0x4)
		TArray ChildSubmixes; // 0x30(0x10)
		TMap DynamicChildSubmixes; // 0x40(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmixBase");
			return ret;
		}

		USoundSubmixBase FindDynamicAncestor(); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145856B8
		bool DynamicDisconnect(UObject WorldContextObject); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145855D8
		bool DynamicConnect(UObject WorldContextObject, USoundSubmixBase InParent); // Flags: RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145854F8
	};


	// Class Engine.SoundSubmixWithParentBase
	// Inherited from USoundSubmixBase -> UObject
	// Size: 0x60 (0xF0 - 0x90)
	class USoundSubmixWithParentBase : public USoundSubmixBase	
	{
	public:
		USoundSubmixBase ParentSubmix; // 0x90(0x8)
		TMap DynamicParentSubmix; // 0x98(0x50)
		bool bIsDynamic : 1; // 0xE8:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xE9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmixWithParentBase");
			return ret;
		}
	};


	// Class Engine.SoundSubmix
	// Inherited from USoundSubmixWithParentBase -> USoundSubmixBase -> UObject
	// Size: 0x158 (0x248 - 0xF0)
	class USoundSubmix : public USoundSubmixWithParentBase	
	{
	public:
		bool bMuteWhenBackgrounded : 1; // 0xF0:0(0x1)
		unsigned char UnknownData03_5[0x7]; // 0xF1(0x7) UNKNOWN PROPERTY
		TArray SubmixEffectChain; // 0xF8(0x10)
		USoundfieldEncodingSettingsBase AmbisonicsPluginSettings; // 0x108(0x8)
		int32_t EnvelopeFollowerAttackTime; // 0x110(0x4)
		int32_t EnvelopeFollowerReleaseTime; // 0x114(0x4)
		FSoundModulationDestinationSettings OutputVolumeModulation; // 0x118(0x58)
		FSoundModulationDestinationSettings WetLevelModulation; // 0x170(0x58)
		FSoundModulationDestinationSettings DryLevelModulation; // 0x1C8(0x58)
		bool bSendToAudioLink : 1; // 0x220:0(0x1)
		unsigned char UnknownData04_5[0x7]; // 0x221(0x7) UNKNOWN PROPERTY
		UAudioLinkSettingsAbstract AudioLinkSettings; // 0x228(0x8)
		FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x230(0x10)
		unsigned char UnknownData05_7[0x8]; // 0x240(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmix");
			return ret;
		}

		void StopSpectralAnalysis(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145864B8
		void StopRecordingOutput(UObject WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, USoundWave ExistingSoundWaveToOverwrite); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145863D8
		void StopEnvelopeFollowing(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145862F8
		void StartSpectralAnalysis(UObject WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414586218
		void StartRecordingOutput(UObject WorldContextObject, float ExpectedDuration); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414586138
		void StartEnvelopeFollowing(UObject WorldContextObject); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414586058
		void SetWetVolumeModulation(FSoundModulationDestinationSettings& InVolMod); // Flags: Final|Native|Protected|HasOutParms|BlueprintCallable 0x7FF414585F78
		void SetSubmixWetLevel(UObject WorldContextObject, float InWetLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414585E98
		void SetSubmixOutputVolume(UObject WorldContextObject, float InOutputVolume); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414585DB8
		void SetSubmixDryLevel(UObject WorldContextObject, float InDryLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414585CD8
		void SetOutputVolumeModulation(FSoundModulationDestinationSettings& InVolMod); // Flags: Final|Native|Protected|HasOutParms|BlueprintCallable 0x7FF414585BF8
		void SetDryVolumeModulation(FSoundModulationDestinationSettings& InVolMod); // Flags: Final|Native|Protected|HasOutParms|BlueprintCallable 0x7FF414585B18
		void RemoveSpectralAnalysisDelegate(UObject WorldContextObject, FDelegateProperty& OnSubmixSpectralAnalysisBP); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414585A38
		void RemoveEnvelopeFollowerDelegate(UObject WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414585958
		void AddSpectralAnalysisDelegate(UObject WorldContextObject, TArray& InBandSettings, FDelegateProperty& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414585878
		void AddEnvelopeFollowerDelegate(UObject WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414585798
	};


	// Class Engine.SoundfieldSubmix
	// Inherited from USoundSubmixWithParentBase -> USoundSubmixBase -> UObject
	// Size: 0x28 (0x118 - 0xF0)
	class USoundfieldSubmix : public USoundSubmixWithParentBase	
	{
	public:
		FName SoundfieldEncodingFormat; // 0xF0(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xF4(0x4) UNKNOWN PROPERTY
		USoundfieldEncodingSettingsBase EncodingSettings; // 0xF8(0x8)
		TArray SoundfieldEffectChain; // 0x100(0x10)
		UClass EncodingSettingsClass; // 0x110(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundfieldSubmix");
			return ret;
		}
	};


	// Class Engine.EndpointSubmix
	// Inherited from USoundSubmixBase -> UObject
	// Size: 0x18 (0xA8 - 0x90)
	class UEndpointSubmix : public USoundSubmixBase	
	{
	public:
		FName EndpointType; // 0x90(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x94(0x4) UNKNOWN PROPERTY
		UClass EndpointSettingsClass; // 0x98(0x8)
		UAudioEndpointSettingsBase EndpointSettings; // 0xA0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EndpointSubmix");
			return ret;
		}
	};


	// Class Engine.SoundfieldEndpointSubmix
	// Inherited from USoundSubmixBase -> UObject
	// Size: 0x38 (0xC8 - 0x90)
	class USoundfieldEndpointSubmix : public USoundSubmixBase	
	{
	public:
		FName SoundfieldEndpointType; // 0x90(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x94(0x4) UNKNOWN PROPERTY
		UClass EndpointSettingsClass; // 0x98(0x8)
		USoundfieldEndpointSettingsBase EndpointSettings; // 0xA0(0x8)
		UClass EncodingSettingsClass; // 0xA8(0x8)
		USoundfieldEncodingSettingsBase EncodingSettings; // 0xB0(0x8)
		TArray SoundfieldEffectChain; // 0xB8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundfieldEndpointSubmix");
			return ret;
		}
	};


	// Class Engine.SpectatorPawn
	// Inherited from ADefaultPawn -> APawn -> AActor -> UObject
	// Size: 0x0 (0x338 - 0x338)
	class ASpectatorPawn : public ADefaultPawn	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpectatorPawn");
			return ret;
		}
	};


	// Class Engine.SpectatorPawnMovement
	// Inherited from UFloatingPawnMovement -> UPawnMovementComponent -> UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x188 - 0x180)
	class USpectatorPawnMovement : public UFloatingPawnMovement	
	{
	public:
		bool bIgnoreTimeDilation : 1; // 0x180:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x181(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpectatorPawnMovement");
			return ret;
		}
	};


	// Class Engine.SplineMeshActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ASplineMeshActor : public AActor	
	{
	public:
		USplineMeshComponent SplineMeshComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineMeshActor");
			return ret;
		}
	};


	// Class Engine.StaticMesh
	// Inherited from UStreamableRenderAsset -> UObject
	// Size: 0x178 (0x240 - 0xC8)
	class UStaticMesh : public UStreamableRenderAsset	
	{
	public:
		unsigned char UnknownData03_3[0x20]; // 0xC8(0x20) UNKNOWN PROPERTY
		FPerQualityLevelInt MinQualityLevelLOD; // 0xE8(0x68)
		FPerPlatformInt MinLOD; // 0x150(0x4)
		int32_t ElementToIgnoreForTexFactor; // 0x154(0x4)
		TArray StaticMaterials; // 0x158(0x10)
		float LightmapUVDensity; // 0x168(0x4)
		int32_t LightMapResolution; // 0x16C(0x4)
		int32_t LightMapCoordinateIndex; // 0x170(0x4)
		float DistanceFieldSelfShadowBias; // 0x174(0x4)
		UBodySetup BodySetup; // 0x178(0x8)
		int32_t LODForCollision; // 0x180(0x4)
		bool bGenerateMeshDistanceField : 1; // 0x184:0(0x1)
		bool bStripComplexCollisionForConsole : 1; // 0x184:1(0x1)
		bool bHasNavigationData : 1; // 0x184:2(0x1)
		bool bSupportUniformlyDistributedSampling : 1; // 0x184:3(0x1)
		bool bSupportPhysicalMaterialMasks : 1; // 0x184:4(0x1)
		bool bSupportRayTracing : 1; // 0x184:5(0x1)
		bool bDoFastBuild : 1; // 0x184:6(0x1)
		bool bIsBuiltAtRuntime : 1; // 0x184:7(0x1)
		unsigned char UnknownBit04 : 1; // 0x185:0(0x1) UNKNOWN PROPERTY
		bool bAllowCPUAccess : 1; // 0x185:1(0x1)
		unsigned char UnknownData05_7[0xBA]; // 0x186(0xBA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMesh");
			return ret;
		}

		void SetStaticMaterials(TArray& InStaticMaterials); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF414587A98
		void SetMinLODForQualityLevels(TMap& QualityLevelMinimumLODs, int32_t Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145879B8
		void SetMinimumLODForPlatforms(TMap& PlatformMinimumLODs); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145878D8
		void SetMinimumLODForPlatform(FName& PlatformName, int32_t InMinLOD); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145877F8
		void RemoveSocket(UStaticMeshSocket Socket); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414587718
		UStaticMeshDescription GetStaticMeshDescription(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414587638
		TArray GetStaticMaterials(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414587558
		TArray GetSocketsByTag(FString InSocketTag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414587478
		int32_t GetNumTriangles(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414587398
		int32_t GetNumSections(int32_t InLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145872B8
		int32_t GetNumLODs(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF4145871D8
		void GetMinLODForQualityLevels(TMap& QualityLevelMinimumLODs, int32_t& Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF4145870F8
		void GetMinimumLODForQualityLevels(TMap& QualityLevelMinimumLODs); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414587018
		int32_t GetMinimumLODForQualityLevel(FName& QualityLevel); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414586F38
		void GetMinimumLODForPlatforms(TMap& PlatformMinimumLODs); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414586E58
		int32_t GetMinimumLODForPlatform(FName& PlatformName); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414586D78
		int32_t GetMaterialIndex(FName MaterialSlotName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414586C98
		UMaterialInterface GetMaterial(int32_t MaterialIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414586BB8
		FBoxSphereBounds GetBounds(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF414586AD8
		FBox GetBoundingBox(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF4145869F8
		UStaticMeshSocket FindSocket(FName InSocketName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414586918
		UStaticMeshDescription CreateStaticMeshDescription(UObject Outer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF414586838
		void BuildFromStaticMeshDescriptions(TArray& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414586758
		void AddSocket(UStaticMeshSocket Socket); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414586678
		FName AddMaterial(UMaterialInterface Material); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414586598
	};


	// Class Engine.StaticMeshDescriptionBulkData
	// Inherited from UMeshDescriptionBaseBulkData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStaticMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshDescriptionBulkData");
			return ret;
		}
	};


	// Class Engine.ActorTextureStreamingBuildDataComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x0 (0xA0 - 0xA0)
	class UActorTextureStreamingBuildDataComponent : public UActorComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorTextureStreamingBuildDataComponent");
			return ret;
		}
	};


	// Class Engine.ServerStreamingLevelsVisibility
	// Inherited from AActor -> UObject
	// Size: 0x50 (0x2E0 - 0x290)
	class AServerStreamingLevelsVisibility : public AActor	
	{
	public:
		unsigned char UnknownData01_1[0x50]; // 0x290(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ServerStreamingLevelsVisibility");
			return ret;
		}
	};


	// Class Engine.AudioSubsystemCollectionRoot
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAudioSubsystemCollectionRoot : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioSubsystemCollectionRoot");
			return ret;
		}
	};


	// Class Engine.LocalPlayerSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class ULocalPlayerSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalPlayerSubsystem");
			return ret;
		}
	};


	// Class Engine.SubsystemBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SubsystemBlueprintLibrary");
			return ret;
		}

		UWorldSubsystem GetWorldSubsystem(UObject ContextObject, UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414587FD8
		ULocalPlayerSubsystem GetLocalPlayerSubSystemFromPlayerController(APlayerController PlayerController, UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414587EF8
		ULocalPlayerSubsystem GetLocalPlayerSubsystem(UObject ContextObject, UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414587E18
		UGameInstanceSubsystem GetGameInstanceSubsystem(UObject ContextObject, UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414587D38
		UEngineSubsystem GetEngineSubsystem(UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414587C58
		UAudioEngineSubsystem GetAudioEngineSubsystem(UObject ContextObject, UClass Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414587B78
	};


	// Class Engine.TargetPoint
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ATargetPoint : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TargetPoint");
			return ret;
		}
	};


	// Class Engine.AutomationTestSettings
	// Inherited from UObject
	// Size: 0x328 (0x350 - 0x28)
	class UAutomationTestSettings : public UObject	
	{
	public:
		TArray EngineTestModules; // 0x28(0x10)
		TArray EditorTestModules; // 0x38(0x10)
		FSoftObjectPath AutomationTestmap; // 0x48(0x18)
		TArray EditorPerformanceTestMaps; // 0x60(0x10)
		TArray AssetsToOpen; // 0x70(0x10)
		TArray MapsToPIETest; // 0x80(0x10)
		bool bUseAllProjectMapsToPlayInPIE; // 0x90(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x91(0x7) UNKNOWN PROPERTY
		FBuildPromotionTestSettings BuildPromotionTest; // 0x98(0x1F0)
		FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x288(0x30)
		FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2B8(0x10)
		FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2C8(0x30)
		TArray TestLevelFolders; // 0x2F8(0x10)
		TArray ExternalTools; // 0x308(0x10)
		TArray ImportExportTestDefinitions; // 0x318(0x10)
		TArray LaunchOnSettings; // 0x328(0x10)
		FIntPoint DefaultScreenshotResolution; // 0x338(0x8)
		float PIETestDuration; // 0x340(0x4)
		float DefaultInteractiveFramerate; // 0x344(0x4)
		float DefaultInteractiveFramerateWaitTime; // 0x348(0x4)
		float DefaultInteractiveFramerateDuration; // 0x34C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutomationTestSettings");
			return ret;
		}
	};


	// Class Engine.AsyncLoadingTests_ConvertFromType_V1
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UAsyncLoadingTests_ConvertFromType_V1 : public UObject	
	{
	public:
		TWeakObjectPtr Reference; // 0x28(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncLoadingTests_ConvertFromType_V1");
			return ret;
		}
	};


	// Class Engine.AsyncLoadingTests_ConvertFromType_V2
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAsyncLoadingTests_ConvertFromType_V2 : public UObject	
	{
	public:
		UObject Reference; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncLoadingTests_ConvertFromType_V2");
			return ret;
		}
	};


	// Class Engine.TransactionDiffingTestObject
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class UTransactionDiffingTestObject : public UObject	
	{
	public:
		TArray NamesArray; // 0x28(0x10)
		FName AdditionalName; // 0x38(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		TArray ObjectsArray; // 0x40(0x10)
		UObject AdditionalObject; // 0x50(0x8)
		TArray SoftObjectsArray; // 0x58(0x10)
		TWeakObjectPtr AdditionalSoftObject; // 0x68(0x20)
		int32_t PropertyData; // 0x88(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x8C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TransactionDiffingTestObject");
			return ret;
		}
	};


	// Class Engine.Texture2DDynamic
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x18 (0x148 - 0x130)
	class UTexture2DDynamic : public UTexture	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x130(0x8) UNKNOWN PROPERTY
		TEnumAsByte Format; // 0x138(0x1)
		unsigned char UnknownData03_7[0xF]; // 0x139(0xF) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture2DDynamic");
			return ret;
		}
	};


	// Class Engine.TextureCube
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x138 - 0x130)
	class UTextureCube : public UTexture	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x130(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureCube");
			return ret;
		}
	};


	// Class Engine.TextureCubeArray
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x138 - 0x130)
	class UTextureCubeArray : public UTexture	
	{
	public:
		unsigned char UnknownData01_1[0x8]; // 0x130(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureCubeArray");
			return ret;
		}
	};


	// Class Engine.TextureLightProfile
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class UTextureLightProfile : public UTexture2D	
	{
	public:
		float Brightness; // 0x150(0x4)
		float TextureMultiplier; // 0x154(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureLightProfile");
			return ret;
		}
	};


	// Class Engine.TextureRenderTarget2DArray
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x158 - 0x138)
	class UTextureRenderTarget2DArray : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		int32_t SizeY; // 0x13C(0x4)
		int32_t Slices; // 0x140(0x4)
		FLinearColor ClearColor; // 0x144(0x10)
		TEnumAsByte OverrideFormat; // 0x154(0x1)
		bool bHDR : 1; // 0x155:0(0x1)
		bool bForceLinearGamma : 1; // 0x155:1(0x1)
		unsigned char UnknownData01_7[0x2]; // 0x156(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTarget2DArray");
			return ret;
		}
	};


	// Class Engine.TextureRenderTargetCube
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x158 - 0x138)
	class UTextureRenderTargetCube : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		FLinearColor ClearColor; // 0x13C(0x10)
		TEnumAsByte OverrideFormat; // 0x14C(0x1)
		bool bHDR : 1; // 0x14D:0(0x1)
		bool bForceLinearGamma : 1; // 0x14D:1(0x1)
		bool bAutoGenerateMips : 1; // 0x14D:2(0x1)
		TEnumAsByte MipsSamplerFilter; // 0x14E(0x1)
		unsigned char UnknownData01_7[0x9]; // 0x14F(0x9) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTargetCube");
			return ret;
		}
	};


	// Class Engine.TextureRenderTargetVolume
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x158 - 0x138)
	class UTextureRenderTargetVolume : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		int32_t SizeY; // 0x13C(0x4)
		int32_t SizeZ; // 0x140(0x4)
		FLinearColor ClearColor; // 0x144(0x10)
		TEnumAsByte OverrideFormat; // 0x154(0x1)
		bool bHDR : 1; // 0x155:0(0x1)
		bool bForceLinearGamma : 1; // 0x155:1(0x1)
		unsigned char UnknownData01_7[0x2]; // 0x156(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTargetVolume");
			return ret;
		}
	};


	// Class Engine.TimelineTemplate
	// Inherited from UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UTimelineTemplate : public UObject	
	{
	public:
		float TimelineLength; // 0x28(0x4)
		TEnumAsByte LengthMode; // 0x2C(0x1)
		bool bAutoPlay : 1; // 0x2D:0(0x1)
		bool bLoop : 1; // 0x2D:1(0x1)
		bool bReplicated : 1; // 0x2D:2(0x1)
		bool bIgnoreTimeDilation : 1; // 0x2D:3(0x1)
		unsigned char UnknownData03_5[0x2]; // 0x2E(0x2) UNKNOWN PROPERTY
		TArray EventTracks; // 0x30(0x10)
		TArray FloatTracks; // 0x40(0x10)
		TArray VectorTracks; // 0x50(0x10)
		TArray LinearColorTracks; // 0x60(0x10)
		TArray MetaDataArray; // 0x70(0x10)
		FGuid TimelineGuid; // 0x80(0x10)
		TEnumAsByte TimelineTickGroup; // 0x90(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x91(0x3) UNKNOWN PROPERTY
		FName VariableName; // 0x94(0x4)
		FName DirectionPropertyName; // 0x98(0x4)
		FName UpdateFunctionName; // 0x9C(0x4)
		FName FinishedFunctionName; // 0xA0(0x4)
		unsigned char UnknownData05_7[0x4]; // 0xA4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TimelineTemplate");
			return ret;
		}
	};


	// Class Engine.TriggerVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ATriggerVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerVolume");
			return ret;
		}
	};


	// Class Engine.UserDefinedEnum
	// Inherited from UEnum -> UField -> UObject
	// Size: 0x50 (0xB8 - 0x68)
	class UUserDefinedEnum : public UEnum	
	{
	public:
		TMap DisplayNameMap; // 0x68(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.UserDefinedEnum");
			return ret;
		}
	};


	// Class Engine.UserInterfaceSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x238 (0x268 - 0x30)
	class UUserInterfaceSettings : public UDeveloperSettings	
	{
	public:
		ERenderFocusRule RenderFocusRule; // 0x30(0x1)
		unsigned char UnknownData05_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TMap HardwareCursors; // 0x38(0x50)
		TMap SoftwareCursors; // 0x88(0x50)
		FSoftClassPath DefaultCursor; // 0xD8(0x18)
		FSoftClassPath TextEditBeamCursor; // 0xF0(0x18)
		FSoftClassPath CrosshairsCursor; // 0x108(0x18)
		FSoftClassPath HandCursor; // 0x120(0x18)
		FSoftClassPath GrabHandCursor; // 0x138(0x18)
		FSoftClassPath GrabHandClosedCursor; // 0x150(0x18)
		FSoftClassPath SlashedCircleCursor; // 0x168(0x18)
		float ApplicationScale; // 0x180(0x4)
		EUIScalingRule UIScaleRule; // 0x184(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x185(0x3) UNKNOWN PROPERTY
		FSoftClassPath CustomScalingRuleClass; // 0x188(0x18)
		FRuntimeFloatCurve UIScaleCurve; // 0x1A0(0x88)
		bool bAllowHighDPIInGameMode; // 0x228(0x1)
		unsigned char UnknownData07_6[0x3]; // 0x229(0x3) UNKNOWN PROPERTY
		FIntPoint DesignScreenSize; // 0x22C(0x8)
		bool bLoadWidgetsOnDedicatedServer; // 0x234(0x1)
		bool bAuthorizeAutomaticWidgetVariableCreation; // 0x235(0x1)
		unsigned char UnknownData08_6[0x2]; // 0x236(0x2) UNKNOWN PROPERTY
		TArray CursorClasses; // 0x238(0x10)
		UClass CustomScalingRuleClassInstance; // 0x248(0x8)
		UDPICustomScalingRule CustomScalingRule; // 0x250(0x8)
		unsigned char UnknownData09_7[0x10]; // 0x258(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.UserInterfaceSettings");
			return ret;
		}
	};


	// Class Engine.Canvas
	// Inherited from UObject
	// Size: 0x368 (0x390 - 0x28)
	class UCanvas : public UObject	
	{
	public:
		float OrgX; // 0x28(0x4)
		float OrgY; // 0x2C(0x4)
		float ClipX; // 0x30(0x4)
		float ClipY; // 0x34(0x4)
		FColor DrawColor; // 0x38(0x4)
		bool bCenterX : 1; // 0x3C:0(0x1)
		bool bCenterY : 1; // 0x3C:1(0x1)
		bool bNoSmooth : 1; // 0x3C:2(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x3D(0x3) UNKNOWN PROPERTY
		int32_t SizeX; // 0x40(0x4)
		int32_t SizeY; // 0x44(0x4)
		unsigned char UnknownData04_6[0x8]; // 0x48(0x8) UNKNOWN PROPERTY
		FPlane ColorModulate; // 0x50(0x20)
		UTexture2D DefaultTexture; // 0x70(0x8)
		UTexture2D GradientTexture0; // 0x78(0x8)
		UReporterGraph ReporterGraph; // 0x80(0x8)
		unsigned char UnknownData05_7[0x308]; // 0x88(0x308) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Canvas");
			return ret;
		}

		FVector2D K2_TextSize(UFont RenderFont, FString RenderText, FVector2D Scale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588B38
		FVector2D K2_StrLen(UFont RenderFont, FString RenderText); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588A58
		FVector K2_Project(FVector WorldLocation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588978
		void K2_DrawTriangle(UTexture RenderTexture, TArray Triangles); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414588898
		void K2_DrawTexture(UTexture RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte BlendMode, float Rotation, FVector2D PivotPoint); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145887B8
		void K2_DrawText(UFont RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145886D8
		void K2_DrawPolygon(UTexture RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF4145885F8
		void K2_DrawMaterialTriangle(UMaterialInterface RenderMaterial, TArray Triangles); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414588518
		void K2_DrawMaterial(UMaterialInterface RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588438
		void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588358
		void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588278
		void K2_DrawBorder(UTexture BorderTexture, UTexture BackgroundTexture, UTexture LeftBorderTexture, UTexture RightBorderTexture, UTexture TopBorderTexture, UTexture BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 0x7FF414588198
		void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF4145880B8
	};


	// Class Engine.Console
	// Inherited from UObject
	// Size: 0x108 (0x130 - 0x28)
	class UConsole : public UObject	
	{
	public:
		unsigned char UnknownData03_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		ULocalPlayer ConsoleTargetPlayer; // 0x38(0x8)
		UTexture2D DefaultTexture_Black; // 0x40(0x8)
		UTexture2D DefaultTexture_White; // 0x48(0x8)
		unsigned char UnknownData04_6[0x18]; // 0x50(0x18) UNKNOWN PROPERTY
		TArray HistoryBuffer; // 0x68(0x10)
		unsigned char UnknownData05_7[0xB8]; // 0x78(0xB8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Console");
			return ret;
		}
	};


	// Class Engine.InputSettings
	// Inherited from UObject
	// Size: 0x100 (0x128 - 0x28)
	class UInputSettings : public UObject	
	{
	public:
		TArray AxisConfig; // 0x28(0x10)
		FPerPlatformSettings PlatformSettings; // 0x38(0x10)
		bool bAltEnterTogglesFullscreen : 1; // 0x48:0(0x1)
		bool bF11TogglesFullscreen : 1; // 0x48:1(0x1)
		bool bUseMouseForTouch : 1; // 0x48:2(0x1)
		bool bEnableMouseSmoothing : 1; // 0x48:3(0x1)
		bool bEnableFOVScaling : 1; // 0x48:4(0x1)
		bool bCaptureMouseOnLaunch : 1; // 0x48:5(0x1)
		bool bEnableLegacyInputScales : 1; // 0x48:6(0x1)
		bool bEnableMotionControls : 1; // 0x48:7(0x1)
		bool bFilterInputByPlatformUser : 1; // 0x49:0(0x1)
		bool bEnableInputDeviceSubsystem : 1; // 0x49:1(0x1)
		bool bShouldFlushPressedKeysOnViewportFocusLost : 1; // 0x49:2(0x1)
		bool bEnableDynamicComponentInputBinding : 1; // 0x49:3(0x1)
		bool bAlwaysShowTouchInterface : 1; // 0x49:4(0x1)
		bool bShowConsoleOnFourFingerTap : 1; // 0x49:5(0x1)
		bool bEnableGestureRecognizer : 1; // 0x49:6(0x1)
		bool bUseAutocorrect : 1; // 0x49:7(0x1)
		unsigned char UnknownData03_5[0x6]; // 0x4A(0x6) UNKNOWN PROPERTY
		TArray ExcludedAutocorrectOS; // 0x50(0x10)
		TArray ExcludedAutocorrectCultures; // 0x60(0x10)
		TArray ExcludedAutocorrectDeviceModels; // 0x70(0x10)
		EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x80(0x1)
		EMouseLockMode DefaultViewportMouseLockMode; // 0x81(0x1)
		unsigned char UnknownData04_6[0x2]; // 0x82(0x2) UNKNOWN PROPERTY
		float FOVScale; // 0x84(0x4)
		float DoubleClickTime; // 0x88(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x8C(0x4) UNKNOWN PROPERTY
		TArray ActionMappings; // 0x90(0x10)
		TArray AxisMappings; // 0xA0(0x10)
		TArray SpeechMappings; // 0xB0(0x10)
		TWeakObjectPtr DefaultPlayerInputClass; // 0xC0(0x20)
		TWeakObjectPtr DefaultInputComponentClass; // 0xE0(0x20)
		FSoftObjectPath DefaultTouchInterface; // 0x100(0x18)
		TArray ConsoleKeys; // 0x118(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputSettings");
			return ret;
		}

		void SaveKeyMappings(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF4145894D8
		void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF4145893F8
		void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414589318
		UInputSettings GetInputSettings(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 0x7FF414589238
		void GetAxisNames(TArray& AxisNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414589158
		void GetAxisMappingByName(FName InAxisName, TArray& OutMappings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414589078
		void GetActionNames(TArray& ActionNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414588F98
		void GetActionMappingByName(FName InActionName, TArray& OutMappings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF414588EB8
		void ForceRebuildKeymaps(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF414588DD8
		void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414588CF8
		void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 0x7FF414588C18
	};


	// Class Engine.InputPlatformSettings
	// Inherited from UPlatformSettings -> UObject
	// Size: 0x28 (0x68 - 0x40)
	class UInputPlatformSettings : public UPlatformSettings	
	{
	public:
		int32_t MaxTriggerFeedbackPosition; // 0x40(0x4)
		int32_t MaxTriggerFeedbackStrength; // 0x44(0x4)
		int32_t MaxTriggerVibrationTriggerPosition; // 0x48(0x4)
		int32_t MaxTriggerVibrationFrequency; // 0x4C(0x4)
		int32_t MaxTriggerVibrationAmplitude; // 0x50(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x54(0x4) UNKNOWN PROPERTY
		TArray HardwareDevices; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputPlatformSettings");
			return ret;
		}
	};


	// Class Engine.PlayerInput
	// Inherited from UObject
	// Size: 0x470 (0x498 - 0x28)
	class UPlayerInput : public UObject	
	{
	public:
		unsigned char UnknownData03_3[0x178]; // 0x28(0x178) UNKNOWN PROPERTY
		TArray DebugExecBindings; // 0x1A0(0x10)
		unsigned char UnknownData04_6[0x30]; // 0x1B0(0x30) UNKNOWN PROPERTY
		TArray InvertedAxis; // 0x1E0(0x10)
		unsigned char UnknownData05_7[0x2A8]; // 0x1F0(0x2A8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerInput");
			return ret;
		}

		void SetMouseSensitivity(float Sensitivity); // Flags: Final|Exec|Native|Public 0x7FF414589A18
		void SetBind(FName BindName, FString Command); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF414589938
		void InvertAxisKey(FKey AxisKey); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF414589858
		void InvertAxis(FName AxisName); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF414589778
		APlayerController GetOuterAPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF414589698
		void ClearSmoothing(); // Flags: Final|RequiredAPI|Exec|Native|Public 0x7FF4145895B8
	};


	// Class Engine.VectorFieldVolume
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AVectorFieldVolume : public AActor	
	{
	public:
		UVectorFieldComponent VectorFieldComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldVolume");
			return ret;
		}
	};


	// Class Engine.TireType
	// Inherited from UDataAsset -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UTireType : public UDataAsset	
	{
	public:
		float FrictionScale; // 0x30(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TireType");
			return ret;
		}
	};


	// Class Engine.VisualLoggerAutomationTests
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVisualLoggerAutomationTests : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerAutomationTests");
			return ret;
		}
	};


	// Class Engine.VisualLoggerFilterVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AVisualLoggerFilterVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerFilterVolume");
			return ret;
		}
	};


	// Class Engine.VisualLoggerKismetLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerKismetLibrary");
			return ret;
		}

		void RedirectVislog(UObject SourceOwner, UObject DestinationOwner); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF41458A578
		void LogText(UObject WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF41458A498
		void LogSphere(UObject WorldContextObject, FVector Center, float Radius, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458A3B8
		void LogSegment(UObject WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458A2D8
		void LogOrientedBox(UObject WorldContextObject, FBox BoxShape, FTransform Transform, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458A1F8
		void LogLocation(UObject WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458A118
		void LogCylinder(UObject WorldContextObject, FVector Start, FVector End, float Radius, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458A038
		void LogCone(UObject WorldContextObject, FVector Origin, FVector Direction, float Length, float Angle, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414589F58
		void LogCircle(UObject WorldContextObject, FVector Center, FVector UpAxis, float Radius, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414589E78
		void LogCapsule(UObject WorldContextObject, FVector base, float HalfHeight, float Radius, FQuat Rotation, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414589D98
		void LogBox(UObject WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414589CB8
		void LogArrow(UObject WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, FName CategoryName, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF414589BD8
		void EnableRecording(bool bEnabled); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF414589AF8
	};


	// Class Engine.VoiceChannel
	// Inherited from UChannel -> UObject
	// Size: 0x10 (0x78 - 0x68)
	class UVoiceChannel : public UChannel	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x68(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VoiceChannel");
			return ret;
		}
	};


	// Class Engine.VOIPTalker
	// Inherited from UActorComponent -> UObject
	// Size: 0x40 (0xE0 - 0xA0)
	class UVOIPTalker : public UActorComponent	
	{
	public:
		FVoiceSettings Settings; // 0xA0(0x18)
		unsigned char UnknownData01_7[0x28]; // 0xB8(0x28) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VOIPTalker");
			return ret;
		}

		void RegisterWithPlayerState(APlayerState OwningState); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41458A9D8
		float GetVoiceLevel(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41458A8F8
		UVOIPTalker CreateTalkerForPlayer(APlayerState OwningState); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41458A818
		void BPOnTalkingEnd(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF41458A738
		void BPOnTalkingBegin(UAudioComponent AudioComponent); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent 0x7FF41458A658
	};


	// Class Engine.VOIPStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVOIPStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VOIPStatics");
			return ret;
		}

		void SetMicThreshold(float InThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable 0x7FF41458AAB8
	};


	// Class Engine.VolumeTexture
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x10 (0x140 - 0x130)
	class UVolumeTexture : public UTexture	
	{
	public:
		unsigned char UnknownData02_3[0x8]; // 0x130(0x8) UNKNOWN PROPERTY
		TEnumAsByte AddressMode; // 0x138(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x139(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumeTexture");
			return ret;
		}
	};


	// Class Engine.VolumetricLightmapDensityVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x8 (0x2D0 - 0x2C8)
	class AVolumetricLightmapDensityVolume : public AVolume	
	{
	public:
		FInt32Interval AllowedMipLevelRange; // 0x2C8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumetricLightmapDensityVolume");
			return ret;
		}
	};


	// Class Engine.LightMapVirtualTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x18 (0x168 - 0x150)
	class ULightMapVirtualTexture2D : public UTexture2D	
	{
	public:
		TArray TypeToLayer; // 0x150(0x10)
		unsigned char UnknownData01_7[0x8]; // 0x160(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightMapVirtualTexture2D");
			return ret;
		}
	};


	// Class Engine.RuntimeVirtualTexture
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class URuntimeVirtualTexture : public UObject	
	{
	public:
		int32_t TileCount; // 0x28(0x4)
		int32_t TileSize; // 0x2C(0x4)
		int32_t TileBorderSize; // 0x30(0x4)
		ERuntimeVirtualTextureMaterialType MaterialType; // 0x34(0x1)
		bool bCompressTextures; // 0x35(0x1)
		bool bUseLowQualityCompression; // 0x36(0x1)
		bool bClearTextures; // 0x37(0x1)
		bool bSinglePhysicalSpace; // 0x38(0x1)
		bool bPrivateSpace; // 0x39(0x1)
		bool bAdaptive; // 0x3A(0x1)
		bool bContinuousUpdate; // 0x3B(0x1)
		int32_t RemoveLowMips; // 0x3C(0x4)
		TEnumAsByte LODGroup; // 0x40(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		int32_t Size; // 0x44(0x4)
		URuntimeVirtualTextureStreamingProxy StreamingTexture; // 0x48(0x8)
		unsigned char UnknownData03_7[0x90]; // 0x50(0x90) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTexture");
			return ret;
		}

		int32_t GetTileSize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458AF18
		int32_t GetTileCount(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458AE38
		int32_t GetTileBorderSize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458AD58
		int32_t GetSize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458AC78
		int32_t GetPageTableSize(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458AB98
	};


	// Class Engine.RuntimeVirtualTextureVolume
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ARuntimeVirtualTextureVolume : public AActor	
	{
	public:
		URuntimeVirtualTextureComponent VirtualTextureComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTextureVolume");
			return ret;
		}
	};


	// Class Engine.VirtualTexture
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVirtualTexture : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTexture");
			return ret;
		}
	};


	// Class Engine.LightMapVirtualTexture
	// Inherited from UVirtualTexture -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULightMapVirtualTexture : public UVirtualTexture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightMapVirtualTexture");
			return ret;
		}
	};


	// Class Engine.RuntimeVirtualTextureStreamingProxy
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x0 (0x150 - 0x150)
	class URuntimeVirtualTextureStreamingProxy : public UTexture2D	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTextureStreamingProxy");
			return ret;
		}
	};


	// Class Engine.VirtualTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x10 (0x160 - 0x150)
	class UVirtualTexture2D : public UTexture2D	
	{
	public:
		FVirtualTextureBuildSettings Settings; // 0x150(0x8)
		bool bContinuousUpdate; // 0x158(0x1)
		bool bSinglePhysicalSpace; // 0x159(0x1)
		unsigned char UnknownData01_7[0x6]; // 0x15A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTexture2D");
			return ret;
		}
	};


	// Class Engine.VirtualTextureAdapter
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x18 (0x148 - 0x130)
	class UVirtualTextureAdapter : public UTexture	
	{
	public:
		UTexture Texture; // 0x130(0x8)
		bool bUseCompressedFormat; // 0x138(0x1)
		bool bUseDefaultTileSizes; // 0x139(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x13A(0x2) UNKNOWN PROPERTY
		int32_t TileSize; // 0x13C(0x4)
		int32_t TileBorderSize; // 0x140(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x144(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTextureAdapter");
			return ret;
		}
	};


	// Class Engine.VirtualTextureBuilder
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UVirtualTextureBuilder : public UObject	
	{
	public:
		UVirtualTexture2D Texture; // 0x28(0x8)
		UVirtualTexture2D TextureMobile; // 0x30(0x8)
		uint64_t BuildHash; // 0x38(0x8)
		bool bSeparateTextureForMobile; // 0x40(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x41(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTextureBuilder");
			return ret;
		}
	};


	// Class Engine.VirtualTexturePoolConfig
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x28 (0x58 - 0x30)
	class UVirtualTexturePoolConfig : public UDeveloperSettings	
	{
	public:
		int32_t DefaultSizeInMegabyte; // 0x30(0x4)
		bool bPoolAutoGrowInEditor; // 0x34(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		TArray Pools; // 0x38(0x10)
		TArray TransientPools; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTexturePoolConfig");
			return ret;
		}
	};


	// Class Engine.WindDirectionalSource
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AWindDirectionalSource : public AInfo	
	{
	public:
		UWindDirectionalSourceComponent Component; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WindDirectionalSource");
			return ret;
		}
	};


	// Class Engine.WorldComposition
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UWorldComposition : public UObject	
	{
	public:
		unsigned char UnknownData02_3[0x20]; // 0x28(0x20) UNKNOWN PROPERTY
		TArray TilesStreaming; // 0x48(0x10)
		double TilesStreamingTimeThreshold; // 0x58(0x8)
		bool bLoadAllTilesDuringCinematic; // 0x60(0x1)
		bool bRebaseOriginIn3DSpace; // 0x61(0x1)
		unsigned char UnknownData03_6[0x2]; // 0x62(0x2) UNKNOWN PROPERTY
		float RebaseOriginDistance; // 0x64(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldComposition");
			return ret;
		}
	};


	// Class Engine.WorldPartitionBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionBlueprintLibrary");
			return ret;
		}

		void UnpinActors(TArray& InActorsToUnpin); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458BA78
		void UnloadActors(TArray& InActorsToUnload); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458B998
		void PinActors(TArray& InActorsToPin); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458B8B8
		void LoadActors(TArray& InActorsToLoad); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458B7D8
		FBox GetRuntimeWorldBounds(); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458B6F8
		bool GetIntersectingActorDescs(FBox& InBox, TArray& OutActorDescs); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 0x7FF41458B618
		FBox GetEditorWorldBounds(); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable 0x7FF41458B538
		UDataLayerManager GetDataLayerManager(UObject WorldContextObject); // Flags: Final|Native|Static|Public|BlueprintCallable 0x7FF41458B458
		bool GetActorDescsForActors(TArray& InActors, TArray& OutActorDescs); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458B378
		bool GetActorDescs(TArray& OutActorDescs); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458B298
	};


	// Class Engine.ActorDescContainerSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UActorDescContainerSubsystem : public UEngineSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorDescContainerSubsystem");
			return ret;
		}
	};


	// Class Engine.ContentBundleDescriptor
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UContentBundleDescriptor : public UObject	
	{
	public:
		FString DisplayName; // 0x28(0x10)
		FColor DebugColor; // 0x38(0x4)
		FGuid Guid; // 0x3C(0x10)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleDescriptor");
			return ret;
		}
	};


	// Class Engine.ContentBundleUnsavedActorMonitor
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UContentBundleUnsavedActorMonitor : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleUnsavedActorMonitor");
			return ret;
		}
	};


	// Class Engine.ContentBundleEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UContentBundleEngineSubsystem : public UEngineSubsystem	
	{
	public:
		unsigned char UnknownData01_3[0x70]; // 0x30(0x70) UNKNOWN PROPERTY
		TWeakObjectPtr ContentBundleTypeFactoryClass; // 0xA0(0x20)
		UContentBundleTypeFactory ContentBundleTypeFactory; // 0xC0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.ContentBundleManager
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UContentBundleManager : public UObject	
	{
	public:
		unsigned char UnknownData01_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleManager");
			return ret;
		}
	};


	// Class Engine.ContentBundleDuplicateForPIEHelper
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UContentBundleDuplicateForPIEHelper : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleDuplicateForPIEHelper");
			return ret;
		}
	};


	// Class Engine.WorldPartitionCookPackageObject
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionCookPackageObject : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionCookPackageObject");
			return ret;
		}
	};


	// Class Engine.WorldDataLayers
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x588 (0x818 - 0x290)
	class AWorldDataLayers : public AInfo	
	{
	public:
		unsigned char UnknownData03_3[0xA8]; // 0x290(0xA8) UNKNOWN PROPERTY
		UExternalDataLayerInstance RootExternalDataLayerInstance; // 0x338(0x8)
		TSet DataLayerInstances; // 0x340(0x50)
		TSet ExternalPackageDataLayerInstances; // 0x390(0x50)
		TArray LoadedExternalPackageDataLayerInstances; // 0x3E0(0x10)
		TArray TransientDataLayerInstances; // 0x3F0(0x10)
		TMap DeprecatedDataLayerNameToDataLayerInstance; // 0x400(0x50)
		TSet WorldDataLayers; // 0x450(0x50)
		TArray RepActiveDataLayerNames; // 0x4A0(0x10)
		TArray RepLoadedDataLayerNames; // 0x4B0(0x10)
		unsigned char UnknownData04_6[0x140]; // 0x4C0(0x140) UNKNOWN PROPERTY
		TArray RepEffectiveActiveDataLayerNames; // 0x600(0x10)
		TArray RepEffectiveLoadedDataLayerNames; // 0x610(0x10)
		unsigned char UnknownData05_7[0x1F8]; // 0x620(0x1F8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldDataLayers");
			return ret;
		}

		void OnRep_LoadedDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41458D918
		void OnRep_EffectiveLoadedDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41458D838
		void OnRep_EffectiveActiveDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41458D758
		void OnRep_ActiveDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected 0x7FF41458D678
		void OnDataLayerRuntimeStateChanged(UDataLayerInstance InDataLayer, EDataLayerRuntimeState InState); // Flags: RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Public 0x7FF41458D598
	};


	// Class Engine.DataLayer
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UDataLayer : public UObject	
	{
	public:
		FName DataLayerLabel; // 0x28(0x4)
		bool bIsRuntime : 1; // 0x2C:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		EDataLayerRuntimeState InitialRuntimeState; // 0x30(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FColor DebugColor; // 0x34(0x4)
		UDataLayer Parent; // 0x38(0x8)
		TArray Children; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayer");
			return ret;
		}

		bool IsVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C418
		bool IsRuntime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C338
		bool IsInitiallyVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C258
		bool IsInitiallyActive(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C178
		bool IsEffectiveVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C098
		bool IsDynamicallyLoaded(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458BFB8
		EDataLayerState GetInitialState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458BED8
		EDataLayerRuntimeState GetInitialRuntimeState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458BDF8
		FColor GetDebugColor(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 0x7FF41458BD18
		FName GetDataLayerLabel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458BC38
		bool Equals(FActorDataLayer& ActorDataLayer); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458BB58
	};


	// Class Engine.DataLayerInstancePrivate
	// Inherited from UDataLayerInstance -> UObject
	// Size: 0x18 (0x60 - 0x48)
	class UDataLayerInstancePrivate : public UDataLayerInstance	
	{
	public:
		FString ShortName; // 0x48(0x10)
		UDataLayerAsset DataLayerAsset; // 0x58(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstancePrivate");
			return ret;
		}
	};


	// Class Engine.DataLayerInstanceProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDataLayerInstanceProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstanceProvider");
			return ret;
		}
	};


	// Class Engine.DataLayerLoadingPolicy
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDataLayerLoadingPolicy : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerLoadingPolicy");
			return ret;
		}
	};


	// Class Engine.DataLayerSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UDataLayerSubsystem : public UWorldSubsystem	
	{
	public:
		FMulticastInlineDelegate OnDataLayerRuntimeStateChanged; // 0x30(0x10)
		TWeakObjectPtr DataLayerLoadingPolicyClass; // 0x40(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerSubsystem");
			return ret;
		}

		void SetDataLayerStateByLabel(FName& InDataLayerLabel, EDataLayerState InState); // Flags: Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 0x7FF41458D4B8
		void SetDataLayerState(FActorDataLayer& InDataLayer, EDataLayerState InState); // Flags: Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 0x7FF41458D3D8
		void SetDataLayerRuntimeStateByLabel(FName& InDataLayerLabel, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 0x7FF41458D2F8
		void SetDataLayerRuntimeState(FActorDataLayer& InDataLayer, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 0x7FF41458D218
		void SetDataLayerInstanceRuntimeState(UDataLayerAsset InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 0x7FF41458D138
		TSet GetLoadedDataLayerNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458D058
		EDataLayerState GetDataLayerStateByLabel(FName& InDataLayerLabel); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458CF78
		EDataLayerState GetDataLayerState(FActorDataLayer& InDataLayer); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458CE98
		EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(FName& InDataLayerLabel); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458CDB8
		EDataLayerRuntimeState GetDataLayerRuntimeState(FActorDataLayer& InDataLayer); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458CCD8
		EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(UDataLayerAsset InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458CBF8
		UDataLayerInstance GetDataLayerInstanceFromAsset(UDataLayerAsset InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458CB18
		EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(UDataLayerAsset InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458CA38
		UDataLayerInstance GetDataLayerFromName(FName InDataLayerName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C958
		UDataLayerInstance GetDataLayerFromLabel(FName InDataLayerLabel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C878
		EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(FName& InDataLayerLabel); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458C798
		EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(FActorDataLayer& InDataLayer); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458C6B8
		UDataLayerInstance GetDataLayer(FActorDataLayer& InDataLayer); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458C5D8
		TSet GetActiveDataLayerNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const 0x7FF41458C4F8
	};


	// Class Engine.DeprecatedDataLayerInstance
	// Inherited from UDataLayerInstance -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class UDeprecatedDataLayerInstance : public UDataLayerInstance	
	{
	public:
		FName Label; // 0x48(0x4)
		FName DeprecatedDataLayerFName; // 0x4C(0x4)
		EDataLayerType DataLayerType; // 0x50(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		FColor DebugColor; // 0x54(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeprecatedDataLayerInstance");
			return ret;
		}
	};


	// Class Engine.WorldPartitionDestructibleHLODComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x230 - 0x220)
	class UWorldPartitionDestructibleHLODComponent : public USceneComponent	
	{
	public:
		TArray DestructibleActors; // 0x220(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleHLODComponent");
			return ret;
		}
	};


	// Class Engine.WorldPartitionDestructibleHLODMeshComponent
	// Inherited from UWorldPartitionDestructibleHLODComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x160 (0x390 - 0x230)
	class UWorldPartitionDestructibleHLODMeshComponent : public UWorldPartitionDestructibleHLODComponent	
	{
	public:
		UMaterialInterface DestructibleHLODMaterial; // 0x230(0x8)
		FWorldPartitionDestructibleHLODState DestructibleHLODState; // 0x238(0x148)
		UMaterialInstanceDynamic VisibilityMaterial; // 0x380(0x8)
		UTexture2DDynamic VisibilityTexture; // 0x388(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleHLODMeshComponent");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLOD
	// Inherited from AActor -> UObject
	// Size: 0x18 (0x2A8 - 0x290)
	class AWorldPartitionHLOD : public AActor	
	{
	public:
		uint32_t LODLevel; // 0x290(0x4)
		bool bRequireWarmup; // 0x294(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x295(0x3) UNKNOWN PROPERTY
		FGuid SourceCellGuid; // 0x298(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLOD");
			return ret;
		}
	};


	// Class Engine.HLODBuilderSettings
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHLODBuilderSettings : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODBuilderSettings");
			return ret;
		}
	};


	// Class Engine.NullHLODBuilder
	// Inherited from UHLODBuilder -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNullHLODBuilder : public UHLODBuilder	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NullHLODBuilder");
			return ret;
		}
	};


	// Class Engine.WorldPartitionDestructibleInHLODInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionDestructibleInHLODInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleInHLODInterface");
			return ret;
		}

		void SetHLODDestructionTag(FWorldPartitionHLODDestructionTag& InDestructionTag); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|BlueprintEvent 0x7FF41458DAD8
		FWorldPartitionHLODDestructionTag GetHLODDestructionTag(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const 0x7FF41458D9F8
	};


	// Class Engine.WorldPartitionDestructibleInHLODSupportLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionDestructibleInHLODSupportLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleInHLODSupportLibrary");
			return ret;
		}

		void DestroyInHLOD(TScriptInterface& DestructibleInHLOD); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458DC98
		void DamageInHLOD(TScriptInterface& DestructibleInHLOD, float DamagePercent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 0x7FF41458DBB8
	};


	// Class Engine.HLODLayer
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UHLODLayer : public UObject	
	{
	public:
		EHLODLayerType LayerType; // 0x28(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		UClass HLODBuilderClass; // 0x30(0x8)
		UHLODBuilderSettings HLODBuilderSettings; // 0x38(0x8)
		bool bIsSpatiallyLoaded : 1; // 0x40:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		int32_t CellSize; // 0x44(0x4)
		double LoadingRange; // 0x48(0x8)
		UHLODLayer ParentLayer; // 0x50(0x8)
		UClass HLODActorClass; // 0x58(0x8)
		UClass HLODModifierClass; // 0x60(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODLayer");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODModifier
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODModifier : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODModifier");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODProvider");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODRuntimeSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0xE8 (0x118 - 0x30)
	class UWorldPartitionHLODRuntimeSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0xE8]; // 0x30(0xE8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODRuntimeSubsystem");
			return ret;
		}
	};


	// Class Engine.NavigationDataChunkActor
	// Inherited from APartitionActor -> AActor -> UObject
	// Size: 0x48 (0x2D8 - 0x290)
	class ANavigationDataChunkActor : public APartitionActor	
	{
	public:
		TArray NavDataChunks; // 0x290(0x10)
		FBox DataChunkActorBounds; // 0x2A0(0x38)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationDataChunkActor");
			return ret;
		}
	};


	// Class Engine.WorldPartitionActorLoaderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionActorLoaderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionActorLoaderInterface");
			return ret;
		}
	};


	// Class Engine.WorldPartitionEditorHash
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionEditorHash : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionEditorPerProjectUserSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UWorldPartitionEditorPerProjectUserSettings : public UDeveloperSettings	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorPerProjectUserSettings");
			return ret;
		}
	};


	// Class Engine.WorldPartitionEditorSpatialHash
	// Inherited from UWorldPartitionEditorHash -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorSpatialHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionLevelStreamingDynamic
	// Inherited from ULevelStreamingDynamic -> ULevelStreaming -> UObject
	// Size: 0x30 (0x1D0 - 0x1A0)
	class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic	
	{
	public:
		bool bShouldBeAlwaysLoaded; // 0x1A0(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x1A1(0x3) UNKNOWN PROPERTY
		TWeakObjectPtr StreamingCell; // 0x1A4(0x8)
		unsigned char UnknownData03_6[0x4]; // 0x1AC(0x4) UNKNOWN PROPERTY
		TWeakObjectPtr OuterWorldPartition; // 0x1B0(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionLevelStreamingDynamic");
			return ret;
		}
	};


	// Class Engine.WorldPartitionStreamingPolicy
	// Inherited from UObject
	// Size: 0x3D8 (0x400 - 0x28)
	class UWorldPartitionStreamingPolicy : public UObject	
	{
	public:
		unsigned char UnknownData03_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FWorldPartitionUpdateStreamingCurrentState CurrentState; // 0x30(0x100)
		EWorldPartitionStreamingPerformance CurrentStreamingPerformance; // 0x130(0x1)
		unsigned char UnknownData04_6[0x7]; // 0x131(0x7) UNKNOWN PROPERTY
		FWorldPartitionUpdateStreamingTargetState TargetState; // 0x138(0x48)
		FWorldPartitionUpdateStreamingCurrentState AsyncTaskCurrentState; // 0x180(0x100)
		FWorldPartitionUpdateStreamingTargetState AsyncTaskTargetState; // 0x280(0x48)
		bool bShouldMergeStreamingSourceInfo; // 0x2C8(0x1)
		unsigned char UnknownData05_7[0x137]; // 0x2C9(0x137) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionStreamingPolicy");
			return ret;
		}
	};


	// Class Engine.WorldPartitionLevelStreamingPolicy
	// Inherited from UWorldPartitionStreamingPolicy -> UObject
	// Size: 0x110 (0x510 - 0x400)
	class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy	
	{
	public:
		FTopLevelAssetPath SourceWorldAssetPath; // 0x400(0x8)
		TMap SubObjectsToCellRemapping; // 0x408(0x50)
		FWorldPartitionRuntimeContainerResolver ContainerResolver; // 0x458(0x58)
		TArray ExternalStreamingObjects; // 0x4B0(0x10)
		TMap SubObjectsToExternalStreamingObjectsRemapping; // 0x4C0(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionLevelStreamingPolicy");
			return ret;
		}
	};


	// Class Engine.WorldPartitionMiniMap
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xD0 (0x360 - 0x290)
	class AWorldPartitionMiniMap : public AInfo	
	{
	public:
		FBox MiniMapWorldBounds; // 0x290(0x38)
		FBox2D UVOffset; // 0x2C8(0x28)
		UTexture2D MiniMapTexture; // 0x2F0(0x8)
		TSet ExcludedDataLayers; // 0x2F8(0x50)
		int32_t WorldUnitsPerPixel; // 0x348(0x4)
		int32_t BuilderCellSize; // 0x34C(0x4)
		TEnumAsByte CaptureSource; // 0x350(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x351(0x3) UNKNOWN PROPERTY
		uint32_t CaptureWarmupFrames; // 0x354(0x4)
		int32_t MiniMapTileSize; // 0x358(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x35C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionMiniMap");
			return ret;
		}
	};


	// Class Engine.WorldPartitionMiniMapVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AWorldPartitionMiniMapVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionMiniMapVolume");
			return ret;
		}
	};


	// Class Engine.WorldPartitionReplay
	// Inherited from AActor -> UObject
	// Size: 0x20 (0x2B0 - 0x290)
	class AWorldPartitionReplay : public AActor	
	{
	public:
		TArray StreamingSourceNames; // 0x290(0x10)
		unsigned char UnknownData01_7[0x10]; // 0x2A0(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionReplay");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellDataSpatialHash
	// Inherited from UWorldPartitionRuntimeCellData -> UObject
	// Size: 0x70 (0x148 - 0xD8)
	class UWorldPartitionRuntimeCellDataSpatialHash : public UWorldPartitionRuntimeCellData	
	{
	public:
		FVector Position; // 0xD8(0x18)
		float Extent; // 0xF0(0x4)
		unsigned char UnknownData01_7[0x54]; // 0xF4(0x54) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellDataSpatialHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionCell
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionCell : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionCell");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeLevelStreamingCell
	// Inherited from UWorldPartitionRuntimeCell -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UWorldPartitionRuntimeLevelStreamingCell : public UWorldPartitionRuntimeCell	
	{
	public:
		UWorldPartitionLevelStreamingDynamic LevelStreaming; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeLevelStreamingCell");
			return ret;
		}

		void OnLevelShown(); // Flags: Final|RequiredAPI|Native|Private 0x7FF41458DE58
		void OnLevelHidden(); // Flags: Final|RequiredAPI|Native|Private 0x7FF41458DD78
	};


	// Class Engine.SpatialHashRuntimeGridInfo
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ASpatialHashRuntimeGridInfo : public AInfo	
	{
	public:
		FSpatialHashRuntimeGrid GridSettings; // 0x290(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x291(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpatialHashRuntimeGridInfo");
			return ret;
		}
	};


	// Class Engine.RuntimeSpatialHashExternalStreamingObject
	// Inherited from URuntimeHashExternalStreamingObjectBase -> UObject
	// Size: 0x10 (0x1C8 - 0x1B8)
	class URuntimeSpatialHashExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase	
	{
	public:
		TArray StreamingGrids; // 0x1B8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeSpatialHashExternalStreamingObject");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeSpatialHash
	// Inherited from UWorldPartitionRuntimeHash -> UObject
	// Size: 0xC0 (0x138 - 0x78)
	class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash	
	{
	public:
		bool bEnableZCulling; // 0x78(0x1)
		FSpatialHashSettings Settings; // 0x79(0x2)
		unsigned char UnknownData02_6[0x5]; // 0x7B(0x5) UNKNOWN PROPERTY
		TArray StreamingGrids; // 0x80(0x10)
		unsigned char UnknownData03_6[0x58]; // 0x90(0x58) UNKNOWN PROPERTY
		TMap WorldAssetStreamingObjects; // 0xE8(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeSpatialHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionSubsystem
	// Inherited from UTickableWorldSubsystem -> UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x2B8 (0x2F8 - 0x40)
	class UWorldPartitionSubsystem : public UTickableWorldSubsystem	
	{
	public:
		unsigned char UnknownData01_1[0x2B8]; // 0x40(0x2B8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionSubsystem");
			return ret;
		}

		bool IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, TArray& QuerySources, bool bExactState); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 0x7FF41458E018
		bool IsAllStreamingCompleted(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable 0x7FF41458DF38
	};


	// Class Engine.WorldPartitionVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AWorldPartitionVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionVolume");
			return ret;
		}
	};

}
