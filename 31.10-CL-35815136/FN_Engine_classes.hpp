#pragma once

// Dumped with <3 by android1337
// Version: ++Fortnite+Release-31.10-CL-35815136
// Package: Engine
// Current Base: 0x7FF745A60000, UFunctions offsets will be relative to this base address

namespace SDK
{

	// Class Engine.Actor
	// Inherited from UObject
	// Size: 0x268 (0x290 - 0x28)
	class AActor : public UObject	
	{
	public:
		FActorTickFunction PrimaryActorTick; // 0x28(0x30)
		bool bNetTemporary : 1; // 0x58:0(0x1)
		unsigned char UnknownBit00 : 1; // 0x58:1(0x1) UNKNOWN PROPERTY
		bool bOnlyRelevantToOwner : 1; // 0x58:2(0x1)
		bool bAlwaysRelevant : 1; // 0x58:3(0x1)
		bool bReplicateMovement : 1; // 0x58:4(0x1)
		bool bCallPreReplication : 1; // 0x58:5(0x1)
		bool bCallPreReplicationForReplay : 1; // 0x58:6(0x1)
		bool bHidden : 1; // 0x58:7(0x1)
		bool bTearOff : 1; // 0x59:0(0x1)
		bool bForceNetAddressable : 1; // 0x59:1(0x1)
		bool bExchangedRoles : 1; // 0x59:2(0x1)
		bool bNetLoadOnClient : 1; // 0x59:3(0x1)
		bool bNetUseOwnerRelevancy : 1; // 0x59:4(0x1)
		bool bRelevantForNetworkReplays : 1; // 0x59:5(0x1)
		bool bRelevantForLevelBounds : 1; // 0x59:6(0x1)
		bool bReplayRewindable : 1; // 0x59:7(0x1)
		bool bAllowTickBeforeBeginPlay : 1; // 0x5A:0(0x1)
		bool bAutoDestroyWhenFinished : 1; // 0x5A:1(0x1)
		bool bCanBeDamaged : 1; // 0x5A:2(0x1)
		bool bBlockInput : 1; // 0x5A:3(0x1)
		bool bCollideWhenPlacing : 1; // 0x5A:4(0x1)
		bool bFindCameraComponentWhenViewTarget : 1; // 0x5A:5(0x1)
		bool bGenerateOverlapEventsDuringLevelStreaming : 1; // 0x5A:6(0x1)
		bool bIgnoresOriginShifting : 1; // 0x5A:7(0x1)
		bool bEnableAutoLODGeneration : 1; // 0x5B:0(0x1)
		bool bIsEditorOnlyActor : 1; // 0x5B:1(0x1)
		unsigned char UnknownBit01 : 1; // 0x5B:2(0x1) UNKNOWN PROPERTY
		bool bReplicates : 1; // 0x5B:3(0x1)
		bool bCanBeInCluster : 1; // 0x5B:4(0x1)
		bool bAllowReceiveTickEventOnDedicatedServer : 1; // 0x5B:5(0x1)
		unsigned char UnknownBit02 : 1; // 0x5B:6(0x1) UNKNOWN PROPERTY
		bool bReplicateUsingRegisteredSubObjectList : 1; // 0x5B:7(0x1)
		unsigned char UnknownBit03 : 1; // 0x5C:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x5C:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit05 : 1; // 0x5C:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0x5C:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x5C:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x5C:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x5C:6(0x1) UNKNOWN PROPERTY
		bool bActorEnableCollision : 1; // 0x5C:7(0x1)
		bool bActorIsBeingDestroyed : 1; // 0x5D:0(0x1)
		unsigned char UnknownBit10 : 1; // 0x5D:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit11 : 1; // 0x5D:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit12 : 1; // 0x5D:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit13 : 1; // 0x5D:4(0x1) UNKNOWN PROPERTY
		bool bAsyncPhysicsTickEnabled : 1; // 0x5D:5(0x1)
		EActorUpdateOverlapsMethod UpdateOverlapsMethodDuringLevelStreaming; // 0x5E(0x1)
		EActorUpdateOverlapsMethod DefaultUpdateOverlapsMethodDuringLevelStreaming; // 0x5F(0x1)
		TEnumAsByte<ENetRole> RemoteRole; // 0x60(0x1)
		unsigned char UnknownData14_6[0x3]; // 0x61(0x3) UNKNOWN PROPERTY
		float InitialLifeSpan; // 0x64(0x4)
		float CustomTimeDilation; // 0x68(0x4)
		int32_t RayTracingGroupId; // 0x6C(0x4)
		FRepAttachment AttachmentReplication; // 0x70(0x60)
		FRepMovement ReplicatedMovement; // 0xD0(0x70)
		AActor* Owner; // 0x140(0x8)
		FName NetDriverName; // 0x148(0x4)
		TEnumAsByte<ENetRole> Role; // 0x14C(0x1)
		TEnumAsByte<ENetDormancy> NetDormancy; // 0x14D(0x1)
		ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod; // 0x14E(0x1)
		TEnumAsByte<EAutoReceiveInput> AutoReceiveInput; // 0x14F(0x1)
		int32_t InputPriority; // 0x150(0x4)
		unsigned char UnknownData15_6[0x4]; // 0x154(0x4) UNKNOWN PROPERTY
		UInputComponent* InputComponent; // 0x158(0x8)
		int32_t NetTag; // 0x160(0x4)
		float NetCullDistanceSquared; // 0x164(0x4)
		float NetUpdateFrequency; // 0x168(0x4)
		float MinNetUpdateFrequency; // 0x16C(0x4)
		float NetPriority; // 0x170(0x4)
		EPhysicsReplicationMode PhysicsReplicationMode; // 0x174(0x1)
		unsigned char UnknownData16_6[0xB]; // 0x175(0xB) UNKNOWN PROPERTY
		APawn* Instigator; // 0x180(0x8)
		TArray<AActor*> Children; // 0x188(0x10)
		USceneComponent* RootComponent; // 0x198(0x8)
		unsigned char UnknownData17_6[0x8]; // 0x1A0(0x8) UNKNOWN PROPERTY
		TArray<FName> Layers; // 0x1A8(0x10)
		TWeakObjectPtr<UChildActorComponent*> ParentComponent; // 0x1B8(0x8)
		unsigned char UnknownData18_6[0x10]; // 0x1C0(0x10) UNKNOWN PROPERTY
		TArray<FName> Tags; // 0x1D0(0x10)
		FMulticastSparseDelegate OnTakeAnyDamage; // 0x1E0(0x1)
		FMulticastSparseDelegate OnTakePointDamage; // 0x1E1(0x1)
		FMulticastSparseDelegate OnTakeRadialDamage; // 0x1E2(0x1)
		FMulticastSparseDelegate OnActorBeginOverlap; // 0x1E3(0x1)
		FMulticastSparseDelegate OnActorEndOverlap; // 0x1E4(0x1)
		FMulticastSparseDelegate OnBeginCursorOver; // 0x1E5(0x1)
		FMulticastSparseDelegate OnEndCursorOver; // 0x1E6(0x1)
		FMulticastSparseDelegate OnClicked; // 0x1E7(0x1)
		FMulticastSparseDelegate OnReleased; // 0x1E8(0x1)
		FMulticastSparseDelegate OnInputTouchBegin; // 0x1E9(0x1)
		FMulticastSparseDelegate OnInputTouchEnd; // 0x1EA(0x1)
		FMulticastSparseDelegate OnInputTouchEnter; // 0x1EB(0x1)
		FMulticastSparseDelegate OnInputTouchLeave; // 0x1EC(0x1)
		FMulticastSparseDelegate OnActorHit; // 0x1ED(0x1)
		FMulticastSparseDelegate OnDestroyed; // 0x1EE(0x1)
		FMulticastSparseDelegate OnEndPlay; // 0x1EF(0x1)
		unsigned char UnknownData19_6[0x80]; // 0x1F0(0x80) UNKNOWN PROPERTY
		TArray<UActorComponent*> InstanceComponents; // 0x270(0x10)
		TArray<UActorComponent*> BlueprintCreatedComponents; // 0x280(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Actor");
			return ret;
		}

		bool WasRecentlyRendered(float Tolerance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C5318(relative to base address)
		void UserConstructionScript(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void TearOff(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C349660(relative to base address)
		void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C5218(relative to base address)
		void SetTickableWhenPaused(bool bTickableWhenPaused); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C5294(relative to base address)
		void SetReplicates(bool bInReplicates); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C5198(relative to base address)
		void SetReplicateMovement(bool bInReplicateMovement); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C5114(relative to base address)
		void SetRayTracingGroupId(int32_t InRaytracingGroupId); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C508C(relative to base address)
		void SetPhysicsReplicationMode(EPhysicsReplicationMode ReplicationMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C500C(relative to base address)
		void SetOwner(AActor* NewOwner); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4F88(relative to base address)
		void SetNetUpdateFrequency(float Frequency); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4F08(relative to base address)
		void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4E88(relative to base address)
		void SetNetCullDistanceSquared(float DistanceSq); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4E08(relative to base address)
		void SetMinNetUpdateFrequency(float MinFrequency); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4D88(relative to base address)
		void SetLifeSpan(float InLifespan); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7490C2E9C(relative to base address)
		void SetAutoDestroyWhenFinished(bool bVal); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4CC0(relative to base address)
		void SetActorTickInterval(float TickInterval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4C40(relative to base address)
		void SetActorTickEnabled(bool bEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BE22C8(relative to base address)
		void SetActorScale3D(FVector NewScale3D); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7491CD2CC(relative to base address)
		void SetActorRelativeScale3D(FVector NewRelativeScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C4B20(relative to base address)
		void SetActorHiddenInGame(bool bNewHidden); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748A91DB4(relative to base address)
		void SetActorEnableCollision(bool bNewActorEnableCollision); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7493225AC(relative to base address)
		void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4A9C(relative to base address)
		void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4A18(relative to base address)
		void ReceiveTick(float DeltaSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveRadialDamage(float DamageReceived, UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, AController* InstigatedBy, AActor* DamageCauser); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceivePointDamage(float Damage, UDamageType* DamageType, FVector HitLocation, FVector HitNormal, UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, AController* InstigatedBy, AActor* DamageCauser, FHitResult& HitInfo); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveHit(UPrimitiveComponent* MyComp, AActor* Other, UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // Flags: RequiredAPI|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveDestroyed(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveBeginPlay(); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveAnyDamage(float Damage, UDamageType* DamageType, AController* InstigatedBy, AActor* DamageCauser); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorOnReleased(FKey ButtonReleased); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorOnClicked(FKey ButtonPressed); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorEndOverlap(AActor* OtherActor); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorEndCursorOver(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorBeginOverlap(AActor* OtherActor); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveActorBeginCursorOver(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4854(relative to base address)
		void OnRep_ReplicateMovement(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF746F37328(relative to base address)
		void OnRep_ReplicatedMovement(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF7474A9F44(relative to base address)
		void OnRep_Owner(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF748333524(relative to base address)
		void OnRep_Instigator(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747A5CDF4(relative to base address)
		void OnRep_AttachmentReplication(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747E989FC(relative to base address)
		void MakeNoise(float Loudness, APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C4538(relative to base address)
		bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF749694748(relative to base address)
		bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7493ED004(relative to base address)
		bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748EDED84(relative to base address)
		void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C42A8(relative to base address)
		void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C3F00(relative to base address)
		void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C3B58(relative to base address)
		bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C36C8(relative to base address)
		bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C3300(relative to base address)
		void K2_OnReset(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnEndViewTarget(APlayerController* PC); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnBecomeViewTarget(APlayerController* PC); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		USceneComponent K2_GetRootComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BF1F80(relative to base address)
		TArray K2_GetComponentsByClass(UClass* ComponentClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74881B8A8(relative to base address)
		FRotator K2_GetActorRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CBA6B8(relative to base address)
		FVector K2_GetActorLocation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748A8ADB8(relative to base address)
		void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C31F8(relative to base address)
		void K2_DestroyActor(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7487DB18C(relative to base address)
		bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7490CC06C(relative to base address)
		bool K2_AttachToActor(AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749458938(relative to base address)
		void K2_AttachRootComponentToActor(AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C308C(relative to base address)
		void K2_AttachRootComponentTo(USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C2F40(relative to base address)
		void K2_AddActorWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C2CB0(relative to base address)
		void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C2A20(relative to base address)
		void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C2678(relative to base address)
		void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C22D0(relative to base address)
		void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C2040(relative to base address)
		void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C1C98(relative to base address)
		void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C18F0(relative to base address)
		bool IsOverlappingActor(AActor* Other); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1860(relative to base address)
		bool IsChildActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C183C(relative to base address)
		bool IsActorTickEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1824(relative to base address)
		bool IsActorBeingDestroyed(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C180C(relative to base address)
		bool HasAuthority(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748B61E00(relative to base address)
		float GetVerticalDistanceTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C16C8(relative to base address)
		FVector GetVelocity(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748DBD41C(relative to base address)
		FTransform GetTransform(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749140E60(relative to base address)
		bool GetTickableWhenPaused(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C16B0(relative to base address)
		float GetSquaredHorizontalDistanceTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1568(relative to base address)
		float GetSquaredDistanceTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C14D8(relative to base address)
		float GetResimulationThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C14AC(relative to base address)
		TEnumAsByte GetRemoteRole(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1498(relative to base address)
		int32_t GetRayTracingGroupId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1474(relative to base address)
		EPhysicsReplicationMode GetPhysicsReplicationMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C145C(relative to base address)
		UChildActorComponent GetParentComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1438(relative to base address)
		AActor GetParentActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1414(relative to base address)
		AActor GetOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748C99C0C(relative to base address)
		void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1378(relative to base address)
		void GetOverlappingActors(TArray<AActor*>& OverlappingActors, UClass* ClassFilter); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74930BE90(relative to base address)
		float GetNetUpdateFrequency(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C294A00(relative to base address)
		float GetNetCullDistanceSquared(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1320(relative to base address)
		float GetMinNetUpdateFrequency(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1308(relative to base address)
		TEnumAsByte GetLocalRole(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74920E2D0(relative to base address)
		float GetLifeSpan(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C12DC(relative to base address)
		FTransform GetLevelTransform(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C1280(relative to base address)
		ULevel GetLevel(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C125C(relative to base address)
		AController GetInstigatorController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748C49788(relative to base address)
		APawn GetInstigator(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74896C694(relative to base address)
		FVector GetInputVectorAxisValue(FKey InputAxisKey); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C108C(relative to base address)
		float GetInputAxisValue(FName InputAxisName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C0FFC(relative to base address)
		float GetInputAxisKeyValue(FKey InputAxisKey); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C0E3C(relative to base address)
		float GetHorizontalDotProductTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C0AD0(relative to base address)
		float GetHorizontalDistanceTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C0984(relative to base address)
		float GetGameTimeSinceCreation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C095C(relative to base address)
		float GetDotProductTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C05F8(relative to base address)
		float GetDistanceTo(AActor* OtherActor); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF746ED521C(relative to base address)
		TArray GetComponentsByTag(UClass* ComponentClass, FName Tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74881B7A4(relative to base address)
		TArray GetComponentsByInterface(UClass* Interface); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C0538(relative to base address)
		UActorComponent GetComponentByClass(UClass* ComponentClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748891240(relative to base address)
		FName GetAttachParentSocketName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C040C(relative to base address)
		AActor GetAttachParentActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BC9EFC(relative to base address)
		void GetAttachedActors(TArray<AActor*>& OutActors, bool bResetArray, bool bRecursivelyIncludeAttachedActors); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7492B6E1C(relative to base address)
		void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C02D8(relative to base address)
		FVector GetActorUpVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74916B848(relative to base address)
		float GetActorTimeDilation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C02B0(relative to base address)
		float GetActorTickInterval(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BA07FC(relative to base address)
		FVector GetActorScale3D(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7493A8A7C(relative to base address)
		FVector GetActorRightVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74916B6CC(relative to base address)
		FVector GetActorRelativeScale3D(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C027C(relative to base address)
		FVector GetActorForwardVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74908D720(relative to base address)
		void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C0154(relative to base address)
		bool GetActorEnableCollision(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3C013C(relative to base address)
		void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748F37A14(relative to base address)
		void ForceNetUpdate(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BF4CD8(relative to base address)
		void FlushNetDormancy(); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C0128(relative to base address)
		void FinishAddComponent(UActorComponent* Component, bool bManualAttachment, FTransform& RelativeTransform); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3BFEE8(relative to base address)
		UActorComponent FindComponentByTag(UClass* ComponentClass, FName Tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3BFE0C(relative to base address)
		void EnableInput(APlayerController* PlayerController); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C2D2BC4(relative to base address)
		void DisableInput(APlayerController* PlayerController); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3BFD88(relative to base address)
		void DetachRootComponentFromParent(bool bMaintainWorldPosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3BFC54(relative to base address)
		void CreateInputComponent(UClass* InputComponentToCreate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3BFBB8(relative to base address)
		bool CanTriggerResimulation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3BFB9C(relative to base address)
		void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3BFB18(relative to base address)
		void AddTickPrerequisiteActor(AActor* PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3BFA94(relative to base address)
		UActorComponent AddComponentByClass(UClass* Class, bool bManualAttachment, FTransform& RelativeTransform, bool bDeferredFinish); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747CAD65C(relative to base address)
		UActorComponent AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, UObject* ComponentTemplateContext, bool bDeferredFinish); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747CAD264(relative to base address)
		bool ActorHasTag(FName Tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7493EC278(relative to base address)
	};


	// Class Engine.HUD
	// Inherited from AActor -> UObject
	// Size: 0xF0 (0x380 - 0x290)
	class AHUD : public AActor	
	{
	public:
		APlayerController* PlayerOwner; // 0x290(0x8)
		bool bLostFocusPaused : 1; // 0x298:0(0x1)
		bool bShowHUD : 1; // 0x298:1(0x1)
		bool bShowDebugInfo : 1; // 0x298:2(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x299(0x3) UNKNOWN PROPERTY
		int32_t CurrentTargetIndex; // 0x29C(0x4)
		bool bShowHitBoxDebugInfo : 1; // 0x2A0:0(0x1)
		bool bShowOverlays : 1; // 0x2A0:1(0x1)
		bool bEnableDebugTextShadow : 1; // 0x2A0:2(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x2A1(0x7) UNKNOWN PROPERTY
		TArray<AActor*> PostRenderedActors; // 0x2A8(0x10)
		unsigned char UnknownData02_6[0x8]; // 0x2B8(0x8) UNKNOWN PROPERTY
		TArray<FName> DebugDisplay; // 0x2C0(0x10)
		TArray<FName> ToggledDebugCategories; // 0x2D0(0x10)
		UCanvas* Canvas; // 0x2E0(0x8)
		UCanvas* DebugCanvas; // 0x2E8(0x8)
		TArray<FDebugTextInfo> DebugTextList; // 0x2F0(0x10)
		UClass* ShowDebugTargetDesiredClass; // 0x300(0x8)
		AActor* ShowDebugTargetActor; // 0x308(0x8)
		unsigned char UnknownData03_7[0x70]; // 0x310(0x70) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HUD");
			return ret;
		}

		void ShowHUD(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		void ShowDebugToggleSubCategory(FName category); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C5F1524(relative to base address)
		void ShowDebugForReticleTargetToggle(UClass* DesiredClass); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C5F1484(relative to base address)
		void ShowDebug(FName DebugType); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C394954(relative to base address)
		void RemoveDebugText(AActor* SrcActor, bool bLeaveDurationText); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C5F13BC(relative to base address)
		void RemoveAllDebugStrings(); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C5F1338(relative to base address)
		void ReceiveHitBoxRelease(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveHitBoxEndCursorOver(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveHitBoxClick(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveHitBoxBeginCursorOver(FName BoxName); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		FVector Project(FVector Location, bool bClampToZeroPlane); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5F112C(relative to base address)
		void PreviousDebugTarget(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF749B193F0(relative to base address)
		void NextDebugTarget(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF748629A08(relative to base address)
		void GetTextSize(FString Text, float& OutWidth, float& OutHeight, UFont* Font, float Scale); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5F06D4(relative to base address)
		APlayerController GetOwningPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C0DFEA8(relative to base address)
		APawn GetOwningPawn(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5F0338(relative to base address)
		void GetActorsInSelectionRectangle(UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5EFB84(relative to base address)
		void DrawTextureSimple(UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5EF794(relative to base address)
		void DrawTexture(UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5EEED8(relative to base address)
		void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, UFont* Font, float Scale, bool bScalePosition); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5EE99C(relative to base address)
		void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5EE590(relative to base address)
		void DrawMaterialTriangle(UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5EDD78(relative to base address)
		void DrawMaterialSimple(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5EDA70(relative to base address)
		void DrawMaterial(UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5ED4DC(relative to base address)
		void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5ED210(relative to base address)
		void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5ED034(relative to base address)
		void AddHitBox(FVector2D Position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5ECC20(relative to base address)
		void AddDebugText(FString DebugText, AActor* SrcActor, float duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, UFont* InFont, float FontScale, bool bDrawShadow); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C5EC160(relative to base address)
	};


	// Class Engine.ActorComponent
	// Inherited from UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UActorComponent : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FActorComponentTickFunction PrimaryComponentTick; // 0x30(0x30)
		TArray<FName> ComponentTags; // 0x60(0x10)
		TArray<UAssetUserData*> AssetUserData; // 0x70(0x10)
		unsigned char UnknownData01_6[0x4]; // 0x80(0x4) UNKNOWN PROPERTY
		int32_t UCSSerializationIndex; // 0x84(0x4)
		unsigned char UnknownBit02 : 1; // 0x88:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit03 : 1; // 0x88:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x88:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit05 : 1; // 0x88:3(0x1) UNKNOWN PROPERTY
		bool bNetAddressable : 1; // 0x88:4(0x1)
		bool bReplicateUsingRegisteredSubObjectList : 1; // 0x88:5(0x1)
		bool bReplicates : 1; // 0x88:6(0x1)
		unsigned char UnknownData06_3[0x1]; // 0x89(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x8A:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x8A:1(0x1) UNKNOWN PROPERTY
		bool bAutoActivate : 1; // 0x8A:2(0x1)
		bool bIsActive : 1; // 0x8A:3(0x1)
		bool bEditableWhenInherited : 1; // 0x8A:4(0x1)
		unsigned char UnknownBit09 : 1; // 0x8A:5(0x1) UNKNOWN PROPERTY
		bool bCanEverAffectNavigation : 1; // 0x8A:6(0x1)
		unsigned char UnknownBit10 : 1; // 0x8A:7(0x1) UNKNOWN PROPERTY
		bool bIsEditorOnly : 1; // 0x8B:0(0x1)
		unsigned char UnknownData11_5[0x1]; // 0x8C(0x1) UNKNOWN PROPERTY
		EComponentCreationMethod CreationMethod; // 0x8D(0x1)
		FMulticastSparseDelegate OnComponentActivated; // 0x8E(0x1)
		FMulticastSparseDelegate OnComponentDeactivated; // 0x8F(0x1)
		unsigned char UnknownData12_7[0x10]; // 0x90(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorComponent");
			return ret;
		}

		void ToggleActive(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748333524(relative to base address)
		void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7496FCC14(relative to base address)
		void SetTickableWhenPaused(bool bTickableWhenPaused); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3C2C(relative to base address)
		void SetIsReplicated(bool ShouldReplicate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A33B0(relative to base address)
		void SetComponentTickIntervalAndCooldown(float TickInterval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A332C(relative to base address)
		void SetComponentTickInterval(float TickInterval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A32AC(relative to base address)
		void SetComponentTickEnabled(bool bEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7494048C8(relative to base address)
		void SetAutoActivate(bool bNewAutoActivate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749559078(relative to base address)
		void SetActive(bool bNewActive, bool bReset); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7473D5740(relative to base address)
		void RemoveTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A2D18(relative to base address)
		void RemoveTickPrerequisiteActor(AActor* PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A2C94(relative to base address)
		void ReceiveTick(float DeltaSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveBeginPlay(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveAsyncPhysicsTick(float DeltaSeconds, float SimSeconds); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnRep_IsActive(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF746F37328(relative to base address)
		void K2_DestroyComponent(UObject* Object); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748A1E450(relative to base address)
		bool IsComponentTickEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C1B8(relative to base address)
		bool IsBeingDestroyed(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4A2460(relative to base address)
		bool IsActive(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749172D90(relative to base address)
		AActor GetOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7488CD12C(relative to base address)
		float GetComponentTickInterval(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7495769CC(relative to base address)
		void Deactivate(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747B0DC80(relative to base address)
		bool ComponentHasTag(FName Tag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7491B4B74(relative to base address)
		void AddTickPrerequisiteComponent(UActorComponent* PrerequisiteComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A13B0(relative to base address)
		void AddTickPrerequisiteActor(AActor* PrerequisiteActor); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A132C(relative to base address)
		void Activate(bool bReset); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747A94694(relative to base address)
	};


	// Class Engine.Info
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class AInfo : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Info");
			return ret;
		}
	};


	// Class Engine.PlayerState
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xB8 (0x348 - 0x290)
	class APlayerState : public AInfo	
	{
	public:
		float Score; // 0x290(0x4)
		int32_t PlayerId; // 0x294(0x4)
		char CompressedPing; // 0x298(0x1)
		unsigned char UnknownData00_6[0x1]; // 0x299(0x1) UNKNOWN PROPERTY
		bool bShouldUpdateReplicatedPing : 1; // 0x29A:0(0x1)
		bool bIsSpectator : 1; // 0x29A:1(0x1)
		bool bOnlySpectator : 1; // 0x29A:2(0x1)
		bool bIsABot : 1; // 0x29A:3(0x1)
		unsigned char UnknownBit01 : 1; // 0x29A:4(0x1) UNKNOWN PROPERTY
		bool bIsInactive : 1; // 0x29A:5(0x1)
		bool bFromPreviousLevel : 1; // 0x29A:6(0x1)
		unsigned char UnknownData02_5[0x1]; // 0x29B(0x1) UNKNOWN PROPERTY
		int32_t StartTime; // 0x29C(0x4)
		UClass* EngineMessageClass; // 0x2A0(0x8)
		unsigned char UnknownData03_6[0x8]; // 0x2A8(0x8) UNKNOWN PROPERTY
		FString SavedNetworkAddress; // 0x2B0(0x10)
		FUniqueNetIdRepl UniqueID; // 0x2C0(0x30)
		unsigned char UnknownData04_6[0x8]; // 0x2F0(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnPawnSet; // 0x2F8(0x10)
		APawn* PawnPrivate; // 0x308(0x8)
		unsigned char UnknownData05_6[0x18]; // 0x310(0x18) UNKNOWN PROPERTY
		FString PlayerNamePrivate; // 0x328(0x10)
		unsigned char UnknownData06_7[0x10]; // 0x338(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerState");
			return ret;
		}

		void ReceiveOverrideWith(APlayerState* OldPlayerState); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveCopyProperties(APlayerState* NewPlayerState); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnRep_UniqueId(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747E38800(relative to base address)
		void OnRep_Score(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		void OnRep_PlayerName(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747E38E94(relative to base address)
		void OnRep_PlayerId(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF749066BE0(relative to base address)
		void OnRep_bIsInactive(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C388930(relative to base address)
		void OnPawnPrivateDestroyed(AActor* InActor); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF748C3C230(relative to base address)
		bool IsSpectator(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B2270(relative to base address)
		bool IsOnlyASpectator(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B2254(relative to base address)
		bool IsABot(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B207C(relative to base address)
		float GetScore(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1D18(relative to base address)
		FString GetPlayerName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749366F08(relative to base address)
		int32_t GetPlayerId(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1D00(relative to base address)
		APlayerController GetPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1CDC(relative to base address)
		float GetPingInMilliseconds(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1C90(relative to base address)
		APawn GetPawn(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7495ED30C(relative to base address)
		char GetCompressedPing(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0534(relative to base address)
		FUniqueNetIdRepl BP_GetUniqueId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7AC82C(relative to base address)
	};


	// Class Engine.Controller
	// Inherited from AActor -> UObject
	// Size: 0x98 (0x328 - 0x290)
	class AController : public AActor	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		APlayerState* PlayerState; // 0x298(0x8)
		unsigned char UnknownData01_6[0x8]; // 0x2A0(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInstigatedAnyDamage; // 0x2A8(0x10)
		FMulticastInlineDelegate OnPossessedPawnChanged; // 0x2B8(0x10)
		FName StateName; // 0x2C8(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x2CC(0x4) UNKNOWN PROPERTY
		APawn* Pawn; // 0x2D0(0x8)
		unsigned char UnknownData03_6[0x8]; // 0x2D8(0x8) UNKNOWN PROPERTY
		ACharacter* Character; // 0x2E0(0x8)
		USceneComponent* TransformComponent; // 0x2E8(0x8)
		unsigned char UnknownData04_6[0x18]; // 0x2F0(0x18) UNKNOWN PROPERTY
		FRotator ControlRotation; // 0x308(0x18)
		bool bAttachToPawn : 1; // 0x320:0(0x1)
		unsigned char UnknownData05_7[0x7]; // 0x321(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Controller");
			return ret;
		}

		void UnPossess(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525D3C(relative to base address)
		void StopMovement(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74939D540(relative to base address)
		void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C522868(relative to base address)
		void SetIgnoreMoveInput(bool bNewMoveInput); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5227E4(relative to base address)
		void SetIgnoreLookInput(bool bNewLookInput); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522760(relative to base address)
		void SetControlRotation(FRotator& NewRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C52132C(relative to base address)
		void ResetIgnoreMoveInput(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BD1AB4(relative to base address)
		void ResetIgnoreLookInput(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747B2BDA4(relative to base address)
		void ResetIgnoreInputFlags(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520E08(relative to base address)
		void ReceiveUnPossess(APawn* UnpossessedPawn); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceivePossess(APawn* PossessedPawn); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveInstigatedAnyDamage(float Damage, UDamageType* DamageType, AActor* DamagedActor, AActor* DamageCauser); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void Possess(APawn* InPawn); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520C24(relative to base address)
		void OnRep_PlayerState(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74851EA54(relative to base address)
		void OnRep_Pawn(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74851EF54(relative to base address)
		bool LineOfSightTo(AActor* Other, FVector ViewPoint, bool bAlternateChecks); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520834(relative to base address)
		APawn K2_GetPawn(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749B404A0(relative to base address)
		bool IsPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5207A0(relative to base address)
		bool IsMoveInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520778(relative to base address)
		bool IsLookInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520750(relative to base address)
		bool IsLocalPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749C98AEC(relative to base address)
		bool IsLocalController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749C64878(relative to base address)
		AActor GetViewTarget(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748887A40(relative to base address)
		void GetPlayerViewPoint(FVector& Location, FRotator& Rotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E08C(relative to base address)
		FRotator GetDesiredRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CD54(relative to base address)
		FRotator GetControlRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CB40(relative to base address)
		void ClientSetRotation(FRotator NewRotation, bool bResetCamera); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate, Memory Exec: 0x7FF74C51A8C8(relative to base address)
		void ClientSetLocation(FVector NewLocation, FRotator NewRotation); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate, Memory Exec: 0x7FF74C51A678(relative to base address)
	};


	// Class Engine.PlayerController
	// Inherited from AController -> AActor -> UObject
	// Size: 0x520 (0x848 - 0x328)
	class APlayerController : public AController	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x328(0x8) UNKNOWN PROPERTY
		UPlayer* Player; // 0x330(0x8)
		APawn* AcknowledgedPawn; // 0x338(0x8)
		AHUD* MyHUD; // 0x340(0x8)
		APlayerCameraManager* PlayerCameraManager; // 0x348(0x8)
		UClass* PlayerCameraManagerClass; // 0x350(0x8)
		bool bAutoManageActiveCameraTarget; // 0x358(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x359(0x7) UNKNOWN PROPERTY
		FRotator TargetViewRotation; // 0x360(0x18)
		unsigned char UnknownData02_6[0x18]; // 0x378(0x18) UNKNOWN PROPERTY
		float SmoothTargetViewRotationSpeed; // 0x390(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x394(0x4) UNKNOWN PROPERTY
		TArray<AActor*> HiddenActors; // 0x398(0x10)
		TArray<TWeakObjectPtr> HiddenPrimitiveComponents; // 0x3A8(0x10)
		unsigned char UnknownData04_6[0x4]; // 0x3B8(0x4) UNKNOWN PROPERTY
		float LastSpectatorStateSynchTime; // 0x3BC(0x4)
		FVector LastSpectatorSyncLocation; // 0x3C0(0x18)
		FRotator LastSpectatorSyncRotation; // 0x3D8(0x18)
		int32_t ClientCap; // 0x3F0(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x3F4(0x4) UNKNOWN PROPERTY
		UCheatManager* CheatManager; // 0x3F8(0x8)
		UClass* CheatClass; // 0x400(0x8)
		UPlayerInput* PlayerInput; // 0x408(0x8)
		TArray<FActiveForceFeedbackEffect> ActiveForceFeedbackEffects; // 0x410(0x10)
		unsigned char UnknownData06_6[0x80]; // 0x420(0x80) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x4A0:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x4A0:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x4A0:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit10 : 1; // 0x4A0:3(0x1) UNKNOWN PROPERTY
		bool bPlayerIsWaiting : 1; // 0x4A0:4(0x1)
		unsigned char UnknownData11_5[0x3]; // 0x4A1(0x3) UNKNOWN PROPERTY
		char NetPlayerIndex; // 0x4A4(0x1)
		unsigned char UnknownData12_6[0x5B]; // 0x4A5(0x5B) UNKNOWN PROPERTY
		UNetConnection* PendingSwapConnection; // 0x500(0x8)
		UNetConnection* NetConnection; // 0x508(0x8)
		unsigned char UnknownData13_6[0x18]; // 0x510(0x18) UNKNOWN PROPERTY
		float InputYawScale; // 0x528(0x4)
		float InputPitchScale; // 0x52C(0x4)
		float InputRollScale; // 0x530(0x4)
		bool bShowMouseCursor : 1; // 0x534:0(0x1)
		bool bEnableClickEvents : 1; // 0x534:1(0x1)
		bool bEnableTouchEvents : 1; // 0x534:2(0x1)
		bool bEnableMouseOverEvents : 1; // 0x534:3(0x1)
		bool bEnableTouchOverEvents : 1; // 0x534:4(0x1)
		bool bForceFeedbackEnabled : 1; // 0x534:5(0x1)
		bool bEnableMotionControls : 1; // 0x534:6(0x1)
		bool bEnableStreamingSource : 1; // 0x534:7(0x1)
		bool bStreamingSourceShouldActivate : 1; // 0x535:0(0x1)
		bool bStreamingSourceShouldBlockOnSlowStreaming : 1; // 0x535:1(0x1)
		unsigned char UnknownData14_5[0x2]; // 0x536(0x2) UNKNOWN PROPERTY
		EStreamingSourcePriority StreamingSourcePriority; // 0x538(0x1)
		unsigned char UnknownData15_6[0x3]; // 0x539(0x3) UNKNOWN PROPERTY
		FColor StreamingSourceDebugColor; // 0x53C(0x4)
		TArray<FStreamingSourceShape> StreamingSourceShapes; // 0x540(0x10)
		float ForceFeedbackScale; // 0x550(0x4)
		unsigned char UnknownData16_6[0x4]; // 0x554(0x4) UNKNOWN PROPERTY
		TArray<FKey> ClickEventKeys; // 0x558(0x10)
		TEnumAsByte<EMouseCursor> DefaultMouseCursor; // 0x568(0x1)
		TEnumAsByte<EMouseCursor> CurrentMouseCursor; // 0x569(0x1)
		TEnumAsByte<ECollisionChannel> DefaultClickTraceChannel; // 0x56A(0x1)
		TEnumAsByte<ECollisionChannel> CurrentClickTraceChannel; // 0x56B(0x1)
		float HitResultTraceDistance; // 0x56C(0x4)
		uint16_t SeamlessTravelCount; // 0x570(0x2)
		uint16_t LastCompletedSeamlessTravelCount; // 0x572(0x2)
		unsigned char UnknownData17_6[0x84]; // 0x574(0x84) UNKNOWN PROPERTY
		UInputComponent* InactiveStateInputComponent; // 0x5F8(0x8)
		unsigned char UnknownBit18 : 1; // 0x600:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit19 : 1; // 0x600:1(0x1) UNKNOWN PROPERTY
		bool bShouldPerformFullTickWhenPaused : 1; // 0x600:2(0x1)
		unsigned char UnknownData20_5[0x17]; // 0x601(0x17) UNKNOWN PROPERTY
		UTouchInterface* CurrentTouchInterface; // 0x618(0x8)
		UClass* OverridePlayerInputClass; // 0x620(0x8)
		unsigned char UnknownData21_6[0x78]; // 0x628(0x78) UNKNOWN PROPERTY
		ASpectatorPawn* SpectatorPawn; // 0x6A0(0x8)
		unsigned char UnknownData22_6[0x4]; // 0x6A8(0x4) UNKNOWN PROPERTY
		bool bIsLocalPlayerController; // 0x6AC(0x1)
		unsigned char UnknownData23_6[0x3]; // 0x6AD(0x3) UNKNOWN PROPERTY
		FVector SpawnLocation; // 0x6B0(0x18)
		unsigned char UnknownData24_7[0x180]; // 0x6C8(0x180) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerController");
			return ret;
		}

		bool WasInputKeyJustReleased(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B5634(relative to base address)
		bool WasInputKeyJustPressed(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B5478(relative to base address)
		void ToggleSpeaking(bool bInSpeaking); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B53F4(relative to base address)
		void TestServerLevelVisibilityChange(FName PackageName, FName Filename); // Flags: Final|RequiredAPI|Exec|Native|Private, Memory Exec: 0x7FF74C7B5350(relative to base address)
		void SwitchLevel(FString URL); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B52BC(relative to base address)
		bool StreamingSourceShouldBlockOnSlowStreaming(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B5294(relative to base address)
		bool StreamingSourceShouldActivate(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B526C(relative to base address)
		void StopHapticEffect(EControllerHand Hand); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B51EC(relative to base address)
		void StartFire(char FireModeNum); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B5168(relative to base address)
		void SetVirtualJoystickVisibility(bool bVisible); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B50E4(relative to base address)
		void SetViewTargetWithBlend(AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4F5C(relative to base address)
		void SetName(FString S); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B4EC8(relative to base address)
		void SetMouseLocation(int32_t X, int32_t Y); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4E08(relative to base address)
		void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, UUserWidget* CursorWidget); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4D04(relative to base address)
		void SetMotionControlsEnabled(bool bEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4C84(relative to base address)
		void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand Hand); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4B88(relative to base address)
		void SetDisableHaptics(bool bNewDisabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4B04(relative to base address)
		void SetDeprecatedInputYawScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4A84(relative to base address)
		void SetDeprecatedInputRollScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4A04(relative to base address)
		void SetDeprecatedInputPitchScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B4984(relative to base address)
		void SetControllerLightColor(FColor Color); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7B4878(relative to base address)
		void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B46CC(relative to base address)
		void SetAudioListenerOverride(USceneComponent* AttachToComponent, FVector Location, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7B4498(relative to base address)
		void SetAudioListenerAttenuationOverride(USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7B4334(relative to base address)
		void ServerViewSelf(FViewTargetTransitionParams TransitionParams); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B41E0(relative to base address)
		void ServerViewPrevPlayer(); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B4194(relative to base address)
		void ServerViewNextPlayer(); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B4148(relative to base address)
		void ServerVerifyViewTarget(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B40FC(relative to base address)
		void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B4004(relative to base address)
		void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF748189A58(relative to base address)
		void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B3DDC(relative to base address)
		void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B3C3C(relative to base address)
		void ServerUnblockPlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B3A9C(relative to base address)
		void ServerToggleAILogging(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B3A50(relative to base address)
		void ServerShortTimeout(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF7498450EC(relative to base address)
		void ServerSetSpectatorWaiting(bool bWaiting); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B39A0(relative to base address)
		void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|HasDefaults|NetValidate, Memory Exec: 0x7FF74C7B3750(relative to base address)
		void ServerSendLatestAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer, Memory Exec: 0x7FF74C7B3634(relative to base address)
		void ServerRestartPlayer(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B35E8(relative to base address)
		void ServerRecvClientInputFrame(int32_t RecvClientInputFrame, TArray<char> Data); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer, Memory Exec: 0x7FF74C7B3510(relative to base address)
		void ServerPause(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B34C4(relative to base address)
		void ServerNotifyLoadedWorld(FName WorldPackageName); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B3408(relative to base address)
		void ServerMutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B3268(relative to base address)
		void ServerExecRPC(FString Msg); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B31B0(relative to base address)
		void ServerExec(FString Msg); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B3138(relative to base address)
		void ServerCheckClientPossessionReliable(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B30EC(relative to base address)
		void ServerCheckClientPossession(); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B30A0(relative to base address)
		void ServerChangeName(FString S); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B2FE8(relative to base address)
		void ServerCamera(FName NewMode); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B2F4C(relative to base address)
		void ServerBlockPlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B2DAC(relative to base address)
		void ServerAcknowledgePossession(APawn* P); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C7B2D0C(relative to base address)
		void SendToConsole(FString Command); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B2C78(relative to base address)
		void RestartLevel(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF749253B5C(relative to base address)
		void ResetControllerLightColor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B2C64(relative to base address)
		bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B299C(relative to base address)
		void PlayHapticEffect(UHapticFeedbackEffect_Base* HapticEffect, EControllerHand Hand, float Scale, bool bLoop); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B285C(relative to base address)
		void PlayDynamicForceFeedback(float Intensity, float duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B257C(relative to base address)
		void Pause(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B2564(relative to base address)
		void OnServerStartedVisualLogger(bool bIsLogging); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7B24E0(relative to base address)
		void LocalTravel(FString URL); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B244C(relative to base address)
		void K2_ClientPlayForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B22B4(relative to base address)
		bool IsStreamingSourceEnabled(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B228C(relative to base address)
		bool IsInputKeyDown(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B2098(relative to base address)
		void GetViewportSize(int32_t& SizeX, int32_t& SizeY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1F20(relative to base address)
		void GetStreamingSourceShapes(TArray<FStreamingSourceShape>& OutShapes); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1E80(relative to base address)
		EStreamingSourcePriority GetStreamingSourcePriority(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1E58(relative to base address)
		void GetStreamingSourceLocationAndRotation(FVector& OutLocation, FRotator& OutRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1D30(relative to base address)
		ASpectatorPawn GetSpectatorPawn(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7493F160C(relative to base address)
		FPlatformUserId GetPlatformUserId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1CB0(relative to base address)
		UClass GetOverridePlayerInputClass(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1C08(relative to base address)
		bool GetMousePosition(float& LocationX, float& LocationY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1B20(relative to base address)
		FVector GetInputVectorKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1950(relative to base address)
		void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B17E0(relative to base address)
		void GetInputMouseDelta(float& DeltaX, float& DeltaY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1708(relative to base address)
		void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1498(relative to base address)
		float GetInputKeyTimeDown(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B12D8(relative to base address)
		void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B11B8(relative to base address)
		float GetInputAnalogKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0FF8(relative to base address)
		AHUD GetHUD(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7496FE348(relative to base address)
		bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0DF0(relative to base address)
		bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0C40(relative to base address)
		bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0A90(relative to base address)
		bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B08D0(relative to base address)
		bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0768(relative to base address)
		bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0600(relative to base address)
		FVector GetFocalLocation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B05C4(relative to base address)
		float GetDeprecatedInputYawScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B059C(relative to base address)
		float GetDeprecatedInputRollScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B0574(relative to base address)
		float GetDeprecatedInputPitchScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B054C(relative to base address)
		void FOV(float NewFOV); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7B0498(relative to base address)
		void EnableCheats(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7AFFC4(relative to base address)
		bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7AFDE8(relative to base address)
		bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7AFC84(relative to base address)
		void ConsoleKey(FKey Key); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7AFAD0(relative to base address)
		void ClientWasKicked(FText KickReason); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AFA3C(relative to base address)
		void ClientVoiceHandshakeComplete(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF749C98494(relative to base address)
		void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AF9A8(relative to base address)
		void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex, FNetLevelVisibilityTransactionId TransactionId, bool bNewShouldBlockOnUnload); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AF698(relative to base address)
		void ClientUnmutePlayers(TArray<FUniqueNetIdRepl> PlayerIds); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AF5E4(relative to base address)
		void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AF480(relative to base address)
		void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C7AF28C(relative to base address)
		void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid); // Flags: Final|RequiredAPI|Native|Public|HasDefaults, Memory Exec: 0x7FF74C7AF09C(relative to base address)
		void ClientTeamMessage(APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AEF44(relative to base address)
		void ClientStopForceFeedback(UForceFeedbackEffect* ForceFeedbackEffect, FName Tag); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable, Memory Exec: 0x7FF7485D1DD4(relative to base address)
		void ClientStopCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AEE7C(relative to base address)
		void ClientStopCameraShake(UClass* Shake, bool bImmediately); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable, Memory Exec: 0x7FF74C7AED98(relative to base address)
		void ClientStartOnlineSession(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AED80(relative to base address)
		void ClientStartCameraShakeFromSource(UClass* Shake, UCameraShakeSourceComponent* SourceComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AECA4(relative to base address)
		void ClientStartCameraShake(UClass* Shake, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable, Memory Exec: 0x7FF7486B1F08(relative to base address)
		void ClientSpawnGenericCameraLensEffect(UClass* LensEffectEmitterClass); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient|BlueprintCallable, Memory Exec: 0x7FF74C7AEC08(relative to base address)
		void ClientSpawnCameraLensEffect(UClass* LensEffectEmitterClass); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient, Memory Exec: 0x7FF74C7AEB6C(relative to base address)
		void ClientSetViewTarget(AActor* A, FViewTargetTransitionParams TransitionParams); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE8E0(relative to base address)
		void ClientSetupNetworkPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AEA50(relative to base address)
		void ClientSetSpectatorWaiting(bool bWaiting); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE85C(relative to base address)
		void ClientSetHUD(UClass* NewHUDClass); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable, Memory Exec: 0x7FF749AC461C(relative to base address)
		void ClientSetForceMipLevelsToBeResident(UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE760(relative to base address)
		void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE608(relative to base address)
		void ClientSetCameraMode(FName NewCamMode); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE584(relative to base address)
		void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C7AE120(relative to base address)
		void ClientSetBlockOnAsyncLoading(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE108(relative to base address)
		void ClientReturnToMainMenuWithTextReason(FText ReturnReason); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AE074(relative to base address)
		void ClientRetryClientRestart(APawn* NewPawn); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADFF0(relative to base address)
		void ClientRestart(APawn* NewPawn); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADF6C(relative to base address)
		void ClientReset(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADF54(relative to base address)
		void ClientRepObjRef(UObject* Object); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADED0(relative to base address)
		void ClientRecvServerAckFrameDebug(char NumBuffered, float TargetNumBufferedCmds); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADE08(relative to base address)
		void ClientRecvServerAckFrame(int32_t LastProcessedInputFrame, int32_t RecvServerFrameNumber, int8_t TimeDilation); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADC88(relative to base address)
		void ClientReceiveLocalizedMessage(UClass* Message, int32_t SWITCH, APlayerState* RelatedPlayerState, APlayerState* RelatedPlayerState, UObject* OptionalObject); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ADAC4(relative to base address)
		void ClientPrestreamTextures(AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD980(relative to base address)
		void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD880(relative to base address)
		void ClientPlaySoundAtLocation(USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C7AD5A0(relative to base address)
		void ClientPlaySound(USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD4A4(relative to base address)
		void ClientPlayForceFeedback_Internal(UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params); // Flags: Final|RequiredAPI|Net|Native|Event|Private|NetClient, Memory Exec: 0x7FF7485D1FC8(relative to base address)
		void ClientMutePlayer(FUniqueNetIdRepl PlayerId); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD340(relative to base address)
		void ClientMessage(FString S, FName Type, float MsgLifeTime); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD224(relative to base address)
		void ClientIgnoreMoveInput(bool bIgnore); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD1A0(relative to base address)
		void ClientIgnoreLookInput(bool bIgnore); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD11C(relative to base address)
		void ClientGotoState(FName NewState); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD098(relative to base address)
		void ClientGameEnded(AActor* EndGameFocus, bool bIsWinner); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C39C51C(relative to base address)
		void ClientForceGarbageCollection(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD080(relative to base address)
		void ClientFlushLevelStreaming(); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD040(relative to base address)
		void ClientEndOnlineSession(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7AD028(relative to base address)
		void ClientEnableNetworkVoice(bool bEnable); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF749544124(relative to base address)
		void ClientCorrectionAsyncPhysicsTimestamp(FAsyncPhysicsTimestamp Timestamp); // Flags: Final|RequiredAPI|Net|Native|Event|Private|NetClient, Memory Exec: 0x7FF74C7ACF0C(relative to base address)
		void ClientCommitMapChange(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ACEF4(relative to base address)
		void ClientClearCameraLensEffects(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable, Memory Exec: 0x7FF74C7ACEDC(relative to base address)
		void ClientCapBandwidth(int32_t Cap); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF749A90608(relative to base address)
		void ClientCancelPendingMapChange(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74736AB18(relative to base address)
		void ClientAddTextureStreamingLoc(FVector InLoc, float duration, bool bOverrideLocation); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C7ACC54(relative to base address)
		void ClientAckUpdateLevelVisibility(FName PackageName, FNetLevelVisibilityTransactionId TransactionId, bool bClientAckCanMakeVisible); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C7ACA50(relative to base address)
		void ClientAckTimeDilation(float TimeDilation, int32_t ServerStep); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient, Memory Exec: 0x7FF74C7AC988(relative to base address)
		void ClearAudioListenerOverride(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC960(relative to base address)
		void ClearAudioListenerAttenuationOverride(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC938(relative to base address)
		bool CanRestartPlayer(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC910(relative to base address)
		void Camera(FName NewMode); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C7AC88C(relative to base address)
		void AddYawInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC7A8(relative to base address)
		void AddRollInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC724(relative to base address)
		void AddPitchInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC6A0(relative to base address)
		void ActivateTouchInterface(UTouchInterface* NewTouchInterface); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC598(relative to base address)
	};


	// Class Engine.Subsystem
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USubsystem : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Subsystem");
			return ret;
		}
	};


	// Class Engine.WorldSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UWorldSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldSubsystem");
			return ret;
		}
	};


	// Class Engine.NavigationObjectBase
	// Inherited from AActor -> UObject
	// Size: 0x28 (0x2B8 - 0x290)
	class ANavigationObjectBase : public AActor	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		UCapsuleComponent* CapsuleComponent; // 0x298(0x8)
		UBillboardComponent* GoodSprite; // 0x2A0(0x8)
		UBillboardComponent* BadSprite; // 0x2A8(0x8)
		bool bIsPIEPlayerStart : 1; // 0x2B0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x2B1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationObjectBase");
			return ret;
		}
	};


	// Class Engine.PlayerStart
	// Inherited from ANavigationObjectBase -> AActor -> UObject
	// Size: 0x8 (0x2C0 - 0x2B8)
	class APlayerStart : public ANavigationObjectBase	
	{
	public:
		FName PlayerStartTag; // 0x2B8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x2BC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerStart");
			return ret;
		}
	};


	// Class Engine.Pawn
	// Inherited from AActor -> UObject
	// Size: 0x80 (0x310 - 0x290)
	class APawn : public AActor	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		bool bUseControllerRotationPitch : 1; // 0x298:0(0x1)
		bool bUseControllerRotationYaw : 1; // 0x298:1(0x1)
		bool bUseControllerRotationRoll : 1; // 0x298:2(0x1)
		bool bCanAffectNavigationGeneration : 1; // 0x298:3(0x1)
		unsigned char UnknownBit01 : 1; // 0x298:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0x298:5(0x1) UNKNOWN PROPERTY
		bool bIsLocalViewTarget : 1; // 0x298:6(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x299(0x3) UNKNOWN PROPERTY
		float BaseEyeHeight; // 0x29C(0x4)
		TEnumAsByte<EAutoReceiveInput> AutoPossessPlayer; // 0x2A0(0x1)
		EAutoPossessAI AutoPossessAI; // 0x2A1(0x1)
		char RemoteViewPitch; // 0x2A2(0x1)
		unsigned char UnknownData04_6[0x5]; // 0x2A3(0x5) UNKNOWN PROPERTY
		UClass* AIControllerClass; // 0x2A8(0x8)
		APlayerState* PlayerState; // 0x2B0(0x8)
		AController* LastHitBy; // 0x2B8(0x8)
		AController* Controller; // 0x2C0(0x8)
		AController* PreviousController; // 0x2C8(0x8)
		unsigned char UnknownData05_6[0x4]; // 0x2D0(0x4) UNKNOWN PROPERTY
		FMulticastSparseDelegate ReceiveControllerChangedDelegate; // 0x2D4(0x1)
		FMulticastSparseDelegate ReceiveRestartedDelegate; // 0x2D5(0x1)
		unsigned char UnknownData06_6[0x2]; // 0x2D6(0x2) UNKNOWN PROPERTY
		FVector ControlInputVector; // 0x2D8(0x18)
		FVector LastControlInputVector; // 0x2F0(0x18)
		UClass* OverrideInputComponentClass; // 0x308(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Pawn");
			return ret;
		}

		void SpawnDefaultController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7489E627C(relative to base address)
		void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C76174C(relative to base address)
		void ReceiveUnpossessed(AController* OldController); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveRestarted(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceivePossessed(AController* NewController); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveControllerChanged(AController* OldController, AController* NewController); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, AActor* NoiseMaker); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75F618(relative to base address)
		void OnRep_PlayerState(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF7475A8C1C(relative to base address)
		void OnRep_Controller(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C75F5A0(relative to base address)
		bool IsPlayerControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748B1E3E0(relative to base address)
		bool IsPawnControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75F530(relative to base address)
		bool IsMoveInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75F508(relative to base address)
		bool IsLocallyViewed(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748B02A74(relative to base address)
		bool IsLocallyControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748C15F6C(relative to base address)
		bool IsControlled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75F4B0(relative to base address)
		bool IsBotControlled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75F3F8(relative to base address)
		FPlatformUserId GetPlatformUserId(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75EDBC(relative to base address)
		FVector GetPendingMovementInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75ED94(relative to base address)
		UClass GetOverrideInputComponentClass(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75EC74(relative to base address)
		FVector GetNavAgentLocation(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75E940(relative to base address)
		UPawnMovementComponent GetMovementComponent(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748985DB4(relative to base address)
		AActor GetMovementBaseActor(APawn* Pawn); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C75E8C0(relative to base address)
		APlayerController GetLocalViewingPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748A94B08(relative to base address)
		FVector GetLastMovementInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75D4FC(relative to base address)
		FRotator GetControlRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75D380(relative to base address)
		AController GetController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7489C078C(relative to base address)
		FRotator GetBaseAimRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75D1D0(relative to base address)
		void DetachFromControllerPendingDestroy(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BD1AB4(relative to base address)
		FVector ConsumeMovementInputVector(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75B548(relative to base address)
		void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75B2A8(relative to base address)
		void AddControllerYawInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C75B224(relative to base address)
		void AddControllerRollInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C75B1A0(relative to base address)
		void AddControllerPitchInput(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C75B11C(relative to base address)
	};


	// Class Engine.BlueprintFunctionLibrary
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintFunctionLibrary : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintFunctionLibrary");
			return ret;
		}
	};


	// Class Engine.SceneComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x180 (0x220 - 0xA0)
	class USceneComponent : public UActorComponent	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0xA0(0x8) UNKNOWN PROPERTY
		TWeakObjectPtr<APhysicsVolume*> PhysicsVolume; // 0xA8(0x8)
		USceneComponent* AttachParent; // 0xB0(0x8)
		FName AttachSocketName; // 0xB8(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY
		TArray<USceneComponent*> AttachChildren; // 0xC0(0x10)
		TArray<USceneComponent*> ClientAttachedChildren; // 0xD0(0x10)
		unsigned char UnknownData02_6[0x40]; // 0xE0(0x40) UNKNOWN PROPERTY
		FVector RelativeLocation; // 0x120(0x18)
		FRotator RelativeRotation; // 0x138(0x18)
		FVector RelativeScale3D; // 0x150(0x18)
		FVector ComponentVelocity; // 0x168(0x18)
		bool bComponentToWorldUpdated : 1; // 0x180:0(0x1)
		unsigned char UnknownBit03 : 1; // 0x180:1(0x1) UNKNOWN PROPERTY
		bool bAbsoluteLocation : 1; // 0x180:2(0x1)
		bool bAbsoluteRotation : 1; // 0x180:3(0x1)
		bool bAbsoluteScale : 1; // 0x180:4(0x1)
		bool bVisible : 1; // 0x180:5(0x1)
		bool bShouldBeAttached : 1; // 0x180:6(0x1)
		bool bShouldSnapLocationWhenAttached : 1; // 0x180:7(0x1)
		bool bShouldSnapRotationWhenAttached : 1; // 0x181:0(0x1)
		bool bShouldSnapScaleWhenAttached : 1; // 0x181:1(0x1)
		bool bShouldUpdatePhysicsVolume : 1; // 0x181:2(0x1)
		bool bHiddenInGame : 1; // 0x181:3(0x1)
		bool bBoundsChangeTriggersStreamingDataRebuild : 1; // 0x181:4(0x1)
		bool bUseAttachParentBound : 1; // 0x181:5(0x1)
		bool bComputeFastLocalBounds : 1; // 0x181:6(0x1)
		bool bComputeBoundsOnceForGame : 1; // 0x181:7(0x1)
		bool bComputedBoundsOnceForGame : 1; // 0x182:0(0x1)
		bool bIsNotRenderAttachmentRoot : 1; // 0x182:1(0x1)
		TEnumAsByte<EComponentMobility> Mobility; // 0x183(0x1)
		TEnumAsByte<EDetailMode> DetailMode; // 0x184(0x1)
		FMulticastSparseDelegate PhysicsVolumeChangedDelegate; // 0x185(0x1)
		unsigned char UnknownData04_7[0x9A]; // 0x186(0x9A) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneComponent");
			return ret;
		}

		void ToggleVisibility(bool bPropagateToChildren); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A170(relative to base address)
		void SetWorldScale3D(FVector NewScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747B27950(relative to base address)
		void SetVisibility(bool bNewVisibility, bool bPropagateToChildren); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7471957B8(relative to base address)
		void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A0F0(relative to base address)
		void SetRelativeScale3D(FVector NewScale3D); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748E54C2C(relative to base address)
		void SetMobility(TEnumAsByte<EComponentMobility> NewMobility); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A06C(relative to base address)
		void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74898C3F8(relative to base address)
		void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749071BE4(relative to base address)
		void ResetRelativeTransform(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A058(relative to base address)
		void OnRep_Visibility(bool OldValue); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74C399E6C(relative to base address)
		void OnRep_Transform(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74913F708(relative to base address)
		void OnRep_AttachSocketName(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74C399E40(relative to base address)
		void OnRep_AttachParent(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF7492DA7BC(relative to base address)
		void OnRep_AttachChildren(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF748D47C70(relative to base address)
		void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748D66364(relative to base address)
		void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747B1FC3C(relative to base address)
		void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7493538EC(relative to base address)
		void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748A27E9C(relative to base address)
		void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748ACCE64(relative to base address)
		void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747195B50(relative to base address)
		void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3999CC(relative to base address)
		void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748CD9DC8(relative to base address)
		FTransform K2_GetComponentToWorld(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748C4D840(relative to base address)
		FVector K2_GetComponentScale(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3999A4(relative to base address)
		FRotator K2_GetComponentRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748E26BC8(relative to base address)
		FVector K2_GetComponentLocation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BD5128(relative to base address)
		void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BF4F88(relative to base address)
		bool K2_AttachToComponent(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74771B5FC(relative to base address)
		bool K2_AttachTo(USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C399864(relative to base address)
		void K2_AddWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3995D4(relative to base address)
		void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C399344(relative to base address)
		void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C398F9C(relative to base address)
		void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C398BF4(relative to base address)
		void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39884C(relative to base address)
		void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3984A4(relative to base address)
		void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C398214(relative to base address)
		void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C397E6C(relative to base address)
		void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C397AC4(relative to base address)
		bool IsVisible(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749749248(relative to base address)
		bool IsSimulatingPhysics(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397A30(relative to base address)
		bool IsAnySimulatingPhysics(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397A08(relative to base address)
		FVector GetUpVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3979D4(relative to base address)
		FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7488C0170(relative to base address)
		FRotator GetSocketRotation(FName InSocketName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749B44F60(relative to base address)
		FQuat GetSocketQuaternion(FName InSocketName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397930(relative to base address)
		FVector GetSocketLocation(FName InSocketName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748B1F4BC(relative to base address)
		bool GetShouldUpdatePhysicsVolume(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397914(relative to base address)
		FVector GetRightVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3978E0(relative to base address)
		FTransform GetRelativeTransform(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397864(relative to base address)
		APhysicsVolume GetPhysicsVolume(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397840(relative to base address)
		void GetParentComponents(TArray<USceneComponent*>& Parents); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3977A4(relative to base address)
		int32_t GetNumChildrenComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749336438(relative to base address)
		FVector GetForwardVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749892230(relative to base address)
		FVector GetComponentVelocity(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397768(relative to base address)
		void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF747CB84B0(relative to base address)
		USceneComponent GetChildComponent(int32_t ChildIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3976DC(relative to base address)
		FName GetAttachSocketName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3976C4(relative to base address)
		USceneComponent GetAttachParent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7491595E0(relative to base address)
		TArray GetAllSocketNames(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C397684(relative to base address)
		bool DoesSocketExist(FName InSocketName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7492AB038(relative to base address)
		void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3975BC(relative to base address)
	};


	// Class Engine.PrimitiveComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x2B0 (0x4D0 - 0x220)
	class UPrimitiveComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData00_3[0x18]; // 0x220(0x18) UNKNOWN PROPERTY
		float MinDrawDistance; // 0x238(0x4)
		float LDMaxDrawDistance; // 0x23C(0x4)
		float CachedMaxDrawDistance; // 0x240(0x4)
		TEnumAsByte<ESceneDepthPriorityGroup> DepthPriorityGroup; // 0x244(0x1)
		TEnumAsByte<ESceneDepthPriorityGroup> ViewOwnerDepthPriorityGroup; // 0x245(0x1)
		TEnumAsByte<EIndirectLightingCacheQuality> IndirectLightingCacheQuality; // 0x246(0x1)
		ELightmapType LightmapType; // 0x247(0x1)
		EHLODBatchingPolicy HLODBatchingPolicy; // 0x248(0x1)
		EShadowCacheInvalidationBehavior ShadowCacheInvalidationBehavior; // 0x249(0x1)
		bool bEnableAutoLODGeneration : 1; // 0x24A:0(0x1)
		bool bIsActorTextureStreamingBuiltData : 1; // 0x24A:1(0x1)
		bool bIsValidTextureStreamingBuiltData : 1; // 0x24A:2(0x1)
		bool bNeverDistanceCull : 1; // 0x24A:3(0x1)
		unsigned char UnknownBit01 : 1; // 0x24A:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0x24A:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit03 : 1; // 0x24A:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x24A:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit05 : 1; // 0x24B:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0x24B:1(0x1) UNKNOWN PROPERTY
		bool bAlwaysCreatePhysicsState : 1; // 0x24B:2(0x1)
		bool bGenerateOverlapEvents : 1; // 0x24B:3(0x1)
		bool bMultiBodyOverlap : 1; // 0x24B:4(0x1)
		bool bTraceComplexOnMove : 1; // 0x24B:5(0x1)
		bool bReturnMaterialOnMove : 1; // 0x24B:6(0x1)
		bool bUseViewOwnerDepthPriorityGroup : 1; // 0x24B:7(0x1)
		bool bAllowCullDistanceVolume : 1; // 0x24C:0(0x1)
		bool bVisibleInReflectionCaptures : 1; // 0x24C:1(0x1)
		bool bVisibleInRealTimeSkyCaptures : 1; // 0x24C:2(0x1)
		bool bVisibleInRayTracing : 1; // 0x24C:3(0x1)
		bool bRenderInMainPass : 1; // 0x24C:4(0x1)
		bool bRenderInDepthPass : 1; // 0x24C:5(0x1)
		bool bReceivesDecals : 1; // 0x24C:6(0x1)
		bool bHoldout : 1; // 0x24C:7(0x1)
		bool bOwnerNoSee : 1; // 0x24D:0(0x1)
		bool bOnlyOwnerSee : 1; // 0x24D:1(0x1)
		bool bTreatAsBackgroundForOcclusion : 1; // 0x24D:2(0x1)
		bool bUseAsOccluder : 1; // 0x24D:3(0x1)
		bool bSelectable : 1; // 0x24D:4(0x1)
		bool bWantsEditorEffects : 1; // 0x24D:5(0x1)
		bool bForceMipStreaming : 1; // 0x24D:6(0x1)
		bool bHasPerInstanceHitProxies : 1; // 0x24D:7(0x1)
		bool CastShadow : 1; // 0x24E:0(0x1)
		bool bEmissiveLightSource : 1; // 0x24E:1(0x1)
		bool bAffectDynamicIndirectLighting : 1; // 0x24E:2(0x1)
		bool bAffectIndirectLightingWhileHidden : 1; // 0x24E:3(0x1)
		bool bAffectDistanceFieldLighting : 1; // 0x24E:4(0x1)
		bool bCastDynamicShadow : 1; // 0x24E:5(0x1)
		bool bCastStaticShadow : 1; // 0x24E:6(0x1)
		bool bCastVolumetricTranslucentShadow : 1; // 0x24E:7(0x1)
		bool bCastContactShadow : 1; // 0x24F:0(0x1)
		bool bSelfShadowOnly : 1; // 0x24F:1(0x1)
		bool bCastFarShadow : 1; // 0x24F:2(0x1)
		bool bCastInsetShadow : 1; // 0x24F:3(0x1)
		bool bCastCinematicShadow : 1; // 0x24F:4(0x1)
		bool bCastHiddenShadow : 1; // 0x24F:5(0x1)
		bool bCastShadowAsTwoSided : 1; // 0x24F:6(0x1)
		bool bLightAsIfStatic : 1; // 0x24F:7(0x1)
		bool bLightAttachmentsAsGroup : 1; // 0x250:0(0x1)
		bool bExcludeFromLightAttachmentGroup : 1; // 0x250:1(0x1)
		bool bReceiveMobileCSMShadows : 1; // 0x250:2(0x1)
		bool bSingleSampleShadowFromStationaryLights : 1; // 0x250:3(0x1)
		bool bIgnoreRadialImpulse : 1; // 0x250:4(0x1)
		bool bIgnoreRadialForce : 1; // 0x250:5(0x1)
		bool bApplyImpulseOnDamage : 1; // 0x250:6(0x1)
		bool bReplicatePhysicsToAutonomousProxy : 1; // 0x250:7(0x1)
		bool bFillCollisionUnderneathForNavmesh : 1; // 0x251:0(0x1)
		bool AlwaysLoadOnClient : 1; // 0x251:1(0x1)
		bool AlwaysLoadOnServer : 1; // 0x251:2(0x1)
		bool bUseEditorCompositing : 1; // 0x251:3(0x1)
		bool bIsBeingMovedByEditor : 1; // 0x251:4(0x1)
		bool bRenderCustomDepth : 1; // 0x251:5(0x1)
		bool bVisibleInSceneCaptureOnly : 1; // 0x251:6(0x1)
		bool bHiddenInSceneCapture : 1; // 0x251:7(0x1)
		bool bRayTracingFarField : 1; // 0x252:0(0x1)
		bool bIsFirstPerson : 1; // 0x252:1(0x1)
		unsigned char UnknownBit07 : 1; // 0x252:2(0x1) UNKNOWN PROPERTY
		bool bHasNoStreamableTextures : 1; // 0x252:3(0x1)
		bool bStaticWhenNotMoveable : 1; // 0x252:4(0x1)
		unsigned char UnknownData08_5[0x1]; // 0x253(0x1) UNKNOWN PROPERTY
		TEnumAsByte<EHasCustomNavigableGeometry> bHasCustomNavigableGeometry; // 0x254(0x1)
		unsigned char UnknownData09_6[0x1]; // 0x255(0x1) UNKNOWN PROPERTY
		TEnumAsByte<ECanBeCharacterBase> CanCharacterStepUpOn; // 0x256(0x1)
		FLightingChannels LightingChannels; // 0x257(0x1)
		unsigned char UnknownData10_6[0x18]; // 0x258(0x18) UNKNOWN PROPERTY
		int32_t RayTracingGroupId; // 0x270(0x4)
		int32_t VisibilityId; // 0x274(0x4)
		int32_t CustomDepthStencilValue; // 0x278(0x4)
		ERayTracingGroupCullingPriority RayTracingGroupCullingPriority; // 0x27C(0x1)
		ERendererStencilMask CustomDepthStencilWriteMask; // 0x27D(0x1)
		char ExcludeFromHLODLevels; // 0x27E(0x1)
		unsigned char UnknownData11_6[0x1]; // 0x27F(0x1) UNKNOWN PROPERTY
		FCustomPrimitiveData CustomPrimitiveData; // 0x280(0x10)
		FCustomPrimitiveData CustomPrimitiveDataInternal; // 0x290(0x10)
		unsigned char UnknownData12_6[0x8]; // 0x2A0(0x8) UNKNOWN PROPERTY
		int32_t TranslucencySortPriority; // 0x2A8(0x4)
		float TranslucencySortDistanceOffset; // 0x2AC(0x4)
		TArray<URuntimeVirtualTexture*> RuntimeVirtualTextures; // 0x2B0(0x10)
		int8_t VirtualTextureLodBias; // 0x2C0(0x1)
		int8_t VirtualTextureCullMips; // 0x2C1(0x1)
		int8_t VirtualTextureMinCoverage; // 0x2C2(0x1)
		ERuntimeVirtualTextureMainPassType VirtualTextureRenderPassType; // 0x2C3(0x1)
		unsigned char UnknownData13_6[0x8]; // 0x2C4(0x8) UNKNOWN PROPERTY
		float BoundsScale; // 0x2CC(0x4)
		unsigned char UnknownData14_6[0x30]; // 0x2D0(0x30) UNKNOWN PROPERTY
		TArray<AActor*> MoveIgnoreActors; // 0x300(0x10)
		TArray<UPrimitiveComponent*> MoveIgnoreComponents; // 0x310(0x10)
		unsigned char UnknownData15_6[0x10]; // 0x320(0x10) UNKNOWN PROPERTY
		FBodyInstance BodyInstance; // 0x330(0x170)
		FMulticastSparseDelegate OnComponentHit; // 0x4A0(0x1)
		FMulticastSparseDelegate OnComponentBeginOverlap; // 0x4A1(0x1)
		FMulticastSparseDelegate OnComponentEndOverlap; // 0x4A2(0x1)
		FMulticastSparseDelegate OnComponentWake; // 0x4A3(0x1)
		FMulticastSparseDelegate OnComponentSleep; // 0x4A4(0x1)
		unsigned char UnknownData16_6[0x1]; // 0x4A5(0x1) UNKNOWN PROPERTY
		FMulticastSparseDelegate OnComponentPhysicsStateChanged; // 0x4A6(0x1)
		FMulticastSparseDelegate OnBeginCursorOver; // 0x4A7(0x1)
		FMulticastSparseDelegate OnEndCursorOver; // 0x4A8(0x1)
		FMulticastSparseDelegate OnClicked; // 0x4A9(0x1)
		FMulticastSparseDelegate OnReleased; // 0x4AA(0x1)
		FMulticastSparseDelegate OnInputTouchBegin; // 0x4AB(0x1)
		FMulticastSparseDelegate OnInputTouchEnd; // 0x4AC(0x1)
		FMulticastSparseDelegate OnInputTouchEnter; // 0x4AD(0x1)
		FMulticastSparseDelegate OnInputTouchLeave; // 0x4AE(0x1)
		unsigned char UnknownData17_6[0x11]; // 0x4AF(0x11) UNKNOWN PROPERTY
		UPrimitiveComponent* LODParentPrimitive; // 0x4C0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrimitiveComponent");
			return ret;
		}

		bool WasRecentlyRendered(float Tolerance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3949D8(relative to base address)
		void WakeRigidBody(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C394954(relative to base address)
		void WakeAllRigidBodies(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7491831D8(relative to base address)
		void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3948B8(relative to base address)
		void SetVisibleInSceneCaptureOnly(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C394838(relative to base address)
		void SetVisibleInRayTracing(bool bNewVisibleInRayTracing); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3947B8(relative to base address)
		void SetVectorParameterForDefaultCustomPrimitiveData(FName ParameterName, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C394644(relative to base address)
		void SetVectorParameterForCustomPrimitiveData(FName ParameterName, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3944D0(relative to base address)
		void SetUseMACD(bool InUseMACD, FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C394408(relative to base address)
		void SetUseCCD(bool InUseCCD, FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C394340(relative to base address)
		void SetUpdateKinematicFromSimulation(bool bUpdateKinematicFromSimulation); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38ABD8(relative to base address)
		void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748E54598(relative to base address)
		void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7491FCEC8(relative to base address)
		void SetStaticWhenNotMoveable(bool bInStaticWhenNotMoveable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3942C0(relative to base address)
		void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C394220(relative to base address)
		void SetSimulatePhysics(bool bSimulate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39419C(relative to base address)
		void SetScalarParameterForDefaultCustomPrimitiveData(FName ParameterName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3940D8(relative to base address)
		void SetScalarParameterForCustomPrimitiveData(FName ParameterName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7492E2650(relative to base address)
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C394058(relative to base address)
		void SetRenderInDepthPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393FB8(relative to base address)
		void SetRenderCustomDepth(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747B2A17C(relative to base address)
		void SetReceivesDecals(bool bNewReceivesDecals); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7488E3C7C(relative to base address)
		void SetPhysMaterialOverride(UPhysicalMaterial* NewPhysMaterial); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39349C(relative to base address)
		void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393E28(relative to base address)
		void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393D14(relative to base address)
		void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C393A6C(relative to base address)
		void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3937C4(relative to base address)
		void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C393520(relative to base address)
		void SetOwnerNoSee(bool bNewOwnerNoSee); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39341C(relative to base address)
		void SetOnlyOwnerSee(bool bNewOnlyOwnerSee); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39339C(relative to base address)
		void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393318(relative to base address)
		void SetMaxDepenetrationVelocity(FName BoneName, float InMaxDepenetrationVelocity); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393250(relative to base address)
		void SetMaterialByName(FName MaterialSlotName, UMaterialInterface* Material); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393188(relative to base address)
		void SetMaterial(int32_t ElementIndex, UMaterialInterface* Material); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748D66608(relative to base address)
		void SetMassScale(FName BoneName, float InMassScale); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3930C0(relative to base address)
		void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392FC4(relative to base address)
		void SetLinearDamping(float InDamping); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392F40(relative to base address)
		void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392E34(relative to base address)
		void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392D30(relative to base address)
		void SetIsFirstPerson(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392C90(relative to base address)
		void SetIgnoreBoundsForEditorFocus(bool bIgnore); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392C08(relative to base address)
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392B88(relative to base address)
		void SetHiddenInSceneCapture(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392AE8(relative to base address)
		void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74940CA50(relative to base address)
		void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392984(relative to base address)
		void SetExcludeForSpecificHLODLevels(TArray<int32_t>& InExcludeForSpecificHLODLevels); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3928BC(relative to base address)
		void SetExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel, bool bExcluded); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392A24(relative to base address)
		void SetEnableGravity(bool bGravityEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392838(relative to base address)
		void SetEmissiveLightSource(bool NewEmissiveLightSource); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392798(relative to base address)
		void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C392624(relative to base address)
		void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF746EA8C64(relative to base address)
		void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3924D0(relative to base address)
		void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF746EA91A0(relative to base address)
		void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748D3C99C(relative to base address)
		void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748DD3F0C(relative to base address)
		void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39237C(relative to base address)
		void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748A1EE8C(relative to base address)
		void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3922F0(relative to base address)
		void SetCustomDepthStencilValue(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747B2A0FC(relative to base address)
		void SetCullDistance(float NewCullDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF746EDB120(relative to base address)
		void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39226C(relative to base address)
		void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7492DEF88(relative to base address)
		void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3921E8(relative to base address)
		void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392120(relative to base address)
		void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39209C(relative to base address)
		void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748C19228(relative to base address)
		void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C391EB4(relative to base address)
		void SetCastShadow(bool NewCastShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748A9330C(relative to base address)
		void SetCastInsetShadow(bool bInCastInsetShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C391E34(relative to base address)
		void SetCastHiddenShadow(bool NewCastHiddenShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C391DB4(relative to base address)
		void SetCastContactShadow(bool bInCastContactShadow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C391D34(relative to base address)
		void SetBoundsScale(float NewBoundsScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74969A1B0(relative to base address)
		void SetAngularDamping(float InDamping); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C391CB0(relative to base address)
		void SetAllUseMACD(bool InUseMACD); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C391C2C(relative to base address)
		void SetAllUseCCD(bool InUseCCD); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C391BA8(relative to base address)
		void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3919BC(relative to base address)
		void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C391864(relative to base address)
		void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C391710(relative to base address)
		void SetAllMassScale(float InMassScale); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39168C(relative to base address)
		void SetAffectIndirectLightingWhileHidden(bool bNewAffectIndirectLightingWhileHidden); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3915EC(relative to base address)
		void SetAffectDynamicIndirectLighting(bool bNewAffectDynamicIndirectLighting); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39156C(relative to base address)
		void SetAffectDistanceFieldLighting(bool NewAffectDistanceFieldLighting); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3914EC(relative to base address)
		FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3912DC(relative to base address)
		void PutRigidBodyToSleep(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39125C(relative to base address)
		bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C390AC8(relative to base address)
		bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3903F4(relative to base address)
		bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748A5CBD8(relative to base address)
		bool K2_IsQueryCollisionEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3903B0(relative to base address)
		bool K2_IsPhysicsCollisionEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C390380(relative to base address)
		bool K2_IsCollisionEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C390354(relative to base address)
		bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38FC64(relative to base address)
		bool IsOverlappingComponent(UPrimitiveComponent* OtherComp); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38FAC8(relative to base address)
		bool IsOverlappingActor(AActor* Other); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38F9F0(relative to base address)
		bool IsMaterialSlotNameValid(FName MaterialSlotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38F95C(relative to base address)
		bool IsGravityEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38F934(relative to base address)
		bool IsExcludedFromHLODLevel(EHLODLevelExclusion HLODLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38F8A0(relative to base address)
		bool IsAnyRigidBodyAwake(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C38F878(relative to base address)
		void InvalidateLumenSurfaceCache(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38F84C(relative to base address)
		void IgnoreComponentWhenMoving(UPrimitiveComponent* Component, bool bShouldIgnore); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38F6C0(relative to base address)
		void IgnoreActorWhenMoving(AActor* Actor, bool bShouldIgnore); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38F5F8(relative to base address)
		FWalkableSlopeOverride GetWalkableSlopeOverride(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38F5D0(relative to base address)
		bool GetUpdateKinematicFromSimulation(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748840868(relative to base address)
		bool GetStaticWhenNotMoveable(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38F5B4(relative to base address)
		FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38E8B4(relative to base address)
		FVector GetPhysicsLinearVelocity(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38E814(relative to base address)
		FVector GetPhysicsAngularVelocityInRadians(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E774(relative to base address)
		FVector GetPhysicsAngularVelocityInDegrees(FName BoneName); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E6D4(relative to base address)
		void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E638(relative to base address)
		void GetOverlappingActors(TArray<AActor*>& OverlappingActors, UClass* ClassFilter); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749214230(relative to base address)
		int32_t GetNumMaterials(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748A1816C(relative to base address)
		float GetMaxDepenetrationVelocity(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38E5A4(relative to base address)
		TArray GetMaterialSlotNames(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E560(relative to base address)
		int32_t GetMaterialIndex(FName MaterialSlotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74931B4D0(relative to base address)
		UMaterialInterface GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E450(relative to base address)
		UMaterialInterface GetMaterialByName(FName MaterialSlotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E3BC(relative to base address)
		UMaterialInterface GetMaterial(int32_t ElementIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7488542F0(relative to base address)
		float GetMassScale(FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E328(relative to base address)
		float GetMass(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E2FC(relative to base address)
		float GetLinearDamping(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E2D0(relative to base address)
		FVector GetInertiaTensor(FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E228(relative to base address)
		bool GetIgnoreBoundsForEditorFocus(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E200(relative to base address)
		bool GetGenerateOverlapEvents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E1E4(relative to base address)
		TArray GetExcludeForSpecificHLODLevels(); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E134(relative to base address)
		int32_t GetCustomPrimitiveDataIndexForVectorParameter(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38E06C(relative to base address)
		int32_t GetCustomPrimitiveDataIndexForScalarParameter(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DFE0(relative to base address)
		TEnumAsByte GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DF4C(relative to base address)
		FName GetCollisionProfileName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DF20(relative to base address)
		TEnumAsByte GetCollisionObjectType(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DEF8(relative to base address)
		TEnumAsByte GetCollisionEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DED0(relative to base address)
		float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7481F6D90(relative to base address)
		FVector GetCenterOfMass(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DE30(relative to base address)
		FBodyInstanceAsyncPhysicsTickHandle GetBodyInstanceAsyncPhysicsTickHandle(FName BoneName, bool bGetWelded, int32_t Index); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DD1C(relative to base address)
		float GetAngularDamping(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38DCF0(relative to base address)
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(int32_t ElementIndex, UMaterialInterface* SourceMaterial, FName OptionalName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74851A094(relative to base address)
		UMaterialInstanceDynamic CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, UMaterialInterface* Parent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DBB4(relative to base address)
		UMaterialInstanceDynamic CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DB20(relative to base address)
		TArray CopyArrayOfMoveIgnoreComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DAE0(relative to base address)
		TArray CopyArrayOfMoveIgnoreActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DAA0(relative to base address)
		void ClearMoveIgnoreComponents(); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DA6C(relative to base address)
		void ClearMoveIgnoreActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DA58(relative to base address)
		bool CanCharacterStepUp(APawn* Pawn); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38D9C4(relative to base address)
		bool AllowHLODLevelsExclusion(); // Flags: Final|Native|Private|Const, Memory Exec: 0x7FF74C38D978(relative to base address)
		void AddVelocityChangeImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38D6B8(relative to base address)
		void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38D418(relative to base address)
		void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38D17C(relative to base address)
		void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38CD64(relative to base address)
		void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38C94C(relative to base address)
		void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38C68C(relative to base address)
		void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38C3EC(relative to base address)
		void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38C12C(relative to base address)
		void AddForceAtLocation(FVector Force, FVector Location, FName BoneName); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38BE6C(relative to base address)
		void AddForce(FVector Force, FName BoneName, bool bAccelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38BBCC(relative to base address)
		void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38B92C(relative to base address)
		void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38B690(relative to base address)
	};


	// Class Engine.MeshComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x38 (0x500 - 0x4C8)
	class UMeshComponent : public UPrimitiveComponent	
	{
	public:
		TArray<UMaterialInterface*> OverrideMaterials; // 0x4C8(0x10)
		UMaterialInterface* OverlayMaterial; // 0x4D8(0x8)
		float OverlayMaterialMaxDrawDistance; // 0x4E0(0x4)
		bool bEnableMaterialParameterCaching : 1; // 0x4E4:0(0x1)
		unsigned char UnknownData00_7[0x13]; // 0x4E5(0x13) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshComponent");
			return ret;
		}

		void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747A0C584(relative to base address)
		void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748708540(relative to base address)
		void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBFE0(relative to base address)
		void SetOverlayMaterial(UMaterialInterface* NewOverlayMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBF60(relative to base address)
		void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E941C(relative to base address)
		bool PrestreamMeshLODs(float Seconds); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9384(relative to base address)
		float GetOverlayMaterialMaxDrawDistance(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7F28(relative to base address)
		UMaterialInterface GetOverlayMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749BC6B40(relative to base address)
		TArray GetMaterials(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74897C3D0(relative to base address)
	};


	// Class Engine.StaticMeshComponent
	// Inherited from UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x98 (0x590 - 0x4F8)
	class UStaticMeshComponent : public UMeshComponent	
	{
	public:
		int32_t ForcedLodModel; // 0x4F8(0x4)
		int32_t MinLOD; // 0x4FC(0x4)
		int32_t SubDivisionStepSize; // 0x500(0x4)
		FColor WireframeColorOverride; // 0x504(0x4)
		UStaticMesh* StaticMesh; // 0x508(0x8)
		int32_t WorldPositionOffsetDisableDistance; // 0x510(0x4)
		bool bForceNaniteForMasked : 1; // 0x514:0(0x1)
		bool bDisallowNanite : 1; // 0x514:1(0x1)
		bool bForceDisableNanite : 1; // 0x514:2(0x1)
		bool bEvaluateWorldPositionOffset : 1; // 0x514:3(0x1)
		bool bWorldPositionOffsetWritesVelocity : 1; // 0x514:4(0x1)
		bool bEvaluateWorldPositionOffsetInRayTracing : 1; // 0x514:5(0x1)
		unsigned char UnknownBit00 : 1; // 0x514:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit01 : 1; // 0x514:7(0x1) UNKNOWN PROPERTY
		bool bOverrideWireframeColor : 1; // 0x515:0(0x1)
		bool bOverrideMinLOD : 1; // 0x515:1(0x1)
		bool bOverrideNavigationExport : 1; // 0x515:2(0x1)
		bool bForceNavigationObstacle : 1; // 0x515:3(0x1)
		bool bDisallowMeshPaintPerInstance : 1; // 0x515:4(0x1)
		bool bMeshPaintTexture : 1; // 0x515:5(0x1)
		bool bIgnoreInstanceForTextureStreaming : 1; // 0x515:6(0x1)
		bool bOverrideLightMapRes : 1; // 0x515:7(0x1)
		bool bCastDistanceFieldIndirectShadow : 1; // 0x516:0(0x1)
		bool bOverrideDistanceFieldSelfShadowBias : 1; // 0x516:1(0x1)
		bool bUseSubDivisions : 1; // 0x516:2(0x1)
		bool bUseDefaultCollision : 1; // 0x516:3(0x1)
		bool bSortTriangles : 1; // 0x516:4(0x1)
		bool bReverseCulling : 1; // 0x516:5(0x1)
		unsigned char UnknownData02_5[0x1]; // 0x517(0x1) UNKNOWN PROPERTY
		UTexture* MeshPaintTexture; // 0x518(0x8)
		UTexture* MeshPaintTextureOverride; // 0x520(0x8)
		int32_t OverriddenLightMapRes; // 0x528(0x4)
		float DistanceFieldIndirectShadowMinVisibility; // 0x52C(0x4)
		float DistanceFieldSelfShadowBias; // 0x530(0x4)
		float StreamingDistanceMultiplier; // 0x534(0x4)
		float NanitePixelProgrammableDistance; // 0x538(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x53C(0x4) UNKNOWN PROPERTY
		TArray<FStaticMeshComponentLODInfo> LODData; // 0x540(0x10)
		TArray<FStreamingTextureBuildInfo> StreamingTextureData; // 0x550(0x10)
		FLightmassPrimitiveSettings LightmassSettings; // 0x560(0x18)
		unsigned char UnknownData04_7[0x18]; // 0x578(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshComponent");
			return ret;
		}

		void UpdateInitialEvaluateWorldPositionOffset(); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525D50(relative to base address)
		void SetWorldPositionOffsetDisableDistance(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525BCC(relative to base address)
		bool SetStaticMesh(UStaticMesh* NewMesh); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748EDF72C(relative to base address)
		void SetReverseCulling(bool ReverseCulling); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5237C4(relative to base address)
		void SetForcedLodModel(int32_t NewForcedLodModel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5222A0(relative to base address)
		void SetForceDisableNanite(bool bInForceDisableNanite); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5221F0(relative to base address)
		void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522170(relative to base address)
		void SetEvaluateWorldPositionOffset(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749717970(relative to base address)
		void SetDistanceFieldSelfShadowBias(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C521730(relative to base address)
		void OnRep_StaticMesh(UStaticMesh* OldStaticMesh); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C520A5C(relative to base address)
		void GetLocalBounds(FVector& Min, FVector& Max); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D8A4(relative to base address)
		bool GetInitialEvaluateWorldPositionOffset(); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C51D600(relative to base address)
	};


	// Class Engine.InstancedStaticMeshComponent
	// Inherited from UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x350 (0x8E0 - 0x590)
	class UInstancedStaticMeshComponent : public UStaticMeshComponent	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x590(0x8) UNKNOWN PROPERTY
		TArray<FInstancedStaticMeshInstanceData> PerInstanceSMData; // 0x598(0x10)
		TArray<FMatrix> PerInstancePrevTransform; // 0x5A8(0x10)
		FBox NavigationBounds; // 0x5B8(0x38)
		FTransform PreviousComponentTransform; // 0x5F0(0x60)
		int32_t NumCustomDataFloats; // 0x650(0x4)
		int32_t InstancingRandomSeed; // 0x654(0x4)
		TArray<float> PerInstanceSMCustomData; // 0x658(0x10)
		TArray<FInstancedStaticMeshRandomSeed> AdditionalRandomSeeds; // 0x668(0x10)
		float InstanceLODDistanceScale; // 0x678(0x4)
		int32_t InstanceStartCullDistance; // 0x67C(0x4)
		int32_t InstanceEndCullDistance; // 0x680(0x4)
		bool bUseGpuLodSelection : 1; // 0x684:0(0x1)
		bool bInheritPerInstanceData : 1; // 0x684:1(0x1)
		bool bDisableCollision : 1; // 0x684:2(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x685(0x3) UNKNOWN PROPERTY
		TArray<int32_t> InstanceReorderTable; // 0x688(0x10)
		unsigned char UnknownData02_6[0xB0]; // 0x698(0xB0) UNKNOWN PROPERTY
		int32_t NumPendingLightmaps; // 0x748(0x4)
		unsigned char UnknownData03_6[0x184]; // 0x74C(0x184) UNKNOWN PROPERTY
		TArray<FInstancedStaticMeshMappingInfo> CachedMappings; // 0x8D0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InstancedStaticMeshComponent");
			return ret;
		}

		bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C37A86C(relative to base address)
		void SetNumCustomDataFloats(int32_t InNumCustomDataFloats); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C379E94(relative to base address)
		void SetLODDistanceScale(float InLODDistanceScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C379CEC(relative to base address)
		bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7476F94A8(relative to base address)
		void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C378CE8(relative to base address)
		bool RemoveInstances(TArray<int32_t>& InstancesToRemove); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3779C8(relative to base address)
		bool RemoveInstance(int32_t InstanceIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C377934(relative to base address)
		bool IsValidInstance(int32_t InstanceIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376BF8(relative to base address)
		float GetLODDistanceScale(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376890(relative to base address)
		bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C37633C(relative to base address)
		TArray GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C37668C(relative to base address)
		TArray GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3764FC(relative to base address)
		int32_t GetInstanceCount(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376324(relative to base address)
		void GetCullDistances(int32_t& OutStartCullDistance, int32_t& OutEndCullDistance); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376194(relative to base address)
		void ClearInstances(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749253B5C(relative to base address)
		bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray<FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C375508(relative to base address)
		bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3751E8(relative to base address)
		int32_t AddInstanceWorldSpace(FTransform& WorldTransform); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3750E0(relative to base address)
		TArray AddInstances(TArray<FTransform>& InstanceTransforms, bool bShouldReturnIndices, bool bWorldSpace, bool bUpdateNavigation); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF747FB013C(relative to base address)
		int32_t AddInstance(FTransform& InstanceTransform, bool bWorldSpace); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C374F58(relative to base address)
	};


	// Class Engine.HierarchicalInstancedStaticMeshComponent
	// Inherited from UInstancedStaticMeshComponent -> UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x1A0 (0xA80 - 0x8E0)
	class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x8E0(0x10) UNKNOWN PROPERTY
		bool bUseTranslatedInstanceSpace : 1; // 0x8F0:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x8F1(0x7) UNKNOWN PROPERTY
		FVector TranslatedInstanceSpaceOrigin; // 0x8F8(0x18)
		TArray<int32_t> SortedInstances; // 0x910(0x10)
		int32_t NumBuiltInstances; // 0x920(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x924(0x4) UNKNOWN PROPERTY
		FBox BuiltInstanceBounds; // 0x928(0x38)
		FBox UnbuiltInstanceBounds; // 0x960(0x38)
		TArray<FBox> UnbuiltInstanceBoundsList; // 0x998(0x10)
		bool bEnableDensityScaling : 1; // 0x9A8:0(0x1)
		unsigned char UnknownData03_5[0x7]; // 0x9A9(0x7) UNKNOWN PROPERTY
		int32_t OcclusionLayerNumNodes; // 0x9B0(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x9B4(0x4) UNKNOWN PROPERTY
		FBoxSphereBounds CacheMeshExtendedBounds; // 0x9B8(0x38)
		int32_t InstanceCountToRender; // 0x9F0(0x4)
		unsigned char UnknownData05_7[0x84]; // 0x9F4(0x84) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HierarchicalInstancedStaticMeshComponent");
			return ret;
		}
	};


	// Class Engine.PartitionActor
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class APartitionActor : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PartitionActor");
			return ret;
		}
	};


	// Class Engine.ISMPartitionActor
	// Inherited from APartitionActor -> AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AISMPartitionActor : public APartitionActor	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x290(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ISMPartitionActor");
			return ret;
		}
	};


	// Class Engine.StaticMeshActor
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AStaticMeshActor : public AActor	
	{
	public:
		UStaticMeshComponent* StaticMeshComponent; // 0x290(0x8)
		bool bStaticMeshReplicateMovement; // 0x298(0x1)
		EPhysicsReplicationMode StaticMeshPhysicsReplicationMode; // 0x299(0x1)
		ENavDataGatheringMode NavigationGeometryGatheringMode; // 0x29A(0x1)
		unsigned char UnknownData00_7[0x5]; // 0x29B(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshActor");
			return ret;
		}

		void SetMobility(TEnumAsByte<EComponentMobility> InMobility); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8924DC(relative to base address)
	};


	// Class Engine.Brush
	// Inherited from AActor -> UObject
	// Size: 0x38 (0x2C8 - 0x290)
	class ABrush : public AActor	
	{
	public:
		TEnumAsByte<EBrushType> BrushType; // 0x290(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x291(0x3) UNKNOWN PROPERTY
		FColor BrushColor; // 0x294(0x4)
		int32_t PolyFlags; // 0x298(0x4)
		bool bColored : 1; // 0x29C:0(0x1)
		bool bSolidWhenSelected : 1; // 0x29C:1(0x1)
		bool bPlaceableFromClassBrowser : 1; // 0x29C:2(0x1)
		bool bNotForClientOrServer : 1; // 0x29C:3(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x29D(0x3) UNKNOWN PROPERTY
		UModel* Brush; // 0x2A0(0x8)
		UBrushComponent* BrushComponent; // 0x2A8(0x8)
		bool bInManipulation : 1; // 0x2B0:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x2B1(0x7) UNKNOWN PROPERTY
		TArray<FGeomSelection> SavedSelections; // 0x2B8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Brush");
			return ret;
		}
	};


	// Class Engine.Volume
	// Inherited from ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AVolume : public ABrush	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Volume");
			return ret;
		}
	};


	// Class Engine.StreamableRenderAsset
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class UStreamableRenderAsset : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x18]; // 0x28(0x18) UNKNOWN PROPERTY
		double ForceMipLevelsToBeResidentTimestamp; // 0x40(0x8)
		int32_t NumCinematicMipLevels; // 0x48(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY
		FPerQualityLevelInt NoRefStreamingLODBias; // 0x50(0x68)
		int32_t StreamingIndex; // 0xB8(0x4)
		bool NeverStream : 1; // 0xBC:0(0x1)
		bool bGlobalForceMipLevelsToBeResident : 1; // 0xBC:1(0x1)
		bool bHasStreamingUpdatePending : 1; // 0xBC:2(0x1)
		bool bForceMiplevelsToBeResident : 1; // 0xBC:3(0x1)
		bool bIgnoreStreamingMipBias : 1; // 0xBC:4(0x1)
		bool bUseCinematicMipLevels : 1; // 0xBC:5(0x1)
		unsigned char UnknownData02_7[0xB]; // 0xBD(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamableRenderAsset");
			return ret;
		}

		void SetForceMipLevelsToBeResident(float Seconds, int32_t CinematicLODGroupMask); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C892418(relative to base address)
	};


	// Class Engine.MaterialInterface
	// Inherited from UObject
	// Size: 0x90 (0xB8 - 0x28)
	class UMaterialInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		USubsurfaceProfile* SubsurfaceProfile; // 0x38(0x8)
		TArray<USpecularProfile*> SpecularProfiles; // 0x40(0x10)
		UNeuralProfile* NeuralProfile; // 0x50(0x8)
		unsigned char UnknownData01_6[0x20]; // 0x58(0x20) UNKNOWN PROPERTY
		FLightmassMaterialInterfaceSettings LightmassSettings; // 0x78(0x10)
		TArray<FMaterialTextureInfo> TextureStreamingData; // 0x88(0x10)
		TArray<UAssetUserData*> AssetUserData; // 0x98(0x10)
		unsigned char UnknownData02_6[0x4]; // 0xA8(0x4) UNKNOWN PROPERTY
		bool bIncludedInBaseGame : 1; // 0xAC:0(0x1)
		unsigned char UnknownData03_7[0xB]; // 0xAD(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInterface");
			return ret;
		}

		void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C382C4C(relative to base address)
		UPhysicalMaterialMask GetPhysicalMaterialMask(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C382C24(relative to base address)
		UPhysicalMaterial GetPhysicalMaterialFromMap(int32_t Index); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C382B90(relative to base address)
		UPhysicalMaterial GetPhysicalMaterial(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C382B68(relative to base address)
		FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, FName ParameterName, UMaterialFunctionInterface* LayerFunction); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C382964(relative to base address)
		UMaterialInterface GetNaniteOverideMaterial(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749859734(relative to base address)
		TEnumAsByte GetBlendMode(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38293C(relative to base address)
		UMaterial GetBaseMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7495426F4(relative to base address)
	};


	// Class Engine.MaterialInstance
	// Inherited from UMaterialInterface -> UObject
	// Size: 0x1F0 (0x2A8 - 0xB8)
	class UMaterialInstance : public UMaterialInterface	
	{
	public:
		UPhysicalMaterial* PhysMaterial; // 0xB8(0x8)
		UPhysicalMaterial* PhysicalMaterialMap; // 0xC0(0x40)
		UMaterialInterface* Parent; // 0x100(0x8)
		FMaterialOverrideNanite NaniteOverrideMaterial; // 0x108(0x30)
		bool bHasStaticPermutationResource : 1; // 0x138:0(0x1)
		bool bOverrideSubsurfaceProfile : 1; // 0x138:1(0x1)
		bool bOverrideBlendableLocation : 1; // 0x138:2(0x1)
		bool bOverrideBlendablePriority : 1; // 0x138:3(0x1)
		unsigned char UnknownData00_5[0x2]; // 0x139(0x2) UNKNOWN PROPERTY
		TEnumAsByte<EBlendableLocation> BlendableLocationOverride; // 0x13B(0x1)
		int32_t BlendablePriorityOverride; // 0x13C(0x4)
		unsigned char UnknownData01_6[0x20]; // 0x140(0x20) UNKNOWN PROPERTY
		TArray<FScalarParameterValue> ScalarParameterValues; // 0x160(0x10)
		TArray<FVectorParameterValue> VectorParameterValues; // 0x170(0x10)
		TArray<FDoubleVectorParameterValue> DoubleVectorParameterValues; // 0x180(0x10)
		TArray<FTextureParameterValue> TextureParameterValues; // 0x190(0x10)
		TArray<FTextureCollectionParameterValue> TextureCollectionParameterValues; // 0x1A0(0x10)
		TArray<FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0x1B0(0x10)
		TArray<FSparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues; // 0x1C0(0x10)
		TArray<FFontParameterValue> FontParameterValues; // 0x1D0(0x10)
		TArray<FUserSceneTextureOverride> UserSceneTextureOverrides; // 0x1E0(0x10)
		FMaterialInstanceBasePropertyOverrides BasePropertyOverrides; // 0x1F0(0x20)
		unsigned char UnknownData02_6[0x8]; // 0x210(0x8) UNKNOWN PROPERTY
		FStaticParameterSetRuntimeData StaticParametersRuntime; // 0x218(0x60)
		unsigned char UnknownData03_7[0x30]; // 0x278(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstance");
			return ret;
		}
	};


	// Class Engine.MaterialInstanceConstant
	// Inherited from UMaterialInstance -> UMaterialInterface -> UObject
	// Size: 0x8 (0x2B0 - 0x2A8)
	class UMaterialInstanceConstant : public UMaterialInstance	
	{
	public:
		UPhysicalMaterialMask* PhysMaterialMask; // 0x2A8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceConstant");
			return ret;
		}

		FLinearColor K2_GetVectorParameterValue(FName ParameterName); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6AE47C(relative to base address)
		UTexture K2_GetTextureParameterValue(FName ParameterName); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AE304(relative to base address)
		float K2_GetScalarParameterValue(FName ParameterName); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AE1D0(relative to base address)
	};


	// Class Engine.MaterialExpression
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UMaterialExpression : public UObject	
	{
	public:
		int32_t MaterialExpressionEditorX; // 0x28(0x4)
		int32_t MaterialExpressionEditorY; // 0x2C(0x4)
		UEdGraphNode* GraphNode; // 0x30(0x8)
		UMaterialExpression* SubgraphExpression; // 0x38(0x8)
		unsigned char UnknownData00_6[0x10]; // 0x40(0x10) UNKNOWN PROPERTY
		FGuid MaterialExpressionGuid; // 0x50(0x10)
		UMaterial* Material; // 0x60(0x8)
		UMaterialFunction* Function; // 0x68(0x8)
		FString Desc; // 0x70(0x10)
		unsigned char UnknownData01_6[0x4]; // 0x80(0x4) UNKNOWN PROPERTY
		bool bRealtimePreview : 1; // 0x84:0(0x1)
		bool bNeedToUpdatePreview : 1; // 0x84:1(0x1)
		unsigned char UnknownData02_3[0x3]; // 0x85(0x3) UNKNOWN PROPERTY
		bool bIsParameterExpression : 1; // 0x88:0(0x1)
		unsigned char UnknownData03_3[0x3]; // 0x89(0x3) UNKNOWN PROPERTY
		bool bCommentBubbleVisible : 1; // 0x8C:0(0x1)
		bool bShowOutputNameOnPin : 1; // 0x8C:1(0x1)
		bool bShowMaskColorsOnPin : 1; // 0x8C:2(0x1)
		bool bHidePreviewWindow : 1; // 0x8C:3(0x1)
		bool bCollapsed : 1; // 0x8C:4(0x1)
		bool bShaderInputData : 1; // 0x8C:5(0x1)
		bool bShowInputs : 1; // 0x8C:6(0x1)
		bool bShowOutputs : 1; // 0x8C:7(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x8D(0x3) UNKNOWN PROPERTY
		TArray<FText> MenuCategories; // 0x90(0x10)
		TArray<FExpressionOutput> Outputs; // 0xA0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpression");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCustomOutput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCustomOutput : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCustomOutput");
			return ret;
		}
	};


	// Class Engine.HLODBuilder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHLODBuilder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODBuilder");
			return ret;
		}
	};


	// Class Engine.TickableWorldSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UTickableWorldSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x30(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TickableWorldSubsystem");
			return ret;
		}
	};


	// Class Engine.AssetUserData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAssetUserData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetUserData");
			return ret;
		}
	};


	// Class Engine.TextureMipDataProviderFactory
	// Inherited from UAssetUserData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UTextureMipDataProviderFactory : public UAssetUserData	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureMipDataProviderFactory");
			return ret;
		}
	};


	// Class Engine.TextureAllMipDataProviderFactory
	// Inherited from UTextureMipDataProviderFactory -> UAssetUserData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UTextureAllMipDataProviderFactory : public UTextureMipDataProviderFactory	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureAllMipDataProviderFactory");
			return ret;
		}
	};


	// Class Engine.DynamicSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UDynamicSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DynamicSubsystem");
			return ret;
		}
	};


	// Class Engine.EngineSubsystem
	// Inherited from UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UEngineSubsystem : public UDynamicSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineSubsystem");
			return ret;
		}
	};


	// Class Engine.EngineCustomTimeStep
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineCustomTimeStep : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineCustomTimeStep");
			return ret;
		}
	};


	// Class Engine.TimecodeProvider
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UTimecodeProvider : public UObject	
	{
	public:
		float FrameDelay; // 0x28(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TimecodeProvider");
			return ret;
		}

		Ftimecode GetTimecode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4018(relative to base address)
		ETimecodeProviderSynchronizationState GetSynchronizationState(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39ED58(relative to base address)
		FQualifiedFrameTime GetQualifiedFrameTime(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3CBC(relative to base address)
		FFrameRate GetFrameRate(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A2E14(relative to base address)
		Ftimecode GetDelayedTimecode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A2D20(relative to base address)
		FQualifiedFrameTime GetDelayedQualifiedFrameTime(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A2CF0(relative to base address)
		bool FetchTimecode(FQualifiedFrameTime& OutFrameTime); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5A1FA0(relative to base address)
		void FetchAndUpdate(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C349660(relative to base address)
	};


	// Class Engine.EdGraphNode
	// Inherited from UObject
	// Size: 0x70 (0x98 - 0x28)
	class UEdGraphNode : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TArray<UEdGraphPin_Deprecated*> DeprecatedPins; // 0x38(0x10)
		int32_t NodePosX; // 0x48(0x4)
		int32_t NodePosY; // 0x4C(0x4)
		int32_t NodeWidth; // 0x50(0x4)
		int32_t NodeHeight; // 0x54(0x4)
		TEnumAsByte<ENodeAdvancedPins> AdvancedPinDisplay; // 0x58(0x1)
		ENodeEnabledState EnabledState; // 0x59(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x5A(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0x5B:0(0x1) UNKNOWN PROPERTY
		bool bDisplayAsDisabled : 1; // 0x5B:1(0x1)
		bool bUserSetEnabledState : 1; // 0x5B:2(0x1)
		bool bIsIntermediateNode : 1; // 0x5B:3(0x1)
		bool bHasCompilerMessage : 1; // 0x5B:4(0x1)
		unsigned char UnknownData03_5[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY
		FString NodeComment; // 0x60(0x10)
		int32_t ErrorType; // 0x70(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x74(0x4) UNKNOWN PROPERTY
		FString ErrorMsg; // 0x78(0x10)
		FGuid NodeGUID; // 0x88(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphNode");
			return ret;
		}
	};


	// Class Engine.EdGraph
	// Inherited from UObject
	// Size: 0x38 (0x60 - 0x28)
	class UEdGraph : public UObject	
	{
	public:
		UClass* Schema; // 0x28(0x8)
		TArray<UEdGraphNode*> Nodes; // 0x30(0x10)
		bool bEditable : 1; // 0x40:0(0x1)
		bool bAllowDeletion : 1; // 0x40:1(0x1)
		bool bAllowRenaming : 1; // 0x40:2(0x1)
		unsigned char UnknownData00_7[0x1F]; // 0x41(0x1F) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraph");
			return ret;
		}
	};


	// Class Engine.DebugDrawComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x58 (0x520 - 0x4C8)
	class UDebugDrawComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x4C8(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugDrawComponent");
			return ret;
		}
	};


	// Class Engine.AnimNotify
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnimNotify : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify");
			return ret;
		}

		bool Received_Notify(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const, Memory Exec: 0x7FF7471BBE78(relative to base address)
		FString GetNotifyName(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C4092C8(relative to base address)
		float GetDefaultTriggerWeightThreshold(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C40917C(relative to base address)
	};


	// Class Engine.AnimNotifyState
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAnimNotifyState : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState");
			return ret;
		}

		bool Received_NotifyTick(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float FrameDeltaTime, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const, Memory Exec: 0x7FF7471BBE78(relative to base address)
		bool Received_NotifyEnd(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const, Memory Exec: 0x7FF7471BBE78(relative to base address)
		bool Received_NotifyBegin(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation, float TotalDuration, FAnimNotifyEventReference& EventReference); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent|Const, Memory Exec: 0x7FF7471BBE78(relative to base address)
		FString GetNotifyName(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C4092C8(relative to base address)
		float GetDefaultTriggerWeightThreshold(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C40917C(relative to base address)
	};


	// Class Engine.SkinnedMeshComponent
	// Inherited from UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x368 (0x860 - 0x4F8)
	class USkinnedMeshComponent : public UMeshComponent	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x4F8(0x8) UNKNOWN PROPERTY
		USkeletalMesh* SkeletalMesh; // 0x500(0x8)
		USkinnedAsset* SkinnedAsset; // 0x508(0x8)
		TWeakObjectPtr<USkinnedMeshComponent*> LeaderPoseComponent; // 0x510(0x8)
		TArray<ESkinCacheUsage> SkinCacheUsage; // 0x518(0x10)
		bool bSetMeshDeformer; // 0x528(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x529(0x7) UNKNOWN PROPERTY
		UMeshDeformer* MeshDeformer; // 0x530(0x8)
		UMeshDeformerInstanceSettings* MeshDeformerInstanceSettings; // 0x538(0x8)
		FMeshDeformerInstanceSet MeshDeformerInstances; // 0x540(0x20)
		unsigned char UnknownData02_6[0x180]; // 0x560(0x180) UNKNOWN PROPERTY
		UPhysicsAsset* PhysicsAssetOverride; // 0x6E0(0x8)
		int32_t ForcedLodModel; // 0x6E8(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x6EC(0x4) UNKNOWN PROPERTY
		int32_t MinLodModel; // 0x6F0(0x4)
		unsigned char UnknownData04_6[0x8]; // 0x6F4(0x8) UNKNOWN PROPERTY
		float StreamingDistanceMultiplier; // 0x6FC(0x4)
		unsigned char UnknownData05_6[0x8]; // 0x700(0x8) UNKNOWN PROPERTY
		TArray<FSkelMeshComponentLODInfo> LODInfo; // 0x708(0x10)
		unsigned char UnknownData06_6[0x24]; // 0x718(0x24) UNKNOWN PROPERTY
		EVisibilityBasedAnimTickOption VisibilityBasedAnimTickOption; // 0x73C(0x1)
		unsigned char UnknownData07_6[0x1]; // 0x73D(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x73E:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x73E:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit10 : 1; // 0x73E:2(0x1) UNKNOWN PROPERTY
		bool bOverrideMinLOD : 1; // 0x73E:3(0x1)
		bool bUseBoundsFromLeaderPoseComponent : 1; // 0x73E:4(0x1)
		bool bIncludeComponentLocationIntoBounds : 1; // 0x73E:5(0x1)
		bool bForceWireframe : 1; // 0x73E:6(0x1)
		bool bDisableMorphTarget : 1; // 0x73E:7(0x1)
		bool bHideSkin : 1; // 0x73F:0(0x1)
		bool bPerBoneMotionBlur : 1; // 0x73F:1(0x1)
		bool bComponentUseFixedSkelBounds : 1; // 0x73F:2(0x1)
		bool bConsiderAllBodiesForBounds : 1; // 0x73F:3(0x1)
		bool bSyncAttachParentLOD : 1; // 0x73F:4(0x1)
		bool bCanHighlightSelectedSections : 1; // 0x73F:5(0x1)
		bool bRecentlyRendered : 1; // 0x73F:6(0x1)
		bool bCastCapsuleDirectShadow : 1; // 0x73F:7(0x1)
		bool bCastCapsuleIndirectShadow : 1; // 0x740:0(0x1)
		bool bCPUSkinning : 1; // 0x740:1(0x1)
		bool bEnableUpdateRateOptimizations : 1; // 0x740:2(0x1)
		bool bDisplayDebugUpdateRateOptimizations : 1; // 0x740:3(0x1)
		bool bRenderStatic : 1; // 0x740:4(0x1)
		bool bIgnoreLeaderPoseComponentLOD : 1; // 0x740:5(0x1)
		unsigned char UnknownBit11 : 1; // 0x740:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit12 : 1; // 0x740:7(0x1) UNKNOWN PROPERTY
		bool bCachedLocalBoundsUpToDate : 1; // 0x741:0(0x1)
		bool bCachedWorldSpaceBoundsUpToDate : 1; // 0x741:1(0x1)
		unsigned char UnknownBit13 : 1; // 0x741:2(0x1) UNKNOWN PROPERTY
		bool bForceMeshObjectUpdate : 1; // 0x741:3(0x1)
		unsigned char UnknownBit14 : 1; // 0x741:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit15 : 1; // 0x741:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit16 : 1; // 0x741:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit17 : 1; // 0x741:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit18 : 1; // 0x742:0(0x1) UNKNOWN PROPERTY
		bool bFollowerShouldTickPose : 1; // 0x742:1(0x1)
		unsigned char UnknownData19_5[0x1]; // 0x743(0x1) UNKNOWN PROPERTY
		float CapsuleIndirectShadowMinVisibility; // 0x744(0x4)
		unsigned char UnknownData20_6[0x40]; // 0x748(0x40) UNKNOWN PROPERTY
		FBoxSphereBounds CachedWorldOrLocalSpaceBounds; // 0x788(0x38)
		FMatrix CachedWorldToLocalTransform; // 0x7C0(0x80)
		unsigned char UnknownData21_7[0x20]; // 0x840(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkinnedMeshComponent");
			return ret;
		}

		void UnsetMeshDeformer(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39D3D8(relative to base address)
		void UnloadSkinWeightProfile(FName InProfileName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39D358(relative to base address)
		void UnHideBoneByName(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7495EAB9C(relative to base address)
		void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39CFCC(relative to base address)
		void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39CC40(relative to base address)
		void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39CAF8(relative to base address)
		void ShowAllMaterialSections(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39CA78(relative to base address)
		void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C954(relative to base address)
		void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C39C870(relative to base address)
		bool SetSkinWeightProfile(FName InProfileName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C7E4(relative to base address)
		void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C39C700(relative to base address)
		void SetSkinnedAssetAndUpdate(USkinnedAsset* NewMesh, bool bReinitPose); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7493354BC(relative to base address)
		void SetRenderStatic(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749477A98(relative to base address)
		void SetPreSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C5E8(relative to base address)
		void SetPostSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C5E8(relative to base address)
		void SetPhysicsAsset(UPhysicsAsset* NewPhysicsAsset, bool bForceReInit); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C51C(relative to base address)
		void SetMinLOD(int32_t InNewMinLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C290(relative to base address)
		void SetMeshDeformer(UMeshDeformer* InMeshDeformer); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C20C(relative to base address)
		void SetLeaderPoseComponent(USkinnedMeshComponent* NewLeaderBoneComponent, bool bForceUpdate, bool bInFollowerShouldTickPose); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BFE8(relative to base address)
		void SetForcedLOD(int32_t InNewForcedLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BE68(relative to base address)
		void SetCastCapsuleIndirectShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BC54(relative to base address)
		void SetCastCapsuleDirectShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BBB4(relative to base address)
		void SetCapsuleIndirectShadowMinVisibility(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748AC1738(relative to base address)
		void OverrideMinLOD(int32_t InNewMinLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BB20(relative to base address)
		bool IsUsingSkinWeightProfile(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39BAFC(relative to base address)
		bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BA3C(relative to base address)
		bool IsBoneHiddenByName(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39B9B0(relative to base address)
		void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7493F8D90(relative to base address)
		int32_t GetVertexOffsetUsage(int32_t LODIndex); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B688(relative to base address)
		bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B568(relative to base address)
		FName GetSocketBoneName(FName InSocketName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B444(relative to base address)
		USkinnedAsset GetSkinnedAsset(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B420(relative to base address)
		USkeletalMesh GetSkeletalMesh_DEPRECATED(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749BC6AE4(relative to base address)
		FTransform GetRefPoseTransform(int32_t BoneIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B350(relative to base address)
		FVector GetRefPosePosition(int32_t BoneIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B2B0(relative to base address)
		int32_t GetPredictedLODLevel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B298(relative to base address)
		FName GetParentBone(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B214(relative to base address)
		int32_t GetNumLODs(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B1F0(relative to base address)
		int32_t GetNumBones(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B1CC(relative to base address)
		UMeshDeformerInstance GetMeshDeformerInstance(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B188(relative to base address)
		int32_t GetForcedLOD(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B170(relative to base address)
		FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74771C884(relative to base address)
		FName GetCurrentSkinWeightProfileName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B0EC(relative to base address)
		FTransform GetBoneTransform(FName InBoneName, TEnumAsByte<ERelativeTransformSpace> TransformSpace); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39AFD8(relative to base address)
		FName GetBoneName(int32_t BoneIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39AF54(relative to base address)
		int32_t GetBoneIndex(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39ADD0(relative to base address)
		FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39AA50(relative to base address)
		void ClearVertexColorOverride(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A9B4(relative to base address)
		void ClearSkinWeightProfile(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A9A0(relative to base address)
		void ClearSkinWeightOverride(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39A904(relative to base address)
		bool BoneIsChildOf(FName BoneName, FName ParentBoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39A844(relative to base address)
	};


	// Class Engine.SkeletalMeshComponent
	// Inherited from USkinnedMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x6A0 (0xF00 - 0x860)
	class USkeletalMeshComponent : public USkinnedMeshComponent	
	{
	public:
		UAnimBlueprintGeneratedClass* AnimBlueprintGeneratedClass; // 0x860(0x8)
		UClass* AnimClass; // 0x868(0x8)
		UAnimInstance* AnimScriptInstance; // 0x870(0x8)
		UAnimInstance* PostProcessAnimInstance; // 0x878(0x8)
		FSingleAnimationPlayData AnimationData; // 0x880(0x18)
		unsigned char UnknownData00_6[0x10]; // 0x898(0x10) UNKNOWN PROPERTY
		FVector RootBoneTranslation; // 0x8A8(0x18)
		FVector LineCheckBoundsScale; // 0x8C0(0x18)
		unsigned char UnknownData01_6[0x20]; // 0x8D8(0x20) UNKNOWN PROPERTY
		TArray<UAnimInstance*> LinkedInstances; // 0x8F8(0x10)
		unsigned char UnknownData02_6[0x10]; // 0x908(0x10) UNKNOWN PROPERTY
		TArray<FTransform> CachedBoneSpaceTransforms; // 0x918(0x10)
		TArray<FTransform> CachedComponentSpaceTransforms; // 0x928(0x10)
		unsigned char UnknownData03_6[0xA0]; // 0x938(0xA0) UNKNOWN PROPERTY
		float GlobalAnimRateScale; // 0x9D8(0x4)
		TEnumAsByte<EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType; // 0x9DC(0x1)
		TEnumAsByte<EPhysicsTransformUpdateMode> PhysicsTransformUpdateMode; // 0x9DD(0x1)
		unsigned char UnknownData04_6[0x1]; // 0x9DE(0x1) UNKNOWN PROPERTY
		TEnumAsByte<EAnimationMode> AnimationMode; // 0x9DF(0x1)
		unsigned char UnknownData05_6[0x1]; // 0x9E0(0x1) UNKNOWN PROPERTY
		bool bDisablePostProcessBlueprint : 1; // 0x9E1:0(0x1)
		unsigned char UnknownBit06 : 1; // 0x9E1:1(0x1) UNKNOWN PROPERTY
		bool bUpdateOverlapsOnAnimationFinalize : 1; // 0x9E1:2(0x1)
		unsigned char UnknownBit07 : 1; // 0x9E1:3(0x1) UNKNOWN PROPERTY
		bool bHasValidBodies : 1; // 0x9E1:4(0x1)
		bool bBlendPhysics : 1; // 0x9E1:5(0x1)
		bool bEnablePhysicsOnDedicatedServer : 1; // 0x9E1:6(0x1)
		bool bUpdateMeshWhenKinematic : 1; // 0x9E1:7(0x1)
		bool bUpdateJointsFromAnimation : 1; // 0x9E2:0(0x1)
		bool bAllowClothActors : 1; // 0x9E2:1(0x1)
		bool bDisableClothSimulation : 1; // 0x9E2:2(0x1)
		unsigned char UnknownData08_3[0x5]; // 0x9E3(0x5) UNKNOWN PROPERTY
		bool bDisableRigidBodyAnimNode : 1; // 0x9E8:0(0x1)
		bool bAllowAnimCurveEvaluation : 1; // 0x9E8:1(0x1)
		unsigned char UnknownBit09 : 1; // 0x9E8:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit10 : 1; // 0x9E8:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit11 : 1; // 0x9E8:4(0x1) UNKNOWN PROPERTY
		bool bCollideWithEnvironment : 1; // 0x9E8:5(0x1)
		bool bCollideWithAttachedChildren : 1; // 0x9E8:6(0x1)
		bool bForceCollisionUpdate : 1; // 0x9E8:7(0x1)
		unsigned char UnknownData12_5[0x3]; // 0x9E9(0x3) UNKNOWN PROPERTY
		float ClothVelocityScale; // 0x9EC(0x4)
		bool bResetAfterTeleport : 1; // 0x9F0:0(0x1)
		unsigned char UnknownBit13 : 1; // 0x9F0:1(0x1) UNKNOWN PROPERTY
		bool bDeferKinematicBoneUpdate : 1; // 0x9F0:2(0x1)
		bool bNoSkeletonUpdate : 1; // 0x9F0:3(0x1)
		bool bPauseAnims : 1; // 0x9F0:4(0x1)
		bool bUseRefPoseOnInitAnim : 1; // 0x9F0:5(0x1)
		bool bEnablePerPolyCollision : 1; // 0x9F0:6(0x1)
		bool bForceRefpose : 1; // 0x9F0:7(0x1)
		bool bOnlyAllowAutonomousTickPose : 1; // 0x9F1:0(0x1)
		bool bIsAutonomousTickPose : 1; // 0x9F1:1(0x1)
		bool bOldForceRefPose : 1; // 0x9F1:2(0x1)
		bool bShowPrePhysBones : 1; // 0x9F1:3(0x1)
		bool bRequiredBonesUpToDate : 1; // 0x9F1:4(0x1)
		bool bAnimTreeInitialised : 1; // 0x9F1:5(0x1)
		bool bEnableLineCheckWithBounds : 1; // 0x9F1:6(0x1)
		bool bPropagateCurvesToFollowers : 1; // 0x9F1:7(0x1)
		bool bSkipKinematicUpdateWhenInterpolating : 1; // 0x9F2:0(0x1)
		bool bSkipBoundsUpdateWhenInterpolating : 1; // 0x9F2:1(0x1)
		unsigned char UnknownBit14 : 1; // 0x9F2:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit15 : 1; // 0x9F2:3(0x1) UNKNOWN PROPERTY
		bool bNeedsQueuedAnimEventsDispatched : 1; // 0x9F2:4(0x1)
		unsigned char UnknownData16_5[0x1]; // 0x9F3(0x1) UNKNOWN PROPERTY
		uint16_t CachedAnimCurveUidVersion; // 0x9F4(0x2)
		unsigned char UnknownData17_6[0x2]; // 0x9F6(0x2) UNKNOWN PROPERTY
		float ClothBlendWeight; // 0x9F8(0x4)
		bool bWaitForParallelClothTask; // 0x9FC(0x1)
		bool bFilteredAnimCurvesIsAllowList; // 0x9FD(0x1)
		uint16_t CachedMeshCurveMetaDataVersion; // 0x9FE(0x2)
		TArray<FName> FilteredAnimCurves; // 0xA00(0x10)
		UBodySetup* BodySetup; // 0xA10(0x8)
		unsigned char UnknownData18_6[0x4]; // 0xA18(0x4) UNKNOWN PROPERTY
		float ClothMaxDistanceScale; // 0xA1C(0x4)
		FMulticastInlineDelegate OnConstraintBroken; // 0xA20(0x10)
		FMulticastInlineDelegate OnPlasticDeformation; // 0xA30(0x10)
		UClass* ClothingSimulationFactory; // 0xA40(0x8)
		unsigned char UnknownData19_6[0xF8]; // 0xA48(0xF8) UNKNOWN PROPERTY
		float TeleportDistanceThreshold; // 0xB40(0x4)
		float TeleportRotationThreshold; // 0xB44(0x4)
		unsigned char UnknownData20_6[0x98]; // 0xB48(0x98) UNKNOWN PROPERTY
		UClothingSimulationInteractor* ClothingInteractor; // 0xBE0(0x8)
		unsigned char UnknownData21_6[0xB8]; // 0xBE8(0xB8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAnimInitialized; // 0xCA0(0x10)
		unsigned char UnknownData22_6[0x240]; // 0xCB0(0x240) UNKNOWN PROPERTY
		uint32_t LastPoseTickFrame; // 0xEF0(0x4)
		unsigned char UnknownData23_7[0x4]; // 0xEF4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshComponent");
			return ret;
		}

		void UnlinkAnimClassLayers(UClass* InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503D88(relative to base address)
		void UnbindClothFromLeaderPoseComponent(bool bRestoreSimulationSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503CE0(relative to base address)
		void ToggleDisablePostProcessBlueprint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503CCC(relative to base address)
		void TermBodiesBelow(FName ParentBoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503C4C(relative to base address)
		void SuspendClothingSimulation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503C34(relative to base address)
		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503C20(relative to base address)
		void SnapshotPose(FPoseSnapshot& Snapshot); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C503B58(relative to base address)
		void SetUpdateClothInEditor(bool NewUpdateState); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		void SetUpdateAnimationInEditor(bool NewUpdateState); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		void SetTeleportRotationThreshold(float Threshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503784(relative to base address)
		void SetTeleportDistanceThreshold(float Threshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5036F8(relative to base address)
		void SetSkeletalMeshAsset(USkeletalMesh* NewMesh); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C50351C(relative to base address)
		void SetPosition(float InPos, bool bFireNotifies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5033B0(relative to base address)
		void SetPlayRate(float Rate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74887D150(relative to base address)
		void SetPhysicsBlendWeight(float PhysicsBlendWeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503330(relative to base address)
		void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503230(relative to base address)
		void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503138(relative to base address)
		void SetEnablePhysicsBlending(bool bNewBlendPhysics); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503024(relative to base address)
		void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502EF8(relative to base address)
		void SetEnableBodyGravity(bool bEnableGravity, FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502E14(relative to base address)
		void SetDisablePostProcessBlueprint(bool bInDisablePostProcess); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502D94(relative to base address)
		void SetDisableAnimCurves(bool bInDisableAnimCurves); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502D14(relative to base address)
		void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502BD4(relative to base address)
		void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502ADC(relative to base address)
		void SetClothMaxDistanceScale(float Scale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502A5C(relative to base address)
		void SetBodySimulatePhysics(FName& InBoneName, bool bSimulate); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C50287C(relative to base address)
		void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5027B4(relative to base address)
		void SetAnimClass(UClass* NewClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5024E8(relative to base address)
		void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode, bool bForceInitAnimScriptInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5025EC(relative to base address)
		void SetAnimation(UAnimationAsset* NewAnimToPlay); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C50256C(relative to base address)
		void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5023AC(relative to base address)
		void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502134(relative to base address)
		void SetAllowedAnimCurvesEvaluation(TArray<FName>& List, bool bAllow); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5021F8(relative to base address)
		void SetAllowClothActors(bool bInAllow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5020A8(relative to base address)
		void SetAllowAnimCurveEvaluation(bool bInAllow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502028(relative to base address)
		void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501F1C(relative to base address)
		void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501E10(relative to base address)
		void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501CD0(relative to base address)
		void SetAllBodiesSimulatePhysics(bool bNewSimulate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501C50(relative to base address)
		void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501B88(relative to base address)
		void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C501990(relative to base address)
		void SetAllBodiesBelowPhysicsDisabled(FName& InBoneName, bool bDisabled, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5017D0(relative to base address)
		void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5015A4(relative to base address)
		void SetAllBodiesBelowLinearVelocity(FName& InBoneName, FVector& LinearVelocity, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C501400(relative to base address)
		void ResumeClothingSimulation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5013E4(relative to base address)
		void ResetClothTeleportMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5013CC(relative to base address)
		void ResetAnimInstanceDynamics(ETeleportType InTeleportType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C50134C(relative to base address)
		void ResetAllowedAnimCurveEvaluation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501338(relative to base address)
		void ResetAllBodiesSimulatePhysics(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501324(relative to base address)
		void RecreateClothingActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501020(relative to base address)
		void PlayAnimation(UAnimationAsset* NewAnimToPlay, bool bLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74887D03C(relative to base address)
		void Play(bool bLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C500FA0(relative to base address)
		void OverrideAnimationData(UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C500E08(relative to base address)
		void LinkAnimGraphByTag(FName InTag, UClass* InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C500D20(relative to base address)
		void LinkAnimClassLayers(UClass* InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7497DE780(relative to base address)
		bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C500AAC(relative to base address)
		bool IsPlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C500A88(relative to base address)
		bool IsClothingSimulationSuspended(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C500A6C(relative to base address)
		bool IsBodyGravityEnabled(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5009CC(relative to base address)
		bool HasValidAnimationInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C500630(relative to base address)
		bool GetTransformAttribute_Ref(FName& BoneName, FName& AttributeName, FTransform& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5003C0(relative to base address)
		bool GetTransformAttribute(FName& BoneName, FName& AttributeName, FTransform DefaultValue, FTransform& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4FFFC0(relative to base address)
		float GetTeleportRotationThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFFA8(relative to base address)
		float GetTeleportDistanceThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFF90(relative to base address)
		bool GetStringAttribute_Ref(FName& BoneName, FName& AttributeName, FString& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FFD8C(relative to base address)
		bool GetStringAttribute(FName& BoneName, FName& AttributeName, FString DefaultValue, FString& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FFB10(relative to base address)
		USkeletalMesh GetSkeletalMeshAsset(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BB9ECC(relative to base address)
		FVector GetSkeletalCenterOfMass(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFAD8(relative to base address)
		UAnimInstance GetPostProcessInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFAA4(relative to base address)
		float GetPosition(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFA7C(relative to base address)
		float GetPlayRate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFA54(relative to base address)
		float GetMorphTarget(FName MorphTargetName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749274010(relative to base address)
		UAnimInstance GetLinkedAnimLayerInstanceByGroup(FName InGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FF9B8(relative to base address)
		UAnimInstance GetLinkedAnimLayerInstanceByClass(UClass* InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FF914(relative to base address)
		void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FF828(relative to base address)
		UAnimInstance GetLinkedAnimGraphInstanceByTag(FName InTag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FF79C(relative to base address)
		bool GetIntegerAttribute_Ref(FName& BoneName, FName& AttributeName, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FF598(relative to base address)
		bool GetIntegerAttribute(FName& BoneName, FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FF35C(relative to base address)
		bool GetFloatAttribute_Ref(FName& BoneName, FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FF194(relative to base address)
		bool GetFloatAttribute(FName& BoneName, FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FEF94(relative to base address)
		bool GetDisablePostProcessBlueprint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FEF78(relative to base address)
		bool GetDisableAnimCurves(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FEF58(relative to base address)
		void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FEDEC(relative to base address)
		void GetConstraintsFromBody(FName BodyName, bool bParentConstraints, bool bChildConstraints, bool bIncludesTerminated, TArray<FConstraintInstanceAccessor>& OutConstraints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FEC20(relative to base address)
		void GetConstraints(bool bIncludesTerminated, TArray<FConstraintInstanceAccessor>& OutConstraints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FEB2C(relative to base address)
		FConstraintInstanceAccessor GetConstraintByName(FName ConstraintName, bool bIncludesTerminated); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FEA58(relative to base address)
		float GetClothMaxDistanceScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FEA40(relative to base address)
		UClothingSimulationInteractor GetClothingSimulationInteractor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749BC9F00(relative to base address)
		float GetBoneMass(FName BoneName, bool bScaleMass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FE97C(relative to base address)
		FVector GetBoneLinearVelocity(FName& InBoneName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4FE894(relative to base address)
		UAnimInstance GetAnimInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748D1C640(relative to base address)
		UClass GetAnimClass(); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C4FE858(relative to base address)
		TEnumAsByte GetAnimationMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FE87C(relative to base address)
		bool GetAllowRigidBodyAnimNode(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FE820(relative to base address)
		bool GetAllowedAnimCurveEvaluate(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FE83C(relative to base address)
		bool GetAllowClothActors(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FE804(relative to base address)
		void ForceClothNextUpdateTeleportAndReset(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE7EC(relative to base address)
		void ForceClothNextUpdateTeleport(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE7D4(relative to base address)
		FName FindConstraintBoneName(int32_t ConstraintIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE730(relative to base address)
		void ClearMorphTargets(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE708(relative to base address)
		void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4FE41C(relative to base address)
		void BindClothToLeaderPoseComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE408(relative to base address)
		void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE30C(relative to base address)
		void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4FDFA8(relative to base address)
		void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4FDC44(relative to base address)
		void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4FDAAC(relative to base address)
	};


	// Class Engine.AnimInstance
	// Inherited from UObject
	// Size: 0x398 (0x3C0 - 0x28)
	class UAnimInstance : public UObject	
	{
	public:
		USkeleton* CurrentSkeleton; // 0x28(0x8)
		TEnumAsByte<ERootMotionMode> RootMotionMode; // 0x30(0x1)
		bool bUseMultiThreadedAnimationUpdate : 1; // 0x31:0(0x1)
		bool bUsingCopyPoseFromMesh : 1; // 0x31:1(0x1)
		unsigned char UnknownBit00 : 1; // 0x31:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit01 : 1; // 0x31:3(0x1) UNKNOWN PROPERTY
		bool bReceiveNotifiesFromLinkedInstances : 1; // 0x31:4(0x1)
		bool bPropagateNotifiesToLinkedInstances : 1; // 0x31:5(0x1)
		bool bUseMainInstanceMontageEvaluationData : 1; // 0x31:6(0x1)
		unsigned char UnknownData02_3[0x1]; // 0x32(0x1) UNKNOWN PROPERTY
		bool bQueueMontageEvents : 1; // 0x33:0(0x1)
		unsigned char UnknownData03_5[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnMontageBlendingOut; // 0x38(0x10)
		FMulticastInlineDelegate OnMontageBlendedIn; // 0x48(0x10)
		FMulticastInlineDelegate OnMontageStarted; // 0x58(0x10)
		FMulticastInlineDelegate OnMontageEnded; // 0x68(0x10)
		FMulticastInlineDelegate OnAllMontageInstancesEnded; // 0x78(0x10)
		unsigned char UnknownData04_6[0xB0]; // 0x88(0xB0) UNKNOWN PROPERTY
		TMap<FName, FInertializationRequest> SlotGroupInertializationRequestDataMap; // 0x138(0x50)
		unsigned char UnknownData05_6[0x38]; // 0x188(0x38) UNKNOWN PROPERTY
		FAnimNotifyQueue NotifyQueue; // 0x1C0(0x70)
		TArray<FAnimNotifyEvent> ActiveAnimNotifyState; // 0x230(0x10)
		TArray<FAnimNotifyEventReference> ActiveAnimNotifyEventReference; // 0x240(0x10)
		unsigned char UnknownData06_7[0x168]; // 0x250(0x168) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimInstance");
			return ret;
		}

		bool WasAnimNotifyTriggeredInStateMachine(int32_t MachineIndex, UClass* AnimNotifyType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F5AC8(relative to base address)
		bool WasAnimNotifyTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, UClass* AnimNotifyType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F5978(relative to base address)
		bool WasAnimNotifyTriggeredInAnyState(UClass* AnimNotifyType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F58C4(relative to base address)
		bool WasAnimNotifyStateActiveInStateMachine(int32_t MachineIndex, UClass* AnimNotifyStateType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F57C4(relative to base address)
		bool WasAnimNotifyStateActiveInSourceState(int32_t MachineIndex, int32_t StateIndex, UClass* AnimNotifyStateType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F5674(relative to base address)
		bool WasAnimNotifyStateActiveInAnyState(UClass* AnimNotifyStateType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F55D0(relative to base address)
		bool WasAnimNotifyNameTriggeredInStateMachine(int32_t MachineIndex, FName NotifyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F54EC(relative to base address)
		bool WasAnimNotifyNameTriggeredInSourceState(int32_t MachineIndex, int32_t StateIndex, FName NotifyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F53C0(relative to base address)
		bool WasAnimNotifyNameTriggeredInAnyState(FName NotifyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F5318(relative to base address)
		void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F5260(relative to base address)
		void UnlinkAnimClassLayers(UClass* InClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F51C4(relative to base address)
		APawn TryGetPawnOwner(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748E00E28(relative to base address)
		void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F502C(relative to base address)
		void SnapshotPose(FPoseSnapshot& Snapshot); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F4F60(relative to base address)
		void SetUseMainInstanceMontageEvaluationData(bool bSet); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4ED8(relative to base address)
		void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C5218(relative to base address)
		void SetReceiveNotifiesFromLinkedInstances(bool bSet); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4E50(relative to base address)
		void SetPropagateNotifiesToLinkedInstances(bool bSet); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4DC8(relative to base address)
		void SetMorphTarget(FName MorphTargetName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4D04(relative to base address)
		void SavePoseSnapshot(FName SnapshotName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4C80(relative to base address)
		void ResetDynamics(ETeleportType InTeleportType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74951D9E4(relative to base address)
		bool RequestTransitionEvent(FName EventName, double RequestTimeout, ETransitionRequestQueueMode QueueMode, ETransitionRequestOverwriteMode OverwriteMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4B40(relative to base address)
		void RequestSlotGroupInertialization(FName InSlotGroupName, float duration, UBlendProfile* BlendProfile); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F4A48(relative to base address)
		void RemovePoseSnapshot(FName SnapshotName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F498C(relative to base address)
		bool QueryTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, FName EventName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F4894(relative to base address)
		bool QueryAndMarkTransitionEvent(int32_t MachineIndex, int32_t TransitionIndex, FName EventName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F479C(relative to base address)
		UAnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendSettings(UAnimSequenceBase* Asset, FName SlotNodeName, FMontageBlendSettings& BlendInSettings, FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F42BC(relative to base address)
		UAnimMontage PlaySlotAnimationAsDynamicMontage_WithBlendArgs(UAnimSequenceBase* Asset, FName SlotNodeName, FAlphaBlendArgs& BlendIn, FAlphaBlendArgs& BlendOut, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F3E2C(relative to base address)
		UAnimMontage PlaySlotAnimationAsDynamicMontage(UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F3BD8(relative to base address)
		void MontageSync_StopFollowing(UAnimMontage* MontageFollower); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F25C0(relative to base address)
		void MontageSync_Follow(UAnimMontage* MontageFollower, UAnimInstance* OtherAnimInstance, UAnimMontage* MontageLeader); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F248C(relative to base address)
		void Montage_StopWithBlendSettings(FMontageBlendSettings& BlendOutSettings, UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F3A60(relative to base address)
		void Montage_StopWithBlendOut(FAlphaBlendArgs& BlendOut, UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F38F4(relative to base address)
		void Montage_StopGroupByName(float InBlendOutTime, FName GroupName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F3830(relative to base address)
		void Montage_Stop(float InBlendOutTime, UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7494830EC(relative to base address)
		void Montage_SetPosition(UAnimMontage* Montage, float NewPosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F376C(relative to base address)
		void Montage_SetPlayRate(UAnimMontage* Montage, float NewPlayRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F36A8(relative to base address)
		void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F35B0(relative to base address)
		void Montage_Resume(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F34DC(relative to base address)
		float Montage_PlayWithBlendSettings(UAnimMontage* MontageToPlay, FMontageBlendSettings& BlendInSettings, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F30D0(relative to base address)
		float Montage_PlayWithBlendIn(UAnimMontage* MontageToPlay, FAlphaBlendArgs& BlendIn, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F2CCC(relative to base address)
		float Montage_Play(UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F2B44(relative to base address)
		void Montage_Pause(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F2A88(relative to base address)
		void Montage_JumpToSectionsEnd(FName SectionName, UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F2950(relative to base address)
		void Montage_JumpToSection(FName SectionName, UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F288C(relative to base address)
		bool Montage_IsPlaying(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748FE87D4(relative to base address)
		bool Montage_IsActive(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749427B90(relative to base address)
		float Montage_GetPosition(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749B24504(relative to base address)
		float Montage_GetPlayRate(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F27FC(relative to base address)
		bool Montage_GetIsStopped(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F2768(relative to base address)
		float Montage_GetEffectivePlayRate(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F26D8(relative to base address)
		FName Montage_GetCurrentSection(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF747E3CD50(relative to base address)
		float Montage_GetBlendTime(UAnimMontage* Montage); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F2648(relative to base address)
		void LockAIResources(bool bLockMovement, bool LockAILogic); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F23D4(relative to base address)
		void LinkAnimGraphByTag(FName InTag, UClass* InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F22FC(relative to base address)
		void LinkAnimClassLayers(UClass* InClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F2260(relative to base address)
		bool IsUsingMainInstanceMontageEvaluationData(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F2118(relative to base address)
		bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1FDC(relative to base address)
		bool IsSlotActive(FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1E40(relative to base address)
		bool IsPlayingSlotAnimation(UAnimSequenceBase* Asset, FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1D78(relative to base address)
		bool IsAnyMontagePlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749FA399C(relative to base address)
		bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1C94(relative to base address)
		bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1B90(relative to base address)
		FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1AF0(relative to base address)
		float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F19A8(relative to base address)
		float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7482110BC(relative to base address)
		float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F18E4(relative to base address)
		float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F1820(relative to base address)
		float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F175C(relative to base address)
		bool GetReceiveNotifiesFromLinkedInstances(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1740(relative to base address)
		bool GetPropagateNotifiesToLinkedInstances(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1724(relative to base address)
		USkeletalMeshComponent GetOwningComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7486CEC98(relative to base address)
		AActor GetOwningActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748AE9050(relative to base address)
		void GetLinkedAnimLayerInstancesByGroup(FName InGroup, TArray<UAnimInstance*>& OutLinkedInstances); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1640(relative to base address)
		UAnimInstance GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, UClass* InClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1568(relative to base address)
		UAnimInstance GetLinkedAnimLayerInstanceByGroup(FName InGroup); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F14DC(relative to base address)
		UAnimInstance GetLinkedAnimLayerInstanceByClass(UClass* InClass, bool bCheckForChildClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7494A2E70(relative to base address)
		void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F13F8(relative to base address)
		UAnimInstance GetLinkedAnimGraphInstanceByTag(FName InTag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F136C(relative to base address)
		float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F12A8(relative to base address)
		float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F11E4(relative to base address)
		float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F1120(relative to base address)
		float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F105C(relative to base address)
		float GetInstanceMachineWeight(int32_t MachineIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0FCC(relative to base address)
		float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0F3C(relative to base address)
		float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0EAC(relative to base address)
		float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0E1C(relative to base address)
		float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0D8C(relative to base address)
		float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0CFC(relative to base address)
		float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0C6C(relative to base address)
		float GetDeltaSeconds(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0BF8(relative to base address)
		bool GetCurveValueWithDefault(FName CurveName, float DefaultValue, float& OutValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0AD8(relative to base address)
		float GetCurveValue(FName CurveName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748DB1110(relative to base address)
		FName GetCurrentStateName(int32_t MachineIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3F0A54(relative to base address)
		UAnimMontage GetCurrentActiveMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74904CE54(relative to base address)
		void GetAllCurveNames(TArray<FName>& OutNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0900(relative to base address)
		void GetActiveCurveNames(EAnimCurveType CurveType, TArray<FName>& OutNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F07E0(relative to base address)
		bool DynamicMontage_IsPlayingFrom(UAnimSequenceBase* Animation); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0650(relative to base address)
		void ClearTransitionEvents(FName EventName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F0204(relative to base address)
		void ClearMorphTargets(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F01F0(relative to base address)
		void ClearAllTransitionEvents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3F01DC(relative to base address)
		float CalculateDirection(FVector& Velocity, FRotator& BaseRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F00B4(relative to base address)
		void BlueprintUpdateAnimation(float DeltaTimeX); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void BlueprintThreadSafeUpdateAnimation(float DeltaTime); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void BlueprintPostEvaluateAnimation(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void BlueprintLinkedAnimationLayersInitialized(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void BlueprintInitializeAnimation(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void BlueprintBeginPlay(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		float Blueprint_GetSlotMontageLocalWeight(FName SlotNodeName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0024(relative to base address)
		UAnimInstance Blueprint_GetMainAnimInstance(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0008(relative to base address)
	};


	// Class Engine.BlueprintAsyncActionBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UBlueprintAsyncActionBase : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintAsyncActionBase");
			return ret;
		}

		void Activate(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF746F37328(relative to base address)
	};


	// Class Engine.BlueprintCore
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UBlueprintCore : public UObject	
	{
	public:
		UClass* SkeletonGeneratedClass; // 0x28(0x8)
		UClass* GeneratedClass; // 0x30(0x8)
		bool bLegacyNeedToPurgeSkelRefs; // 0x38(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		FGuid BlueprintGuid; // 0x3C(0x10)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintCore");
			return ret;
		}
	};


	// Class Engine.Blueprint
	// Inherited from UBlueprintCore -> UObject
	// Size: 0x58 (0xA8 - 0x50)
	class UBlueprint : public UBlueprintCore	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x50(0x8) UNKNOWN PROPERTY
		UClass* ParentClass; // 0x58(0x8)
		TEnumAsByte<EBlueprintType> BlueprintType; // 0x60(0x1)
		bool bRecompileOnLoad : 1; // 0x61:0(0x1)
		bool bHasBeenRegenerated : 1; // 0x61:1(0x1)
		bool bIsRegeneratingOnLoad : 1; // 0x61:2(0x1)
		unsigned char UnknownData01_5[0x2]; // 0x62(0x2) UNKNOWN PROPERTY
		int32_t BlueprintSystemVersion; // 0x64(0x4)
		USimpleConstructionScript* SimpleConstructionScript; // 0x68(0x8)
		TArray<UActorComponent*> ComponentTemplates; // 0x70(0x10)
		TArray<UTimelineTemplate*> Timelines; // 0x80(0x10)
		TArray<FBPComponentClassOverride> ComponentClassOverrides; // 0x90(0x10)
		UInheritableComponentHandler* InheritableComponentHandler; // 0xA0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Blueprint");
			return ret;
		}
	};


	// Class Engine.DynamicBlueprintBinding
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDynamicBlueprintBinding : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DynamicBlueprintBinding");
			return ret;
		}
	};


	// Class Engine.BlueprintGeneratedClass
	// Inherited from UClass -> UStruct -> UField -> UObject
	// Size: 0x160 (0x360 - 0x200)
	class UBlueprintGeneratedClass : public UClass	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x200(0x8) UNKNOWN PROPERTY
		int32_t NumReplicatedProperties; // 0x208(0x4)
		bool bHasCookedComponentInstancingData : 1; // 0x20C:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x20D(0x3) UNKNOWN PROPERTY
		TArray<UDynamicBlueprintBinding*> DynamicBindingObjects; // 0x210(0x10)
		TArray<UActorComponent*> ComponentTemplates; // 0x220(0x10)
		TArray<UTimelineTemplate*> Timelines; // 0x230(0x10)
		TArray<FBPComponentClassOverride> ComponentClassOverrides; // 0x240(0x10)
		TArray<FFieldNotificationId> FieldNotifies; // 0x250(0x10)
		unsigned char UnknownData02_6[0x8]; // 0x260(0x8) UNKNOWN PROPERTY
		USimpleConstructionScript* SimpleConstructionScript; // 0x268(0x8)
		UInheritableComponentHandler* InheritableComponentHandler; // 0x270(0x8)
		unsigned char UnknownData03_6[0x8]; // 0x278(0x8) UNKNOWN PROPERTY
		UFunction* UberGraphFunction; // 0x280(0x8)
		TMap<FName, FGuid> CookedPropertyGuids; // 0x288(0x50)
		TMap<FName, FBlueprintCookedComponentInstancingData> CookedComponentInstancingData; // 0x2D8(0x50)
		unsigned char UnknownData04_7[0x38]; // 0x328(0x38) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintGeneratedClass");
			return ret;
		}
	};


	// Class Engine.CameraActor
	// Inherited from AActor -> UObject
	// Size: 0x720 (0x9B0 - 0x290)
	class ACameraActor : public AActor	
	{
	public:
		TEnumAsByte<EAutoReceiveInput> AutoActivateForPlayer; // 0x290(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x291(0x7) UNKNOWN PROPERTY
		UCameraComponent* CameraComponent; // 0x298(0x8)
		USceneComponent* SceneComponent; // 0x2A0(0x8)
		bool bConstrainAspectRatio : 1; // 0x2A8:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x2A9(0x3) UNKNOWN PROPERTY
		float AspectRatio; // 0x2AC(0x4)
		float FOVAngle; // 0x2B0(0x4)
		float PostProcessBlendWeight; // 0x2B4(0x4)
		unsigned char UnknownData02_6[0x8]; // 0x2B8(0x8) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x2C0(0x6F0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraActor");
			return ret;
		}

		int32_t GetAutoActivatePlayerIndex(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45BC90(relative to base address)
	};


	// Class Engine.CameraComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x7B0 (0x9D0 - 0x220)
	class UCameraComponent : public USceneComponent	
	{
	public:
		float FieldOfView; // 0x220(0x4)
		float FirstPersonFieldOfView; // 0x224(0x4)
		float FirstPersonScale; // 0x228(0x4)
		float OrthoWidth; // 0x22C(0x4)
		bool bAutoCalculateOrthoPlanes; // 0x230(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x231(0x3) UNKNOWN PROPERTY
		float AutoPlaneShift; // 0x234(0x4)
		float OrthoNearClipPlane; // 0x238(0x4)
		float OrthoFarClipPlane; // 0x23C(0x4)
		bool bUpdateOrthoPlanes; // 0x240(0x1)
		bool bUseCameraHeightAsViewTarget; // 0x241(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x242(0x2) UNKNOWN PROPERTY
		float AspectRatio; // 0x244(0x4)
		TEnumAsByte<EAspectRatioAxisConstraint> AspectRatioAxisConstraint; // 0x248(0x1)
		bool bConstrainAspectRatio : 1; // 0x249:0(0x1)
		bool bOverrideAspectRatioAxisConstraint : 1; // 0x249:1(0x1)
		bool bUseFieldOfViewForLOD : 1; // 0x249:2(0x1)
		bool bLockToHmd : 1; // 0x249:3(0x1)
		bool bUsePawnControlRotation : 1; // 0x249:4(0x1)
		bool bEnableFirstPersonFieldOfView : 1; // 0x249:5(0x1)
		bool bEnableFirstPersonScale : 1; // 0x249:6(0x1)
		TEnumAsByte<ECameraProjectionMode> ProjectionMode; // 0x24A(0x1)
		unsigned char UnknownData02_6[0x65]; // 0x24B(0x65) UNKNOWN PROPERTY
		float PostProcessBlendWeight; // 0x2B0(0x4)
		unsigned char UnknownData03_6[0x2C]; // 0x2B4(0x2C) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x2E0(0x6F0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraComponent");
			return ret;
		}

		void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461B8C(relative to base address)
		void SetUseCameraHeightAsViewTarget(bool bInUseCameraHeightAsViewTarget); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461B0C(relative to base address)
		void SetUpdateOrthoPlanes(bool bInUpdateOrthoPlanes); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461A8C(relative to base address)
		void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461484(relative to base address)
		void SetPostProcessBlendWeight(float InPostProcessBlendWeight); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461384(relative to base address)
		void SetOrthoWidth(float InOrthoWidth); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461304(relative to base address)
		void SetOrthoNearClipPlane(float InOrthoNearClipPlane); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461284(relative to base address)
		void SetOrthoFarClipPlane(float InOrthoFarClipPlane); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461204(relative to base address)
		void SetFirstPersonScale(float InFirstPersonScale); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C460BA4(relative to base address)
		void SetFirstPersonFieldOfView(float InFirstPersonFieldOfView); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C460B20(relative to base address)
		void SetFieldOfView(float InFieldOfView); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C2FD384(relative to base address)
		void SetEnableFirstPersonScale(bool bInEnableFirstPersonScale); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4609F4(relative to base address)
		void SetEnableFirstPersonFieldOfView(bool bInEnableFirstPersonFieldOfView); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C460968(relative to base address)
		void SetConstraintAspectRatio(bool bInConstrainAspectRatio); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4608E0(relative to base address)
		void SetAutoPlaneShift(float InAutoPlaneShift); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C460860(relative to base address)
		void SetAutoCalculateOrthoPlanes(bool bAutoCalculate); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4607E0(relative to base address)
		void SetAspectRatioAxisConstraint(TEnumAsByte<EAspectRatioAxisConstraint> InAspectRatioAxisConstraint); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C460764(relative to base address)
		void SetAspectRatio(float InAspectRatio); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4606E4(relative to base address)
		void RemoveBlendable(TScriptInterface<Class> InBlendableObject); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C45D4B0(relative to base address)
		void OnCameraMeshHiddenChanged(); // Flags: Final|RequiredAPI|Native|Protected|BlueprintCallable, Memory Exec: 0x7FF74921B8F8(relative to base address)
		void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45BD10(relative to base address)
		void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4590C8(relative to base address)
	};


	// Class Engine.AudioEngineSubsystem
	// Inherited from UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UAudioEngineSubsystem : public UDynamicSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.SoundBase
	// Inherited from UObject
	// Size: 0x140 (0x168 - 0x28)
	class USoundBase : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		USoundClass* SoundClassObject; // 0x30(0x8)
		bool bDebug : 1; // 0x38:0(0x1)
		bool bOverrideConcurrency : 1; // 0x38:1(0x1)
		bool bEnableBusSends : 1; // 0x38:2(0x1)
		bool bEnableBaseSubmix : 1; // 0x38:3(0x1)
		bool bEnableSubmixSends : 1; // 0x38:4(0x1)
		bool bHasDelayNode : 1; // 0x38:5(0x1)
		bool bHasConcatenatorNode : 1; // 0x38:6(0x1)
		bool bBypassVolumeScaleForPriority : 1; // 0x38:7(0x1)
		EVirtualizationMode VirtualizationMode; // 0x39(0x1)
		unsigned char UnknownData01_6[0x56]; // 0x3A(0x56) UNKNOWN PROPERTY
		TSet<USoundConcurrency*> ConcurrencySet; // 0x90(0x50)
		FSoundConcurrencySettings ConcurrencyOverrides; // 0xE0(0x20)
		float duration; // 0x100(0x4)
		float MaxDistance; // 0x104(0x4)
		float TotalSamples; // 0x108(0x4)
		float Priority; // 0x10C(0x4)
		USoundAttenuation* AttenuationSettings; // 0x110(0x8)
		USoundSubmixBase* SoundSubmixObject; // 0x118(0x8)
		TArray<FSoundSubmixSendInfo> SoundSubmixSends; // 0x120(0x10)
		USoundEffectSourcePresetChain* SourceEffectChain; // 0x130(0x8)
		TArray<FSoundSourceBusSendInfo> BusSends; // 0x138(0x10)
		TArray<FSoundSourceBusSendInfo> PreEffectBusSends; // 0x148(0x10)
		TArray<UAssetUserData*> AssetUserData; // 0x158(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundBase");
			return ret;
		}

		bool IsAttenuationSettingsEditable(); // Flags: Native|Public|Const, Memory Exec: 0x7FF74C870558(relative to base address)
	};


	// Class Engine.SoundWave
	// Inherited from USoundBase -> UObject
	// Size: 0x288 (0x3F0 - 0x168)
	class USoundWave : public USoundBase	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x168(0x10) UNKNOWN PROPERTY
		int32_t CompressionQuality; // 0x178(0x4)
		int32_t StreamingPriority; // 0x17C(0x4)
		ESoundwaveSampleRateSettings SampleRateQuality; // 0x180(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x181(0x1) UNKNOWN PROPERTY
		TEnumAsByte<ESoundGroup> SoundGroup; // 0x182(0x1)
		bool bLooping : 1; // 0x183:0(0x1)
		bool bStreaming : 1; // 0x183:1(0x1)
		bool bSeekableStreaming : 1; // 0x183:2(0x1)
		bool bUseBinkAudio : 1; // 0x183:3(0x1)
		ESoundAssetCompressionType SoundAssetCompressionType; // 0x184(0x1)
		unsigned char UnknownData02_6[0x13]; // 0x185(0x13) UNKNOWN PROPERTY
		FSoundModulationDefaultRoutingSettings ModulationSettings; // 0x198(0x168)
		TArray<float> FrequenciesToAnalyze; // 0x300(0x10)
		TArray<FSoundWaveSpectralTimeData> CookedSpectralTimeData; // 0x310(0x10)
		TArray<FSoundWaveEnvelopeTimeData> CookedEnvelopeTimeData; // 0x320(0x10)
		unsigned char UnknownData03_6[0x1C]; // 0x330(0x1C) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x34C:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit05 : 1; // 0x34C:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0x34C:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x34C:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x34C:4(0x1) UNKNOWN PROPERTY
		bool bMature : 1; // 0x34C:5(0x1)
		bool bManualWordWrap : 1; // 0x34C:6(0x1)
		bool bSingleLine : 1; // 0x34C:7(0x1)
		bool bIsAmbisonics : 1; // 0x34D:0(0x1)
		ESoundWaveLoadingBehavior LoadingBehavior; // 0x34E(0x1)
		unsigned char UnknownData09_6[0x1]; // 0x34F(0x1) UNKNOWN PROPERTY
		FString SpokenText; // 0x350(0x10)
		float SubtitlePriority; // 0x360(0x4)
		float Volume; // 0x364(0x4)
		float pitch; // 0x368(0x4)
		int32_t NumChannels; // 0x36C(0x4)
		int32_t SampleRate; // 0x370(0x4)
		unsigned char UnknownData10_6[0xC]; // 0x374(0xC) UNKNOWN PROPERTY
		TArray<FSubtitleCue> Subtitles; // 0x380(0x10)
		UCurveTable* Curves; // 0x390(0x8)
		UCurveTable* InternalCurves; // 0x398(0x8)
		unsigned char UnknownData11_7[0x50]; // 0x3A0(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundWave");
			return ret;
		}

		void SetSoundAssetCompressionType(ESoundAssetCompressionType InSoundAssetCompressionType, bool bMarkDirty); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F5F0(relative to base address)
		ESoundAssetCompressionType GetSoundAssetCompressionType(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EE2C(relative to base address)
		TArray GetLoopRegions(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39ECFC(relative to base address)
		TArray GetCuePoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39E8F4(relative to base address)
	};


	// Class Engine.SoundWaveProcedural
	// Inherited from USoundWave -> USoundBase -> UObject
	// Size: 0x50 (0x440 - 0x3F0)
	class USoundWaveProcedural : public USoundWave	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x3F0(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundWaveProcedural");
			return ret;
		}
	};


	// Class Engine.SoundEffectPreset
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class USoundEffectPreset : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x40]; // 0x28(0x40) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectPreset");
			return ret;
		}
	};


	// Class Engine.SoundEffectSubmixPreset
	// Inherited from USoundEffectPreset -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class USoundEffectSubmixPreset : public USoundEffectPreset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectSubmixPreset");
			return ret;
		}
	};


	// Class Engine.Texture
	// Inherited from UStreamableRenderAsset -> UObject
	// Size: 0x68 (0x130 - 0xC8)
	class UTexture : public UStreamableRenderAsset	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0xC8(0x10) UNKNOWN PROPERTY
		FGuid LightingGuid; // 0xD8(0x10)
		int32_t LevelIndex; // 0xE8(0x4)
		int32_t LODBias; // 0xEC(0x4)
		TEnumAsByte<TextureCompressionSettings> CompressionSettings; // 0xF0(0x1)
		TEnumAsByte<TextureFilter> Filter; // 0xF1(0x1)
		ETextureMipLoadOptions MipLoadOptions; // 0xF2(0x1)
		TEnumAsByte<TextureCookPlatformTilingSettings> CookPlatformTilingSettings; // 0xF3(0x1)
		bool bOodlePreserveExtremes; // 0xF4(0x1)
		TEnumAsByte<TextureGroup> LODGroup; // 0xF5(0x1)
		unsigned char UnknownData01_6[0x2]; // 0xF6(0x2) UNKNOWN PROPERTY
		FPerPlatformFloat Downscale; // 0xF8(0x4)
		ETextureDownscaleOptions DownscaleOptions; // 0xFC(0x1)
		ETextureAvailability Availability; // 0xFD(0x1)
		bool SRGB : 1; // 0xFE:0(0x1)
		bool bNoTiling : 1; // 0xFE:1(0x1)
		bool VirtualTextureStreaming : 1; // 0xFE:2(0x1)
		bool CompressionYCoCg : 1; // 0xFE:3(0x1)
		bool bNotOfflineProcessed : 1; // 0xFE:4(0x1)
		bool bAsyncResourceReleaseHasBeenStarted : 1; // 0xFE:5(0x1)
		unsigned char UnknownData02_5[0x1]; // 0xFF(0x1) UNKNOWN PROPERTY
		TArray<UAssetUserData*> AssetUserData; // 0x100(0x10)
		unsigned char UnknownData03_7[0x20]; // 0x110(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture");
			return ret;
		}

		bool ComputeTextureSourceChannelMinMax(FLinearColor& OutColorMin, FLinearColor& OutColorMax); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const, Memory Exec: 0x7FF74C89EC1C(relative to base address)
		void Blueprint_GetTextureSourceDiskAndMemorySize(int64_t& OutDiskSize, int64_t& OutMemorySize); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|Const, Memory Exec: 0x7FF74C89EB44(relative to base address)
		int64_t Blueprint_GetMemorySize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C89EAD8(relative to base address)
		bool AreDownscalePropertiesEditable(); // Flags: Native|Public|Const, Memory Exec: 0x7FF74C5A4E20(relative to base address)
	};


	// Class Engine.ActiveSoundUpdateInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActiveSoundUpdateInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActiveSoundUpdateInterface");
			return ret;
		}
	};


	// Class Engine.Channel
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UChannel : public UObject	
	{
	public:
		UNetConnection* Connection; // 0x28(0x8)
		unsigned char UnknownData00_7[0x38]; // 0x30(0x38) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Channel");
			return ret;
		}
	};


	// Class Engine.ActorChannel
	// Inherited from UChannel -> UObject
	// Size: 0x230 (0x298 - 0x68)
	class UActorChannel : public UChannel	
	{
	public:
		AActor* Actor; // 0x68(0x8)
		unsigned char UnknownData00_6[0xF0]; // 0x70(0xF0) UNKNOWN PROPERTY
		TArray<UObject*> CreateSubObjects; // 0x160(0x10)
		unsigned char UnknownData01_7[0x128]; // 0x170(0x128) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorChannel");
			return ret;
		}
	};


	// Class Engine.ActorInstanceManagerInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorInstanceManagerInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorInstanceManagerInterface");
			return ret;
		}
	};


	// Class Engine.AnimationAssetExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationAssetExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationAssetExtensions");
			return ret;
		}
	};


	// Class Engine.AnimBlueprintClassSubsystem_PropertyAccess
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimBlueprintClassSubsystem_PropertyAccess : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprintClassSubsystem_PropertyAccess");
			return ret;
		}
	};


	// Class Engine.Interface_AnimCurveMetaData
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_AnimCurveMetaData : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_AnimCurveMetaData");
			return ret;
		}
	};


	// Class Engine.AnimCurveMetaData
	// Inherited from UAssetUserData -> UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UAnimCurveMetaData : public UAssetUserData	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		TMap<FName, FCurveMetaData> CurveMetaData; // 0x30(0x50)
		unsigned char UnknownData01_7[0x20]; // 0x80(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveMetaData");
			return ret;
		}
	};


	// Class Engine.AnimationDataModelNotifiesExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationDataModelNotifiesExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationDataModelNotifiesExtensions");
			return ret;
		}
	};


	// Class Engine.AnimLayerInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimLayerInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimLayerInterface");
			return ret;
		}
	};


	// Class Engine.AnimationAsset
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UAnimationAsset : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		USkeleton* Skeleton; // 0x38(0x8)
		unsigned char UnknownData01_6[0x20]; // 0x40(0x20) UNKNOWN PROPERTY
		TArray<UAnimMetaData*> MetaData; // 0x60(0x10)
		TArray<UAssetUserData*> AssetUserData; // 0x70(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationAsset");
			return ret;
		}

		float GetPlayLength(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3D5014(relative to base address)
		UAnimMetaData FindMetaDataByClass(UClass* MetaDataClass); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3D4EEC(relative to base address)
	};


	// Class Engine.AnimSequenceBase
	// Inherited from UAnimationAsset -> UObject
	// Size: 0x30 (0xB0 - 0x80)
	class UAnimSequenceBase : public UAnimationAsset	
	{
	public:
		TArray<FAnimNotifyEvent> Notifies; // 0x80(0x10)
		float SequenceLength; // 0x90(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x94(0x4) UNKNOWN PROPERTY
		FRawCurveTracks RawCurveData; // 0x98(0x10)
		float RateScale; // 0xA8(0x4)
		bool bLoop; // 0xAC(0x1)
		unsigned char UnknownData01_7[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSequenceBase");
			return ret;
		}
	};


	// Class Engine.RawAnimSequenceTrackExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class URawAnimSequenceTrackExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RawAnimSequenceTrackExtensions");
			return ret;
		}

		TArray GetScaleKeys(FRawAnimSequenceTrack& Track); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C36B290(relative to base address)
		TArray GetRotationalKeys(FRawAnimSequenceTrack& Track); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C36B1A0(relative to base address)
		TArray GetPositionalKeys(FRawAnimSequenceTrack& Track); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C36B0B0(relative to base address)
	};


	// Class Engine.AssetExportTask
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UAssetExportTask : public UObject	
	{
	public:
		UObject* Object; // 0x28(0x8)
		UExporter* Exporter; // 0x30(0x8)
		FString Filename; // 0x38(0x10)
		bool bSelected; // 0x48(0x1)
		bool bReplaceIdentical; // 0x49(0x1)
		bool bPrompt; // 0x4A(0x1)
		bool bAutomated; // 0x4B(0x1)
		bool bUseFileArchive; // 0x4C(0x1)
		bool bWriteEmptyFiles; // 0x4D(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x4E(0x2) UNKNOWN PROPERTY
		TArray<UObject*> IgnoreObjectList; // 0x50(0x10)
		UObject* Options; // 0x60(0x8)
		TArray<FString> Errors; // 0x68(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetExportTask");
			return ret;
		}
	};


	// Class Engine.AssetManagerSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0xC8 (0xF8 - 0x30)
	class UAssetManagerSettings : public UDeveloperSettings	
	{
	public:
		TArray<FPrimaryAssetTypeInfo> PrimaryAssetTypesToScan; // 0x30(0x10)
		TArray<FDirectoryPath> DirectoriesToExclude; // 0x40(0x10)
		TArray<FPrimaryAssetRulesOverride> PrimaryAssetRules; // 0x50(0x10)
		TArray<FPrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules; // 0x60(0x10)
		bool bOnlyCookProductionAssets; // 0x70(0x1)
		bool bShouldManagerDetermineTypeAndName; // 0x71(0x1)
		bool bShouldGuessTypeAndNameInEditor; // 0x72(0x1)
		bool bShouldAcquireMissingChunksOnLoad; // 0x73(0x1)
		bool bShouldWarnAboutInvalidAssets; // 0x74(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x75(0x3) UNKNOWN PROPERTY
		TArray<FAssetManagerRedirect> PrimaryAssetIdRedirects; // 0x78(0x10)
		TArray<FAssetManagerRedirect> PrimaryAssetTypeRedirects; // 0x88(0x10)
		TArray<FAssetManagerRedirect> AssetPathRedirects; // 0x98(0x10)
		TSet<FName> MetaDataTagsForAssetRegistry; // 0xA8(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetManagerSettings");
			return ret;
		}
	};


	// Class Engine.AsyncLoadingTests_Shared
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UAsyncLoadingTests_Shared : public UObject	
	{
	public:
		TWeakObjectPtr<UObject*> SoftReference; // 0x28(0x20)
		UObject* HardReference; // 0x48(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncLoadingTests_Shared");
			return ret;
		}
	};


	// Class Engine.AsyncPhysicsData
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAsyncPhysicsData : public UObject	
	{
	public:
		int32_t ServerFrame; // 0x28(0x4)
		int32_t ReplicationRedundancy; // 0x2C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncPhysicsData");
			return ret;
		}
	};


	// Class Engine.AudioPanelWidgetInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAudioPanelWidgetInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioPanelWidgetInterface");
			return ret;
		}

		FName GetIconBrushName(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		FText GetEditorName(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.AutoRTFMTestActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAutoRTFMTestActor : public AActor	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestActor");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestAnotherActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAutoRTFMTestAnotherActor : public AActor	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestAnotherActor");
			return ret;
		}
	};


	// Class Engine.BodySetup
	// Inherited from UBodySetupCore -> UObject
	// Size: 0x2C0 (0x2F0 - 0x30)
	class UBodySetup : public UBodySetupCore	
	{
	public:
		FKAggregateGeom AggGeom; // 0x30(0x80)
		bool bAlwaysFullAnimWeight : 1; // 0xB0:0(0x1)
		bool bConsiderForBounds : 1; // 0xB0:1(0x1)
		bool bMeshCollideAll : 1; // 0xB0:2(0x1)
		bool bDoubleSidedGeometry : 1; // 0xB0:3(0x1)
		bool bGenerateNonMirroredCollision : 1; // 0xB0:4(0x1)
		bool bSharedCookedData : 1; // 0xB0:5(0x1)
		bool bGenerateMirroredCollision : 1; // 0xB0:6(0x1)
		bool bSupportUVsAndFaceRemap : 1; // 0xB0:7(0x1)
		unsigned char UnknownBit00 : 1; // 0xB1:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit01 : 1; // 0xB1:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0xB1:2(0x1) UNKNOWN PROPERTY
		bool bNeverNeedsCookedCollisionData : 1; // 0xB1:3(0x1)
		unsigned char UnknownData03_5[0x6]; // 0xB2(0x6) UNKNOWN PROPERTY
		UPhysicalMaterial* PhysMaterial; // 0xB8(0x8)
		FWalkableSlopeOverride WalkableSlopeOverride; // 0xC0(0x10)
		unsigned char UnknownData04_6[0x70]; // 0xD0(0x70) UNKNOWN PROPERTY
		FBodyInstance DefaultInstance; // 0x140(0x170)
		unsigned char UnknownData05_6[0x8]; // 0x2B0(0x8) UNKNOWN PROPERTY
		FVector BuildScale3D; // 0x2B8(0x18)
		unsigned char UnknownData06_7[0x20]; // 0x2D0(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BodySetup");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestBodySetup
	// Inherited from UBodySetup -> UBodySetupCore -> UObject
	// Size: 0x8 (0x2F8 - 0x2F0)
	class UAutoRTFMTestBodySetup : public UBodySetup	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x2F0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestBodySetup");
			return ret;
		}
	};


	// Class Engine.ChildActorComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x50 (0x270 - 0x220)
	class UChildActorComponent : public USceneComponent	
	{
	public:
		UClass* ChildActorClass; // 0x220(0x8)
		AActor* ChildActor; // 0x228(0x8)
		AActor* ChildActorTemplate; // 0x230(0x8)
		unsigned char UnknownData00_6[0x18]; // 0x238(0x18) UNKNOWN PROPERTY
		bool bChildActorIsTransient : 1; // 0x250:0(0x1)
		unsigned char UnknownData01_7[0x1F]; // 0x251(0x1F) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChildActorComponent");
			return ret;
		}

		void SetChildActorClass(UClass* InClass); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747E1D688(relative to base address)
		void OnRep_ChildActor(); // Flags: Final|Native|Private, Memory Exec: 0x7FF749BC6FB0(relative to base address)
		void OnChildActorDestroyed(AActor* Actor); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF747E1E480(relative to base address)
	};


	// Class Engine.AutoRTFMTestChildActorComponent
	// Inherited from UChildActorComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x270 - 0x270)
	class UAutoRTFMTestChildActorComponent : public UChildActorComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestChildActorComponent");
			return ret;
		}
	};


	// Class Engine.Level
	// Inherited from UObject
	// Size: 0x2F0 (0x318 - 0x28)
	class ULevel : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x98]; // 0x28(0x98) UNKNOWN PROPERTY
		UWorld* OwningWorld; // 0xC0(0x8)
		UModel* Model; // 0xC8(0x8)
		TArray<UModelComponent*> ModelComponents; // 0xD0(0x10)
		ULevelActorContainer* ActorCluster; // 0xE0(0x8)
		int32_t NumTextureStreamingUnbuiltComponents; // 0xE8(0x4)
		int32_t NumTextureStreamingDirtyResources; // 0xEC(0x4)
		ALevelScriptActor* LevelScriptActor; // 0xF0(0x8)
		ANavigationObjectBase* NavListStart; // 0xF8(0x8)
		ANavigationObjectBase* NavListEnd; // 0x100(0x8)
		TArray<UNavigationDataChunk*> NavDataChunks; // 0x108(0x10)
		float LightmapTotalSize; // 0x118(0x4)
		float ShadowmapTotalSize; // 0x11C(0x4)
		TArray<FVector> StaticNavigableGeometry; // 0x120(0x10)
		TArray<FGuid> StreamingTextureGuids; // 0x130(0x10)
		TArray<FName> StreamingTextures; // 0x140(0x10)
		uint32_t PackedTextureStreamingQualityLevelFeatureLevel; // 0x150(0x4)
		unsigned char UnknownData01_6[0xBC]; // 0x154(0xBC) UNKNOWN PROPERTY
		FGuid LevelBuildDataId; // 0x210(0x10)
		UMapBuildDataRegistry* MapBuildData; // 0x220(0x8)
		FIntVector LightBuildLevelOffset; // 0x228(0xC)
		unsigned char UnknownData02_6[0xC]; // 0x234(0xC) UNKNOWN PROPERTY
		bool bIsLightingScenario : 1; // 0x240:0(0x1)
		unsigned char UnknownBit03 : 1; // 0x240:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x240:2(0x1) UNKNOWN PROPERTY
		bool bTextureStreamingRotationChanged : 1; // 0x240:3(0x1)
		bool bStaticComponentsRegisteredInStreamingManager : 1; // 0x240:4(0x1)
		bool bIsVisible : 1; // 0x240:5(0x1)
		unsigned char UnknownData05_3[0x1]; // 0x241(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0x242:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x242:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x242:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x242:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit10 : 1; // 0x242:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit11 : 1; // 0x242:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit12 : 1; // 0x242:6(0x1) UNKNOWN PROPERTY
		bool bIsPartitioned : 1; // 0x242:7(0x1)
		unsigned char UnknownData13_5[0x65]; // 0x243(0x65) UNKNOWN PROPERTY
		AWorldSettings* WorldSettings; // 0x2A8(0x8)
		AWorldDataLayers* WorldDataLayers; // 0x2B0(0x8)
		TWeakObjectPtr<UWorldPartitionRuntimeCell*> WorldPartitionRuntimeCell; // 0x2B8(0x20)
		unsigned char UnknownData14_6[0x8]; // 0x2D8(0x8) UNKNOWN PROPERTY
		TArray<UAssetUserData*> AssetUserData; // 0x2E0(0x10)
		unsigned char UnknownData15_6[0x10]; // 0x2F0(0x10) UNKNOWN PROPERTY
		TArray<FReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors; // 0x300(0x10)
		unsigned char UnknownData16_7[0x8]; // 0x310(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Level");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestLevel
	// Inherited from ULevel -> UObject
	// Size: 0x8 (0x320 - 0x318)
	class UAutoRTFMTestLevel : public ULevel	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x318(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestLevel");
			return ret;
		}
	};


	// Class Engine.AutoRTFMTestObject
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAutoRTFMTestObject : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestObject");
			return ret;
		}

		void OnComponentPhysicsStateChanged(UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C36C7F0(relative to base address)
	};


	// Class Engine.AutoRTFMTestPrimitiveComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UAutoRTFMTestPrimitiveComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData00_1[0x18]; // 0x4C8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoRTFMTestPrimitiveComponent");
			return ret;
		}
	};


	// Class Engine.BlendableInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlendableInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendableInterface");
			return ret;
		}
	};


	// Class Engine.AnalysisProperties
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnalysisProperties : public UObject	
	{
	public:
		FString Function; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnalysisProperties");
			return ret;
		}
	};


	// Class Engine.BlendSpace
	// Inherited from UAnimationAsset -> UObject
	// Size: 0x140 (0x1C0 - 0x80)
	class UBlendSpace : public UAnimationAsset	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x80(0x8) UNKNOWN PROPERTY
		bool bContainsRotationOffsetMeshSpaceSamples; // 0x88(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x89(0x3) UNKNOWN PROPERTY
		FInterpolationParameter InterpolationParam; // 0x8C(0x30)
		float TargetWeightInterpolationSpeedPerSec; // 0xBC(0x4)
		bool bTargetWeightInterpolationEaseInOut; // 0xC0(0x1)
		bool bAllowMeshSpaceBlending; // 0xC1(0x1)
		bool bLoop; // 0xC2(0x1)
		unsigned char UnknownData02_6[0x1]; // 0xC3(0x1) UNKNOWN PROPERTY
		float AnimLength; // 0xC4(0x4)
		TEnumAsByte<ENotifyTriggerMode> NotifyTriggerMode; // 0xC8(0x1)
		bool bInterpolateUsingGrid; // 0xC9(0x1)
		EPreferredTriangulationDirection PreferredTriangulationDirection; // 0xCA(0x1)
		EBlendSpacePerBoneBlendMode PerBoneBlendMode; // 0xCB(0x1)
		unsigned char UnknownData03_6[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY
		TArray<FPerBoneInterpolation> ManualPerBoneOverrides; // 0xD0(0x10)
		FBlendSpaceBlendProfile PerBoneBlendProfile; // 0xE0(0x10)
		unsigned char UnknownData04_6[0x10]; // 0xF0(0x10) UNKNOWN PROPERTY
		int32_t SampleIndexWithMarkers; // 0x100(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x104(0x4) UNKNOWN PROPERTY
		TArray<FBlendSample> SampleData; // 0x108(0x10)
		TArray<FEditorElement> GridSamples; // 0x118(0x10)
		FBlendSpaceData BlendSpaceData; // 0x128(0x20)
		FBlendParameter BlendParameters; // 0x148(0x60)
		TEnumAsByte<EBlendSpaceAxis> AxisToScaleAnimation; // 0x1A8(0x1)
		unsigned char UnknownData06_6[0x7]; // 0x1A9(0x7) UNKNOWN PROPERTY
		TArray<int32_t> DimensionIndices; // 0x1B0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendSpace");
			return ret;
		}
	};


	// Class Engine.Breakpoint
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBreakpoint : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Breakpoint");
			return ret;
		}
	};


	// Class Engine.BlueprintExtension
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintExtension : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintExtension");
			return ret;
		}
	};


	// Class Engine.BookmarkBase
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBookmarkBase : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BookmarkBase");
			return ret;
		}
	};


	// Class Engine.BookMark2D
	// Inherited from UBookmarkBase -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UBookMark2D : public UBookmarkBase	
	{
	public:
		float Zoom2D; // 0x28(0x4)
		FIntPoint Location; // 0x2C(0x8)
		unsigned char UnknownData00_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BookMark2D");
			return ret;
		}
	};


	// Class Engine.ReflectionCapture
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AReflectionCapture : public AActor	
	{
	public:
		UReflectionCaptureComponent* CaptureComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReflectionCapture");
			return ret;
		}
	};


	// Class Engine.BoxReflectionCapture
	// Inherited from AReflectionCapture -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ABoxReflectionCapture : public AReflectionCapture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoxReflectionCapture");
			return ret;
		}
	};


	// Class Engine.ReflectionCaptureComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x70 (0x290 - 0x220)
	class UReflectionCaptureComponent : public USceneComponent	
	{
	public:
		UBillboardComponent* CaptureOffsetComponent; // 0x220(0x8)
		EReflectionSourceType ReflectionSourceType; // 0x228(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x229(0x7) UNKNOWN PROPERTY
		UTextureCube* Cubemap; // 0x230(0x8)
		float SourceCubemapAngle; // 0x238(0x4)
		float Brightness; // 0x23C(0x4)
		FVector CaptureOffset; // 0x240(0x18)
		FGuid MapBuildDataId; // 0x258(0x10)
		unsigned char UnknownData01_7[0x20]; // 0x268(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.BoxReflectionCaptureComponent
	// Inherited from UReflectionCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x2A0 - 0x288)
	class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent	
	{
	public:
		float BoxTransitionDistance; // 0x288(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x28C(0x4) UNKNOWN PROPERTY
		UBoxComponent* PreviewInfluenceBox; // 0x290(0x8)
		UBoxComponent* PreviewCaptureBox; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoxReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.BuiltInAttributesExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBuiltInAttributesExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BuiltInAttributesExtensions");
			return ret;
		}
	};


	// Class Engine.ChaosBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UChaosBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChaosBlueprintLibrary");
			return ret;
		}

		UChaosEventRelay GetEventRelayFromContext(UObject* ContextObject); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C36C74C(relative to base address)
	};


	// Class Engine.ChaosEventRelay
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UChaosEventRelay : public UObject	
	{
	public:
		FMulticastInlineDelegate OnCollisionEvent; // 0x28(0x10)
		FMulticastInlineDelegate OnBreakEvent; // 0x38(0x10)
		FMulticastInlineDelegate OnRemovalEvent; // 0x48(0x10)
		FMulticastInlineDelegate OnCrumblingEvent; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChaosEventRelay");
			return ret;
		}
	};


	// Class Engine.Player
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UPlayer : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		APlayerController* PlayerController; // 0x30(0x8)
		int32_t CurrentNetSpeed; // 0x38(0x4)
		int32_t ConfiguredInternetSpeed; // 0x3C(0x4)
		int32_t ConfiguredLanSpeed; // 0x40(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Player");
			return ret;
		}
	};


	// Class Engine.NetConnection
	// Inherited from UPlayer -> UObject
	// Size: 0x1DC8 (0x1E10 - 0x48)
	class UNetConnection : public UPlayer	
	{
	public:
		TArray<UChildConnection*> Children; // 0x48(0x10)
		UNetDriver* Driver; // 0x58(0x8)
		UClass* PackageMapClass; // 0x60(0x8)
		UPackageMap* PackageMap; // 0x68(0x8)
		TArray<UChannel*> OpenChannels; // 0x70(0x10)
		TArray<AActor*> SentTemporaries; // 0x80(0x10)
		AActor* ViewTarget; // 0x90(0x8)
		AActor* OwningActor; // 0x98(0x8)
		int32_t MaxPacket; // 0xA0(0x4)
		bool InternalAck : 1; // 0xA4:0(0x1)
		unsigned char UnknownData00_5[0xBB]; // 0xA5(0xBB) UNKNOWN PROPERTY
		FUniqueNetIdRepl PlayerId; // 0x160(0x30)
		unsigned char UnknownData01_6[0x48]; // 0x190(0x48) UNKNOWN PROPERTY
		double LastReceiveTime; // 0x1D8(0x8)
		unsigned char UnknownData02_6[0x11E0]; // 0x1E0(0x11E0) UNKNOWN PROPERTY
		int32_t DefaultMaxChannelSize; // 0x13C0(0x4)
		unsigned char UnknownData03_6[0x334]; // 0x13C4(0x334) UNKNOWN PROPERTY
		TArray<UChannel*> ChannelsToTick; // 0x16F8(0x10)
		unsigned char UnknownData04_7[0x708]; // 0x1708(0x708) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetConnection");
			return ret;
		}
	};


	// Class Engine.ChildConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0x8 (0x1E18 - 0x1E10)
	class UChildConnection : public UNetConnection	
	{
	public:
		UNetConnection* Parent; // 0x1E10(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ChildConnection");
			return ret;
		}
	};


	// Class Engine.PlatformInterfaceBase
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UPlatformInterfaceBase : public UObject	
	{
	public:
		TArray<FDelegateArray> AllDelegates; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformInterfaceBase");
			return ret;
		}
	};


	// Class Engine.CloudStorageBase
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UCloudStorageBase : public UPlatformInterfaceBase	
	{
	public:
		TArray<FString> LocalCloudFiles; // 0x38(0x10)
		bool bSuppressDelegateCalls : 1; // 0x48:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CloudStorageBase");
			return ret;
		}
	};


	// Class Engine.ContentBundleTypeFactory
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UContentBundleTypeFactory : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleTypeFactory");
			return ret;
		}
	};


	// Class Engine.ControlChannel
	// Inherited from UChannel -> UObject
	// Size: 0x18 (0x80 - 0x68)
	class UControlChannel : public UChannel	
	{
	public:
		unsigned char UnknownData00_1[0x18]; // 0x68(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ControlChannel");
			return ret;
		}
	};


	// Class Engine.WorldPartition
	// Inherited from UObject
	// Size: 0xD8 (0x100 - 0x28)
	class UWorldPartition : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		UWorldPartitionRuntimeHash* RuntimeHash; // 0x30(0x8)
		bool bEnableStreaming; // 0x38(0x1)
		EWorldPartitionServerStreamingMode ServerStreamingMode; // 0x39(0x1)
		EWorldPartitionServerStreamingOutMode ServerStreamingOutMode; // 0x3A(0x1)
		EWorldPartitionDataLayersLogicOperator DataLayersLogicOperator; // 0x3B(0x1)
		bool bDisableContentBundles : 1; // 0x3C:0(0x1)
		unsigned char UnknownData01_5[0x93]; // 0x3D(0x93) UNKNOWN PROPERTY
		UDataLayerManager* DataLayerManager; // 0xD0(0x8)
		UExternalDataLayerManager* ExternalDataLayerManager; // 0xD8(0x8)
		UWorldPartitionStreamingPolicy* StreamingPolicy; // 0xE0(0x8)
		unsigned char UnknownData02_7[0x18]; // 0xE8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartition");
			return ret;
		}
	};


	// Class Engine.DataLayerManager
	// Inherited from UObject
	// Size: 0xB0 (0xD8 - 0x28)
	class UDataLayerManager : public UObject	
	{
	public:
		FMulticastInlineDelegate OnDataLayerInstanceRuntimeStateChanged; // 0x28(0x10)
		TSet<UObject*> ReferencedObjects; // 0x38(0x50)
		unsigned char UnknownData00_7[0x50]; // 0x88(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerManager");
			return ret;
		}

		bool SetDataLayerRuntimeState(UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C36E364(relative to base address)
		bool SetDataLayerInstanceRuntimeState(UDataLayerInstance* InDataLayerInstance, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C36E268(relative to base address)
		TArray GetDataLayerInstances(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C36E1C8(relative to base address)
		EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(UDataLayerInstance* InDataLayerInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7499BD940(relative to base address)
		UDataLayerInstance GetDataLayerInstanceFromName(FName& InDataLayerInstanceName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C36E130(relative to base address)
		UDataLayerInstance GetDataLayerInstanceFromAsset(UDataLayerAsset* InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749555628(relative to base address)
		EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(UDataLayerInstance* InDataLayerInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C36E0B0(relative to base address)
	};


	// Class Engine.DebugGarbageCollectionGraph
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UDebugGarbageCollectionGraph : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x20]; // 0x28(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugGarbageCollectionGraph");
			return ret;
		}
	};


	// Class Engine.DeletedObjectPlaceholder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDeletedObjectPlaceholder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeletedObjectPlaceholder");
			return ret;
		}
	};


	// Class Engine.DemoNetConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0x50 (0x1E60 - 0x1E10)
	class UDemoNetConnection : public UNetConnection	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x1E10(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DemoNetConnection");
			return ret;
		}
	};


	// Class Engine.PendingNetGame
	// Inherited from UObject
	// Size: 0x98 (0xC0 - 0x28)
	class UPendingNetGame : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		UNetDriver* NetDriver; // 0x30(0x8)
		UDemoNetDriver* DemoNetDriver; // 0x38(0x8)
		unsigned char UnknownData01_7[0x80]; // 0x40(0x80) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PendingNetGame");
			return ret;
		}
	};


	// Class Engine.DemoPendingNetGame
	// Inherited from UPendingNetGame -> UObject
	// Size: 0x0 (0xC0 - 0xC0)
	class UDemoPendingNetGame : public UPendingNetGame	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DemoPendingNetGame");
			return ret;
		}
	};


	// Class Engine.DeviceProfileFragment
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UDeviceProfileFragment : public UObject	
	{
	public:
		TArray<FString> CVars; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeviceProfileFragment");
			return ret;
		}
	};


	// Class Engine.DialogueSoundWaveProxy
	// Inherited from USoundBase -> UObject
	// Size: 0x18 (0x180 - 0x168)
	class UDialogueSoundWaveProxy : public USoundBase	
	{
	public:
		unsigned char UnknownData00_1[0x18]; // 0x168(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DialogueSoundWaveProxy");
			return ret;
		}
	};


	// Class Engine.Light
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ALight : public AActor	
	{
	public:
		ULightComponent* LightComponent; // 0x290(0x8)
		bool bEnabled : 1; // 0x298:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Light");
			return ret;
		}

		void ToggleEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6A0010(relative to base address)
		void SetLightFunctionScale(FVector NewLightFunctionScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C69FEEC(relative to base address)
		void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C69FE68(relative to base address)
		void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C69FDE4(relative to base address)
		void SetLightColor(FLinearColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C69FCCC(relative to base address)
		void SetEnabled(bool bSetEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C69FC48(relative to base address)
		void SetCastShadows(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C69FBC4(relative to base address)
		void SetBrightness(float NewBrightness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C69FB44(relative to base address)
		void SetAffectTranslucentLighting(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C69FAC0(relative to base address)
		void OnRep_bEnabled(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		bool IsEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C69F938(relative to base address)
		FLinearColor GetLightColor(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C69F90C(relative to base address)
		float GetBrightness(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C69F8E0(relative to base address)
	};


	// Class Engine.DirectionalLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x0 (0x2A0 - 0x2A0)
	class ADirectionalLight : public ALight	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DirectionalLight");
			return ret;
		}
	};


	// Class Engine.Distribution
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UDistribution : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Distribution");
			return ret;
		}
	};


	// Class Engine.DistributionFloat
	// Inherited from UDistribution -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UDistributionFloat : public UDistribution	
	{
	public:
		bool bCanBeBaked : 1; // 0x30:0(0x1)
		unsigned char UnknownBit00 : 1; // 0x30:1(0x1) UNKNOWN PROPERTY
		bool bBakedDataSuccesfully : 1; // 0x30:2(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloat");
			return ret;
		}
	};


	// Class Engine.DistributionFloatConstant
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UDistributionFloatConstant : public UDistributionFloat	
	{
	public:
		float Constant; // 0x38(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatConstant");
			return ret;
		}
	};


	// Class Engine.DistributionFloatConstantCurve
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UDistributionFloatConstantCurve : public UDistributionFloat	
	{
	public:
		FInterpCurveFloat ConstantCurve; // 0x38(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatConstantCurve");
			return ret;
		}
	};


	// Class Engine.DistributionFloatParameterBase
	// Inherited from UDistributionFloatConstant -> UDistributionFloat -> UDistribution -> UObject
	// Size: 0x18 (0x58 - 0x40)
	class UDistributionFloatParameterBase : public UDistributionFloatConstant	
	{
	public:
		FName ParameterName; // 0x40(0x4)
		float MinInput; // 0x44(0x4)
		float MaxInput; // 0x48(0x4)
		float MinOutput; // 0x4C(0x4)
		float MaxOutput; // 0x50(0x4)
		TEnumAsByte<DistributionParamMode> ParamMode; // 0x54(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x55(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatParameterBase");
			return ret;
		}
	};


	// Class Engine.DistributionFloatParticleParameter
	// Inherited from UDistributionFloatParameterBase -> UDistributionFloatConstant -> UDistributionFloat -> UDistribution -> UObject
	// Size: 0x0 (0x58 - 0x58)
	class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatParticleParameter");
			return ret;
		}
	};


	// Class Engine.DistributionFloatUniform
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UDistributionFloatUniform : public UDistributionFloat	
	{
	public:
		float Min; // 0x38(0x4)
		float Max; // 0x3C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatUniform");
			return ret;
		}
	};


	// Class Engine.DistributionFloatUniformCurve
	// Inherited from UDistributionFloat -> UDistribution -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UDistributionFloatUniformCurve : public UDistributionFloat	
	{
	public:
		FInterpCurveVector2D ConstantCurve; // 0x38(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionFloatUniformCurve");
			return ret;
		}
	};


	// Class Engine.DistributionVector
	// Inherited from UDistribution -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UDistributionVector : public UDistribution	
	{
	public:
		bool bCanBeBaked : 1; // 0x30:0(0x1)
		bool bIsDirty : 1; // 0x30:1(0x1)
		bool bBakedDataSuccesfully : 1; // 0x30:2(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVector");
			return ret;
		}
	};


	// Class Engine.DistributionVectorConstant
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x20 (0x58 - 0x38)
	class UDistributionVectorConstant : public UDistributionVector	
	{
	public:
		FVector Constant; // 0x38(0x18)
		bool bLockAxes : 1; // 0x50:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EDistributionVectorLockFlags> LockedAxes; // 0x54(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x55(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorConstant");
			return ret;
		}
	};


	// Class Engine.DistributionVectorConstantCurve
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x20 (0x58 - 0x38)
	class UDistributionVectorConstantCurve : public UDistributionVector	
	{
	public:
		FInterpCurveVector ConstantCurve; // 0x38(0x18)
		bool bLockAxes : 1; // 0x50:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EDistributionVectorLockFlags> LockedAxes; // 0x54(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x55(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorConstantCurve");
			return ret;
		}
	};


	// Class Engine.DistributionVectorParameterBase
	// Inherited from UDistributionVectorConstant -> UDistributionVector -> UDistribution -> UObject
	// Size: 0x70 (0xC8 - 0x58)
	class UDistributionVectorParameterBase : public UDistributionVectorConstant	
	{
	public:
		FName ParameterName; // 0x58(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY
		FVector MinInput; // 0x60(0x18)
		FVector MaxInput; // 0x78(0x18)
		FVector MinOutput; // 0x90(0x18)
		FVector MaxOutput; // 0xA8(0x18)
		TEnumAsByte<DistributionParamMode> ParamModes; // 0xC0(0x3)
		unsigned char UnknownData01_7[0x5]; // 0xC3(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorParameterBase");
			return ret;
		}
	};


	// Class Engine.DistributionVectorParticleParameter
	// Inherited from UDistributionVectorParameterBase -> UDistributionVectorConstant -> UDistributionVector -> UDistribution -> UObject
	// Size: 0x0 (0xC8 - 0xC8)
	class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorParticleParameter");
			return ret;
		}
	};


	// Class Engine.DistributionVectorUniform
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x40 (0x78 - 0x38)
	class UDistributionVectorUniform : public UDistributionVector	
	{
	public:
		FVector Max; // 0x38(0x18)
		FVector Min; // 0x50(0x18)
		bool bLockAxes : 1; // 0x68:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x69(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EDistributionVectorLockFlags> LockedAxes; // 0x6C(0x1)
		TEnumAsByte<EDistributionVectorMirrorFlags> MirrorFlags; // 0x6D(0x3)
		bool bUseExtremes : 1; // 0x70:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorUniform");
			return ret;
		}
	};


	// Class Engine.DistributionVectorUniformCurve
	// Inherited from UDistributionVector -> UDistribution -> UObject
	// Size: 0x28 (0x60 - 0x38)
	class UDistributionVectorUniformCurve : public UDistributionVector	
	{
	public:
		FInterpCurveTwoVectors ConstantCurve; // 0x38(0x18)
		bool bLockAxes1 : 1; // 0x50:0(0x1)
		bool bLockAxes2 : 1; // 0x50:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EDistributionVectorLockFlags> LockedAxes; // 0x54(0x2)
		TEnumAsByte<EDistributionVectorMirrorFlags> MirrorFlags; // 0x56(0x3)
		unsigned char UnknownData01_6[0x3]; // 0x59(0x3) UNKNOWN PROPERTY
		bool bUseExtremes : 1; // 0x5C:0(0x1)
		unsigned char UnknownData02_7[0x3]; // 0x5D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DistributionVectorUniformCurve");
			return ret;
		}
	};


	// Class Engine.GraphNodeContextMenuContext
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UGraphNodeContextMenuContext : public UObject	
	{
	public:
		UBlueprint* Blueprint; // 0x28(0x8)
		UEdGraph* Graph; // 0x30(0x8)
		UEdGraphNode* Node; // 0x38(0x8)
		unsigned char UnknownData00_6[0x8]; // 0x40(0x8) UNKNOWN PROPERTY
		bool bIsDebugging; // 0x48(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GraphNodeContextMenuContext");
			return ret;
		}
	};


	// Class Engine.EdGraphPin_Deprecated
	// Inherited from UObject
	// Size: 0xD8 (0x100 - 0x28)
	class UEdGraphPin_Deprecated : public UObject	
	{
	public:
		FString PinName; // 0x28(0x10)
		FString PinToolTip; // 0x38(0x10)
		TEnumAsByte<EEdGraphPinDirection> Direction; // 0x48(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x49(0x7) UNKNOWN PROPERTY
		FEdGraphPinType PinType; // 0x50(0x48)
		FString DefaultValue; // 0x98(0x10)
		FString AutogeneratedDefaultValue; // 0xA8(0x10)
		UObject* DefaultObject; // 0xB8(0x8)
		FText DefaultTextValue; // 0xC0(0x10)
		TArray<UEdGraphPin_Deprecated*> LinkedTo; // 0xD0(0x10)
		TArray<UEdGraphPin_Deprecated*> SubPins; // 0xE0(0x10)
		UEdGraphPin_Deprecated* ParentPin; // 0xF0(0x8)
		UEdGraphPin_Deprecated* ReferencePassThroughConnection; // 0xF8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphPin_Deprecated");
			return ret;
		}
	};


	// Class Engine.EdGraphSchema
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEdGraphSchema : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphSchema");
			return ret;
		}
	};


	// Class Engine.Emitter
	// Inherited from AActor -> UObject
	// Size: 0x50 (0x2E0 - 0x290)
	class AEmitter : public AActor	
	{
	public:
		UParticleSystemComponent* ParticleSystemComponent; // 0x290(0x8)
		bool bDestroyOnSystemFinish : 1; // 0x298:0(0x1)
		bool bPostUpdateTickGroup : 1; // 0x298:1(0x1)
		bool bCurrentlyActive : 1; // 0x298:2(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x299(0x7) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnParticleSpawn; // 0x2A0(0x10)
		FMulticastInlineDelegate OnParticleBurst; // 0x2B0(0x10)
		FMulticastInlineDelegate OnParticleDeath; // 0x2C0(0x10)
		FMulticastInlineDelegate OnParticleCollide; // 0x2D0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Emitter");
			return ret;
		}

		void ToggleActive(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70EBD8(relative to base address)
		void SetVectorParameter(FName ParameterName, FVector Param); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C70EA74(relative to base address)
		void SetTemplate(UParticleSystem* NewTemplate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70E9F0(relative to base address)
		void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70E830(relative to base address)
		void SetFloatParameter(FName ParameterName, float Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70E768(relative to base address)
		void SetColorParameter(FName ParameterName, FLinearColor Param); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C70E600(relative to base address)
		void SetActorParameter(FName ParameterName, AActor* Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70E538(relative to base address)
		void OnRep_bCurrentlyActive(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747E38E94(relative to base address)
		void OnParticleSystemFinished(UParticleSystemComponent* FinishedComponent); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF7487DB09C(relative to base address)
		bool IsActive(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C70E508(relative to base address)
		void Deactivate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70E4D4(relative to base address)
		void Activate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C70E4C0(relative to base address)
	};


	// Class Engine.EmitterCameraLensEffectBase
	// Inherited from AEmitter -> AActor -> UObject
	// Size: 0xA0 (0x380 - 0x2E0)
	class AEmitterCameraLensEffectBase : public AEmitter	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x2E0(0x8) UNKNOWN PROPERTY
		UParticleSystem* PS_CameraEffect; // 0x2E8(0x8)
		APlayerCameraManager* BaseCamera; // 0x2F0(0x8)
		unsigned char UnknownData01_6[0x8]; // 0x2F8(0x8) UNKNOWN PROPERTY
		FTransform RelativeTransform; // 0x300(0x60)
		float BaseFOV; // 0x360(0x4)
		bool bAllowMultipleInstances : 1; // 0x364:0(0x1)
		bool bResetWhenRetriggered : 1; // 0x364:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x365(0x3) UNKNOWN PROPERTY
		TArray<UClass*> EmittersToTreatAsSame; // 0x368(0x10)
		float DistFromCamera; // 0x378(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x37C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EmitterCameraLensEffectBase");
			return ret;
		}
	};


	// Class Engine.Engine
	// Inherited from UObject
	// Size: 0xEF8 (0xF20 - 0x28)
	class UEngine : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		UFont* TinyFont; // 0x30(0x8)
		FSoftObjectPath TinyFontName; // 0x38(0x18)
		UFont* SmallFont; // 0x50(0x8)
		FSoftObjectPath SmallFontName; // 0x58(0x18)
		UFont* MediumFont; // 0x70(0x8)
		FSoftObjectPath MediumFontName; // 0x78(0x18)
		UFont* LargeFont; // 0x90(0x8)
		FSoftObjectPath LargeFontName; // 0x98(0x18)
		UFont* SubtitleFont; // 0xB0(0x8)
		FSoftObjectPath SubtitleFontName; // 0xB8(0x18)
		TArray<UFont*> AdditionalFonts; // 0xD0(0x10)
		TArray<FString> AdditionalFontNames; // 0xE0(0x10)
		UClass* ConsoleClass; // 0xF0(0x8)
		FSoftClassPath ConsoleClassName; // 0xF8(0x18)
		UClass* GameViewportClientClass; // 0x110(0x8)
		FSoftClassPath GameViewportClientClassName; // 0x118(0x18)
		UClass* LocalPlayerClass; // 0x130(0x8)
		FSoftClassPath LocalPlayerClassName; // 0x138(0x18)
		UClass* WorldSettingsClass; // 0x150(0x8)
		FSoftClassPath WorldSettingsClassName; // 0x158(0x18)
		FSoftClassPath NavigationSystemClassName; // 0x170(0x18)
		UClass* NavigationSystemClass; // 0x188(0x8)
		FSoftClassPath NavigationSystemConfigClassName; // 0x190(0x18)
		UClass* NavigationSystemConfigClass; // 0x1A8(0x8)
		FSoftClassPath AvoidanceManagerClassName; // 0x1B0(0x18)
		UClass* AvoidanceManagerClass; // 0x1C8(0x8)
		FSoftClassPath AIControllerClassName; // 0x1D0(0x18)
		UClass* PhysicsCollisionHandlerClass; // 0x1E8(0x8)
		FSoftClassPath PhysicsCollisionHandlerClassName; // 0x1F0(0x18)
		FSoftClassPath GameUserSettingsClassName; // 0x208(0x18)
		UClass* GameUserSettingsClass; // 0x220(0x8)
		UGameUserSettings* GameUserSettings; // 0x228(0x8)
		UClass* LevelScriptActorClass; // 0x230(0x8)
		FSoftClassPath LevelScriptActorClassName; // 0x238(0x18)
		FSoftClassPath DefaultBlueprintBaseClassName; // 0x250(0x18)
		FSoftClassPath GameSingletonClassName; // 0x268(0x18)
		UObject* GameSingleton; // 0x280(0x8)
		FSoftClassPath AssetManagerClassName; // 0x288(0x18)
		UAssetManager* AssetManager; // 0x2A0(0x8)
		UTexture2D* DefaultTexture; // 0x2A8(0x8)
		FSoftObjectPath DefaultTextureName; // 0x2B0(0x18)
		UTexture* DefaultDiffuseTexture; // 0x2C8(0x8)
		FSoftObjectPath DefaultDiffuseTextureName; // 0x2D0(0x18)
		UTexture2D* DefaultBSPVertexTexture; // 0x2E8(0x8)
		FSoftObjectPath DefaultBSPVertexTextureName; // 0x2F0(0x18)
		UTexture2D* HighFrequencyNoiseTexture; // 0x308(0x8)
		FSoftObjectPath HighFrequencyNoiseTextureName; // 0x310(0x18)
		UTexture2D* DefaultBokehTexture; // 0x328(0x8)
		FSoftObjectPath DefaultBokehTextureName; // 0x330(0x18)
		UTexture2D* DefaultBloomKernelTexture; // 0x348(0x8)
		FSoftObjectPath DefaultBloomKernelTextureName; // 0x350(0x18)
		UTexture2D* DefaultFilmGrainTexture; // 0x368(0x8)
		FSoftObjectPath DefaultFilmGrainTextureName; // 0x370(0x18)
		UMaterial* WireframeMaterial; // 0x388(0x8)
		FString WireframeMaterialName; // 0x390(0x10)
		UMaterial* DebugMeshMaterial; // 0x3A0(0x8)
		FSoftObjectPath DebugMeshMaterialName; // 0x3A8(0x18)
		UMaterial* NaniteHiddenSectionMaterial; // 0x3C0(0x8)
		FString NaniteHiddenSectionMaterialName; // 0x3C8(0x10)
		UMaterial* EmissiveMeshMaterial; // 0x3D8(0x8)
		FSoftObjectPath EmissiveMeshMaterialName; // 0x3E0(0x18)
		UMaterial* LevelColorationLitMaterial; // 0x3F8(0x8)
		FString LevelColorationLitMaterialName; // 0x400(0x10)
		UMaterial* LevelColorationUnlitMaterial; // 0x410(0x8)
		FString LevelColorationUnlitMaterialName; // 0x418(0x10)
		UMaterial* LightingTexelDensityMaterial; // 0x428(0x8)
		FString LightingTexelDensityName; // 0x430(0x10)
		UMaterial* ShadedLevelColorationLitMaterial; // 0x440(0x8)
		FString ShadedLevelColorationLitMaterialName; // 0x448(0x10)
		UMaterial* ShadedLevelColorationUnlitMaterial; // 0x458(0x8)
		FString ShadedLevelColorationUnlitMaterialName; // 0x460(0x10)
		UMaterial* RemoveSurfaceMaterial; // 0x470(0x8)
		FSoftObjectPath RemoveSurfaceMaterialName; // 0x478(0x18)
		UMaterial* VertexColorMaterial; // 0x490(0x8)
		FString VertexColorMaterialName; // 0x498(0x10)
		UMaterial* VertexColorViewModeMaterial_ColorOnly; // 0x4A8(0x8)
		FString VertexColorViewModeMaterialName_ColorOnly; // 0x4B0(0x10)
		UMaterial* VertexColorViewModeMaterial_AlphaAsColor; // 0x4C0(0x8)
		FString VertexColorViewModeMaterialName_AlphaAsColor; // 0x4C8(0x10)
		UMaterial* VertexColorViewModeMaterial_RedOnly; // 0x4D8(0x8)
		FString VertexColorViewModeMaterialName_RedOnly; // 0x4E0(0x10)
		UMaterial* VertexColorViewModeMaterial_GreenOnly; // 0x4F0(0x8)
		FString VertexColorViewModeMaterialName_GreenOnly; // 0x4F8(0x10)
		UMaterial* VertexColorViewModeMaterial_BlueOnly; // 0x508(0x8)
		FString VertexColorViewModeMaterialName_BlueOnly; // 0x510(0x10)
		FSoftObjectPath DebugEditorMaterialName; // 0x520(0x18)
		UMaterial* ConstraintLimitMaterial; // 0x538(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialX; // 0x540(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialXAxis; // 0x548(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialY; // 0x550(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialYAxis; // 0x558(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialZ; // 0x560(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialZAxis; // 0x568(0x8)
		UMaterialInstanceDynamic* ConstraintLimitMaterialPrismatic; // 0x570(0x8)
		UMaterial* InvalidLightmapSettingsMaterial; // 0x578(0x8)
		FSoftObjectPath InvalidLightmapSettingsMaterialName; // 0x580(0x18)
		UMaterial* PreviewShadowsIndicatorMaterial; // 0x598(0x8)
		FSoftObjectPath PreviewShadowsIndicatorMaterialName; // 0x5A0(0x18)
		UMaterial* ArrowMaterial; // 0x5B8(0x8)
		UMaterialInstanceDynamic* ArrowMaterialYellow; // 0x5C0(0x8)
		FSoftObjectPath ArrowMaterialName; // 0x5C8(0x18)
		FLinearColor LightingOnlyBrightness; // 0x5E0(0x10)
		TArray<FLinearColor> ShaderComplexityColors; // 0x5F0(0x10)
		TArray<FLinearColor> QuadComplexityColors; // 0x600(0x10)
		TArray<FLinearColor> LightComplexityColors; // 0x610(0x10)
		TArray<FLinearColor> StationaryLightOverlapColors; // 0x620(0x10)
		TArray<FLinearColor> LODColorationColors; // 0x630(0x10)
		TArray<FLinearColor> HLODColorationColors; // 0x640(0x10)
		TArray<FLinearColor> StreamingAccuracyColors; // 0x650(0x10)
		FLinearColor GPUSkinCacheVisualizationExcludedColor; // 0x660(0x10)
		FLinearColor GPUSkinCacheVisualizationIncludedColor; // 0x670(0x10)
		FLinearColor GPUSkinCacheVisualizationRecomputeTangentsColor; // 0x680(0x10)
		float GPUSkinCacheVisualizationLowMemoryThresholdInMB; // 0x690(0x4)
		float GPUSkinCacheVisualizationHighMemoryThresholdInMB; // 0x694(0x4)
		FLinearColor GPUSkinCacheVisualizationLowMemoryColor; // 0x698(0x10)
		FLinearColor GPUSkinCacheVisualizationMidMemoryColor; // 0x6A8(0x10)
		FLinearColor GPUSkinCacheVisualizationHighMemoryColor; // 0x6B8(0x10)
		TArray<FLinearColor> GPUSkinCacheVisualizationRayTracingLODOffsetColors; // 0x6C8(0x10)
		float MaxPixelShaderAdditiveComplexityCount; // 0x6D8(0x4)
		float MaxES3PixelShaderAdditiveComplexityCount; // 0x6DC(0x4)
		float MinLightMapDensity; // 0x6E0(0x4)
		float IdealLightMapDensity; // 0x6E4(0x4)
		float MaxLightMapDensity; // 0x6E8(0x4)
		bool bRenderLightMapDensityGrayscale : 1; // 0x6EC:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x6ED(0x3) UNKNOWN PROPERTY
		float RenderLightMapDensityGrayscaleScale; // 0x6F0(0x4)
		float RenderLightMapDensityColorScale; // 0x6F4(0x4)
		FLinearColor LightMapDensityVertexMappedColor; // 0x6F8(0x10)
		FLinearColor LightMapDensitySelectedColor; // 0x708(0x10)
		TArray<FStatColorMapping> StatColorMappings; // 0x718(0x10)
		UPhysicalMaterial* DefaultPhysMaterial; // 0x728(0x8)
		FSoftObjectPath DefaultPhysMaterialName; // 0x730(0x18)
		UPhysicalMaterial* DefaultDestructiblePhysMaterial; // 0x748(0x8)
		FSoftObjectPath DefaultDestructiblePhysMaterialName; // 0x750(0x18)
		TArray<FGameNameRedirect> ActiveGameNameRedirects; // 0x768(0x10)
		TArray<FClassRedirect> ActiveClassRedirects; // 0x778(0x10)
		TArray<FPluginRedirect> ActivePluginRedirects; // 0x788(0x10)
		TArray<FStructRedirect> ActiveStructRedirects; // 0x798(0x10)
		UTexture2D* PreIntegratedSkinBRDFTexture; // 0x7A8(0x8)
		FSoftObjectPath PreIntegratedSkinBRDFTextureName; // 0x7B0(0x18)
		UTexture2D* BlueNoiseScalarTexture; // 0x7C8(0x8)
		UTexture2D* BlueNoiseVec2Texture; // 0x7D0(0x8)
		FSoftObjectPath BlueNoiseScalarTextureName; // 0x7D8(0x18)
		FSoftObjectPath BlueNoiseVec2TextureName; // 0x7F0(0x18)
		UTexture2DArray* GlintTexture; // 0x808(0x8)
		UTexture2DArray* GlintTexture2; // 0x810(0x8)
		FSoftObjectPath GlintTextureName; // 0x818(0x18)
		FSoftObjectPath GlintTexture2Name; // 0x830(0x18)
		UVolumeTexture* SimpleVolumeTexture; // 0x848(0x8)
		FSoftObjectPath SimpleVolumeTextureName; // 0x850(0x18)
		UVolumeTexture* SimpleVolumeEnvTexture; // 0x868(0x8)
		FSoftObjectPath SimpleVolumeEnvTextureName; // 0x870(0x18)
		UTexture2D* MiniFontTexture; // 0x888(0x8)
		FSoftObjectPath MiniFontTextureName; // 0x890(0x18)
		UTexture* WeightMapPlaceholderTexture; // 0x8A8(0x8)
		UTexture* WeightMapArrayPlaceholderTexture; // 0x8B0(0x8)
		FSoftObjectPath WeightMapPlaceholderTextureName; // 0x8B8(0x18)
		FSoftObjectPath WeightMapArrayPlaceholderTextureName; // 0x8D0(0x18)
		UTexture2D* LightMapDensityTexture; // 0x8E8(0x8)
		FSoftObjectPath LightMapDensityTextureName; // 0x8F0(0x18)
		unsigned char UnknownData02_6[0x8]; // 0x908(0x8) UNKNOWN PROPERTY
		UGameViewportClient* GameViewport; // 0x910(0x8)
		TArray<FString> DeferredCommands; // 0x918(0x10)
		float NearClipPlane; // 0x928(0x4)
		bool bSubtitlesEnabled : 1; // 0x92C:0(0x1)
		bool bSubtitlesForcedOff : 1; // 0x92C:1(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x92D(0x3) UNKNOWN PROPERTY
		int32_t MaximumLoopIterationCount; // 0x930(0x4)
		bool bCanBlueprintsTickByDefault : 1; // 0x934:0(0x1)
		bool bOptimizeAnimBlueprintMemberVariableAccess : 1; // 0x934:1(0x1)
		bool bAllowMultiThreadedAnimationUpdate : 1; // 0x934:2(0x1)
		bool bEnableEditorPSysRealtimeLOD : 1; // 0x934:3(0x1)
		unsigned char UnknownBit04 : 1; // 0x934:4(0x1) UNKNOWN PROPERTY
		bool bSmoothFrameRate : 1; // 0x934:5(0x1)
		bool bUseFixedFrameRate : 1; // 0x934:6(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x935(0x3) UNKNOWN PROPERTY
		float FixedFrameRate; // 0x938(0x4)
		FFloatRange SmoothedFrameRateRange; // 0x93C(0x10)
		unsigned char UnknownData06_6[0x4]; // 0x94C(0x4) UNKNOWN PROPERTY
		UEngineCustomTimeStep* CustomTimeStep; // 0x950(0x8)
		unsigned char UnknownData07_6[0x20]; // 0x958(0x20) UNKNOWN PROPERTY
		FSoftClassPath CustomTimeStepClassName; // 0x978(0x18)
		UTimecodeProvider* TimecodeProvider; // 0x990(0x8)
		unsigned char UnknownData08_6[0x20]; // 0x998(0x20) UNKNOWN PROPERTY
		FSoftClassPath TimecodeProviderClassName; // 0x9B8(0x18)
		bool bGenerateDefaultTimecode; // 0x9D0(0x1)
		unsigned char UnknownData09_6[0x3]; // 0x9D1(0x3) UNKNOWN PROPERTY
		FFrameRate GenerateDefaultTimecodeFrameRate; // 0x9D4(0x8)
		float GenerateDefaultTimecodeFrameDelay; // 0x9DC(0x4)
		bool bCheckForMultiplePawnsSpawnedInAFrame : 1; // 0x9E0:0(0x1)
		unsigned char UnknownData10_5[0x3]; // 0x9E1(0x3) UNKNOWN PROPERTY
		int32_t NumPawnsAllowedToBeSpawnedInAFrame; // 0x9E4(0x4)
		bool bShouldGenerateLowQualityLightmaps : 1; // 0x9E8:0(0x1)
		unsigned char UnknownData11_5[0x3]; // 0x9E9(0x3) UNKNOWN PROPERTY
		FColor C_WorldBox; // 0x9EC(0x4)
		FColor C_BrushWire; // 0x9F0(0x4)
		FColor C_AddWire; // 0x9F4(0x4)
		FColor C_SubtractWire; // 0x9F8(0x4)
		FColor C_SemiSolidWire; // 0x9FC(0x4)
		FColor C_NonSolidWire; // 0xA00(0x4)
		FColor C_WireBackground; // 0xA04(0x4)
		FColor C_ScaleBoxHi; // 0xA08(0x4)
		FColor C_VolumeCollision; // 0xA0C(0x4)
		FColor C_BSPCollision; // 0xA10(0x4)
		FColor C_OrthoBackground; // 0xA14(0x4)
		FColor C_Volume; // 0xA18(0x4)
		FColor C_BrushShape; // 0xA1C(0x4)
		unsigned char UnknownData12_6[0x8]; // 0xA20(0x8) UNKNOWN PROPERTY
		FDirectoryPath GameScreenshotSaveDirectory; // 0xA28(0x10)
		bool UseStaticMeshMinLODPerQualityLevels; // 0xA38(0x1)
		bool UseSkeletalMeshMinLODPerQualityLevels; // 0xA39(0x1)
		bool UseClothAssetMinLODPerQualityLevels; // 0xA3A(0x1)
		bool UseGrassVarityPerQualityLevels; // 0xA3B(0x1)
		ETransitionType TransitionType; // 0xA3C(0x1)
		unsigned char UnknownData13_6[0x3]; // 0xA3D(0x3) UNKNOWN PROPERTY
		FString TransitionDescription; // 0xA40(0x10)
		FString TransitionGameMode; // 0xA50(0x10)
		bool bAllowMatureLanguage : 1; // 0xA60:0(0x1)
		unsigned char UnknownData14_5[0x3]; // 0xA61(0x3) UNKNOWN PROPERTY
		float CameraRotationThreshold; // 0xA64(0x4)
		float CameraTranslationThreshold; // 0xA68(0x4)
		float PrimitiveProbablyVisibleTime; // 0xA6C(0x4)
		float MaxOcclusionPixelsFraction; // 0xA70(0x4)
		bool bPauseOnLossOfFocus : 1; // 0xA74:0(0x1)
		unsigned char UnknownData15_5[0x3]; // 0xA75(0x3) UNKNOWN PROPERTY
		int32_t MaxParticleResize; // 0xA78(0x4)
		int32_t MaxParticleResizeWarn; // 0xA7C(0x4)
		TArray<FDropNoteInfo> PendingDroppedNotes; // 0xA80(0x10)
		float NetClientTicksPerSecond; // 0xA90(0x4)
		float DisplayGamma; // 0xA94(0x4)
		float MinDesiredFrameRate; // 0xA98(0x4)
		FLinearColor DefaultSelectedMaterialColor; // 0xA9C(0x10)
		FLinearColor SelectedMaterialColor; // 0xAAC(0x10)
		FLinearColor SelectionOutlineColor; // 0xABC(0x10)
		FLinearColor SubduedSelectionOutlineColor; // 0xACC(0x10)
		FLinearColor SelectedMaterialColorOverride; // 0xADC(0x10)
		bool bIsOverridingSelectedColor; // 0xAEC(0x1)
		unsigned char UnknownData16_6[0x3]; // 0xAED(0x3) UNKNOWN PROPERTY
		bool bEnableOnScreenDebugMessages : 1; // 0xAF0:0(0x1)
		bool bEnableOnScreenDebugMessagesDisplay : 1; // 0xAF0:1(0x1)
		bool bSuppressMapWarnings : 1; // 0xAF0:2(0x1)
		bool bDisableAILogging : 1; // 0xAF0:3(0x1)
		unsigned char UnknownData17_5[0x3]; // 0xAF1(0x3) UNKNOWN PROPERTY
		uint32_t bEnableVisualLogRecordingOnStart; // 0xAF4(0x4)
		int32_t ScreenSaverInhibitorSemaphore; // 0xAF8(0x4)
		bool bLockReadOnlyLevels : 1; // 0xAFC:0(0x1)
		unsigned char UnknownData18_5[0x3]; // 0xAFD(0x3) UNKNOWN PROPERTY
		FString ParticleEventManagerClassPath; // 0xB00(0x10)
		float SelectionHighlightIntensity; // 0xB10(0x4)
		float BSPSelectionHighlightIntensity; // 0xB14(0x4)
		float SelectionHighlightIntensityBillboards; // 0xB18(0x4)
		unsigned char UnknownData19_6[0x294]; // 0xB1C(0x294) UNKNOWN PROPERTY
		uint32_t GlobalNetTravelCount; // 0xDB0(0x4)
		unsigned char UnknownData20_6[0x4]; // 0xDB4(0x4) UNKNOWN PROPERTY
		TArray<FNetDriverDefinition> NetDriverDefinitions; // 0xDB8(0x10)
		TArray<FIrisNetDriverConfig> IrisNetDriverConfigs; // 0xDC8(0x10)
		TArray<FString> ServerActors; // 0xDD8(0x10)
		TArray<FString> RuntimeServerActors; // 0xDE8(0x10)
		float NetErrorLogInterval; // 0xDF8(0x4)
		bool bStartedLoadMapMovie : 1; // 0xDFC:0(0x1)
		unsigned char UnknownData21_5[0x3B]; // 0xDFD(0x3B) UNKNOWN PROPERTY
		int32_t NextWorldContextHandle; // 0xE38(0x4)
		unsigned char UnknownData22_7[0xE4]; // 0xE3C(0xE4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Engine");
			return ret;
		}
	};


	// Class Engine.ViewModeUtils
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UViewModeUtils : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ViewModeUtils");
			return ret;
		}
	};


	// Class Engine.EngineBaseTypes
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineBaseTypes : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineBaseTypes");
			return ret;
		}
	};


	// Class Engine.EngineTypes
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineTypes : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineTypes");
			return ret;
		}
	};


	// Class Engine.ExponentialHeightFog
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AExponentialHeightFog : public AInfo	
	{
	public:
		UExponentialHeightFogComponent* Component; // 0x290(0x8)
		bool bEnabled : 1; // 0x298:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExponentialHeightFog");
			return ret;
		}

		void OnRep_bEnabled(); // Flags: Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
	};


	// Class Engine.ExponentialHeightFogComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xE0 (0x300 - 0x220)
	class UExponentialHeightFogComponent : public USceneComponent	
	{
	public:
		float FogDensity; // 0x220(0x4)
		float FogHeightFalloff; // 0x224(0x4)
		FExponentialHeightFogData SecondFogData; // 0x228(0xC)
		FLinearColor FogInscatteringColor; // 0x234(0x10)
		FLinearColor FogInscatteringLuminance; // 0x244(0x10)
		FLinearColor SkyAtmosphereAmbientContributionColorScale; // 0x254(0x10)
		unsigned char UnknownData00_6[0x4]; // 0x264(0x4) UNKNOWN PROPERTY
		UTextureCube* InscatteringColorCubemap; // 0x268(0x8)
		float InscatteringColorCubemapAngle; // 0x270(0x4)
		FLinearColor InscatteringTextureTint; // 0x274(0x10)
		float FullyDirectionalInscatteringColorDistance; // 0x284(0x4)
		float NonDirectionalInscatteringColorDistance; // 0x288(0x4)
		float DirectionalInscatteringExponent; // 0x28C(0x4)
		float DirectionalInscatteringStartDistance; // 0x290(0x4)
		FLinearColor DirectionalInscatteringColor; // 0x294(0x10)
		FLinearColor DirectionalInscatteringLuminance; // 0x2A4(0x10)
		float FogMaxOpacity; // 0x2B4(0x4)
		float StartDistance; // 0x2B8(0x4)
		float EndDistance; // 0x2BC(0x4)
		float FogCutoffDistance; // 0x2C0(0x4)
		bool bEnableVolumetricFog; // 0x2C4(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x2C5(0x3) UNKNOWN PROPERTY
		float VolumetricFogScatteringDistribution; // 0x2C8(0x4)
		FColor VolumetricFogAlbedo; // 0x2CC(0x4)
		FLinearColor VolumetricFogEmissive; // 0x2D0(0x10)
		float VolumetricFogExtinctionScale; // 0x2E0(0x4)
		float VolumetricFogDistance; // 0x2E4(0x4)
		float VolumetricFogStartDistance; // 0x2E8(0x4)
		float VolumetricFogNearFadeInDistance; // 0x2EC(0x4)
		float VolumetricFogStaticLightingScatteringIntensity; // 0x2F0(0x4)
		bool bOverrideLightColorsWithFogInscatteringColors; // 0x2F4(0x1)
		bool bHoldout : 1; // 0x2F5:0(0x1)
		bool bRenderInMainPass : 1; // 0x2F5:1(0x1)
		unsigned char UnknownData02_7[0xA]; // 0x2F6(0xA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExponentialHeightFogComponent");
			return ret;
		}

		void SetVolumetricFogStartDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C373BA0(relative to base address)
		void SetVolumetricFogScatteringDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74893A2D0(relative to base address)
		void SetVolumetricFogNearFadeInDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C373B20(relative to base address)
		void SetVolumetricFogExtinctionScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C373AA0(relative to base address)
		void SetVolumetricFogEmissive(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C373988(relative to base address)
		void SetVolumetricFogDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3738F4(relative to base address)
		void SetVolumetricFogAlbedo(FColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3737E8(relative to base address)
		void SetVolumetricFog(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C373758(relative to base address)
		void SetStartDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3736C4(relative to base address)
		void SetSecondFogHeightOffset(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C373644(relative to base address)
		void SetSecondFogHeightFalloff(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3735C4(relative to base address)
		void SetSecondFogDensity(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C373544(relative to base address)
		void SetSecondFogData(FExponentialHeightFogData NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37340C(relative to base address)
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37336C(relative to base address)
		void SetNonDirectionalInscatteringColorDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3732D8(relative to base address)
		void SetInscatteringTextureTint(FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3731C0(relative to base address)
		void SetInscatteringColorCubemapAngle(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37312C(relative to base address)
		void SetInscatteringColorCubemap(UTextureCube* Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37307C(relative to base address)
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372FE0(relative to base address)
		void SetFullyDirectionalInscatteringColorDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372F4C(relative to base address)
		void SetFogMaxOpacity(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372ECC(relative to base address)
		void SetFogInscatteringColor(FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C372DB4(relative to base address)
		void SetFogHeightFalloff(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372D34(relative to base address)
		void SetFogDensity(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372CB4(relative to base address)
		void SetFogCutoffDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372C20(relative to base address)
		void SetEndDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372B8C(relative to base address)
		void SetDirectionalInscatteringStartDistance(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372AF8(relative to base address)
		void SetDirectionalInscatteringExponent(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C372A78(relative to base address)
		void SetDirectionalInscatteringColor(FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C372960(relative to base address)
	};


	// Class Engine.Exporter
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UExporter : public UObject	
	{
	public:
		UClass* SupportedClass; // 0x28(0x8)
		UObject* ExportRootScope; // 0x30(0x8)
		TArray<FString> FormatExtension; // 0x38(0x10)
		TArray<FString> FormatDescription; // 0x48(0x10)
		int32_t PreferredFormatIndex; // 0x58(0x4)
		int32_t TextIndent; // 0x5C(0x4)
		bool bText : 1; // 0x60:0(0x1)
		bool bSelectedOnly : 1; // 0x60:1(0x1)
		bool bForceFileOperations : 1; // 0x60:2(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x61(0x7) UNKNOWN PROPERTY
		UAssetExportTask* ExportTask; // 0x68(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x70(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Exporter");
			return ret;
		}

		bool ScriptRunAssetExportTask(UAssetExportTask* Task); // Flags: Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		bool RunAssetExportTasks(TArray<UAssetExportTask*>& ExportTasks); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C372890(relative to base address)
		bool RunAssetExportTask(UAssetExportTask* Task); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C372810(relative to base address)
	};


	// Class Engine.DataAsset
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UDataAsset : public UObject	
	{
	public:
		UClass* NativeClass; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataAsset");
			return ret;
		}
	};


	// Class Engine.DataLayerAsset
	// Inherited from UDataAsset -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UDataLayerAsset : public UDataAsset	
	{
	public:
		EDataLayerType DataLayerType; // 0x30(0x1)
		bool bSupportsActorFilters; // 0x31(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x32(0x2) UNKNOWN PROPERTY
		FColor DebugColor; // 0x34(0x4)
		EDataLayerLoadFilter LoadFilter; // 0x38(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerAsset");
			return ret;
		}

		bool IsServerOnly(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C91119C(relative to base address)
		bool IsRuntime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C911178(relative to base address)
		bool IsClientOnly(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C91111C(relative to base address)
		EDataLayerType GetType(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A798C(relative to base address)
		FColor GetDebugColor(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BA07FC(relative to base address)
	};


	// Class Engine.ExternalDataLayerAsset
	// Inherited from UDataLayerAsset -> UDataAsset -> UObject
	// Size: 0x8 (0x48 - 0x40)
	class UExternalDataLayerAsset : public UDataLayerAsset	
	{
	public:
		FExternalDataLayerUID UID; // 0x40(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerAsset");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x70 (0xA0 - 0x30)
	class UExternalDataLayerEngineSubsystem : public UEngineSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x70]; // 0x30(0x70) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerInjectionPolicy
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UExternalDataLayerInjectionPolicy : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerInjectionPolicy");
			return ret;
		}
	};


	// Class Engine.DataLayerInstance
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UDataLayerInstance : public UObject	
	{
	public:
		EDataLayerRuntimeState InitialRuntimeState; // 0x28(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		UDataLayerInstance* Parent; // 0x30(0x8)
		TArray<UDataLayerInstance*> Children; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstance");
			return ret;
		}

		bool IsVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsServerOnly(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3493C4(relative to base address)
		bool IsRuntime(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1DC4(relative to base address)
		bool IsInitiallyVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsEffectiveVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsClientOnly(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7495F94FC(relative to base address)
		EDataLayerType GetType(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7493F5558(relative to base address)
		EDataLayerRuntimeState GetInitialRuntimeState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C911000(relative to base address)
		FColor GetDebugColor(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3744(relative to base address)
		FString GetDataLayerShortName(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910F50(relative to base address)
		FString GetDataLayerFullName(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3CF0(relative to base address)
		UDataLayerAsset GetAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910898(relative to base address)
	};


	// Class Engine.DataLayerInstanceWithAsset
	// Inherited from UDataLayerInstance -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class UDataLayerInstanceWithAsset : public UDataLayerInstance	
	{
	public:
		UDataLayerAsset* DataLayerAsset; // 0x48(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstanceWithAsset");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerInstance
	// Inherited from UDataLayerInstanceWithAsset -> UDataLayerInstance -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class UExternalDataLayerInstance : public UDataLayerInstanceWithAsset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerInstance");
			return ret;
		}
	};


	// Class Engine.ExternalDataLayerManager
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UExternalDataLayerManager : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		TMap<UExternalDataLayerAsset*, URuntimeHashExternalStreamingObjectBase*> ExternalStreamingObjects; // 0x30(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ExternalDataLayerManager");
			return ret;
		}
	};


	// Class Engine.FieldNotificationLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UFieldNotificationLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FieldNotificationLibrary");
			return ret;
		}

		bool SetPropertyValueAndBroadcastFields(bool NewValueByRef, int32_t& OldValue, int32_t& NewValue, UObject* Object, UObject* NetOwner, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty, TArray<FFieldNotificationId> ExtraFieldIds); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5A85E4(relative to base address)
		bool SetPropertyValueAndBroadcast(bool NewValueByRef, int32_t& OldValue, int32_t& NewValue, UObject* Object, UObject* NetOwner, bool bHasLocalRepNotify, bool bShouldFlushDormancyOnSet, bool bIsNetProperty); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74893D118(relative to base address)
		void BroadcastFieldValueChanged(UObject* Object, FFieldNotificationId FieldId); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C3724EC(relative to base address)
		void BroadcastFieldsValueChanged(UObject* Object, TArray<FFieldNotificationId> FieldIds); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C372680(relative to base address)
	};


	// Class Engine.FontImportOptions
	// Inherited from UObject
	// Size: 0xB0 (0xD8 - 0x28)
	class UFontImportOptions : public UObject	
	{
	public:
		FFontImportOptionsData Data; // 0x28(0xB0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FontImportOptions");
			return ret;
		}
	};


	// Class Engine.ForceFeedbackAttenuation
	// Inherited from UObject
	// Size: 0xC0 (0xE8 - 0x28)
	class UForceFeedbackAttenuation : public UObject	
	{
	public:
		FForceFeedbackAttenuationSettings Attenuation; // 0x28(0xC0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ForceFeedbackAttenuation");
			return ret;
		}
	};


	// Class Engine.GameNetworkManager
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xA8 (0x338 - 0x290)
	class AGameNetworkManager : public AInfo	
	{
	public:
		float BadPacketLossThreshold; // 0x290(0x4)
		float SeverePacketLossThreshold; // 0x294(0x4)
		int32_t BadPingThreshold; // 0x298(0x4)
		int32_t SeverePingThreshold; // 0x29C(0x4)
		int32_t AdjustedNetSpeed; // 0x2A0(0x4)
		float LastNetSpeedUpdateTime; // 0x2A4(0x4)
		int32_t TotalNetBandwidth; // 0x2A8(0x4)
		int32_t MinDynamicBandwidth; // 0x2AC(0x4)
		int32_t MaxDynamicBandwidth; // 0x2B0(0x4)
		bool bIsStandbyCheckingEnabled : 1; // 0x2B4:0(0x1)
		bool bHasStandbyCheatTriggered : 1; // 0x2B4:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2B5(0x3) UNKNOWN PROPERTY
		float StandbyRxCheatTime; // 0x2B8(0x4)
		float StandbyTxCheatTime; // 0x2BC(0x4)
		float PercentMissingForRxStandby; // 0x2C0(0x4)
		float PercentMissingForTxStandby; // 0x2C4(0x4)
		float PercentForBadPing; // 0x2C8(0x4)
		float JoinInProgressStandbyWaitTime; // 0x2CC(0x4)
		float MoveRepSize; // 0x2D0(0x4)
		float MAXPOSITIONERRORSQUARED; // 0x2D4(0x4)
		float MAXNEARZEROVELOCITYSQUARED; // 0x2D8(0x4)
		float CLIENTADJUSTUPDATECOST; // 0x2DC(0x4)
		float MAXCLIENTUPDATEINTERVAL; // 0x2E0(0x4)
		float MaxClientForcedUpdateDuration; // 0x2E4(0x4)
		float ServerForcedUpdateHitchThreshold; // 0x2E8(0x4)
		float ServerForcedUpdateHitchCooldown; // 0x2EC(0x4)
		float MaxMoveDeltaTime; // 0x2F0(0x4)
		float MaxClientSmoothingDeltaTime; // 0x2F4(0x4)
		float ClientNetSendMoveDeltaTime; // 0x2F8(0x4)
		float ClientNetSendMoveDeltaTimeThrottled; // 0x2FC(0x4)
		float ClientNetSendMoveDeltaTimeStationary; // 0x300(0x4)
		int32_t ClientNetSendMoveThrottleAtNetSpeed; // 0x304(0x4)
		int32_t ClientNetSendMoveThrottleOverPlayerCount; // 0x308(0x4)
		float ClientErrorUpdateRateLimit; // 0x30C(0x4)
		float ClientNetCamUpdateDeltaTime; // 0x310(0x4)
		float ClientNetCamUpdatePositionLimit; // 0x314(0x4)
		bool ClientAuthorativePosition; // 0x318(0x1)
		bool bMovementTimeDiscrepancyDetection; // 0x319(0x1)
		bool bMovementTimeDiscrepancyResolution; // 0x31A(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x31B(0x1) UNKNOWN PROPERTY
		float MovementTimeDiscrepancyMaxTimeMargin; // 0x31C(0x4)
		float MovementTimeDiscrepancyMinTimeMargin; // 0x320(0x4)
		float MovementTimeDiscrepancyResolutionRate; // 0x324(0x4)
		float MovementTimeDiscrepancyDriftAllowance; // 0x328(0x4)
		bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x32C(0x1)
		bool bUseDistanceBasedRelevancy; // 0x32D(0x1)
		unsigned char UnknownData02_7[0xA]; // 0x32E(0xA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameNetworkManager");
			return ret;
		}
	};


	// Class Engine.SpotLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ASpotLight : public ALight	
	{
	public:
		USpotLightComponent* SpotLightComponent; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpotLight");
			return ret;
		}

		void SetOuterConeAngle(float NewOuterConeAngle); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8896FC(relative to base address)
		void SetInnerConeAngle(float NewInnerConeAngle); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C889590(relative to base address)
	};


	// Class Engine.GeneratedMeshAreaLight
	// Inherited from ASpotLight -> ALight -> AActor -> UObject
	// Size: 0x0 (0x2A8 - 0x2A8)
	class AGeneratedMeshAreaLight : public ASpotLight	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GeneratedMeshAreaLight");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_Base
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHapticFeedbackEffect_Base : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_Base");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_Buffer
	// Inherited from UHapticFeedbackEffect_Base -> UObject
	// Size: 0x18 (0x40 - 0x28)
	class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base	
	{
	public:
		TArray<char> Amplitudes; // 0x28(0x10)
		int32_t SampleRate; // 0x38(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_Buffer");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_Curve
	// Inherited from UHapticFeedbackEffect_Base -> UObject
	// Size: 0x110 (0x138 - 0x28)
	class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base	
	{
	public:
		FHapticFeedbackDetails_Curve HapticDetails; // 0x28(0x110)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_Curve");
			return ret;
		}
	};


	// Class Engine.HapticFeedbackEffect_SoundWave
	// Inherited from UHapticFeedbackEffect_Base -> UObject
	// Size: 0x20 (0x48 - 0x28)
	class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base	
	{
	public:
		USoundWave* SoundWave; // 0x28(0x8)
		bool bUseStereo; // 0x30(0x1)
		unsigned char UnknownData00_7[0x17]; // 0x31(0x17) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HapticFeedbackEffect_SoundWave");
			return ret;
		}
	};


	// Class Engine.HLODInstancedStaticMeshComponent
	// Inherited from UInstancedStaticMeshComponent -> UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x8E0 - 0x8E0)
	class UHLODInstancedStaticMeshComponent : public UInstancedStaticMeshComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODInstancedStaticMeshComponent");
			return ret;
		}
	};


	// Class Engine.HierarchicalLODSetup
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UHierarchicalLODSetup : public UObject	
	{
	public:
		TArray<FHierarchicalSimplification> HierarchicalLODSetup; // 0x28(0x10)
		TWeakObjectPtr<UMaterialInterface*> OverrideBaseMaterial; // 0x38(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HierarchicalLODSetup");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODSourceActors
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODSourceActors : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODSourceActors");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODSourceActorsFromCell
	// Inherited from UWorldPartitionHLODSourceActors -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODSourceActorsFromCell : public UWorldPartitionHLODSourceActors	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODSourceActorsFromCell");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODSourceActorsFromLevel
	// Inherited from UWorldPartitionHLODSourceActors -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODSourceActorsFromLevel : public UWorldPartitionHLODSourceActors	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODSourceActorsFromLevel");
			return ret;
		}
	};


	// Class Engine.AnimationDataController
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationDataController : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationDataController");
			return ret;
		}

		void UpdateCurveNamesFromSkeleton(USkeleton* Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37A76C(relative to base address)
		bool SetTransformCurveKeys(FAnimationCurveIdentifier& CurveId, TArray<FTransform>& TransformValues, TArray<float>& TimeKeys, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C37A4F8(relative to base address)
		bool SetTransformCurveKey(FAnimationCurveIdentifier& CurveId, float Time, FTransform& Value, bool bShouldTransact); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C37A1B8(relative to base address)
		void SetPlayLength(float Length, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37A0F0(relative to base address)
		void SetNumberOfFrames(FFrameNumber NewLengthInFrames, bool bShouldTransact); // Flags: Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C379F18(relative to base address)
		void SetModel(TScriptInterface<Class> InModel); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C379D6C(relative to base address)
		void SetFrameRate(FFrameRate FrameRate, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C379B08(relative to base address)
		bool SetCurveKeys(FAnimationCurveIdentifier& CurveId, TArray<FRichCurveKey>& CurveKeys, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C379930(relative to base address)
		bool SetCurveKey(FAnimationCurveIdentifier& CurveId, FRichCurveKey& Key, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C379768(relative to base address)
		bool SetCurveFlags(FAnimationCurveIdentifier& CurveId, int32_t Flags, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C379530(relative to base address)
		bool SetCurveFlag(FAnimationCurveIdentifier& CurveId, TEnumAsByte<EAnimAssetCurveFlags> Flag, bool bState, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C379238(relative to base address)
		bool SetCurveComment(FAnimationCurveIdentifier& CurveId, FString Comment, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C378FE8(relative to base address)
		bool SetCurveColor(FAnimationCurveIdentifier& CurveId, FLinearColor Color, bool bShouldTransact); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C378DA8(relative to base address)
		bool SetBoneTrackKeys(FName BoneName, TArray<FVector>& PositionalKeys, TArray<FQuat>& RotationalKeys, TArray<FVector>& ScalingKeys, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C378A74(relative to base address)
		bool ScaleCurve(FAnimationCurveIdentifier& CurveId, float Origin, float Factor, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C378780(relative to base address)
		void ResizePlayLength(float NewLength, float T0, float T1, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C378640(relative to base address)
		void ResizeNumberOfFrames(FFrameNumber NewLengthInFrames, FFrameNumber T0, FFrameNumber T1, bool bShouldTransact); // Flags: Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3782F8(relative to base address)
		void ResizeInFrames(FFrameNumber NewLengthInFrames, FFrameNumber T0, FFrameNumber T1, bool bShouldTransact); // Flags: Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C377FB0(relative to base address)
		void Resize(float Length, float T0, float T1, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C377E70(relative to base address)
		bool RenameCurve(FAnimationCurveIdentifier& CurveToRenameId, FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C377CB0(relative to base address)
		bool RemoveTransformCurveKey(FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C377A78(relative to base address)
		bool RemoveCurveKey(FAnimationCurveIdentifier& CurveId, float Time, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3776FC(relative to base address)
		bool RemoveCurve(FAnimationCurveIdentifier& CurveId, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C377588(relative to base address)
		bool RemoveBoneTrack(FName BoneName, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3774BC(relative to base address)
		bool RemoveAttributeKey(FAnimationAttributeIdentifier& AttributeIdentifier, float Time, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C377264(relative to base address)
		bool RemoveAttribute(FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3770C0(relative to base address)
		void RemoveAllCurvesOfType(ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C376FF8(relative to base address)
		void RemoveAllBoneTracks(bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C376F74(relative to base address)
		int32_t RemoveAllAttributesForBone(FName& BoneName, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C376E4C(relative to base address)
		int32_t RemoveAllAttributes(bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C376DB4(relative to base address)
		void OpenBracket(FText& InTitle, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C376C84(relative to base address)
		int32_t InsertBoneTrack(FName BoneName, int32_t DesiredIndex, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3769C4(relative to base address)
		TScriptInterface GetModelInterface(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3768A8(relative to base address)
		void FindOrAddCurveNamesOnSkeleton(USkeleton* Skeleton, ERawCurveTrackTypes SupportedCurveType, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C375CAC(relative to base address)
		bool DuplicateCurve(FAnimationCurveIdentifier& CopyCurveId, FAnimationCurveIdentifier& NewCurveId, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C375AEC(relative to base address)
		bool DuplicateAttribute(FAnimationAttributeIdentifier& AttributeIdentifier, FAnimationAttributeIdentifier& NewAttributeIdentifier, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3758D8(relative to base address)
		void CloseBracket(bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C375854(relative to base address)
		bool AddCurve(FAnimationCurveIdentifier& CurveId, int32_t CurveFlags, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C374D20(relative to base address)
		int32_t AddBoneTrack(FName BoneName, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C374C58(relative to base address)
		bool AddBoneCurve(FName BoneName, bool bShouldTransact); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C374B90(relative to base address)
		bool AddAttribute(FAnimationAttributeIdentifier& AttributeIdentifier, bool bShouldTransact); // Flags: Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3749EC(relative to base address)
	};


	// Class Engine.AnimationDataModel
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationDataModel : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationDataModel");
			return ret;
		}

		bool IsValidBoneTrackName(FName& TrackName); // Flags: Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376B58(relative to base address)
		bool IsValidBoneTrackIndex(int32_t TrackIndex); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376AC4(relative to base address)
		double GetPlayLength(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C37699C(relative to base address)
		int32_t GetNumBoneTracks(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3768DC(relative to base address)
		int32_t GetNumberOfTransformCurves(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376974(relative to base address)
		int32_t GetNumberOfKeys(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376950(relative to base address)
		int32_t GetNumberOfFrames(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C37692C(relative to base address)
		int32_t GetNumberOfFloatCurves(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376904(relative to base address)
		FFrameRate GetFrameRate(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3762F4(relative to base address)
		void GetBoneTrackNames(TArray<FName>& OutNames); // Flags: Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3760B4(relative to base address)
		int32_t GetBoneTrackIndexByName(FName TrackName); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C376020(relative to base address)
		int32_t GetBoneTrackIndex(FBoneAnimationTrack& Track); // Flags: Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C375F30(relative to base address)
		FBoneAnimationTrack GetBoneTrackByName(FName TrackName); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C375E98(relative to base address)
		FBoneAnimationTrack GetBoneTrackByIndex(int32_t TrackIndex); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C375E00(relative to base address)
		TArray GetBoneAnimationTracks(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C375DD4(relative to base address)
		UAnimSequence GetAnimationSequence(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C375DAC(relative to base address)
	};


	// Class Engine.AssetRegistryTagProviderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAssetRegistryTagProviderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetRegistryTagProviderInterface");
			return ret;
		}
	};


	// Class Engine.InGameAdManager
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x28 (0x60 - 0x38)
	class UInGameAdManager : public UPlatformInterfaceBase	
	{
	public:
		bool bShouldPauseWhileAdOpen : 1; // 0x38:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		TArray<FDelegateProperty> ClickedBannerDelegates; // 0x40(0x10)
		TArray<FDelegateProperty> ClosedAdDelegates; // 0x50(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InGameAdManager");
			return ret;
		}
	};


	// Class Engine.Interface_ActorSubobject
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_ActorSubobject : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_ActorSubobject");
			return ret;
		}
	};


	// Class Engine.Interface_AssetUserData
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_AssetUserData : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_AssetUserData");
			return ret;
		}

		bool HasAssetUserDataOfClass(UClass* InUserDataClass); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37D94C(relative to base address)
		UAssetUserData GetAssetUserDataOfClass(UClass* InUserDataClass); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37D640(relative to base address)
		bool AddAssetUserDataOfClass(UClass* InUserDataClass); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37B540(relative to base address)
	};


	// Class Engine.Interface_AsyncCompilation
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_AsyncCompilation : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_AsyncCompilation");
			return ret;
		}
	};


	// Class Engine.BoneReferenceSkeletonProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBoneReferenceSkeletonProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoneReferenceSkeletonProvider");
			return ret;
		}
	};


	// Class Engine.Interface_CollisionDataProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_CollisionDataProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_CollisionDataProvider");
			return ret;
		}
	};


	// Class Engine.Interface_PostProcessVolume
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_PostProcessVolume : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_PostProcessVolume");
			return ret;
		}
	};


	// Class Engine.Interface_PreviewMeshProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInterface_PreviewMeshProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Interface_PreviewMeshProvider");
			return ret;
		}
	};


	// Class Engine.PhysicsComponent
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsComponent : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsComponent");
			return ret;
		}
	};


	// Class Engine.ISMPartitionInstanceManager
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UISMPartitionInstanceManager : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ISMPartitionInstanceManager");
			return ret;
		}
	};


	// Class Engine.ISMPartitionInstanceManagerProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UISMPartitionInstanceManagerProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ISMPartitionInstanceManagerProvider");
			return ret;
		}
	};


	// Class Engine.WorldPartitionObjectResolver
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionObjectResolver : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionObjectResolver");
			return ret;
		}
	};


	// Class Engine.KismetTextLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetTextLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetTextLibrary");
			return ret;
		}

		FText TextTrimTrailing(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F688(relative to base address)
		FText TextTrimPrecedingAndTrailing(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F5D4(relative to base address)
		FText TextTrimPreceding(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F520(relative to base address)
		FText TextToUpper(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74989562C(relative to base address)
		FText TextToLower(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F46C(relative to base address)
		bool TextIsTransient(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F3D0(relative to base address)
		bool TextIsFromStringTable(FText& Text); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F334(relative to base address)
		bool TextIsEmpty(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7472A41B8(relative to base address)
		bool TextIsCultureInvariant(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F298(relative to base address)
		FText TextFromStringTable(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F19C(relative to base address)
		bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37F010(relative to base address)
		FText PolyglotDataToText(FPolyglotTextData& PolyglotData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37EA9C(relative to base address)
		bool NotEqual_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37E990(relative to base address)
		bool NotEqual_IgnoreCase_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37E884(relative to base address)
		FText MakeInvariantText(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37E7DC(relative to base address)
		void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D9F4(relative to base address)
		FString GetTextSourceString(FText Text); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D890(relative to base address)
		bool GetTextId(FText Text, FString& OutNamespace, FString& OutKey); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D6E8(relative to base address)
		FText GetEmptyText(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749088780(relative to base address)
		FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74A048A78(relative to base address)
		bool FindTextInLocalizationTable(FString NameSpace, FString Key, FText& OutText, FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D42C(relative to base address)
		bool EqualEqual_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7472A4058(relative to base address)
		bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D324(relative to base address)
		bool EditTextSourceString(UObject* TextOwner, FText& Text, FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C63B738(relative to base address)
		FText Conv_VectorToText(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D1E8(relative to base address)
		FText Conv_Vector2dToText(FVector2D InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37D0BC(relative to base address)
		FText Conv_TransformToText(FTransform& InTrans); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37CFA4(relative to base address)
		FString Conv_TextToString(FText& InText); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7472A3D1C(relative to base address)
		FText Conv_StringToText(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489F6A40(relative to base address)
		FText Conv_RotatorToText(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37CE68(relative to base address)
		FText Conv_ObjectToText(UObject* InObj); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37CB84(relative to base address)
		FText Conv_NumericPropertyToText(int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62EDE8(relative to base address)
		FText Conv_NameToText(FName InName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37CAD0(relative to base address)
		FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7476402A0(relative to base address)
		FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C928(relative to base address)
		FText Conv_DoubleToText(double Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747195F8C(relative to base address)
		FText Conv_ColorToText(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C7FC(relative to base address)
		FText Conv_ByteToText(char Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747640C10(relative to base address)
		FText Conv_BoolToText(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C764(relative to base address)
		FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C424(relative to base address)
		FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C0E0(relative to base address)
		FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C278(relative to base address)
		FText AsTimespan_Timespan(FTimespan& InTimespan); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C6B0(relative to base address)
		FText AsTime_DateTime(FDateTime& In); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37C5D0(relative to base address)
		FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37BE6C(relative to base address)
		FText AsDateTime_DateTime(FDateTime& In); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37BCA8(relative to base address)
		FText AsDate_DateTime(FDateTime& InDateTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37BD8C(relative to base address)
		FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37B5E8(relative to base address)
		FText AsCurrency_Integer(int32_t Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37B9C0(relative to base address)
		FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C37B6E8(relative to base address)
	};


	// Class Engine.ActorDescContainerInstance
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorDescContainerInstance : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorDescContainerInstance");
			return ret;
		}
	};


	// Class Engine.LevelInstanceContainerInstance
	// Inherited from UActorDescContainerInstance -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceContainerInstance : public UActorDescContainerInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceContainerInstance");
			return ret;
		}
	};


	// Class Engine.LevelInstanceEditorPivotInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceEditorPivotInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceEditorPivotInterface");
			return ret;
		}
	};


	// Class Engine.WorldPartitionPropertyOverride
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionPropertyOverride : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionPropertyOverride");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverrideAsset
	// Inherited from UWorldPartitionPropertyOverride -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverrideAsset : public UWorldPartitionPropertyOverride	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverrideAsset");
			return ret;
		}
	};


	// Class Engine.ActorDescContainer
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorDescContainer : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorDescContainer");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverrideContainer
	// Inherited from UActorDescContainer -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverrideContainer : public UActorDescContainer	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverrideContainer");
			return ret;
		}
	};


	// Class Engine.WorldPartitionPropertyOverridePolicy
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionPropertyOverridePolicy : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionPropertyOverridePolicy");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverridePolicy
	// Inherited from UWorldPartitionPropertyOverridePolicy -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverridePolicy : public UWorldPartitionPropertyOverridePolicy	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverridePolicy");
			return ret;
		}
	};


	// Class Engine.LevelInstancePropertyOverrideSamplePolicy
	// Inherited from ULevelInstancePropertyOverridePolicy -> UWorldPartitionPropertyOverridePolicy -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstancePropertyOverrideSamplePolicy : public ULevelInstancePropertyOverridePolicy	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePropertyOverrideSamplePolicy");
			return ret;
		}
	};


	// Class Engine.LevelInstanceSettings
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class ULevelInstanceSettings : public UObject	
	{
	public:
		FString PropertyOverridePolicyClass; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceSettings");
			return ret;
		}
	};


	// Class Engine.World
	// Inherited from UObject
	// Size: 0x8E0 (0x908 - 0x28)
	class UWorld : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		ULevel* PersistentLevel; // 0x30(0x8)
		UNetDriver* NetDriver; // 0x38(0x8)
		ULineBatchComponent* LineBatcher; // 0x40(0x8)
		ULineBatchComponent* PersistentLineBatcher; // 0x48(0x8)
		ULineBatchComponent* ForegroundLineBatcher; // 0x50(0x8)
		AGameNetworkManager* NetworkManager; // 0x58(0x8)
		UPhysicsCollisionHandler* PhysicsCollisionHandler; // 0x60(0x8)
		TArray<UObject*> ExtraReferencedObjects; // 0x68(0x10)
		TArray<UObject*> PerModuleDataObjects; // 0x78(0x10)
		TArray<ULevelStreaming*> StreamingLevels; // 0x88(0x10)
		FStreamingLevelsToConsider StreamingLevelsToConsider; // 0x98(0x28)
		AServerStreamingLevelsVisibility* ServerStreamingLevelsVisibility; // 0xC0(0x8)
		FString StreamingLevelsPrefix; // 0xC8(0x10)
		unsigned char UnknownData01_6[0x8]; // 0xD8(0x8) UNKNOWN PROPERTY
		ULevel* CurrentLevelPendingVisibility; // 0xE0(0x8)
		ULevel* CurrentLevelPendingInvisibility; // 0xE8(0x8)
		UDemoNetDriver* DemoNetDriver; // 0xF0(0x8)
		AParticleEventManager* MyParticleEventManager; // 0xF8(0x8)
		APhysicsVolume* DefaultPhysicsVolume; // 0x100(0x8)
		unsigned char UnknownData02_6[0x36]; // 0x108(0x36) UNKNOWN PROPERTY
		unsigned char UnknownBit03 : 1; // 0x13E:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x13E:1(0x1) UNKNOWN PROPERTY
		bool bAreConstraintsDirty : 1; // 0x13E:2(0x1)
		unsigned char UnknownData05_5[0x11]; // 0x13F(0x11) UNKNOWN PROPERTY
		UNavigationSystemBase* NavigationSystem; // 0x150(0x8)
		AGameModeBase* AuthorityGameMode; // 0x158(0x8)
		AGameStateBase* GameState; // 0x160(0x8)
		UAISystemBase* AISystem; // 0x168(0x8)
		UAvoidanceManager* AvoidanceManager; // 0x170(0x8)
		TArray<ULevel*> Levels; // 0x178(0x10)
		TArray<FLevelCollection> LevelCollections; // 0x188(0x10)
		unsigned char UnknownData06_6[0x40]; // 0x198(0x40) UNKNOWN PROPERTY
		UGameInstance* OwningGameInstance; // 0x1D8(0x8)
		TArray<UMaterialParameterCollectionInstance*> ParameterCollectionInstances; // 0x1E0(0x10)
		UCanvas* CanvasForRenderingToTarget; // 0x1F0(0x8)
		UCanvas* CanvasForDrawMaterialToRenderTarget; // 0x1F8(0x8)
		unsigned char UnknownData07_6[0x70]; // 0x200(0x70) UNKNOWN PROPERTY
		UPhysicsFieldComponent* PhysicsField; // 0x270(0x8)
		TSet<UActorComponent*> ComponentsThatNeedPreEndOfFrameSync; // 0x278(0x50)
		TArray<UActorComponent*> ComponentsThatNeedEndOfFrameUpdate; // 0x2C8(0x10)
		TArray<UActorComponent*> ComponentsThatNeedEndOfFrameUpdate_OnGameThread; // 0x2D8(0x10)
		unsigned char UnknownData08_6[0x438]; // 0x2E8(0x438) UNKNOWN PROPERTY
		UWorldComposition* WorldComposition; // 0x720(0x8)
		UContentBundleManager* ContentBundleManager; // 0x728(0x8)
		unsigned char UnknownData09_6[0xC0]; // 0x730(0xC0) UNKNOWN PROPERTY
		FWorldPSCPool PSCPool; // 0x7F0(0x58)
		unsigned char UnknownData10_7[0xC0]; // 0x848(0xC0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.World");
			return ret;
		}

		AWorldSettings K2_GetWorldSettings(); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8FB548(relative to base address)
		void HandleTimelineScrubbed(); // Flags: Final|Native|Public, Memory Exec: 0x7FF74C8FB534(relative to base address)
		UDataLayerManager GetDataLayerManager(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8FB3EC(relative to base address)
	};


	// Class Engine.LevelStreaming
	// Inherited from UObject
	// Size: 0x178 (0x1A0 - 0x28)
	class ULevelStreaming : public UObject	
	{
	public:
		TWeakObjectPtr<UWorld*> WorldAsset; // 0x28(0x20)
		int32_t StreamingPriority; // 0x48(0x4)
		FName PackageNameToLoad; // 0x4C(0x4)
		TArray<FName> LODPackageNames; // 0x50(0x10)
		unsigned char UnknownData00_6[0x10]; // 0x60(0x10) UNKNOWN PROPERTY
		FTransform LevelTransform; // 0x70(0x60)
		bool bClientOnlyVisible; // 0xD0(0x1)
		unsigned char UnknownData01_6[0x3]; // 0xD1(0x3) UNKNOWN PROPERTY
		int32_t LevelLODIndex; // 0xD4(0x4)
		unsigned char UnknownBit02 : 1; // 0xD8:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit03 : 1; // 0xD8:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0xD8:2(0x1) UNKNOWN PROPERTY
		bool bShouldBeVisible : 1; // 0xD8:3(0x1)
		bool bShouldBeLoaded : 1; // 0xD8:4(0x1)
		unsigned char UnknownData05_3[0x19]; // 0xD9(0x19) UNKNOWN PROPERTY
		bool bLocked : 1; // 0xF2:0(0x1)
		bool bIsStatic : 1; // 0xF2:1(0x1)
		bool bShouldBlockOnLoad : 1; // 0xF2:2(0x1)
		bool bShouldBlockOnUnload : 1; // 0xF2:3(0x1)
		bool bDisableDistanceStreaming : 1; // 0xF2:4(0x1)
		bool bDrawOnLevelStatusMap : 1; // 0xF2:5(0x1)
		unsigned char UnknownData06_5[0x1]; // 0xF3(0x1) UNKNOWN PROPERTY
		FLinearColor LevelColor; // 0xF4(0x10)
		unsigned char UnknownData07_6[0x4]; // 0x104(0x4) UNKNOWN PROPERTY
		TArray<ALevelStreamingVolume*> EditorStreamingVolumes; // 0x108(0x10)
		float MinTimeBetweenVolumeUnloadRequests; // 0x118(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x11C(0x4) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnLevelLoaded; // 0x120(0x10)
		FMulticastInlineDelegate OnLevelUnloaded; // 0x130(0x10)
		FMulticastInlineDelegate OnLevelShown; // 0x140(0x10)
		FMulticastInlineDelegate OnLevelHidden; // 0x150(0x10)
		ULevel* LoadedLevel; // 0x160(0x8)
		ULevel* PendingUnloadLevel; // 0x168(0x8)
		unsigned char UnknownData09_7[0x28]; // 0x170(0x28) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreaming");
			return ret;
		}

		bool ShouldBeLoaded(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68EFBC(relative to base address)
		void SetShouldBeVisible(bool bInShouldBeVisible); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68EE2C(relative to base address)
		void SetShouldBeLoaded(bool bInShouldBeLoaded); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68EDA8(relative to base address)
		void SetPriority(int32_t NewPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68ED28(relative to base address)
		void SetLevelLODIndex(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68ECA8(relative to base address)
		void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68EC28(relative to base address)
		bool IsStreamingStatePending(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68DD98(relative to base address)
		bool IsLevelVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68DD54(relative to base address)
		bool IsLevelLoaded(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68DD38(relative to base address)
		FName GetWorldAssetPackageFName(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68D880(relative to base address)
		ULevel GetLoadedLevel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7F50(relative to base address)
		ALevelScriptActor GetLevelScriptActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68D804(relative to base address)
		bool GetIsRequestingUnloadAndRemoval(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68D7E8(relative to base address)
		ULevelStreaming CreateInstance(FString UniqueInstanceName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68D748(relative to base address)
	};


	// Class Engine.LevelStreamingAlwaysLoaded
	// Inherited from ULevelStreaming -> UObject
	// Size: 0x8 (0x1A0 - 0x198)
	class ULevelStreamingAlwaysLoaded : public ULevelStreaming	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x198(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingAlwaysLoaded");
			return ret;
		}
	};


	// Class Engine.LevelStreamingDynamic
	// Inherited from ULevelStreaming -> UObject
	// Size: 0x8 (0x1A0 - 0x198)
	class ULevelStreamingDynamic : public ULevelStreaming	
	{
	public:
		bool bInitiallyLoaded : 1; // 0x198:0(0x1)
		bool bInitiallyVisible : 1; // 0x198:1(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x199(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingDynamic");
			return ret;
		}

		ULevelStreamingDynamic LoadLevelInstanceBySoftObjectPtr(UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C37E1A4(relative to base address)
		ULevelStreamingDynamic LoadLevelInstance(UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride, UClass* OptionalLevelStreamingClass, bool bLoadAsTempPackage); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C37DBB4(relative to base address)
	};


	// Class Engine.LevelStreamingPersistent
	// Inherited from ULevelStreaming -> UObject
	// Size: 0x8 (0x1A0 - 0x198)
	class ULevelStreamingPersistent : public ULevelStreaming	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x198(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingPersistent");
			return ret;
		}
	};


	// Class Engine.LevelStreamingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x18 (0x2E0 - 0x2C8)
	class ALevelStreamingVolume : public AVolume	
	{
	public:
		TArray<FName> StreamingLevelNames; // 0x2C8(0x10)
		bool bEditorPreVisOnly : 1; // 0x2D8:0(0x1)
		bool bDisabled : 1; // 0x2D8:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2D9(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EStreamingVolumeUsage> StreamingUsage; // 0x2DC(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x2DD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingVolume");
			return ret;
		}
	};


	// Class Engine.LightComponentBase
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x50 (0x270 - 0x220)
	class ULightComponentBase : public USceneComponent	
	{
	public:
		FGuid OriginalLightGuid; // 0x220(0x10)
		FGuid LightGuid; // 0x230(0x10)
		float Brightness; // 0x240(0x4)
		float Intensity; // 0x244(0x4)
		FColor LightColor; // 0x248(0x4)
		bool bAffectsWorld : 1; // 0x24C:0(0x1)
		bool CastShadows : 1; // 0x24C:1(0x1)
		bool CastStaticShadows : 1; // 0x24C:2(0x1)
		bool CastDynamicShadows : 1; // 0x24C:3(0x1)
		bool bAffectTranslucentLighting : 1; // 0x24C:4(0x1)
		bool bTransmission : 1; // 0x24C:5(0x1)
		bool bCastVolumetricShadow : 1; // 0x24C:6(0x1)
		bool bCastDeepShadow : 1; // 0x24C:7(0x1)
		bool bCastRaytracedShadow : 1; // 0x24D:0(0x1)
		unsigned char UnknownData00_5[0x2]; // 0x24E(0x2) UNKNOWN PROPERTY
		TEnumAsByte<ECastRayTracedShadow> CastRaytracedShadow; // 0x250(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x251(0x3) UNKNOWN PROPERTY
		bool bAffectReflection : 1; // 0x254:0(0x1)
		bool bAffectGlobalIllumination : 1; // 0x254:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x255(0x3) UNKNOWN PROPERTY
		float DeepShadowLayerDistribution; // 0x258(0x4)
		float IndirectLightingIntensity; // 0x25C(0x4)
		float VolumetricScatteringIntensity; // 0x260(0x4)
		int32_t SamplesPerPixel; // 0x264(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightComponentBase");
			return ret;
		}

		void SetSamplesPerPixel(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EF68(relative to base address)
		void SetCastVolumetricShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EEE8(relative to base address)
		void SetCastShadows(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EE68(relative to base address)
		void SetCastRaytracedShadows(TEnumAsByte<ECastRayTracedShadow> bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EDBC(relative to base address)
		void SetCastRaytracedShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37ECFC(relative to base address)
		void SetCastDeepShadow(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EC7C(relative to base address)
		void SetAffectReflection(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EBFC(relative to base address)
		void SetAffectGlobalIllumination(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C37EB7C(relative to base address)
		FLinearColor GetLightColor(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749A91ADC(relative to base address)
	};


	// Class Engine.Texture2D
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x150 - 0x130)
	class UTexture2D : public UTexture	
	{
	public:
		int32_t FirstResourceMemMip; // 0x130(0x4)
		bool bTemporarilyDisableStreaming : 1; // 0x134:0(0x1)
		TEnumAsByte<TextureAddress> AddressX; // 0x135(0x1)
		TEnumAsByte<TextureAddress> AddressY; // 0x136(0x1)
		unsigned char UnknownData00_6[0x1]; // 0x137(0x1) UNKNOWN PROPERTY
		FIntPoint ImportedSize; // 0x138(0x8)
		unsigned char UnknownData01_7[0x10]; // 0x140(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture2D");
			return ret;
		}

		int32_t Blueprint_GetSizeY(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C89EB24(relative to base address)
		int32_t Blueprint_GetSizeX(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C89EB04(relative to base address)
		FSharedImageConstRefBlueprint Blueprint_GetCPUCopy(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C89EA68(relative to base address)
	};


	// Class Engine.LightMapTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class ULightMapTexture2D : public UTexture2D	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x150(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightMapTexture2D");
			return ret;
		}
	};


	// Class Engine.LightmassPortal
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALightmassPortal : public AActor	
	{
	public:
		ULightmassPortalComponent* PortalComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassPortal");
			return ret;
		}
	};


	// Class Engine.LightmassPortalComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x230 - 0x220)
	class ULightmassPortalComponent : public USceneComponent	
	{
	public:
		UBoxComponent* PreviewBox; // 0x220(0x8)
		unsigned char UnknownData00_7[0x8]; // 0x228(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassPortalComponent");
			return ret;
		}
	};


	// Class Engine.LocalFogVolume
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALocalFogVolume : public AInfo	
	{
	public:
		ULocalFogVolumeComponent* LocalFogVolumeVolume; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalFogVolume");
			return ret;
		}
	};


	// Class Engine.MapBuildDataRegistry
	// Inherited from UObject
	// Size: 0x210 (0x238 - 0x28)
	class UMapBuildDataRegistry : public UObject	
	{
	public:
		TEnumAsByte<ELightingBuildQuality> LevelLightingQuality; // 0x28(0x1)
		unsigned char UnknownData00_7[0x20F]; // 0x29(0x20F) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MapBuildDataRegistry");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAbs
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionAbs : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAbs");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAbsorptionMediumMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionAbsorptionMediumMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput TransmittanceColor; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAbsorptionMediumMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionActorPositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionActorPositionWS : public UMaterialExpression	
	{
	public:
		EPositionOrigin OriginType; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionActorPositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAdd
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionAdd : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAdd");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionTextureBase : public UMaterialExpression	
	{
	public:
		UTexture* Texture; // 0xB0(0x8)
		TEnumAsByte<EMaterialSamplerType> SamplerType; // 0xB8(0x1)
		bool IsDefaultMeshpaintTexture : 1; // 0xB9:0(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xBA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSample
	// Inherited from UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0xF8 (0x1B8 - 0xC0)
	class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase	
	{
	public:
		FExpressionInput Coordinates; // 0xC0(0x28)
		FExpressionInput TextureObject; // 0xE8(0x28)
		FExpressionInput MipValue; // 0x110(0x28)
		FExpressionInput CoordinatesDX; // 0x138(0x28)
		FExpressionInput CoordinatesDY; // 0x160(0x28)
		FExpressionInput AutomaticViewMipBiasValue; // 0x188(0x28)
		TEnumAsByte<ETextureMipValueMode> MipValueMode; // 0x1B0(0x1)
		TEnumAsByte<ESamplerSourceMode> SamplerSource; // 0x1B1(0x1)
		bool AutomaticViewMipBias : 1; // 0x1B2:0(0x1)
		char ConstCoordinate; // 0x1B3(0x1)
		int32_t ConstMipValue; // 0x1B4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameter
	// Inherited from UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x60 (0x218 - 0x1B8)
	class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample	
	{
	public:
		FName ParameterName; // 0x1B8(0x4)
		FGuid ExpressionGUID; // 0x1BC(0x10)
		FName Group; // 0x1CC(0x4)
		int32_t SortPriority; // 0x1D0(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x1D4(0x4) UNKNOWN PROPERTY
		FParameterChannelNames ChannelNames; // 0x1D8(0x40)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameter2D
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameter2D");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAntialiasedTextureMask
	// Inherited from UMaterialExpressionTextureSampleParameter2D -> UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x8 (0x220 - 0x218)
	class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D	
	{
	public:
		float Threshold; // 0x218(0x4)
		TEnumAsByte<ETextureColorChannel> Channel; // 0x21C(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x21D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAntialiasedTextureMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAppendVector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionAppendVector : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAppendVector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArccosine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArccosine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArccosine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArccosineFast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArccosineFast : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArccosineFast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArcsine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArcsine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArcsine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArcsineFast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArcsineFast : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArcsineFast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangent
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArctangent : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangent");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangent2
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionArctangent2 : public UMaterialExpression	
	{
	public:
		FExpressionInput Y; // 0xB0(0x28)
		FExpressionInput X; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangent2");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangent2Fast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionArctangent2Fast : public UMaterialExpression	
	{
	public:
		FExpressionInput Y; // 0xB0(0x28)
		FExpressionInput X; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangent2Fast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionArctangentFast
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionArctangentFast : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionArctangentFast");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAtmosphericFogColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAtmosphericFogColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAtmosphericLightColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAtmosphericLightColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionAtmosphericLightVector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionAtmosphericLightVector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBentNormalCustomOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBentNormalCustomOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBinaryOp
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionBinaryOp : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBinaryOp");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLess
	// Inherited from UMaterialExpressionBinaryOp -> UMaterialExpression -> UObject
	// Size: 0x0 (0x108 - 0x108)
	class UMaterialExpressionLess : public UMaterialExpressionBinaryOp	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLess");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBindlessSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionBindlessSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Bindless; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBindlessSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBlackBody
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionBlackBody : public UMaterialExpression	
	{
	public:
		FExpressionInput Temp; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBlackBody");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBlendMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x90 (0x140 - 0xB0)
	class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput A; // 0xB0(0x30)
		FMaterialAttributesInput B; // 0xE0(0x30)
		FExpressionInput Alpha; // 0x110(0x28)
		TEnumAsByte<EMaterialAttributeBlend> PixelAttributeBlendType; // 0x138(0x1)
		TEnumAsByte<EMaterialAttributeBlend> VertexAttributeBlendType; // 0x139(0x1)
		unsigned char UnknownData00_7[0x6]; // 0x13A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBlendMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionBounds : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EMaterialExpressionBoundsType> Type; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBreakMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBreakMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionBumpOffset
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionBumpOffset : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinate; // 0xB0(0x28)
		FExpressionInput Height; // 0xD8(0x28)
		FExpressionInput HeightRatioInput; // 0x100(0x28)
		float HeightRatio; // 0x128(0x4)
		float ReferencePlane; // 0x12C(0x4)
		uint32_t ConstCoordinate; // 0x130(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionBumpOffset");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCameraPositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCameraPositionWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCameraPositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCameraVectorWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCameraVectorWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCameraVectorWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCeil
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionCeil : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCeil");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParameter
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionParameter : public UMaterialExpression	
	{
	public:
		FName ParameterName; // 0xB0(0x4)
		FGuid ExpressionGUID; // 0xB4(0x10)
		FName Group; // 0xC4(0x4)
		int32_t SortPriority; // 0xC8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVectorParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x58 (0x128 - 0xD0)
	class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter	
	{
	public:
		FLinearColor DefaultValue; // 0xD0(0x10)
		bool bUseCustomPrimitiveData; // 0xE0(0x1)
		char PrimitiveDataIndex; // 0xE1(0x1)
		unsigned char UnknownData00_6[0x6]; // 0xE2(0x6) UNKNOWN PROPERTY
		FParameterChannelNames ChannelNames; // 0xE8(0x40)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVectorParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionChannelMaskParameter
	// Inherited from UMaterialExpressionVectorParameter -> UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x30 (0x158 - 0x128)
	class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter	
	{
	public:
		TEnumAsByte<EChannelMaskParameterColor> MaskChannel; // 0x128(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x129(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0x130(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionChannelMaskParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionClamp
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionClamp : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		FExpressionInput Min; // 0xD8(0x28)
		FExpressionInput Max; // 0x100(0x28)
		TEnumAsByte<EClampMode> ClampMode; // 0x128(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x129(0x3) UNKNOWN PROPERTY
		float MinDefault; // 0x12C(0x4)
		float MaxDefault; // 0x130(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionClamp");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionClearCoatNormalCustomOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCloudSampleAttribute
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCloudSampleAttribute");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCollectionParameter
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionCollectionParameter : public UMaterialExpression	
	{
	public:
		UMaterialParameterCollection* Collection; // 0xB0(0x8)
		FName ParameterName; // 0xB8(0x4)
		FGuid ParameterId; // 0xBC(0x10)
		unsigned char UnknownData00_7[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCollectionParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionComment
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionComment : public UMaterialExpression	
	{
	public:
		int32_t SizeX; // 0xB0(0x4)
		int32_t SizeY; // 0xB4(0x4)
		FString Text; // 0xB8(0x10)
		FLinearColor CommentColor; // 0xC8(0x10)
		int32_t FontSize; // 0xD8(0x4)
		bool bCommentBubbleVisible_InDetailsPanel : 1; // 0xDC:0(0x1)
		bool bColorCommentBubble : 1; // 0xDC:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0xDD(0x3) UNKNOWN PROPERTY
		bool bGroupMode; // 0xE0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionComment");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionComponentMask
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionComponentMask : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		bool R : 1; // 0xD8:0(0x1)
		bool G : 1; // 0xD8:1(0x1)
		bool B : 1; // 0xD8:2(0x1)
		bool A : 1; // 0xD8:3(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionComponentMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionComposite
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionComposite : public UMaterialExpression	
	{
	public:
		FString SubgraphName; // 0xB0(0x10)
		UMaterialExpressionPinBase* InputExpressions; // 0xC0(0x8)
		UMaterialExpressionPinBase* OutputExpressions; // 0xC8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionComposite");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionConstant : public UMaterialExpression	
	{
	public:
		float R; // 0xB0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant2Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionConstant2Vector : public UMaterialExpression	
	{
	public:
		float R; // 0xB0(0x4)
		float G; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant2Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant3Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionConstant3Vector : public UMaterialExpression	
	{
	public:
		FLinearColor Constant; // 0xB0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant3Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstant4Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionConstant4Vector : public UMaterialExpression	
	{
	public:
		FLinearColor Constant; // 0xB0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstant4Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstantBiasScale
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionConstantBiasScale : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Bias; // 0xD8(0x4)
		float Scale; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstantBiasScale");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCosine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionCosine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Period; // 0xD8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCosine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCrossProduct
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionCrossProduct : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCrossProduct");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionScalarParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x10 (0xE0 - 0xD0)
	class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter	
	{
	public:
		float DefaultValue; // 0xD0(0x4)
		bool bUseCustomPrimitiveData; // 0xD4(0x1)
		char PrimitiveDataIndex; // 0xD5(0x1)
		unsigned char UnknownData00_6[0x2]; // 0xD6(0x2) UNKNOWN PROPERTY
		float SliderMin; // 0xD8(0x4)
		float SliderMax; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionScalarParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCurveAtlasRowParameter
	// Inherited from UMaterialExpressionScalarParameter -> UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x38 (0x118 - 0xE0)
	class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter	
	{
	public:
		UCurveLinearColor* Curve; // 0xE0(0x8)
		UCurveLinearColorAtlas* Atlas; // 0xE8(0x8)
		FExpressionInput InputTime; // 0xF0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCurveAtlasRowParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionCustom
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x70 (0x120 - 0xB0)
	class UMaterialExpressionCustom : public UMaterialExpression	
	{
	public:
		FString Code; // 0xB0(0x10)
		TEnumAsByte<ECustomMaterialOutputType> OutputType; // 0xC0(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY
		FString Description; // 0xC8(0x10)
		TArray<FCustomInput> Inputs; // 0xD8(0x10)
		TArray<FCustomOutput> AdditionalOutputs; // 0xE8(0x10)
		TArray<FCustomDefine> AdditionalDefines; // 0xF8(0x10)
		TArray<FString> IncludeFilePaths; // 0x108(0x10)
		bool ShowCode; // 0x118(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x119(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionCustom");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionDataDrivenShaderPlatformInfoSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput InputTrue; // 0xB0(0x28)
		FExpressionInput InputFalse; // 0xD8(0x28)
		TArray<FDataDrivenShaderPlatformInfoInput> DDSPIPropertyNames; // 0x100(0x10)
		bool bContainsInvalidProperty : 1; // 0x110:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x111(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDataDrivenShaderPlatformInfoSwitch");
			return ret;
		}

		TArray GetNameOptions(); // Flags: Final|Native|Public|Const, Memory Exec: 0x7FF74C3803DC(relative to base address)
	};


	// Class Engine.MaterialExpressionDBufferTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDBufferTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte<EDBufferTextureId> DBufferTextureId; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDBufferTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDDX
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDDX : public UMaterialExpression	
	{
	public:
		FExpressionInput Value; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDDX");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDDY
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDDY : public UMaterialExpression	
	{
	public:
		FExpressionInput Value; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDDY");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDecalColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalDerivative
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDecalDerivative : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalDerivative");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalLifetimeOpacity
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalLifetimeOpacity");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDecalMipmapLevel
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression	
	{
	public:
		FExpressionInput TextureSize; // 0xB0(0x28)
		float ConstWidth; // 0xD8(0x4)
		float ConstHeight; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDecalMipmapLevel");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDeltaTime
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDeltaTime : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDeltaTime");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDepthFade
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionDepthFade : public UMaterialExpression	
	{
	public:
		FExpressionInput InOpacity; // 0xB0(0x28)
		FExpressionInput FadeDistance; // 0xD8(0x28)
		float OpacityDefault; // 0x100(0x4)
		float FadeDistanceDefault; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDepthFade");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDepthOfFieldFunction
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EDepthOfFieldFunctionValue> FunctionValue; // 0xB0(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Depth; // 0xB8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDepthOfFieldFunction");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDeriveNormalZ
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDeriveNormalZ : public UMaterialExpression	
	{
	public:
		FExpressionInput InXY; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDeriveNormalZ");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDesaturation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionDesaturation : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		FExpressionInput Fraction; // 0xD8(0x28)
		FLinearColor LuminanceFactors; // 0x100(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDesaturation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionDistance : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceCullFade
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionDistanceCullFade : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceCullFade");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceFieldApproxAO
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xC0 (0x170 - 0xB0)
	class UMaterialExpressionDistanceFieldApproxAO : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY
		FExpressionInput Normal; // 0xE0(0x28)
		FExpressionInput BaseDistance; // 0x108(0x28)
		float BaseDistanceDefault; // 0x130(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x134(0x4) UNKNOWN PROPERTY
		FExpressionInput Radius; // 0x138(0x28)
		float RadiusDefault; // 0x160(0x4)
		uint32_t NumSteps; // 0x164(0x4)
		float StepScaleDefault; // 0x168(0x4)
		unsigned char UnknownData02_7[0x4]; // 0x16C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceFieldApproxAO");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceFieldGradient
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceFieldGradient");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceFieldsRenderingSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput No; // 0xB0(0x28)
		FExpressionInput Yes; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceFieldsRenderingSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDistanceToNearestSurface
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDistanceToNearestSurface");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDivide
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionDivide : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDivide");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDotProduct
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionDotProduct : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDotProduct");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDoubleVectorParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x20 (0xF0 - 0xD0)
	class UMaterialExpressionDoubleVectorParameter : public UMaterialExpressionParameter	
	{
	public:
		FVector4d DefaultValue; // 0xD0(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDoubleVectorParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionDynamicParameter
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionDynamicParameter : public UMaterialExpression	
	{
	public:
		TArray<FString> ParamNames; // 0xB0(0x10)
		FLinearColor DefaultValue; // 0xC0(0x10)
		uint32_t ParameterIndex; // 0xD0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionDynamicParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExecBegin
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionExecBegin : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput Exec; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExecBegin");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExecEnd
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionExecEnd : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExecEnd");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExponential
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionExponential : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExponential");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionExponential2
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionExponential2 : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionExponential2");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionEyeAdaptation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionEyeAdaptation : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionEyeAdaptation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionEyeAdaptationInverse
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionEyeAdaptationInverse : public UMaterialExpression	
	{
	public:
		FExpressionInput LightValueInput; // 0xB0(0x28)
		FExpressionInput AlphaInput; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionEyeAdaptationInverse");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFeatureLevelSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xF0 (0x1A0 - 0xB0)
	class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Inputs; // 0xD8(0xC8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFeatureLevelSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFloor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionFloor : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFloor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFmod
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionFmod : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFmod");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFontSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionFontSample : public UMaterialExpression	
	{
	public:
		UFont* Font; // 0xB0(0x8)
		int32_t FontTexturePage; // 0xB8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFontSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFontSampleParameter
	// Inherited from UMaterialExpressionFontSample -> UMaterialExpression -> UObject
	// Size: 0x20 (0xE0 - 0xC0)
	class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample	
	{
	public:
		FName ParameterName; // 0xC0(0x4)
		FGuid ExpressionGUID; // 0xC4(0x10)
		FName Group; // 0xD4(0x4)
		int32_t SortPriority; // 0xD8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFontSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionForLoop
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionForLoop : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput LoopBody; // 0xB0(0x8)
		FExpressionExecOutput Completed; // 0xB8(0x8)
		FExpressionInput StartIndex; // 0xC0(0x28)
		FExpressionInput EndIndex; // 0xE8(0x28)
		FExpressionInput IndexStep; // 0x110(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionForLoop");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFrac
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionFrac : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFrac");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFresnel
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionFresnel : public UMaterialExpression	
	{
	public:
		FExpressionInput ExponentIn; // 0xB0(0x28)
		float Exponent; // 0xD8(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY
		FExpressionInput BaseReflectFractionIn; // 0xE0(0x28)
		float BaseReflectFraction; // 0x108(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x10C(0x4) UNKNOWN PROPERTY
		FExpressionInput Normal; // 0x110(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFresnel");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFunctionInput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xB0 (0x160 - 0xB0)
	class UMaterialExpressionFunctionInput : public UMaterialExpression	
	{
	public:
		FExpressionInput Preview; // 0xB0(0x28)
		FName InputName; // 0xD8(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY
		FString Description; // 0xE0(0x10)
		FGuid ID; // 0xF0(0x10)
		TEnumAsByte<EFunctionInputType> InputType; // 0x100(0x1)
		unsigned char UnknownData01_6[0xF]; // 0x101(0xF) UNKNOWN PROPERTY
		FVector4f PreviewValue; // 0x110(0x10)
		bool bUsePreviewValueAsDefault : 1; // 0x120:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x121(0x3) UNKNOWN PROPERTY
		int32_t SortPriority; // 0x124(0x4)
		bool bCompilingFunctionPreview : 1; // 0x128:0(0x1)
		unsigned char UnknownData03_7[0x37]; // 0x129(0x37) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFunctionInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionFunctionOutput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionFunctionOutput : public UMaterialExpression	
	{
	public:
		FName OutputName; // 0xB0(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY
		FString Description; // 0xB8(0x10)
		int32_t SortPriority; // 0xC8(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY
		FExpressionInput A; // 0xD0(0x28)
		bool bLastPreviewed : 1; // 0xF8:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0xF9(0x3) UNKNOWN PROPERTY
		FGuid ID; // 0xFC(0x10)
		unsigned char UnknownData03_7[0x4]; // 0x10C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionFunctionOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGenericConstant
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionGenericConstant : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGenericConstant");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionConstantDouble
	// Inherited from UMaterialExpressionGenericConstant -> UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionConstantDouble : public UMaterialExpressionGenericConstant	
	{
	public:
		double Value; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionConstantDouble");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGetLocal
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionGetLocal : public UMaterialExpression	
	{
	public:
		FName LocalName; // 0xB0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGetLocal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGetMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x40 (0xF0 - 0xB0)
	class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)
		TArray<FGuid> AttributeGetTypes; // 0xE0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGetMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionGIReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionGIReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput StaticIndirect; // 0xD8(0x28)
		FExpressionInput DynamicIndirect; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionGIReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionHairAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionHairAttributes : public UMaterialExpression	
	{
	public:
		bool bUseTangentSpace : 1; // 0xB0:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionHairAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionHairColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionHairColor : public UMaterialExpression	
	{
	public:
		FExpressionInput Melanin; // 0xB0(0x28)
		FExpressionInput Redness; // 0xD8(0x28)
		FExpressionInput DyeColor; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionHairColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionHsvToRgb
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionHsvToRgb : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionHsvToRgb");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionIf
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xD8 (0x188 - 0xB0)
	class UMaterialExpressionIf : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput AGreaterThanB; // 0x100(0x28)
		FExpressionInput AEqualsB; // 0x128(0x28)
		FExpressionInput ALessThanB; // 0x150(0x28)
		float EqualsThreshold; // 0x178(0x4)
		float ConstB; // 0x17C(0x4)
		float ConstAEqualsB; // 0x180(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x184(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionIf");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionIfThenElse
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionIfThenElse : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput Then; // 0xB0(0x8)
		FExpressionExecOutput Else; // 0xB8(0x8)
		FExpressionInput Condition; // 0xC0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionIfThenElse");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionInverseLinearInterpolate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput Value; // 0x100(0x28)
		float ConstA; // 0x128(0x4)
		float ConstB; // 0x12C(0x4)
		float ConstValue; // 0x130(0x4)
		bool bClampResult; // 0x134(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x135(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionInverseLinearInterpolate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionIsOrthographic
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionIsOrthographic : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionIsOrthographic");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLength
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLength : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLength");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLightmapUVs
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionLightmapUVs : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLightmapUVs");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLightmassReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionLightmassReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Realtime; // 0xB0(0x28)
		FExpressionInput Lightmass; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLightmassReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLightVector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionLightVector : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLightVector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLinearInterpolate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionLinearInterpolate : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput Alpha; // 0x100(0x28)
		float ConstA; // 0x128(0x4)
		float ConstB; // 0x12C(0x4)
		float ConstAlpha; // 0x130(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLinearInterpolate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLocalPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionLocalPosition : public UMaterialExpression	
	{
	public:
		EPositionIncludedOffsets IncludedOffsets; // 0xB0(0x4)
		ELocalPositionOrigin LocalOrigin; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLocalPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLogarithm
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLogarithm : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLogarithm");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLogarithm10
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLogarithm10 : public UMaterialExpression	
	{
	public:
		FExpressionInput X; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLogarithm10");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionLogarithm2
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionLogarithm2 : public UMaterialExpression	
	{
	public:
		FExpressionInput X; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionLogarithm2");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMakeMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x438 (0x4E8 - 0xB0)
	class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Anisotropy; // 0x150(0x28)
		FExpressionInput EmissiveColor; // 0x178(0x28)
		FExpressionInput Opacity; // 0x1A0(0x28)
		FExpressionInput OpacityMask; // 0x1C8(0x28)
		FExpressionInput Normal; // 0x1F0(0x28)
		FExpressionInput Tangent; // 0x218(0x28)
		FExpressionInput WorldPositionOffset; // 0x240(0x28)
		FExpressionInput SubsurfaceColor; // 0x268(0x28)
		FExpressionInput ClearCoat; // 0x290(0x28)
		FExpressionInput ClearCoatRoughness; // 0x2B8(0x28)
		FExpressionInput AmbientOcclusion; // 0x2E0(0x28)
		FExpressionInput Refraction; // 0x308(0x28)
		FExpressionInput CustomizedUVs; // 0x330(0x140)
		FExpressionInput PixelDepthOffset; // 0x470(0x28)
		FExpressionInput ShadingModel; // 0x498(0x28)
		FExpressionInput Displacement; // 0x4C0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMakeMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMapARPassthroughCameraUV
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMapARPassthroughCameraUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialAttributeLayers
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x190 (0x240 - 0xB0)
	class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression	
	{
	public:
		FMaterialAttributesInput Input; // 0xB0(0x30)
		FMaterialLayersFunctions DefaultLayers; // 0xE0(0x128)
		TArray<UMaterialExpressionMaterialFunctionCall*> LayerCallers; // 0x208(0x10)
		int32_t NumActiveLayerCallers; // 0x218(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x21C(0x4) UNKNOWN PROPERTY
		TArray<UMaterialExpressionMaterialFunctionCall*> BlendCallers; // 0x220(0x10)
		int32_t NumActiveBlendCallers; // 0x230(0x4)
		bool bIsLayerGraphBuilt; // 0x234(0x1)
		unsigned char UnknownData01_7[0xB]; // 0x235(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialAttributeLayers");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialFunctionCall
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression	
	{
	public:
		UMaterialFunctionInterface* MaterialFunction; // 0xB0(0x8)
		TArray<FFunctionExpressionInput> FunctionInputs; // 0xB8(0x10)
		TArray<FFunctionExpressionOutput> FunctionOutputs; // 0xC8(0x10)
		FMaterialParameterInfo FunctionParameterInfo; // 0xD8(0xC)
		unsigned char UnknownData00_7[0x4]; // 0xE4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialFunctionCall");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialLayerOutput
	// Inherited from UMaterialExpressionFunctionOutput -> UMaterialExpression -> UObject
	// Size: 0x0 (0x110 - 0x110)
	class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialLayerOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialProxyReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Realtime; // 0xB0(0x28)
		FExpressionInput MaterialProxy; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialProxyReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMaterialSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionMaterialSample : public UMaterialExpression	
	{
	public:
		UMaterialInterface* MaterialReference; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMaterialSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMax
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionMax : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMax");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMeshPaintTextureObject
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionMeshPaintTextureObject : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMeshPaintTextureObject");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMin
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionMin : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMin");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionModulo
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionModulo : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionModulo");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionMultiply
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionMultiply : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionMultiply");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRerouteBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionRerouteBase : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRerouteBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNamedRerouteBase
	// Inherited from UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNamedRerouteBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNamedRerouteDeclaration
	// Inherited from UMaterialExpressionNamedRerouteBase -> UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		FName Name; // 0xD8(0x4)
		FLinearColor NodeColor; // 0xDC(0x10)
		FGuid VariableGuid; // 0xEC(0x10)
		unsigned char UnknownData00_7[0x4]; // 0xFC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNamedRerouteDeclaration");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNamedRerouteUsage
	// Inherited from UMaterialExpressionNamedRerouteBase -> UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x18 (0xC8 - 0xB0)
	class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase	
	{
	public:
		UMaterialExpressionNamedRerouteDeclaration* Declaration; // 0xB0(0x8)
		FGuid DeclarationGuid; // 0xB8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNamedRerouteUsage");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNaniteReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionNaniteReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Nanite; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNaniteReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNeuralNetworkInput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionNeuralNetworkInput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		FExpressionInput Input0; // 0xD8(0x28)
		FExpressionInput Mask; // 0x100(0x28)
		TEnumAsByte<ENeuralIndexType> NeuralIndexType; // 0x128(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x129(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNeuralNetworkInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNeuralNetworkOutput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionNeuralNetworkOutput : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte<ENeuralIndexType> NeuralIndexType; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNeuralNetworkOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNoise
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionNoise : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY
		FExpressionInput FilterWidth; // 0xE0(0x28)
		float Scale; // 0x108(0x4)
		int32_t Quality; // 0x10C(0x4)
		TEnumAsByte<ENoiseFunction> NoiseFunction; // 0x110(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x111(0x3) UNKNOWN PROPERTY
		bool bTurbulence : 1; // 0x114:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		int32_t Levels; // 0x118(0x4)
		float OutputMin; // 0x11C(0x4)
		float OutputMax; // 0x120(0x4)
		float LevelScale; // 0x124(0x4)
		bool bTiling : 1; // 0x128:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x129(0x3) UNKNOWN PROPERTY
		uint32_t RepeatSize; // 0x12C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNoise");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionNormalize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionNormalize : public UMaterialExpression	
	{
	public:
		FExpressionInput VectorInput; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionNormalize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectBounds : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectLocalBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectLocalBounds : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectLocalBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectOrientation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectOrientation : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectOrientation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectPositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionObjectPositionWS : public UMaterialExpression	
	{
	public:
		EPositionOrigin OriginType; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectPositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionObjectRadius
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionObjectRadius : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionObjectRadius");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionOneMinus
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionOneMinus : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionOneMinus");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPanner
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionPanner : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinate; // 0xB0(0x28)
		FExpressionInput Time; // 0xD8(0x28)
		FExpressionInput Speed; // 0x100(0x28)
		float SpeedX; // 0x128(0x4)
		float SpeedY; // 0x12C(0x4)
		uint32_t ConstCoordinate; // 0x130(0x4)
		bool bFractionalPart; // 0x134(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x135(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPanner");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleDirection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleDirection : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleDirection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleMacroUV
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleMacroUV : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleMacroUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleMotionBlurFade
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleMotionBlurFade");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticlePositionWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionParticlePositionWS : public UMaterialExpression	
	{
	public:
		EPositionOrigin OriginType; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticlePositionWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleRadius
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleRadius : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleRadius");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleRandom
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleRandom : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleRandom");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleRelativeTime
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleRelativeTime : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleRelativeTime");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSize : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSpeed
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSpeed : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSpeed");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSpriteRotation
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSpriteRotation : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSpriteRotation");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSubUV
	// Inherited from UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x8 (0x1C0 - 0x1B8)
	class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample	
	{
	public:
		bool bBlend : 1; // 0x1B8:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x1B9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSubUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionParticleSubUVProperties
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionParticleSubUVProperties");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPathTracingBufferTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionPathTracingBufferTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte<EPathTracingBufferTextureId> PathTracingBufferTextureId; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPathTracingBufferTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPathTracingQualitySwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionPathTracingQualitySwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Normal; // 0xB0(0x28)
		FExpressionInput PathTraced; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPathTracingQualitySwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPathTracingRayTypeSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xC8 (0x178 - 0xB0)
	class UMaterialExpressionPathTracingRayTypeSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Main; // 0xB0(0x28)
		FExpressionInput Shadow; // 0xD8(0x28)
		FExpressionInput IndirectDiffuse; // 0x100(0x28)
		FExpressionInput IndirectSpecular; // 0x128(0x28)
		FExpressionInput IndirectVolume; // 0x150(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPathTracingRayTypeSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceCustomData
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression	
	{
	public:
		FExpressionInput DefaultValue; // 0xB0(0x28)
		float ConstDefaultValue; // 0xD8(0x4)
		uint32_t DataIndex; // 0xDC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceCustomData");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceCustomData3Vector
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x40 (0xF0 - 0xB0)
	class UMaterialExpressionPerInstanceCustomData3Vector : public UMaterialExpression	
	{
	public:
		FExpressionInput DefaultValue; // 0xB0(0x28)
		FLinearColor ConstDefaultValue; // 0xD8(0x10)
		uint32_t DataIndex; // 0xE8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xEC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceCustomData3Vector");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceFadeAmount
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceFadeAmount");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPerInstanceRandom
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPerInstanceRandom : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPerInstanceRandom");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPinBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x18 (0xC8 - 0xB0)
	class UMaterialExpressionPinBase : public UMaterialExpression	
	{
	public:
		TArray<FCompositeReroute> ReroutePins; // 0xB0(0x10)
		TEnumAsByte<EEdGraphPinDirection> PinDirection; // 0xC0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPinBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPixelDepth
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPixelDepth : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPixelDepth");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPixelNormalWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPixelNormalWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPixelNormalWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPostVolumeUserFlagTest
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionPostVolumeUserFlagTest : public UMaterialExpression	
	{
	public:
		FExpressionInput BitIndex; // 0xB0(0x28)
		int32_t ConstBitIndex; // 0xD8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPostVolumeUserFlagTest");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPower
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionPower : public UMaterialExpression	
	{
	public:
		FExpressionInput base; // 0xB0(0x28)
		FExpressionInput Exponent; // 0xD8(0x28)
		float ConstExponent; // 0x100(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x104(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPower");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPrecomputedAOMask
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPrecomputedAOMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreSkinnedLocalBounds
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreSkinnedLocalBounds");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreSkinnedNormal
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreSkinnedNormal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreSkinnedPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreSkinnedPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionPreviousFrameSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput CurrentFrame; // 0xB0(0x28)
		FExpressionInput PreviousFrame; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionPreviousFrameSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionQualitySwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xC8 (0x178 - 0xB0)
	class UMaterialExpressionQualitySwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Inputs; // 0xD8(0xA0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionQualitySwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRayTracingQualitySwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Normal; // 0xB0(0x28)
		FExpressionInput RayTraced; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRayTracingQualitySwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionReflectionCapturePassSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Reflection; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionReflectionCapturePassSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionReflectionVectorWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionReflectionVectorWS : public UMaterialExpression	
	{
	public:
		FExpressionInput CustomWorldNormal; // 0xB0(0x28)
		bool bNormalizeCustomWorldNormal : 1; // 0xD8:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionReflectionVectorWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRequiredSamplersSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionRequiredSamplersSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput InputTrue; // 0xB0(0x28)
		FExpressionInput InputFalse; // 0xD8(0x28)
		uint32_t RequiredSamplers; // 0x100(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x104(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRequiredSamplersSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionReroute
	// Inherited from UMaterialExpressionRerouteBase -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionReroute");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRgbToHsv
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionRgbToHsv : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRgbToHsv");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRotateAboutAxis
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xA8 (0x158 - 0xB0)
	class UMaterialExpressionRotateAboutAxis : public UMaterialExpression	
	{
	public:
		FExpressionInput NormalizedRotationAxis; // 0xB0(0x28)
		FExpressionInput RotationAngle; // 0xD8(0x28)
		FExpressionInput PivotPoint; // 0x100(0x28)
		FExpressionInput Position; // 0x128(0x28)
		float Period; // 0x150(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x154(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRotateAboutAxis");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRotator
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionRotator : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinate; // 0xB0(0x28)
		FExpressionInput Time; // 0xD8(0x28)
		float CenterX; // 0x100(0x4)
		float CenterY; // 0x104(0x4)
		float Speed; // 0x108(0x4)
		uint32_t ConstCoordinate; // 0x10C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRotator");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRound
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionRound : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRound");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x168 (0x218 - 0xB0)
	class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Specular; // 0xD8(0x28)
		FExpressionInput Roughness; // 0x100(0x28)
		FExpressionInput Normal; // 0x128(0x28)
		FExpressionInput WorldHeight; // 0x150(0x28)
		FExpressionInput Opacity; // 0x178(0x28)
		FExpressionInput Mask; // 0x1A0(0x28)
		FExpressionInput Displacement; // 0x1C8(0x28)
		FExpressionInput Mask4; // 0x1F0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput VirtualTextureOutput; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xD8 (0x188 - 0xB0)
	class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		FExpressionInput WorldPosition; // 0xD8(0x28)
		FExpressionInput MipValue; // 0x100(0x28)
		FExpressionInput DDX; // 0x128(0x28)
		FExpressionInput DDY; // 0x150(0x28)
		URuntimeVirtualTexture* VirtualTexture; // 0x178(0x8)
		ERuntimeVirtualTextureMaterialType MaterialType; // 0x180(0x1)
		bool bSinglePhysicalSpace; // 0x181(0x1)
		bool bAdaptive; // 0x182(0x1)
		EPositionOrigin WorldPositionOriginType; // 0x183(0x1)
		TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode; // 0x184(0x1)
		TEnumAsByte<ERuntimeVirtualTextureMipValueMode> MipValueMode; // 0x185(0x1)
		bool bEnableFeedback; // 0x186(0x1)
		unsigned char UnknownData00_7[0x1]; // 0x187(0x1) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
	// Inherited from UMaterialExpressionRuntimeVirtualTextureSample -> UMaterialExpression -> UObject
	// Size: 0x20 (0x1A8 - 0x188)
	class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample	
	{
	public:
		FName ParameterName; // 0x188(0x4)
		FGuid ExpressionGUID; // 0x18C(0x10)
		FName Group; // 0x19C(0x4)
		int32_t SortPriority; // 0x1A0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x1A4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSamplePhysicsVectorField
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte<EFieldVectorType> FieldTarget; // 0xD9(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSamplePhysicsVectorField");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSamplePhysicsScalarField
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte<EFieldScalarType> FieldTarget; // 0xD9(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSamplePhysicsScalarField");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSamplePhysicsIntegerField
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte<EFieldIntegerType> FieldTarget; // 0xD9(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSamplePhysicsIntegerField");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSaturate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSaturate : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSaturate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionSceneColor : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EMaterialSceneAttributeInputMode> InputMode; // 0xB0(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0xB8(0x28)
		FExpressionInput OffsetFraction; // 0xE0(0x28)
		FVector2D ConstInput; // 0x108(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneDepth
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionSceneDepth : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EMaterialSceneAttributeInputMode> InputMode; // 0xB0(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0xB8(0x28)
		FExpressionInput Coordinates; // 0xE0(0x28)
		FVector2D ConstInput; // 0x108(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneDepth");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneDepthWithoutWater
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x48 (0xF8 - 0xB0)
	class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EMaterialSceneAttributeInputMode> InputMode; // 0xB0(0x1)
		unsigned char UnknownData00_6[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput Input; // 0xB8(0x28)
		FVector2D ConstInput; // 0xE0(0x10)
		float FallbackDepth; // 0xF0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xF4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneDepthWithoutWater");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneTexelSize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSceneTexelSize : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneTexelSize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSceneTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSceneTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		TEnumAsByte<ESceneTextureId> SceneTextureId; // 0xD8(0x1)
		bool bFiltered; // 0xD9(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSceneTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionScreenPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionScreenPosition : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionScreenPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSetLocal
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionSetLocal : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput Exec; // 0xB0(0x8)
		FExpressionInput Value; // 0xB8(0x28)
		FName LocalName; // 0xE0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xE4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSetLocal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSetMaterialAttributes
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x20 (0xD0 - 0xB0)
	class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression	
	{
	public:
		TArray<FExpressionInput> Inputs; // 0xB0(0x10)
		TArray<FGuid> AttributeSetTypes; // 0xC0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSetMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShaderStageSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionShaderStageSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput PixelShader; // 0xB0(0x28)
		FExpressionInput VertexShader; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShaderStageSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShadingModel
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionShadingModel : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EMaterialShadingModel> ShadingModel; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShadingModel");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShadingPathSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xA0 (0x150 - 0xB0)
	class UMaterialExpressionShadingPathSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Inputs; // 0xD8(0x78)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShadingPathSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionShadowReplace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionShadowReplace : public UMaterialExpression	
	{
	public:
		FExpressionInput Default; // 0xB0(0x28)
		FExpressionInput Shadow; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionShadowReplace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSign
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSign : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSign");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSine
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSine : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Period; // 0xD8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSine");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0xA0 (0x150 - 0xB0)
	class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput ScatteringCoefficients; // 0xB0(0x28)
		FExpressionInput AbsorptionCoefficients; // 0xD8(0x28)
		FExpressionInput PhaseG; // 0x100(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x128(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightDirection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY
		FExpressionInput WorldPosition; // 0xB8(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xE0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminanceOnGround
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightIlluminanceOnGround : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminanceOnGround");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression	
	{
	public:
		int32_t LightIndex; // 0xB0(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xB4(0x4) UNKNOWN PROPERTY
		FExpressionInput DiskAngularDiameterOverride; // 0xB8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression	
	{
	public:
		FExpressionInput WorldPosition; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSkyLightEnvMapSample
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSkyLightEnvMapSample : public UMaterialExpression	
	{
	public:
		FExpressionInput Direction; // 0xB0(0x28)
		FExpressionInput Roughness; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSkyLightEnvMapSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSmoothStep
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x88 (0x138 - 0xB0)
	class UMaterialExpressionSmoothStep : public UMaterialExpression	
	{
	public:
		FExpressionInput Min; // 0xB0(0x28)
		FExpressionInput Max; // 0xD8(0x28)
		FExpressionInput Value; // 0x100(0x28)
		float ConstMin; // 0x128(0x4)
		float ConstMax; // 0x12C(0x4)
		float ConstValue; // 0x130(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSmoothStep");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSobol
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x90 (0x140 - 0xB0)
	class UMaterialExpressionSobol : public UMaterialExpression	
	{
	public:
		FExpressionInput Cell; // 0xB0(0x28)
		FExpressionInput Index; // 0xD8(0x28)
		FExpressionInput Seed; // 0x100(0x28)
		uint32_t ConstIndex; // 0x128(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x12C(0x4) UNKNOWN PROPERTY
		FVector2D ConstSeed; // 0x130(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSobol");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionSparseVolumeTextureBase : public UMaterialExpression	
	{
	public:
		USparseVolumeTexture* SparseVolumeTexture; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureObject
	// Inherited from UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0xB8 - 0xB8)
	class UMaterialExpressionSparseVolumeTextureObject : public UMaterialExpressionSparseVolumeTextureBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureObject");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureSample
	// Inherited from UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0xD0 (0x188 - 0xB8)
	class UMaterialExpressionSparseVolumeTextureSample : public UMaterialExpressionSparseVolumeTextureBase	
	{
	public:
		FExpressionInput Coordinates; // 0xB8(0x28)
		FExpressionInput TextureObject; // 0xE0(0x28)
		FExpressionInput MipValue; // 0x108(0x28)
		FExpressionInput CoordinatesDX; // 0x130(0x28)
		FExpressionInput CoordinatesDY; // 0x158(0x28)
		TEnumAsByte<ETextureMipValueMode> MipValueMode; // 0x180(0x1)
		TEnumAsByte<ESamplerSourceMode> SamplerSource; // 0x181(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x182(0x2) UNKNOWN PROPERTY
		int32_t ConstMipValue; // 0x184(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureSample");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureSampleParameter
	// Inherited from UMaterialExpressionSparseVolumeTextureSample -> UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0x20 (0x1A8 - 0x188)
	class UMaterialExpressionSparseVolumeTextureSampleParameter : public UMaterialExpressionSparseVolumeTextureSample	
	{
	public:
		FName ParameterName; // 0x188(0x4)
		FGuid ExpressionGUID; // 0x18C(0x10)
		FName Group; // 0x19C(0x4)
		int32_t SortPriority; // 0x1A0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x1A4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureSampleParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSparseVolumeTextureObjectParameter
	// Inherited from UMaterialExpressionSparseVolumeTextureSampleParameter -> UMaterialExpressionSparseVolumeTextureSample -> UMaterialExpressionSparseVolumeTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x1A8 - 0x1A8)
	class UMaterialExpressionSparseVolumeTextureObjectParameter : public UMaterialExpressionSparseVolumeTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSparseVolumeTextureObjectParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSpeedTree
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xB0 (0x160 - 0xB0)
	class UMaterialExpressionSpeedTree : public UMaterialExpression	
	{
	public:
		FExpressionInput GeometryInput; // 0xB0(0x28)
		FExpressionInput WindInput; // 0xD8(0x28)
		FExpressionInput LODInput; // 0x100(0x28)
		FExpressionInput ExtraBendWS; // 0x128(0x28)
		TEnumAsByte<ESpeedTreeGeometryType> GeometryType; // 0x150(0x1)
		TEnumAsByte<ESpeedTreeWindType> WindType; // 0x151(0x1)
		TEnumAsByte<ESpeedTreeLODType> LODType; // 0x152(0x1)
		unsigned char UnknownData00_6[0x1]; // 0x153(0x1) UNKNOWN PROPERTY
		float BillboardThreshold; // 0x154(0x4)
		bool bAccurateWindVelocities; // 0x158(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x159(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSpeedTree");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSphereMask
	// Inherited from UMaterialExpression -> UObject
	// Size: 0xA8 (0x158 - 0xB0)
	class UMaterialExpressionSphereMask : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		FExpressionInput Radius; // 0x100(0x28)
		FExpressionInput Hardness; // 0x128(0x28)
		float AttenuationRadius; // 0x150(0x4)
		float HardnessPercent; // 0x154(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSphereMask");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSphericalParticleOpacity
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression	
	{
	public:
		FExpressionInput Density; // 0xB0(0x28)
		float ConstantDensity; // 0xD8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSphericalParticleOpacity");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSquareRoot
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSquareRoot : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSquareRoot");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSRGBColorToWorkingColorSpace
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSRGBColorToWorkingColorSpace : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSRGBColorToWorkingColorSpace");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticBool
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionStaticBool : public UMaterialExpression	
	{
	public:
		bool Value : 1; // 0xB0:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticBool");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticBoolParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x8 (0xD8 - 0xD0)
	class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter	
	{
	public:
		bool DefaultValue : 1; // 0xD0:0(0x1)
		bool DynamicBranch : 1; // 0xD0:1(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticBoolParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticComponentMaskParameter
	// Inherited from UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x30 (0x100 - 0xD0)
	class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter	
	{
	public:
		FExpressionInput Input; // 0xD0(0x28)
		bool DefaultR : 1; // 0xF8:0(0x1)
		bool DefaultG : 1; // 0xF8:1(0x1)
		bool DefaultB : 1; // 0xF8:2(0x1)
		bool DefaultA : 1; // 0xF8:3(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xF9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticComponentMaskParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionStaticSwitch : public UMaterialExpression	
	{
	public:
		bool DefaultValue : 1; // 0xB0:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY
		FExpressionInput A; // 0xB8(0x28)
		FExpressionInput B; // 0xE0(0x28)
		FExpressionInput Value; // 0x108(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStaticSwitchParameter
	// Inherited from UMaterialExpressionStaticBoolParameter -> UMaterialExpressionParameter -> UMaterialExpression -> UObject
	// Size: 0x50 (0x128 - 0xD8)
	class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter	
	{
	public:
		FExpressionInput A; // 0xD8(0x28)
		FExpressionInput B; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStaticSwitchParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionStep
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionStep : public UMaterialExpression	
	{
	public:
		FExpressionInput Y; // 0xB0(0x28)
		FExpressionInput X; // 0xD8(0x28)
		float ConstY; // 0x100(0x4)
		float ConstX; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionStep");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateBSDF
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSubstrateBSDF : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateShadingModels
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x360 (0x410 - 0xB0)
	class UMaterialExpressionSubstrateShadingModels : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Anisotropy; // 0x150(0x28)
		FExpressionInput EmissiveColor; // 0x178(0x28)
		FExpressionInput Normal; // 0x1A0(0x28)
		FExpressionInput Tangent; // 0x1C8(0x28)
		FExpressionInput SubsurfaceColor; // 0x1F0(0x28)
		FExpressionInput ClearCoat; // 0x218(0x28)
		FExpressionInput ClearCoatRoughness; // 0x240(0x28)
		FExpressionInput Opacity; // 0x268(0x28)
		FExpressionInput TransmittanceColor; // 0x290(0x28)
		FExpressionInput WaterScatteringCoefficients; // 0x2B8(0x28)
		FExpressionInput WaterAbsorptionCoefficients; // 0x2E0(0x28)
		FExpressionInput WaterPhaseG; // 0x308(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x330(0x28)
		FExpressionInput ClearCoatNormal; // 0x358(0x28)
		FExpressionInput CustomTangent; // 0x380(0x28)
		FShadingModelMaterialInput ShadingModel; // 0x3A8(0x28)
		unsigned char UnknownData00_6[0x8]; // 0x3D0(0x8) UNKNOWN PROPERTY
		FExpressionInput ThinTranslucentSurfaceCoverage; // 0x3D8(0x28)
		TEnumAsByte<EMaterialShadingModel> ShadingModelOverride; // 0x400(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x401(0x7) UNKNOWN PROPERTY
		USubsurfaceProfile* SubsurfaceProfile; // 0x408(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateShadingModels");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSlabBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x2E8 (0x398 - 0xB0)
	class UMaterialExpressionSubstrateSlabBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DiffuseAlbedo; // 0xB0(0x28)
		FExpressionInput F0; // 0xD8(0x28)
		FExpressionInput F90; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Anisotropy; // 0x150(0x28)
		FExpressionInput Normal; // 0x178(0x28)
		FExpressionInput Tangent; // 0x1A0(0x28)
		FExpressionInput SSSMFP; // 0x1C8(0x28)
		FExpressionInput SSSMFPScale; // 0x1F0(0x28)
		FExpressionInput SSSPhaseAnisotropy; // 0x218(0x28)
		FExpressionInput EmissiveColor; // 0x240(0x28)
		FExpressionInput SecondRoughness; // 0x268(0x28)
		FExpressionInput SecondRoughnessWeight; // 0x290(0x28)
		FExpressionInput FuzzRoughness; // 0x2B8(0x28)
		FExpressionInput FuzzAmount; // 0x2E0(0x28)
		FExpressionInput FuzzColor; // 0x308(0x28)
		FExpressionInput GlintValue; // 0x330(0x28)
		FExpressionInput GlintUV; // 0x358(0x28)
		USubsurfaceProfile* SubsurfaceProfile; // 0x380(0x8)
		USpecularProfile* SpecularProfile; // 0x388(0x8)
		bool bUseSSSDiffusion : 1; // 0x390:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x391(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSlabBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSimpleClearCoatBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x118 (0x1C8 - 0xB0)
	class UMaterialExpressionSubstrateSimpleClearCoatBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DiffuseAlbedo; // 0xB0(0x28)
		FExpressionInput F0; // 0xD8(0x28)
		FExpressionInput Roughness; // 0x100(0x28)
		FExpressionInput ClearCoatCoverage; // 0x128(0x28)
		FExpressionInput ClearCoatRoughness; // 0x150(0x28)
		FExpressionInput Normal; // 0x178(0x28)
		FExpressionInput EmissiveColor; // 0x1A0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSimpleClearCoatBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateVolumetricFogCloudBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0xA8 (0x158 - 0xB0)
	class UMaterialExpressionSubstrateVolumetricFogCloudBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Albedo; // 0xB0(0x28)
		FExpressionInput Extinction; // 0xD8(0x28)
		FExpressionInput EmissiveColor; // 0x100(0x28)
		FExpressionInput AmbientOcclusion; // 0x128(0x28)
		bool bEmissiveOnly : 1; // 0x150:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x151(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateVolumetricFogCloudBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateUnlitBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionSubstrateUnlitBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput EmissiveColor; // 0xB0(0x28)
		FExpressionInput TransmittanceColor; // 0xD8(0x28)
		FExpressionInput Normal; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateUnlitBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateHairBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x118 (0x1C8 - 0xB0)
	class UMaterialExpressionSubstrateHairBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Scatter; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Backlit; // 0x150(0x28)
		FExpressionInput Tangent; // 0x178(0x28)
		FExpressionInput EmissiveColor; // 0x1A0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateHairBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateEyeBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x148 (0x1F8 - 0xB0)
	class UMaterialExpressionSubstrateEyeBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DiffuseColor; // 0xB0(0x28)
		FExpressionInput Roughness; // 0xD8(0x28)
		FExpressionInput CorneaNormal; // 0x100(0x28)
		FExpressionInput IrisNormal; // 0x128(0x28)
		FExpressionInput IrisPlaneNormal; // 0x150(0x28)
		FExpressionInput IrisMask; // 0x178(0x28)
		FExpressionInput IrisDistance; // 0x1A0(0x28)
		FExpressionInput EmissiveColor; // 0x1C8(0x28)
		USubsurfaceProfile* SubsurfaceProfile; // 0x1F0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateEyeBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSingleLayerWaterBSDF
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x1B8 (0x268 - 0xB0)
	class UMaterialExpressionSubstrateSingleLayerWaterBSDF : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)
		FExpressionInput Roughness; // 0x128(0x28)
		FExpressionInput Normal; // 0x150(0x28)
		FExpressionInput EmissiveColor; // 0x178(0x28)
		FExpressionInput TopMaterialOpacity; // 0x1A0(0x28)
		FExpressionInput WaterAlbedo; // 0x1C8(0x28)
		FExpressionInput WaterExtinction; // 0x1F0(0x28)
		FExpressionInput WaterPhaseG; // 0x218(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x240(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSingleLayerWaterBSDF");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateLightFunction
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionSubstrateLightFunction : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Color; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateLightFunction");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstratePostProcess
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstratePostProcess : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Color; // 0xB0(0x28)
		FExpressionInput Opacity; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstratePostProcess");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateUI
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateUI : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Color; // 0xB0(0x28)
		FExpressionInput Opacity; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateUI");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateConvertToDecal
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateConvertToDecal : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput DecalMaterial; // 0xB0(0x28)
		FExpressionInput Coverage; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateConvertToDecal");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateConvertMaterialAttributes
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0xE0 (0x190 - 0xB0)
	class UMaterialExpressionSubstrateConvertMaterialAttributes : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)
		FExpressionInput WaterScatteringCoefficients; // 0xE0(0x28)
		FExpressionInput WaterAbsorptionCoefficients; // 0x108(0x28)
		FExpressionInput WaterPhaseG; // 0x130(0x28)
		FExpressionInput ColorScaleBehindWater; // 0x158(0x28)
		USubsurfaceProfile* SubsurfaceProfile; // 0x180(0x8)
		TEnumAsByte<EMaterialShadingModel> ShadingModelOverride; // 0x188(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x189(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateConvertMaterialAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateHorizontalMixing
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionSubstrateHorizontalMixing : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Background; // 0xB0(0x28)
		FExpressionInput Foreground; // 0xD8(0x28)
		FExpressionInput Mix; // 0x100(0x28)
		bool bUseParameterBlending : 1; // 0x128:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x129(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateHorizontalMixing");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateVerticalLayering
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionSubstrateVerticalLayering : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput Top; // 0xB0(0x28)
		FExpressionInput base; // 0xD8(0x28)
		FExpressionInput Thickness; // 0x100(0x28)
		bool bUseParameterBlending : 1; // 0x128:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x129(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateVerticalLayering");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateAdd
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionSubstrateAdd : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		bool bUseParameterBlending : 1; // 0x100:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x101(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateAdd");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateWeight
	// Inherited from UMaterialExpressionSubstrateBSDF -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateWeight : public UMaterialExpressionSubstrateBSDF	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput Weight; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateWeight");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateUtilityBase
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionSubstrateUtilityBase : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateUtilityBase");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateTransmittanceToMFP
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateTransmittanceToMFP : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput TransmittanceColor; // 0xB0(0x28)
		FExpressionInput Thickness; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateTransmittanceToMFP");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateMetalnessToDiffuseAlbedoF0
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x78 (0x128 - 0xB0)
	class UMaterialExpressionSubstrateMetalnessToDiffuseAlbedoF0 : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput BaseColor; // 0xB0(0x28)
		FExpressionInput Metallic; // 0xD8(0x28)
		FExpressionInput Specular; // 0x100(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateMetalnessToDiffuseAlbedoF0");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateHazinessToSecondaryRoughness
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubstrateHazinessToSecondaryRoughness : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput BaseRoughness; // 0xB0(0x28)
		FExpressionInput Haziness; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateHazinessToSecondaryRoughness");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateThinFilm
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0xC8 (0x178 - 0xB0)
	class UMaterialExpressionSubstrateThinFilm : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput Normal; // 0xB0(0x28)
		FExpressionInput F0; // 0xD8(0x28)
		FExpressionInput F90; // 0x100(0x28)
		FExpressionInput Thickness; // 0x128(0x28)
		FExpressionInput IOR; // 0x150(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateThinFilm");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateGetAttributes
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionSubstrateGetAttributes : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FMaterialAttributesInput MaterialAttributes; // 0xB0(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateGetAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubstrateSetAttributes
	// Inherited from UMaterialExpressionSubstrateUtilityBase -> UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionSubstrateSetAttributes : public UMaterialExpressionSubstrateUtilityBase	
	{
	public:
		FExpressionInput FrontMaterial; // 0xB0(0x28)
		FMaterialAttributesInput NonSubstrateAttributes; // 0xD8(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubstrateSetAttributes");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubsurfaceMediumMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionSubsurfaceMediumMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput MeanFreePath; // 0xB0(0x28)
		FExpressionInput ScatteringDistribution; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubsurfaceMediumMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSubtract
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x58 (0x108 - 0xB0)
	class UMaterialExpressionSubtract : public UMaterialExpression	
	{
	public:
		FExpressionInput A; // 0xB0(0x28)
		FExpressionInput B; // 0xD8(0x28)
		float ConstA; // 0x100(0x4)
		float ConstB; // 0x104(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSubtract");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x80 (0x130 - 0xB0)
	class UMaterialExpressionSwitch : public UMaterialExpression	
	{
	public:
		FString Description; // 0xB0(0x10)
		FExpressionInput SwitchValue; // 0xC0(0x28)
		float ConstSwitchValue; // 0xE8(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xEC(0x4) UNKNOWN PROPERTY
		FExpressionInput Default; // 0xF0(0x28)
		float ConstDefault; // 0x118(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x11C(0x4) UNKNOWN PROPERTY
		TArray<FSwitchCustomInput> Inputs; // 0x120(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTangent
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTangent : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		float Period; // 0xD8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xDC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTangent");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTangentOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTangentOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTemporalSobol
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x68 (0x118 - 0xB0)
	class UMaterialExpressionTemporalSobol : public UMaterialExpression	
	{
	public:
		FExpressionInput Index; // 0xB0(0x28)
		FExpressionInput Seed; // 0xD8(0x28)
		uint32_t ConstIndex; // 0x100(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x104(0x4) UNKNOWN PROPERTY
		FVector2D ConstSeed; // 0x108(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTemporalSobol");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureCollection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionTextureCollection : public UMaterialExpression	
	{
	public:
		UTextureCollection* TextureCollection; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureCollection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureCollectionParameter
	// Inherited from UMaterialExpressionTextureCollection -> UMaterialExpression -> UObject
	// Size: 0x20 (0xD8 - 0xB8)
	class UMaterialExpressionTextureCollectionParameter : public UMaterialExpressionTextureCollection	
	{
	public:
		FName ParameterName; // 0xB8(0x4)
		FGuid ExpressionGUID; // 0xBC(0x10)
		FName Group; // 0xCC(0x4)
		int32_t SortPriority; // 0xD0(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureCollectionParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureCoordinate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x10 (0xC0 - 0xB0)
	class UMaterialExpressionTextureCoordinate : public UMaterialExpression	
	{
	public:
		int32_t CoordinateIndex; // 0xB0(0x4)
		float UTiling; // 0xB4(0x4)
		float VTiling; // 0xB8(0x4)
		bool UnMirrorU : 1; // 0xBC:0(0x1)
		bool UnMirrorV : 1; // 0xBC:1(0x1)
		unsigned char UnknownData00_7[0x3]; // 0xBD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureCoordinate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureObject
	// Inherited from UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0xC0 - 0xC0)
	class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureObject");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureObjectFromCollection
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x60 (0x110 - 0xB0)
	class UMaterialExpressionTextureObjectFromCollection : public UMaterialExpression	
	{
	public:
		FExpressionInput TextureCollection; // 0xB0(0x28)
		UTextureCollection* TextureCollectionObject; // 0xD8(0x8)
		FExpressionInput CollectionIndex; // 0xE0(0x28)
		int32_t ConstCollectionIndex; // 0x108(0x4)
		ETextureCollectionMemberType TextureType; // 0x10C(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureObjectFromCollection");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureObjectParameter
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureObjectParameter");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureProperty
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTextureProperty : public UMaterialExpression	
	{
	public:
		FExpressionInput TextureObject; // 0xB0(0x28)
		TEnumAsByte<EMaterialExposedTextureProperty> Property; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureProperty");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameter2DArray
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameter2DArray");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterCube
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterCube");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterCubeArray
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameterCubeArray : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterCubeArray");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterSubUV
	// Inherited from UMaterialExpressionTextureSampleParameter2D -> UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x8 (0x220 - 0x218)
	class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D	
	{
	public:
		bool bBlend : 1; // 0x218:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x219(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterSubUV");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTextureSampleParameterVolume
	// Inherited from UMaterialExpressionTextureSampleParameter -> UMaterialExpressionTextureSample -> UMaterialExpressionTextureBase -> UMaterialExpression -> UObject
	// Size: 0x0 (0x218 - 0x218)
	class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTextureSampleParameterVolume");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionThinTranslucentMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput TransmittanceColor; // 0xB0(0x28)
		FExpressionInput SurfaceCoverage; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionThinTranslucentMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTime
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionTime : public UMaterialExpression	
	{
	public:
		bool bIgnorePause : 1; // 0xB0:0(0x1)
		bool bOverride_Period : 1; // 0xB0:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0xB1(0x3) UNKNOWN PROPERTY
		float Period; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTime");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTransform
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTransform : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		TEnumAsByte<EMaterialVectorCoordTransformSource> TransformSourceType; // 0xD8(0x1)
		TEnumAsByte<EMaterialVectorCoordTransform> TransformType; // 0xD9(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTransform");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTransformPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionTransformPosition : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		TEnumAsByte<EMaterialPositionTransformSource> TransformSourceType; // 0xD8(0x1)
		TEnumAsByte<EMaterialPositionTransformSource> TransformType; // 0xD9(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xDA(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTransformPosition");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTruncate
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionTruncate : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTruncate");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTruncateLWC
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionTruncateLWC : public UMaterialExpression	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTruncateLWC");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionTwoSidedSign
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionTwoSidedSign : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionTwoSidedSign");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionUserSceneTexture
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x30 (0xE0 - 0xB0)
	class UMaterialExpressionUserSceneTexture : public UMaterialExpression	
	{
	public:
		FExpressionInput Coordinates; // 0xB0(0x28)
		FName UserSceneTexture; // 0xD8(0x4)
		bool bFiltered; // 0xDC(0x1)
		bool bClamped; // 0xDD(0x1)
		unsigned char UnknownData00_7[0x2]; // 0xDE(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionUserSceneTexture");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVectorNoise
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionVectorNoise : public UMaterialExpression	
	{
	public:
		FExpressionInput Position; // 0xB0(0x28)
		EPositionOrigin WorldPositionOriginType; // 0xD8(0x1)
		TEnumAsByte<EVectorNoiseFunction> NoiseFunction; // 0xD9(0x1)
		unsigned char UnknownData00_6[0x2]; // 0xDA(0x2) UNKNOWN PROPERTY
		int32_t Quality; // 0xDC(0x4)
		bool bTiling : 1; // 0xE0:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0xE1(0x3) UNKNOWN PROPERTY
		uint32_t TileSize; // 0xE4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVectorNoise");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexColor
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVertexColor : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexColor");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexInterpolator
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput Input; // 0xB0(0x28)
		unsigned char UnknownData00_7[0x10]; // 0xD8(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexInterpolator");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexNormalWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVertexNormalWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexNormalWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVertexTangentWS
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVertexTangentWS : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVertexTangentWS");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionViewProperty
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionViewProperty : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EMaterialExposedViewProperty> Property; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionViewProperty");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionViewSize
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionViewSize : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionViewSize");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x50 (0x100 - 0xB0)
	class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression	
	{
	public:
		FExpressionInput No; // 0xB0(0x28)
		FExpressionInput Yes; // 0xD8(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricAdvancedMaterialInput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UMaterialExpressionVolumetricCloudEmptySpaceSkippingInput : public UMaterialExpression	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingInput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x140 (0x1F0 - 0xB0)
	class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput PhaseG; // 0xB0(0x28)
		FExpressionInput PhaseG2; // 0xD8(0x28)
		FExpressionInput PhaseBlend; // 0x100(0x28)
		FExpressionInput MultiScatteringContribution; // 0x128(0x28)
		FExpressionInput MultiScatteringOcclusion; // 0x150(0x28)
		FExpressionInput MultiScatteringEccentricity; // 0x178(0x28)
		FExpressionInput ConservativeDensity; // 0x1A0(0x28)
		float ConstPhaseG; // 0x1C8(0x4)
		float ConstPhaseG2; // 0x1CC(0x4)
		float ConstPhaseBlend; // 0x1D0(0x4)
		bool PerSamplePhaseEvaluation; // 0x1D4(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x1D5(0x3) UNKNOWN PROPERTY
		uint32_t MultiScatteringApproximationOctaveCount; // 0x1D8(0x4)
		float ConstMultiScatteringContribution; // 0x1DC(0x4)
		float ConstMultiScatteringOcclusion; // 0x1E0(0x4)
		float ConstMultiScatteringEccentricity; // 0x1E4(0x4)
		bool bGroundContribution; // 0x1E8(0x1)
		bool bGrayScaleMaterial; // 0x1E9(0x1)
		bool bRayMarchVolumeShadow; // 0x1EA(0x1)
		bool bClampMultiScatteringContribution; // 0x1EB(0x1)
		unsigned char UnknownData01_7[0x4]; // 0x1EC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput
	// Inherited from UMaterialExpressionCustomOutput -> UMaterialExpression -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UMaterialExpressionVolumetricCloudEmptySpaceSkippingOutput : public UMaterialExpressionCustomOutput	
	{
	public:
		FExpressionInput ContainsMatter; // 0xB0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionVolumetricCloudEmptySpaceSkippingOutput");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionWhileLoop
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x38 (0xE8 - 0xB0)
	class UMaterialExpressionWhileLoop : public UMaterialExpression	
	{
	public:
		FExpressionExecOutput LoopBody; // 0xB0(0x8)
		FExpressionExecOutput Completed; // 0xB8(0x8)
		FExpressionInput Condition; // 0xC0(0x28)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionWhileLoop");
			return ret;
		}
	};


	// Class Engine.MaterialExpressionWorldPosition
	// Inherited from UMaterialExpression -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UMaterialExpressionWorldPosition : public UMaterialExpression	
	{
	public:
		TEnumAsByte<EWorldPositionIncludedOffsets> WorldPositionShaderOffset; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialExpressionWorldPosition");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionInterfaceEditorOnlyData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMaterialFunctionInterfaceEditorOnlyData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionInterfaceEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionEditorOnlyData
	// Inherited from UMaterialFunctionInterfaceEditorOnlyData -> UObject
	// Size: 0x30 (0x58 - 0x28)
	class UMaterialFunctionEditorOnlyData : public UMaterialFunctionInterfaceEditorOnlyData	
	{
	public:
		FMaterialExpressionCollection ExpressionCollection; // 0x28(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionInterface
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UMaterialFunctionInterface : public UObject	
	{
	public:
		FGuid StateId; // 0x28(0x10)
		EMaterialFunctionUsage MaterialFunctionUsage; // 0x38(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionInterface");
			return ret;
		}
	};


	// Class Engine.MaterialFunction
	// Inherited from UMaterialFunctionInterface -> UObject
	// Size: 0x28 (0x68 - 0x40)
	class UMaterialFunction : public UMaterialFunctionInterface	
	{
	public:
		FString Description; // 0x40(0x10)
		FString UserExposedCaption; // 0x50(0x10)
		bool bExposeToLibrary : 1; // 0x60:0(0x1)
		bool bPrefixParameterNames : 1; // 0x60:1(0x1)
		bool bEnableExecWire : 1; // 0x60:2(0x1)
		bool bEnableNewHLSLGenerator : 1; // 0x60:3(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x61(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunction");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionInstance
	// Inherited from UMaterialFunctionInterface -> UObject
	// Size: 0xB0 (0xF0 - 0x40)
	class UMaterialFunctionInstance : public UMaterialFunctionInterface	
	{
	public:
		UMaterialFunctionInterface* Parent; // 0x40(0x8)
		UMaterialFunctionInterface* base; // 0x48(0x8)
		TArray<FScalarParameterValue> ScalarParameterValues; // 0x50(0x10)
		TArray<FVectorParameterValue> VectorParameterValues; // 0x60(0x10)
		TArray<FDoubleVectorParameterValue> DoubleVectorParameterValues; // 0x70(0x10)
		TArray<FTextureParameterValue> TextureParameterValues; // 0x80(0x10)
		TArray<FTextureCollectionParameterValue> TextureCollectionParameterValues; // 0x90(0x10)
		TArray<FFontParameterValue> FontParameterValues; // 0xA0(0x10)
		TArray<FStaticSwitchParameter> StaticSwitchParameterValues; // 0xB0(0x10)
		TArray<FStaticComponentMaskParameter> StaticComponentMaskParameterValues; // 0xC0(0x10)
		TArray<FRuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues; // 0xD0(0x10)
		TArray<FSparseVolumeTextureParameterValue> SparseVolumeTextureParameterValues; // 0xE0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionInstance");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayer
	// Inherited from UMaterialFunction -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class UMaterialFunctionMaterialLayer : public UMaterialFunction	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayer");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayerInstance
	// Inherited from UMaterialFunctionInstance -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0xF0 - 0xF0)
	class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayerInstance");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayerBlend
	// Inherited from UMaterialFunction -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayerBlend");
			return ret;
		}
	};


	// Class Engine.MaterialFunctionMaterialLayerBlendInstance
	// Inherited from UMaterialFunctionInstance -> UMaterialFunctionInterface -> UObject
	// Size: 0x0 (0xF0 - 0xF0)
	class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialFunctionMaterialLayerBlendInstance");
			return ret;
		}
	};


	// Class Engine.MaterialInterfaceEditorOnlyData
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UMaterialInterfaceEditorOnlyData : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x18]; // 0x28(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInterfaceEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialParameterCollectionInstance
	// Inherited from UObject
	// Size: 0xF8 (0x120 - 0x28)
	class UMaterialParameterCollectionInstance : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x4]; // 0x28(0x4) UNKNOWN PROPERTY
		TWeakObjectPtr<UMaterialParameterCollection*> Collection; // 0x2C(0x8)
		unsigned char UnknownData01_7[0xEC]; // 0x34(0xEC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialParameterCollectionInstance");
			return ret;
		}
	};


	// Class Engine.MeshBudgetProjectSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UMeshBudgetProjectSettings : public UDeveloperSettings	
	{
	public:
		bool bEnableStaticMeshBudget; // 0x30(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TArray<FStaticMeshBudgetInfo> StaticMeshBudgetInfos; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshBudgetProjectSettings");
			return ret;
		}
	};


	// Class Engine.MeshDeformer
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshDeformer : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDeformer");
			return ret;
		}
	};


	// Class Engine.MeshDeformerInstanceSettings
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshDeformerInstanceSettings : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDeformerInstanceSettings");
			return ret;
		}
	};


	// Class Engine.MeshDeformerInstance
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshDeformerInstance : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDeformerInstance");
			return ret;
		}
	};


	// Class Engine.MeshDrawCommandStatsSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x28 (0x58 - 0x30)
	class UMeshDrawCommandStatsSettings : public UDeveloperSettings	
	{
	public:
		TArray<FMeshDrawCommandStatsBudget> Budgets; // 0x30(0x10)
		TArray<FMeshDrawCommandStatsBudgetTotals> BudgetTotals; // 0x40(0x10)
		int32_t CollectionForCsvProfiler; // 0x50(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshDrawCommandStatsSettings");
			return ret;
		}
	};


	// Class Engine.MeshPaintVirtualTexture
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class UMeshPaintVirtualTexture : public UTexture2D	
	{
	public:
		TWeakObjectPtr<UPrimitiveComponent*> OwningComponent; // 0x150(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshPaintVirtualTexture");
			return ret;
		}
	};


	// Class Engine.MicroTransactionBase
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x30 (0x68 - 0x38)
	class UMicroTransactionBase : public UPlatformInterfaceBase	
	{
	public:
		TArray<FPurchaseInfo> AvailableProducts; // 0x38(0x10)
		FString LastError; // 0x48(0x10)
		FString LastErrorSolution; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MicroTransactionBase");
			return ret;
		}
	};


	// Class Engine.MorphTarget
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UMorphTarget : public UObject	
	{
	public:
		USkeletalMesh* BaseSkelMesh; // 0x28(0x8)
		unsigned char UnknownData00_7[0x10]; // 0x30(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MorphTarget");
			return ret;
		}
	};


	// Class Engine.NavAgentInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavAgentInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavAgentInterface");
			return ret;
		}
	};


	// Class Engine.NavAreaBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UNavAreaBase : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavAreaBase");
			return ret;
		}
	};


	// Class Engine.NavEdgeProviderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavEdgeProviderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavEdgeProviderInterface");
			return ret;
		}
	};


	// Class Engine.NavigationDataInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavigationDataInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationDataInterface");
			return ret;
		}
	};


	// Class Engine.NavigationInvokerInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavigationInvokerInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationInvokerInterface");
			return ret;
		}
	};


	// Class Engine.NavLinkDefinition
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UNavLinkDefinition : public UObject	
	{
	public:
		TArray<FNavigationLink> Links; // 0x28(0x10)
		TArray<FNavigationSegmentLink> SegmentLinks; // 0x38(0x10)
		unsigned char UnknownData00_7[0x8]; // 0x48(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavLinkDefinition");
			return ret;
		}
	};


	// Class Engine.NavMovementInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavMovementInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavMovementInterface");
			return ret;
		}

		void StopMovementKeepPathing(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C383C04(relative to base address)
		void StopActiveMovement(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C383BEC(relative to base address)
		void RequestPathMove(FVector& MoveInput); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C383B28(relative to base address)
		void RequestDirectMove(FVector& MoveVelocity, bool bForceMaxSpeed); // Flags: Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3839D4(relative to base address)
		bool IsSwimming(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3839AC(relative to base address)
		bool IsMovingOnGround(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C383984(relative to base address)
		bool IsFlying(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38395C(relative to base address)
		bool IsFalling(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C383934(relative to base address)
		bool IsCrouching(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38390C(relative to base address)
		FVector GetVelocityForNavMovement(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3838D0(relative to base address)
		float GetMaxSpeedForNavMovement(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3838A4(relative to base address)
	};


	// Class Engine.NavPathObserverInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavPathObserverInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavPathObserverInterface");
			return ret;
		}
	};


	// Class Engine.NavRelevantInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavRelevantInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavRelevantInterface");
			return ret;
		}
	};


	// Class Engine.NetworkPhysicsSettingsComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x138 (0x1D8 - 0xA0)
	class UNetworkPhysicsSettingsComponent : public UActorComponent	
	{
	public:
		FNetworkPhysicsSettings GeneralSettings; // 0xA0(0x8)
		FNetworkPhysicsSettingsDefaultReplication DefaultReplicationSettings; // 0xA8(0x20)
		FNetworkPhysicsSettingsPredictiveInterpolation PredictiveInterpolationSettings; // 0xC8(0x80)
		FNetworkPhysicsSettingsResimulation ResimulationSettings; // 0x148(0x40)
		FNetworkPhysicsSettingsNetworkPhysicsComponent NetworkPhysicsComponentSettings; // 0x188(0x48)
		unsigned char UnknownData00_7[0x8]; // 0x1D0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPhysicsSettingsComponent");
			return ret;
		}
	};


	// Class Engine.NetworkPredictionInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNetworkPredictionInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPredictionInterface");
			return ret;
		}
	};


	// Class Engine.ParticleEmitter
	// Inherited from UObject
	// Size: 0x190 (0x1B8 - 0x28)
	class UParticleEmitter : public UObject	
	{
	public:
		FName EmitterName; // 0x28(0x4)
		int32_t SubUVDataOffset; // 0x2C(0x4)
		TEnumAsByte<EEmitterRenderMode> EmitterRenderMode; // 0x30(0x1)
		EParticleSignificanceLevel SignificanceLevel; // 0x31(0x1)
		unsigned char UnknownData00_6[0x1]; // 0x32(0x1) UNKNOWN PROPERTY
		bool bUseLegacySpawningBehavior : 1; // 0x33:0(0x1)
		unsigned char UnknownBit01 : 1; // 0x33:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0x33:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit03 : 1; // 0x33:3(0x1) UNKNOWN PROPERTY
		bool ConvertedModules : 1; // 0x33:4(0x1)
		bool bIsSoloing : 1; // 0x33:5(0x1)
		bool bCookedOut : 1; // 0x33:6(0x1)
		bool bDisabledLODsKeepEmitterAlive : 1; // 0x33:7(0x1)
		bool bDisableWhenInsignficant : 1; // 0x34:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		TArray<UParticleLODLevel*> LODLevels; // 0x38(0x10)
		int32_t PeakActiveParticles; // 0x48(0x4)
		int32_t InitialAllocationCount; // 0x4C(0x4)
		float QualityLevelSpawnRateScale; // 0x50(0x4)
		uint32_t DetailModeBitmask; // 0x54(0x4)
		unsigned char UnknownData05_7[0x160]; // 0x58(0x160) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleEmitter");
			return ret;
		}
	};


	// Class Engine.ParticleLODLevel
	// Inherited from UObject
	// Size: 0x90 (0xB8 - 0x28)
	class UParticleLODLevel : public UObject	
	{
	public:
		int32_t Level; // 0x28(0x4)
		bool bEnabled : 1; // 0x2C:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		UParticleModuleRequired* RequiredModule; // 0x30(0x8)
		TArray<UParticleModule*> Modules; // 0x38(0x10)
		UParticleModuleTypeDataBase* TypeDataModule; // 0x48(0x8)
		UParticleModuleSpawn* SpawnModule; // 0x50(0x8)
		UParticleModuleEventGenerator* EventGenerator; // 0x58(0x8)
		TArray<UParticleModuleSpawnBase*> SpawningModules; // 0x60(0x10)
		TArray<UParticleModule*> SpawnModules; // 0x70(0x10)
		TArray<UParticleModule*> UpdateModules; // 0x80(0x10)
		TArray<UParticleModuleOrbit*> OrbitModules; // 0x90(0x10)
		TArray<UParticleModuleEventReceiverBase*> EventReceiverModules; // 0xA0(0x10)
		bool ConvertedModules : 1; // 0xB0:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0xB1(0x3) UNKNOWN PROPERTY
		int32_t PeakActiveParticles; // 0xB4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleLODLevel");
			return ret;
		}
	};


	// Class Engine.FXSystemAsset
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UFXSystemAsset : public UObject	
	{
	public:
		uint32_t MaxPoolSize; // 0x28(0x4)
		uint32_t PoolPrimeSize; // 0x2C(0x4)
		unsigned char UnknownData00_7[0x20]; // 0x30(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FXSystemAsset");
			return ret;
		}
	};


	// Class Engine.ParticleSystem
	// Inherited from UFXSystemAsset -> UObject
	// Size: 0x128 (0x178 - 0x50)
	class UParticleSystem : public UFXSystemAsset	
	{
	public:
		float UpdateTime_FPS; // 0x50(0x4)
		float UpdateTime_Delta; // 0x54(0x4)
		float WarmupTime; // 0x58(0x4)
		float WarmupTickRate; // 0x5C(0x4)
		TArray<UParticleEmitter*> Emitters; // 0x60(0x10)
		UParticleSystemComponent* PreviewComponent; // 0x70(0x8)
		UInterpCurveEdSetup* CurveEdSetup; // 0x78(0x8)
		float LODDistanceCheckTime; // 0x80(0x4)
		float MacroUVRadius; // 0x84(0x4)
		TArray<float> LODDistances; // 0x88(0x10)
		TArray<FParticleSystemLOD> LODSettings; // 0x98(0x10)
		FBox FixedRelativeBoundingBox; // 0xA8(0x38)
		float SecondsBeforeInactive; // 0xE0(0x4)
		float Delay; // 0xE4(0x4)
		float DelayLow; // 0xE8(0x4)
		bool bOrientZAxisTowardCamera : 1; // 0xEC:0(0x1)
		bool bUseFixedRelativeBoundingBox : 1; // 0xEC:1(0x1)
		bool bShouldResetPeakCounts : 1; // 0xEC:2(0x1)
		bool bHasPhysics : 1; // 0xEC:3(0x1)
		bool bUseRealtimeThumbnail : 1; // 0xEC:4(0x1)
		bool ThumbnailImageOutOfDate : 1; // 0xEC:5(0x1)
		unsigned char UnknownBit00 : 1; // 0xEC:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit01 : 1; // 0xEC:7(0x1) UNKNOWN PROPERTY
		bool bUseDelayRange : 1; // 0xED:0(0x1)
		bool bAllowManagedTicking : 1; // 0xED:1(0x1)
		bool bAutoDeactivate : 1; // 0xED:2(0x1)
		bool bRegenerateLODDuplicate : 1; // 0xED:3(0x1)
		TEnumAsByte<EParticleSystemUpdateMode> SystemUpdateMode; // 0xEE(0x1)
		TEnumAsByte<ParticleSystemLODMethod> LODMethod; // 0xEF(0x1)
		EParticleSystemInsignificanceReaction InsignificantReaction; // 0xF0(0x1)
		TEnumAsByte<EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod; // 0xF1(0x1)
		unsigned char UnknownData02_6[0x1]; // 0xF2(0x1) UNKNOWN PROPERTY
		EParticleSignificanceLevel MaxSignificanceLevel; // 0xF3(0x1)
		uint32_t MinTimeBetweenTicks; // 0xF4(0x4)
		float InsignificanceDelay; // 0xF8(0x4)
		unsigned char UnknownData03_6[0x4]; // 0xFC(0x4) UNKNOWN PROPERTY
		FVector MacroUVPosition; // 0x100(0x18)
		FBox CustomOcclusionBounds; // 0x118(0x38)
		TArray<FLODSoloTrack> SoloTracking; // 0x150(0x10)
		TArray<FNamedEmitterMaterial> NamedMaterialSlots; // 0x160(0x10)
		unsigned char UnknownData04_7[0x8]; // 0x170(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSystem");
			return ret;
		}

		bool ContainsEmitterType(UClass* TypeData); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C385900(relative to base address)
	};


	// Class Engine.ParticleModule
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UParticleModule : public UObject	
	{
	public:
		bool bSpawnModule : 1; // 0x28:0(0x1)
		bool bUpdateModule : 1; // 0x28:1(0x1)
		bool bFinalUpdateModule : 1; // 0x28:2(0x1)
		bool bUpdateForGPUEmitter : 1; // 0x28:3(0x1)
		bool bCurvesAsColor : 1; // 0x28:4(0x1)
		bool b3DDrawMode : 1; // 0x28:5(0x1)
		bool bSupported3DDrawMode : 1; // 0x28:6(0x1)
		bool bEnabled : 1; // 0x28:7(0x1)
		bool bEditable : 1; // 0x29:0(0x1)
		bool LODDuplicate : 1; // 0x29:1(0x1)
		bool bSupportsRandomSeed : 1; // 0x29:2(0x1)
		bool bRequiresLoopingNotification : 1; // 0x29:3(0x1)
		char LODValidity; // 0x2A(0x1)
		unsigned char UnknownData00_7[0x5]; // 0x2B(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModule");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleAccelerationBase : public UParticleModule	
	{
	public:
		bool bAlwaysInWorldSpace : 1; // 0x30:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAcceleration
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x68 (0xA0 - 0x38)
	class UParticleModuleAcceleration : public UParticleModuleAccelerationBase	
	{
	public:
		FRawDistributionVector Acceleration; // 0x38(0x60)
		bool bApplyOwnerScale : 1; // 0x98:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x99(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAcceleration");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationConstant
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase	
	{
	public:
		FVector Acceleration; // 0x38(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationConstant");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationDrag
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x38 (0x70 - 0x38)
	class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase	
	{
	public:
		UDistributionFloat* DragCoefficient; // 0x38(0x8)
		FRawDistributionFloat DragCoefficientRaw; // 0x40(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationDrag");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationDragScaleOverLife
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x38 (0x70 - 0x38)
	class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase	
	{
	public:
		UDistributionFloat* DragScale; // 0x38(0x8)
		FRawDistributionFloat DragScaleRaw; // 0x40(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationDragScaleOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAccelerationOverLifetime
	// Inherited from UParticleModuleAccelerationBase -> UParticleModule -> UObject
	// Size: 0x60 (0x98 - 0x38)
	class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase	
	{
	public:
		FRawDistributionVector AccelOverLife; // 0x38(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAccelerationOverLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleAttractorBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorLine
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0x90 (0xC0 - 0x30)
	class UParticleModuleAttractorLine : public UParticleModuleAttractorBase	
	{
	public:
		FVector EndPoint0; // 0x30(0x18)
		FVector EndPoint1; // 0x48(0x18)
		FRawDistributionFloat Range; // 0x60(0x30)
		FRawDistributionFloat Strength; // 0x90(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorLine");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorParticle
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0x80 (0xB0 - 0x30)
	class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase	
	{
	public:
		FName EmitterName; // 0x30(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		FRawDistributionFloat Range; // 0x38(0x30)
		bool bStrengthByDistance : 1; // 0x68:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x69(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat Strength; // 0x70(0x30)
		bool bAffectBaseVelocity : 1; // 0xA0:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0xA1(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EAttractorParticleSelectionMethod> SelectionMethod; // 0xA4(0x1)
		unsigned char UnknownData03_6[0x3]; // 0xA5(0x3) UNKNOWN PROPERTY
		bool bRenewSource : 1; // 0xA8:0(0x1)
		bool bInheritSourceVel : 1; // 0xA8:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0xA9(0x3) UNKNOWN PROPERTY
		int32_t LastSelIndex; // 0xAC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorParticle");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorPoint
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0xC8 (0xF8 - 0x30)
	class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase	
	{
	public:
		FRawDistributionVector Position; // 0x30(0x60)
		FRawDistributionFloat Range; // 0x90(0x30)
		FRawDistributionFloat Strength; // 0xC0(0x30)
		bool StrengthByDistance : 1; // 0xF0:0(0x1)
		bool bAffectBaseVelocity : 1; // 0xF0:1(0x1)
		bool bOverrideVelocity : 1; // 0xF0:2(0x1)
		bool bUseWorldSpacePosition : 1; // 0xF0:3(0x1)
		bool Positive_X : 1; // 0xF0:4(0x1)
		bool Positive_Y : 1; // 0xF0:5(0x1)
		bool Positive_Z : 1; // 0xF0:6(0x1)
		bool Negative_X : 1; // 0xF0:7(0x1)
		bool Negative_Y : 1; // 0xF1:0(0x1)
		bool Negative_Z : 1; // 0xF1:1(0x1)
		unsigned char UnknownData00_7[0x6]; // 0xF2(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorPoint");
			return ret;
		}
	};


	// Class Engine.ParticleModuleAttractorPointGravity
	// Inherited from UParticleModuleAttractorBase -> UParticleModule -> UObject
	// Size: 0x58 (0x88 - 0x30)
	class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase	
	{
	public:
		FVector Position; // 0x30(0x18)
		float Radius; // 0x48(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY
		UDistributionFloat* Strength; // 0x50(0x8)
		FRawDistributionFloat StrengthRaw; // 0x58(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleAttractorPointGravity");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleBeamBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamModifier
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x108 (0x138 - 0x30)
	class UParticleModuleBeamModifier : public UParticleModuleBeamBase	
	{
	public:
		TEnumAsByte<BeamModifierType> ModifierType; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FBeamModifierOptions PositionOptions; // 0x34(0x4)
		FRawDistributionVector Position; // 0x38(0x60)
		FBeamModifierOptions TangentOptions; // 0x98(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x9C(0x4) UNKNOWN PROPERTY
		FRawDistributionVector Tangent; // 0xA0(0x60)
		bool bAbsoluteTangent : 1; // 0x100:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x101(0x3) UNKNOWN PROPERTY
		FBeamModifierOptions StrengthOptions; // 0x104(0x4)
		FRawDistributionFloat Strength; // 0x108(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamModifier");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamNoise
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x190 (0x1C0 - 0x30)
	class UParticleModuleBeamNoise : public UParticleModuleBeamBase	
	{
	public:
		bool bLowFreq_Enabled : 1; // 0x30:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		int32_t Frequency; // 0x34(0x4)
		int32_t Frequency_LowRange; // 0x38(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		FRawDistributionVector NoiseRange; // 0x40(0x60)
		FRawDistributionFloat NoiseRangeScale; // 0xA0(0x30)
		bool bNRScaleEmitterTime : 1; // 0xD0:0(0x1)
		unsigned char UnknownData02_5[0x7]; // 0xD1(0x7) UNKNOWN PROPERTY
		FRawDistributionVector NoiseSpeed; // 0xD8(0x60)
		bool bSmooth : 1; // 0x138:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		float NoiseLockRadius; // 0x13C(0x4)
		bool bNoiseLock : 1; // 0x140:0(0x1)
		bool bOscillate : 1; // 0x140:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x141(0x3) UNKNOWN PROPERTY
		float NoiseLockTime; // 0x144(0x4)
		float NoiseTension; // 0x148(0x4)
		bool bUseNoiseTangents : 1; // 0x14C:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x14D(0x3) UNKNOWN PROPERTY
		FRawDistributionFloat NoiseTangentStrength; // 0x150(0x30)
		int32_t NoiseTessellation; // 0x180(0x4)
		bool bTargetNoise : 1; // 0x184:0(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x185(0x3) UNKNOWN PROPERTY
		float FrequencyDistance; // 0x188(0x4)
		bool bApplyNoiseScale : 1; // 0x18C:0(0x1)
		unsigned char UnknownData07_5[0x3]; // 0x18D(0x3) UNKNOWN PROPERTY
		FRawDistributionFloat NoiseScale; // 0x190(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamNoise");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamSource
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x118 (0x148 - 0x30)
	class UParticleModuleBeamSource : public UParticleModuleBeamBase	
	{
	public:
		TEnumAsByte<Beam2SourceTargetMethod> SourceMethod; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName SourceName; // 0x34(0x4)
		bool bSourceAbsolute : 1; // 0x38:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		FRawDistributionVector Source; // 0x40(0x60)
		bool bLockSource : 1; // 0xA0:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0xA1(0x3) UNKNOWN PROPERTY
		TEnumAsByte<Beam2SourceTargetTangentMethod> SourceTangentMethod; // 0xA4(0x1)
		unsigned char UnknownData03_6[0x3]; // 0xA5(0x3) UNKNOWN PROPERTY
		FRawDistributionVector SourceTangent; // 0xA8(0x60)
		bool bLockSourceTangent : 1; // 0x108:0(0x1)
		unsigned char UnknownData04_5[0x7]; // 0x109(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat SourceStrength; // 0x110(0x30)
		bool bLockSourceStength : 1; // 0x140:0(0x1)
		unsigned char UnknownData05_7[0x7]; // 0x141(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamSource");
			return ret;
		}
	};


	// Class Engine.ParticleModuleBeamTarget
	// Inherited from UParticleModuleBeamBase -> UParticleModule -> UObject
	// Size: 0x118 (0x148 - 0x30)
	class UParticleModuleBeamTarget : public UParticleModuleBeamBase	
	{
	public:
		TEnumAsByte<Beam2SourceTargetMethod> TargetMethod; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName TargetName; // 0x34(0x4)
		FRawDistributionVector Target; // 0x38(0x60)
		bool bTargetAbsolute : 1; // 0x98:0(0x1)
		bool bLockTarget : 1; // 0x98:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x99(0x3) UNKNOWN PROPERTY
		TEnumAsByte<Beam2SourceTargetTangentMethod> TargetTangentMethod; // 0x9C(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x9D(0x3) UNKNOWN PROPERTY
		FRawDistributionVector TargetTangent; // 0xA0(0x60)
		bool bLockTargetTangent : 1; // 0x100:0(0x1)
		unsigned char UnknownData03_5[0x7]; // 0x101(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat TargetStrength; // 0x108(0x30)
		bool bLockTargetStength : 1; // 0x138:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		float LockRadius; // 0x13C(0x4)
		unsigned char UnknownData05_7[0x8]; // 0x140(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleBeamTarget");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCameraBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleCameraBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCameraBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCameraOffset
	// Inherited from UParticleModuleCameraBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleCameraOffset : public UParticleModuleCameraBase	
	{
	public:
		FRawDistributionFloat CameraOffset; // 0x30(0x30)
		bool bSpawnTimeOnly : 1; // 0x60:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x61(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EParticleCameraOffsetUpdateMethod> UpdateMethod; // 0x64(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x65(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCameraOffset");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCollisionBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleCollisionBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCollisionBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCollision
	// Inherited from UParticleModuleCollisionBase -> UParticleModule -> UObject
	// Size: 0x190 (0x1C0 - 0x30)
	class UParticleModuleCollision : public UParticleModuleCollisionBase	
	{
	public:
		FRawDistributionVector DampingFactor; // 0x30(0x60)
		FRawDistributionVector DampingFactorRotation; // 0x90(0x60)
		FRawDistributionFloat MaxCollisions; // 0xF0(0x30)
		TEnumAsByte<EParticleCollisionComplete> CollisionCompletionOption; // 0x120(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x121(0x7) UNKNOWN PROPERTY
		TArray<TEnumAsByte> CollisionTypes; // 0x128(0x10)
		unsigned char UnknownData01_6[0x8]; // 0x138(0x8) UNKNOWN PROPERTY
		bool bApplyPhysics : 1; // 0x140:0(0x1)
		bool bIgnoreTriggerVolumes : 1; // 0x140:1(0x1)
		unsigned char UnknownData02_5[0x7]; // 0x141(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat ParticleMass; // 0x148(0x30)
		float DirScalar; // 0x178(0x4)
		bool bPawnsDoNotDecrementCount : 1; // 0x17C:0(0x1)
		bool bOnlyVerticalNormalsDecrementCount : 1; // 0x17C:1(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x17D(0x3) UNKNOWN PROPERTY
		float VerticalFudgeFactor; // 0x180(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x184(0x4) UNKNOWN PROPERTY
		FRawDistributionFloat DelayAmount; // 0x188(0x30)
		bool bDropDetail : 1; // 0x1B8:0(0x1)
		bool bCollideOnlyIfVisible : 1; // 0x1B8:1(0x1)
		bool bIgnoreSourceActor : 1; // 0x1B8:2(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x1B9(0x3) UNKNOWN PROPERTY
		float MaxCollisionDistance; // 0x1BC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCollision");
			return ret;
		}
	};


	// Class Engine.ParticleModuleCollisionGPU
	// Inherited from UParticleModuleCollisionBase -> UParticleModule -> UObject
	// Size: 0x78 (0xA8 - 0x30)
	class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase	
	{
	public:
		FRawDistributionFloat Resilience; // 0x30(0x30)
		FRawDistributionFloat ResilienceScaleOverLife; // 0x60(0x30)
		float Friction; // 0x90(0x4)
		float RandomSpread; // 0x94(0x4)
		float RandomDistribution; // 0x98(0x4)
		float RadiusScale; // 0x9C(0x4)
		float RadiusBias; // 0xA0(0x4)
		TEnumAsByte<EParticleCollisionResponse> Response; // 0xA4(0x1)
		TEnumAsByte<EParticleCollisionMode> CollisionMode; // 0xA5(0x1)
		unsigned char UnknownData00_7[0x2]; // 0xA6(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleCollisionGPU");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColorBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleColorBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColorBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColor
	// Inherited from UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleColor : public UParticleModuleColorBase	
	{
	public:
		FRawDistributionVector StartColor; // 0x30(0x60)
		FRawDistributionFloat StartAlpha; // 0x90(0x30)
		bool bClampAlpha : 1; // 0xC0:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColor");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColorOverLife
	// Inherited from UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleColorOverLife : public UParticleModuleColorBase	
	{
	public:
		FRawDistributionVector ColorOverLife; // 0x30(0x60)
		FRawDistributionFloat AlphaOverLife; // 0x90(0x30)
		bool bClampAlpha : 1; // 0xC0:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColorOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColorScaleOverLife
	// Inherited from UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase	
	{
	public:
		FRawDistributionVector ColorScaleOverLife; // 0x30(0x60)
		FRawDistributionFloat AlphaScaleOverLife; // 0x90(0x30)
		bool bEmitterTime : 1; // 0xC0:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xC1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColorScaleOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleColor_Seeded
	// Inherited from UParticleModuleColor -> UParticleModuleColorBase -> UParticleModule -> UObject
	// Size: 0x18 (0xE0 - 0xC8)
	class UParticleModuleColor_Seeded : public UParticleModuleColor	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0xC8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleColor_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleEventBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventGenerator
	// Inherited from UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModuleEventGenerator : public UParticleModuleEventBase	
	{
	public:
		TArray<FParticleEvent_GenerateInfo> Events; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventGenerator");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventReceiverBase
	// Inherited from UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleEventReceiverBase : public UParticleModuleEventBase	
	{
	public:
		TEnumAsByte<EParticleEventType> EventGeneratorType; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName EventName; // 0x34(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventReceiverBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventReceiverKillParticles
	// Inherited from UParticleModuleEventReceiverBase -> UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase	
	{
	public:
		bool bStopSpawning : 1; // 0x38:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventReceiverKillParticles");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventReceiverSpawn
	// Inherited from UParticleModuleEventReceiverBase -> UParticleModuleEventBase -> UParticleModule -> UObject
	// Size: 0xB0 (0xE8 - 0x38)
	class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase	
	{
	public:
		FRawDistributionFloat SpawnCount; // 0x38(0x30)
		bool bUseParticleTime : 1; // 0x68:0(0x1)
		bool bUsePSysLocation : 1; // 0x68:1(0x1)
		bool bInheritVelocity : 1; // 0x68:2(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x69(0x7) UNKNOWN PROPERTY
		FRawDistributionVector InheritVelocityScale; // 0x70(0x60)
		TArray<UPhysicalMaterial*> PhysicalMaterials; // 0xD0(0x10)
		bool bBanPhysicalMaterials : 1; // 0xE0:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventReceiverSpawn");
			return ret;
		}
	};


	// Class Engine.ParticleModuleEventSendToGame
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UParticleModuleEventSendToGame : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleEventSendToGame");
			return ret;
		}
	};


	// Class Engine.ParticleModuleKillBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleKillBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleKillBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleKillBox
	// Inherited from UParticleModuleKillBase -> UParticleModule -> UObject
	// Size: 0xC8 (0xF8 - 0x30)
	class UParticleModuleKillBox : public UParticleModuleKillBase	
	{
	public:
		FRawDistributionVector LowerLeftCorner; // 0x30(0x60)
		FRawDistributionVector UpperRightCorner; // 0x90(0x60)
		bool bAbsolute : 1; // 0xF0:0(0x1)
		bool bKillInside : 1; // 0xF0:1(0x1)
		bool bAxisAlignedAndFixedSize : 1; // 0xF0:2(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xF1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleKillBox");
			return ret;
		}
	};


	// Class Engine.ParticleModuleKillHeight
	// Inherited from UParticleModuleKillBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleKillHeight : public UParticleModuleKillBase	
	{
	public:
		FRawDistributionFloat Height; // 0x30(0x30)
		bool bAbsolute : 1; // 0x60:0(0x1)
		bool bFloor : 1; // 0x60:1(0x1)
		bool bApplyPSysScale : 1; // 0x60:2(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x61(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleKillHeight");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLifetimeBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleLifetimeBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLifetimeBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLifetime
	// Inherited from UParticleModuleLifetimeBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleLifetime : public UParticleModuleLifetimeBase	
	{
	public:
		FRawDistributionFloat Lifetime; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLifetime_Seeded
	// Inherited from UParticleModuleLifetime -> UParticleModuleLifetimeBase -> UParticleModule -> UObject
	// Size: 0x18 (0x78 - 0x60)
	class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLifetime_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLightBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleLightBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLightBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLight
	// Inherited from UParticleModuleLightBase -> UParticleModule -> UObject
	// Size: 0x110 (0x140 - 0x30)
	class UParticleModuleLight : public UParticleModuleLightBase	
	{
	public:
		bool bUseInverseSquaredFalloff; // 0x30(0x1)
		bool bAffectsTranslucency; // 0x31(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x32(0x2) UNKNOWN PROPERTY
		bool bOverrideInverseExposureBlend : 1; // 0x34:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		bool bPreviewLightRadius; // 0x38(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		float SpawnFraction; // 0x3C(0x4)
		FRawDistributionVector ColorScaleOverLife; // 0x40(0x60)
		FRawDistributionFloat BrightnessOverLife; // 0xA0(0x30)
		FRawDistributionFloat RadiusScale; // 0xD0(0x30)
		FRawDistributionFloat LightExponent; // 0x100(0x30)
		float InverseExposureBlend; // 0x130(0x4)
		FLightingChannels LightingChannels; // 0x134(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x135(0x3) UNKNOWN PROPERTY
		float VolumetricScatteringIntensity; // 0x138(0x4)
		bool bHighQualityLights; // 0x13C(0x1)
		bool bShadowCastingLights; // 0x13D(0x1)
		unsigned char UnknownData04_7[0x2]; // 0x13E(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLight");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLight_Seeded
	// Inherited from UParticleModuleLight -> UParticleModuleLightBase -> UParticleModule -> UObject
	// Size: 0x18 (0x158 - 0x140)
	class UParticleModuleLight_Seeded : public UParticleModuleLight	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x140(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLight_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleLocationBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocation
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleLocation : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector StartLocation; // 0x30(0x60)
		float DistributeOverNPoints; // 0x90(0x4)
		float DistributeThreshold; // 0x94(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationBoneSocket
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x48 (0x78 - 0x30)
	class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase	
	{
	public:
		TEnumAsByte<ELocationBoneSocketSource> SourceType; // 0x30(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		FVector UniversalOffset; // 0x38(0x18)
		TArray<FLocationBoneSocketInfo> SourceLocations; // 0x50(0x10)
		TEnumAsByte<ELocationBoneSocketSelectionMethod> SelectionMethod; // 0x60(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x61(0x3) UNKNOWN PROPERTY
		bool bUpdatePositionEachFrame : 1; // 0x64:0(0x1)
		bool bOrientMeshEmitters : 1; // 0x64:1(0x1)
		bool bInheritBoneVelocity : 1; // 0x64:2(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x65(0x3) UNKNOWN PROPERTY
		float InheritVelocityScale; // 0x68(0x4)
		FName SkelMeshActorParamName; // 0x6C(0x4)
		int32_t NumPreSelectedIndices; // 0x70(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x74(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationBoneSocket");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationDirect
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x180 (0x1B0 - 0x30)
	class UParticleModuleLocationDirect : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector Location; // 0x30(0x60)
		FRawDistributionVector LocationOffset; // 0x90(0x60)
		FRawDistributionVector ScaleFactor; // 0xF0(0x60)
		FRawDistributionVector Direction; // 0x150(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationDirect");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationEmitter
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleLocationEmitter : public UParticleModuleLocationBase	
	{
	public:
		FName EmitterName; // 0x30(0x4)
		TEnumAsByte<ELocationEmitterSelectionMethod> SelectionMethod; // 0x34(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		bool InheritSourceVelocity : 1; // 0x38:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		float InheritSourceVelocityScale; // 0x3C(0x4)
		bool bInheritSourceRotation : 1; // 0x40:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		float InheritSourceRotationScale; // 0x44(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationEmitter");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationEmitterDirect
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase	
	{
	public:
		FName EmitterName; // 0x30(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationEmitterDirect");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveBase
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase	
	{
	public:
		bool Positive_X : 1; // 0x30:0(0x1)
		bool Positive_Y : 1; // 0x30:1(0x1)
		bool Positive_Z : 1; // 0x30:2(0x1)
		bool Negative_X : 1; // 0x30:3(0x1)
		bool Negative_Y : 1; // 0x30:4(0x1)
		bool Negative_Z : 1; // 0x30:5(0x1)
		bool SurfaceOnly : 1; // 0x30:6(0x1)
		bool Velocity : 1; // 0x30:7(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat VelocityScale; // 0x38(0x30)
		FRawDistributionVector StartLocation; // 0x68(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveCylinder
	// Inherited from UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x70 (0x138 - 0xC8)
	class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase	
	{
	public:
		bool RadialVelocity : 1; // 0xC8:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0xC9(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat StartRadius; // 0xD0(0x30)
		FRawDistributionFloat StartHeight; // 0x100(0x30)
		TEnumAsByte<CylinderHeightAxis> HeightAxis; // 0x130(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x131(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveCylinder");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
	// Inherited from UParticleModuleLocationPrimitiveCylinder -> UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x150 - 0x138)
	class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x138(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveSphere
	// Inherited from UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x30 (0xF8 - 0xC8)
	class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase	
	{
	public:
		FRawDistributionFloat StartRadius; // 0xC8(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveSphere");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
	// Inherited from UParticleModuleLocationPrimitiveSphere -> UParticleModuleLocationPrimitiveBase -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x110 - 0xF8)
	class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0xF8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationPrimitiveTriangle
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0xF0 (0x120 - 0x30)
	class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector StartOffset; // 0x30(0x60)
		FRawDistributionFloat Height; // 0x90(0x30)
		FRawDistributionFloat Angle; // 0xC0(0x30)
		FRawDistributionFloat Thickness; // 0xF0(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationPrimitiveTriangle");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationSkelVertSurface
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x80 (0xB0 - 0x30)
	class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase	
	{
	public:
		TEnumAsByte<ELocationSkelVertSurfaceSource> SourceType; // 0x30(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		FVector UniversalOffset; // 0x38(0x18)
		bool bUpdatePositionEachFrame : 1; // 0x50:0(0x1)
		bool bOrientMeshEmitters : 1; // 0x50:1(0x1)
		bool bInheritBoneVelocity : 1; // 0x50:2(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		float InheritVelocityScale; // 0x54(0x4)
		FName SkelMeshActorParamName; // 0x58(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY
		TArray<FName> ValidAssociatedBones; // 0x60(0x10)
		bool bEnforceNormalCheck : 1; // 0x70:0(0x1)
		unsigned char UnknownData03_5[0x7]; // 0x71(0x7) UNKNOWN PROPERTY
		FVector NormalToCompare; // 0x78(0x18)
		float NormalCheckToleranceDegrees; // 0x90(0x4)
		float NormalCheckTolerance; // 0x94(0x4)
		TArray<int32_t> ValidMaterialIndices; // 0x98(0x10)
		bool bInheritVertexColor : 1; // 0xA8:0(0x1)
		bool bInheritUV : 1; // 0xA8:1(0x1)
		unsigned char UnknownData04_5[0x3]; // 0xA9(0x3) UNKNOWN PROPERTY
		uint32_t InheritUVChannel; // 0xAC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationSkelVertSurface");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationWorldOffset
	// Inherited from UParticleModuleLocation -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x0 (0x98 - 0x98)
	class UParticleModuleLocationWorldOffset : public UParticleModuleLocation	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationWorldOffset");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocationWorldOffset_Seeded
	// Inherited from UParticleModuleLocationWorldOffset -> UParticleModuleLocation -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0xB0 - 0x98)
	class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocationWorldOffset_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleLocation_Seeded
	// Inherited from UParticleModuleLocation -> UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x18 (0xB0 - 0x98)
	class UParticleModuleLocation_Seeded : public UParticleModuleLocation	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleLocation_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMaterialBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleMaterialBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMaterialBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshMaterial
	// Inherited from UParticleModuleMaterialBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase	
	{
	public:
		TArray<UMaterialInterface*> MeshMaterials; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshMaterial");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleRotationBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotation
	// Inherited from UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleMeshRotation : public UParticleModuleRotationBase	
	{
	public:
		FRawDistributionVector StartRotation; // 0x30(0x60)
		bool bInheritParent : 1; // 0x90:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRateBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleRotationRateBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRateBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRate
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionVector StartRotationRate; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRate");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionVector LifeMultiplier; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRateMultiplyLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRateOverLife
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionVector RotRate; // 0x30(0x60)
		bool bScaleRotRate : 1; // 0x90:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRateOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotationRate_Seeded
	// Inherited from UParticleModuleMeshRotationRate -> UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x18 (0xA8 - 0x90)
	class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotationRate_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleMeshRotation_Seeded
	// Inherited from UParticleModuleMeshRotation -> UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x18 (0xB0 - 0x98)
	class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleMeshRotation_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrbitBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleOrbitBase : public UParticleModule	
	{
	public:
		bool bUseEmitterTime : 1; // 0x30:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrbitBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrbit
	// Inherited from UParticleModuleOrbitBase -> UParticleModule -> UObject
	// Size: 0x140 (0x178 - 0x38)
	class UParticleModuleOrbit : public UParticleModuleOrbitBase	
	{
	public:
		TEnumAsByte<EOrbitChainMode> ChainMode; // 0x38(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		FRawDistributionVector OffsetAmount; // 0x40(0x60)
		FOrbitOptions OffsetOptions; // 0xA0(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xA4(0x4) UNKNOWN PROPERTY
		FRawDistributionVector RotationAmount; // 0xA8(0x60)
		FOrbitOptions RotationOptions; // 0x108(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x10C(0x4) UNKNOWN PROPERTY
		FRawDistributionVector RotationRateAmount; // 0x110(0x60)
		FOrbitOptions RotationRateOptions; // 0x170(0x4)
		unsigned char UnknownData03_7[0x4]; // 0x174(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrbit");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrientationBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleOrientationBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrientationBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleOrientationAxisLock
	// Inherited from UParticleModuleOrientationBase -> UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase	
	{
	public:
		TEnumAsByte<EParticleAxisLock> LockAxisFlags; // 0x30(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleOrientationAxisLock");
			return ret;
		}
	};


	// Class Engine.ParticleModuleParameterBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleParameterBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleParameterBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleParameterDynamic
	// Inherited from UParticleModuleParameterBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleParameterDynamic : public UParticleModuleParameterBase	
	{
	public:
		TArray<FEmitterDynamicParameter> DynamicParams; // 0x30(0x10)
		int32_t UpdateFlags; // 0x40(0x4)
		bool bUsesVelocity : 1; // 0x44:0(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x45(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleParameterDynamic");
			return ret;
		}
	};


	// Class Engine.ParticleModuleParameterDynamic_Seeded
	// Inherited from UParticleModuleParameterDynamic -> UParticleModuleParameterBase -> UParticleModule -> UObject
	// Size: 0x18 (0x60 - 0x48)
	class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x48(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleParameterDynamic_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModulePivotOffset
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModulePivotOffset : public UParticleModuleLocationBase	
	{
	public:
		FVector2D PivotOffset; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModulePivotOffset");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRequired
	// Inherited from UParticleModule -> UObject
	// Size: 0x140 (0x170 - 0x30)
	class UParticleModuleRequired : public UParticleModule	
	{
	public:
		UMaterialInterface* Material; // 0x30(0x8)
		float MinFacingCameraBlendDistance; // 0x38(0x4)
		float MaxFacingCameraBlendDistance; // 0x3C(0x4)
		FVector EmitterOrigin; // 0x40(0x18)
		FRotator EmitterRotation; // 0x58(0x18)
		TEnumAsByte<EParticleScreenAlignment> ScreenAlignment; // 0x70(0x1)
		bool bUseLocalSpace : 1; // 0x71:0(0x1)
		bool bKillOnDeactivate : 1; // 0x71:1(0x1)
		bool bKillOnCompleted : 1; // 0x71:2(0x1)
		TEnumAsByte<EParticleSortMode> SortMode; // 0x72(0x1)
		bool bUseLegacyEmitterTime : 1; // 0x73:0(0x1)
		bool bRemoveHMDRoll : 1; // 0x73:1(0x1)
		bool bSupportLargeWorldCoordinates : 1; // 0x73:2(0x1)
		bool bEmitterDurationUseRange : 1; // 0x73:3(0x1)
		bool bOverrideUseVelocityForMotionBlur : 1; // 0x73:4(0x1)
		bool bUseVelocityForMotionBlur : 1; // 0x73:5(0x1)
		float EmitterDuration; // 0x74(0x4)
		FRawDistributionFloat SpawnRate; // 0x78(0x30)
		TArray<FParticleBurst> BurstList; // 0xA8(0x10)
		float EmitterDelay; // 0xB8(0x4)
		float EmitterDelayLow; // 0xBC(0x4)
		bool bDelayFirstLoopOnly : 1; // 0xC0:0(0x1)
		TEnumAsByte<EParticleSubUVInterpMethod> InterpolationMethod; // 0xC1(0x1)
		bool bScaleUV : 1; // 0xC2:0(0x1)
		bool bEmitterDelayUseRange : 1; // 0xC2:1(0x1)
		TEnumAsByte<EParticleBurstMethod> ParticleBurstMethod; // 0xC3(0x1)
		bool bOverrideSystemMacroUV : 1; // 0xC4:0(0x1)
		bool bUseMaxDrawCount : 1; // 0xC4:1(0x1)
		TEnumAsByte<EOpacitySourceMode> OpacitySourceMode; // 0xC5(0x1)
		TEnumAsByte<EEmitterNormalsMode> EmitterNormalsMode; // 0xC6(0x1)
		bool bOrbitModuleAffectsVelocityAlignment : 1; // 0xC7:0(0x1)
		int32_t SubImages_Horizontal; // 0xC8(0x4)
		int32_t SubImages_Vertical; // 0xCC(0x4)
		float RandomImageTime; // 0xD0(0x4)
		int32_t RandomImageChanges; // 0xD4(0x4)
		FVector MacroUVPosition; // 0xD8(0x18)
		float MacroUVRadius; // 0xF0(0x4)
		EParticleUVFlipMode UVFlippingMode; // 0xF4(0x1)
		TEnumAsByte<ESubUVBoundingVertexCount> BoundingMode; // 0xF5(0x1)
		bool bDurationRecalcEachLoop : 1; // 0xF6:0(0x1)
		unsigned char UnknownData00_5[0x1]; // 0xF7(0x1) UNKNOWN PROPERTY
		FVector NormalsSphereCenter; // 0xF8(0x18)
		float AlphaThreshold; // 0x110(0x4)
		int32_t EmitterLoops; // 0x114(0x4)
		UTexture2D* CutoutTexture; // 0x118(0x8)
		int32_t MaxDrawCount; // 0x120(0x4)
		float EmitterDurationLow; // 0x124(0x4)
		FVector NormalsCylinderDirection; // 0x128(0x18)
		TArray<FName> NamedMaterialOverrides; // 0x140(0x10)
		unsigned char UnknownData01_7[0x20]; // 0x150(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRequired");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotation
	// Inherited from UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleRotation : public UParticleModuleRotationBase	
	{
	public:
		FRawDistributionFloat StartRotation; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationOverLifetime
	// Inherited from UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase	
	{
	public:
		FRawDistributionFloat RotationOverLife; // 0x30(0x30)
		bool Scale : 1; // 0x60:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x61(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationOverLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRate
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleRotationRate : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionFloat StartRotationRate; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRate");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRateMultiplyLife
	// Inherited from UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase	
	{
	public:
		FRawDistributionFloat LifeMultiplier; // 0x30(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRateMultiplyLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotationRate_Seeded
	// Inherited from UParticleModuleRotationRate -> UParticleModuleRotationRateBase -> UParticleModule -> UObject
	// Size: 0x18 (0x78 - 0x60)
	class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotationRate_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleRotation_Seeded
	// Inherited from UParticleModuleRotation -> UParticleModuleRotationBase -> UParticleModule -> UObject
	// Size: 0x18 (0x78 - 0x60)
	class UParticleModuleRotation_Seeded : public UParticleModuleRotation	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x60(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleRotation_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleSizeBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSize
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleSize : public UParticleModuleSizeBase	
	{
	public:
		FRawDistributionVector StartSize; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSize");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeMultiplyLife
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase	
	{
	public:
		FRawDistributionVector LifeMultiplier; // 0x30(0x60)
		bool MultiplyX : 1; // 0x90:0(0x1)
		bool MultiplyY : 1; // 0x90:1(0x1)
		bool MultiplyZ : 1; // 0x90:2(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeMultiplyLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeScale
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UParticleModuleSizeScale : public UParticleModuleSizeBase	
	{
	public:
		FRawDistributionVector SizeScale; // 0x30(0x60)
		bool EnableX : 1; // 0x90:0(0x1)
		bool EnableY : 1; // 0x90:1(0x1)
		bool EnableZ : 1; // 0x90:2(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x91(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeScale");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSizeScaleBySpeed
	// Inherited from UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase	
	{
	public:
		FVector2D SpeedScale; // 0x30(0x10)
		FVector2D MaxScale; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSizeScaleBySpeed");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSize_Seeded
	// Inherited from UParticleModuleSize -> UParticleModuleSizeBase -> UParticleModule -> UObject
	// Size: 0x18 (0xA8 - 0x90)
	class UParticleModuleSize_Seeded : public UParticleModuleSize	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0x90(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSize_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSourceMovement
	// Inherited from UParticleModuleLocationBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleSourceMovement : public UParticleModuleLocationBase	
	{
	public:
		FRawDistributionVector SourceMovementScale; // 0x30(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSourceMovement");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSpawnBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleSpawnBase : public UParticleModule	
	{
	public:
		bool bProcessSpawnRate : 1; // 0x30:0(0x1)
		bool bProcessBurstList : 1; // 0x30:1(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSpawnBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSpawn
	// Inherited from UParticleModuleSpawnBase -> UParticleModule -> UObject
	// Size: 0xA8 (0xE0 - 0x38)
	class UParticleModuleSpawn : public UParticleModuleSpawnBase	
	{
	public:
		FRawDistributionFloat Rate; // 0x38(0x30)
		FRawDistributionFloat RateScale; // 0x68(0x30)
		TArray<FParticleBurst> BurstList; // 0x98(0x10)
		FRawDistributionFloat BurstScale; // 0xA8(0x30)
		TEnumAsByte<EParticleBurstMethod> ParticleBurstMethod; // 0xD8(0x1)
		unsigned char UnknownData00_6[0x3]; // 0xD9(0x3) UNKNOWN PROPERTY
		bool bApplyGlobalSpawnRateScale : 1; // 0xDC:0(0x1)
		unsigned char UnknownData01_7[0x3]; // 0xDD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSpawn");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSpawnPerUnit
	// Inherited from UParticleModuleSpawnBase -> UParticleModule -> UObject
	// Size: 0x40 (0x78 - 0x38)
	class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase	
	{
	public:
		float UnitScalar; // 0x38(0x4)
		float MovementTolerance; // 0x3C(0x4)
		FRawDistributionFloat SpawnPerUnit; // 0x40(0x30)
		float MaxFrameDistance; // 0x70(0x4)
		bool bIgnoreSpawnRateWhenMoving : 1; // 0x74:0(0x1)
		bool bIgnoreMovementAlongX : 1; // 0x74:1(0x1)
		bool bIgnoreMovementAlongY : 1; // 0x74:2(0x1)
		bool bIgnoreMovementAlongZ : 1; // 0x74:3(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x75(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSpawnPerUnit");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSubUVBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleSubUVBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSubUVBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSubUV
	// Inherited from UParticleModuleSubUVBase -> UParticleModule -> UObject
	// Size: 0x40 (0x70 - 0x30)
	class UParticleModuleSubUV : public UParticleModuleSubUVBase	
	{
	public:
		USubUVAnimation* Animation; // 0x30(0x8)
		FRawDistributionFloat SubImageIndex; // 0x38(0x30)
		bool bUseRealTime : 1; // 0x68:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x69(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSubUV");
			return ret;
		}
	};


	// Class Engine.ParticleModuleSubUVMovie
	// Inherited from UParticleModuleSubUV -> UParticleModuleSubUVBase -> UParticleModule -> UObject
	// Size: 0x40 (0xB0 - 0x70)
	class UParticleModuleSubUVMovie : public UParticleModuleSubUV	
	{
	public:
		bool bUseEmitterTime : 1; // 0x70:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x71(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat FrameRate; // 0x78(0x30)
		int32_t StartingFrame; // 0xA8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xAC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleSubUVMovie");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTrailBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleTrailBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTrailBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTrailSource
	// Inherited from UParticleModuleTrailBase -> UParticleModule -> UObject
	// Size: 0x58 (0x88 - 0x30)
	class UParticleModuleTrailSource : public UParticleModuleTrailBase	
	{
	public:
		TEnumAsByte<ETrail2SourceMethod> SourceMethod; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FName SourceName; // 0x34(0x4)
		FRawDistributionFloat SourceStrength; // 0x38(0x30)
		bool bLockSourceStength : 1; // 0x68:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x69(0x3) UNKNOWN PROPERTY
		int32_t SourceOffsetCount; // 0x6C(0x4)
		TArray<FVector> SourceOffsetDefaults; // 0x70(0x10)
		TEnumAsByte<EParticleSourceSelectionMethod> SelectionMethod; // 0x80(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x81(0x3) UNKNOWN PROPERTY
		bool bInheritRotation : 1; // 0x84:0(0x1)
		unsigned char UnknownData03_7[0x3]; // 0x85(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTrailSource");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleTypeDataBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataAnimTrail
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase	
	{
	public:
		bool bDeadTrailsOnDeactivate : 1; // 0x30:0(0x1)
		bool bEnablePreviousTangentRecalculation : 1; // 0x30:1(0x1)
		bool bTangentRecalculationEveryFrame : 1; // 0x30:2(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		float TilingDistance; // 0x34(0x4)
		float DistanceTessellationStepSize; // 0x38(0x4)
		float TangentTessellationStepSize; // 0x3C(0x4)
		float WidthTessellationStepSize; // 0x40(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataAnimTrail");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataBeam2
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x118 (0x148 - 0x30)
	class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase	
	{
	public:
		TEnumAsByte<EBeam2Method> BeamMethod; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		int32_t TextureTile; // 0x34(0x4)
		float TextureTileDistance; // 0x38(0x4)
		int32_t Sheets; // 0x3C(0x4)
		int32_t MaxBeamCount; // 0x40(0x4)
		float Speed; // 0x44(0x4)
		int32_t InterpolationPoints; // 0x48(0x4)
		bool bAlwaysOn : 1; // 0x4C:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		int32_t UpVectorStepSize; // 0x50(0x4)
		FName BranchParentName; // 0x54(0x4)
		FRawDistributionFloat Distance; // 0x58(0x30)
		TEnumAsByte<EBeamTaperMethod> TaperMethod; // 0x88(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x89(0x7) UNKNOWN PROPERTY
		FRawDistributionFloat TaperFactor; // 0x90(0x30)
		FRawDistributionFloat TaperScale; // 0xC0(0x30)
		bool RenderGeometry : 1; // 0xF0:0(0x1)
		bool RenderDirectLine : 1; // 0xF0:1(0x1)
		bool RenderLines : 1; // 0xF0:2(0x1)
		bool RenderTessellation : 1; // 0xF0:3(0x1)
		unsigned char UnknownData03_7[0x57]; // 0xF1(0x57) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataBeam2");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataGpu
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x5A0 (0x5D0 - 0x30)
	class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase	
	{
	public:
		FGPUSpriteEmitterInfo EmitterInfo; // 0x30(0x350)
		FGPUSpriteResourceData ResourceData; // 0x380(0x240)
		float CameraMotionBlurAmount; // 0x5C0(0x4)
		bool bClearExistingParticlesOnInit : 1; // 0x5C4:0(0x1)
		unsigned char UnknownData00_7[0xB]; // 0x5C5(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataGpu");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataMesh
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x80 (0xB0 - 0x30)
	class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase	
	{
	public:
		UStaticMesh* Mesh; // 0x30(0x8)
		unsigned char UnknownData00_6[0x8]; // 0x38(0x8) UNKNOWN PROPERTY
		float LODSizeScale; // 0x40(0x4)
		bool bUseStaticMeshLODs : 1; // 0x44:0(0x1)
		bool CastShadows : 1; // 0x44:1(0x1)
		bool DoCollisions : 1; // 0x44:2(0x1)
		TEnumAsByte<EMeshScreenAlignment> MeshAlignment; // 0x45(0x1)
		bool bOverrideMaterial : 1; // 0x46:0(0x1)
		bool bOverrideDefaultMotionBlurSettings : 1; // 0x46:1(0x1)
		bool bEnableMotionBlur : 1; // 0x46:2(0x1)
		unsigned char UnknownData01_5[0x1]; // 0x47(0x1) UNKNOWN PROPERTY
		FRawDistributionVector RollPitchYawRange; // 0x48(0x60)
		TEnumAsByte<EParticleAxisLock> AxisLockOption; // 0xA8(0x1)
		bool bCameraFacing : 1; // 0xA9:0(0x1)
		TEnumAsByte<EMeshCameraFacingUpAxis> CameraFacingUpAxisOption; // 0xAA(0x1)
		TEnumAsByte<EMeshCameraFacingOptions> CameraFacingOption; // 0xAB(0x1)
		bool bApplyParticleRotationAsSpin : 1; // 0xAC:0(0x1)
		bool bFaceCameraDirectionRatherThanPosition : 1; // 0xAC:1(0x1)
		bool bCollisionsConsiderPartilceSize : 1; // 0xAC:2(0x1)
		unsigned char UnknownData02_7[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataMesh");
			return ret;
		}
	};


	// Class Engine.ParticleModuleTypeDataRibbon
	// Inherited from UParticleModuleTypeDataBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase	
	{
	public:
		int32_t MaxTessellationBetweenParticles; // 0x30(0x4)
		int32_t SheetsPerTrail; // 0x34(0x4)
		int32_t MaxTrailCount; // 0x38(0x4)
		int32_t MaxParticleInTrailCount; // 0x3C(0x4)
		bool bDeadTrailsOnDeactivate : 1; // 0x40:0(0x1)
		bool bDeadTrailsOnSourceLoss : 1; // 0x40:1(0x1)
		bool bClipSourceSegement : 1; // 0x40:2(0x1)
		bool bEnablePreviousTangentRecalculation : 1; // 0x40:3(0x1)
		bool bTangentRecalculationEveryFrame : 1; // 0x40:4(0x1)
		bool bSpawnInitialParticle : 1; // 0x40:5(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		TEnumAsByte<ETrailsRenderAxisOption> RenderAxis; // 0x44(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x45(0x3) UNKNOWN PROPERTY
		float TangentSpawningScalar; // 0x48(0x4)
		bool bRenderGeometry : 1; // 0x4C:0(0x1)
		bool bRenderSpawnPoints : 1; // 0x4C:1(0x1)
		bool bRenderTangents : 1; // 0x4C:2(0x1)
		bool bRenderTessellation : 1; // 0x4C:3(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		float TilingDistance; // 0x50(0x4)
		float DistanceTessellationStepSize; // 0x54(0x4)
		bool bEnableTangentDiffInterpScale : 1; // 0x58:0(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x59(0x3) UNKNOWN PROPERTY
		float TangentTessellationScalar; // 0x5C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleTypeDataRibbon");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UParticleModuleVectorFieldBase : public UParticleModule	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldGlobal
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase	
	{
	public:
		bool bOverrideGlobalVectorFieldTightness : 1; // 0x30:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		float GlobalVectorFieldScale; // 0x34(0x4)
		float GlobalVectorFieldTightness; // 0x38(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldGlobal");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldLocal
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x60 (0x90 - 0x30)
	class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase	
	{
	public:
		UVectorField* VectorField; // 0x30(0x8)
		FVector RelativeTranslation; // 0x38(0x18)
		FRotator RelativeRotation; // 0x50(0x18)
		FVector RelativeScale3D; // 0x68(0x18)
		float Intensity; // 0x80(0x4)
		float Tightness; // 0x84(0x4)
		bool bIgnoreComponentTransform : 1; // 0x88:0(0x1)
		bool bTileX : 1; // 0x88:1(0x1)
		bool bTileY : 1; // 0x88:2(0x1)
		bool bTileZ : 1; // 0x88:3(0x1)
		bool bUseFixDT : 1; // 0x88:4(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x89(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldLocal");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldRotation
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase	
	{
	public:
		FVector MinInitialRotation; // 0x30(0x18)
		FVector MaxInitialRotation; // 0x48(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldRotation");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldRotationRate
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase	
	{
	public:
		FVector RotationRate; // 0x30(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldRotationRate");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldScale
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase	
	{
	public:
		UDistributionFloat* VectorFieldScale; // 0x30(0x8)
		FRawDistributionFloat VectorFieldScaleRaw; // 0x38(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldScale");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVectorFieldScaleOverLife
	// Inherited from UParticleModuleVectorFieldBase -> UParticleModule -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase	
	{
	public:
		UDistributionFloat* VectorFieldScaleOverLife; // 0x30(0x8)
		FRawDistributionFloat VectorFieldScaleOverLifeRaw; // 0x38(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVectorFieldScaleOverLife");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityBase
	// Inherited from UParticleModule -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UParticleModuleVelocityBase : public UParticleModule	
	{
	public:
		bool bInWorldSpace : 1; // 0x30:0(0x1)
		bool bApplyOwnerScale : 1; // 0x30:1(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityBase");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocity
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x90 (0xC8 - 0x38)
	class UParticleModuleVelocity : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionVector StartVelocity; // 0x38(0x60)
		FRawDistributionFloat StartVelocityRadial; // 0x98(0x30)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocity");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityCone
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x78 (0xB0 - 0x38)
	class UParticleModuleVelocityCone : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionFloat Angle; // 0x38(0x30)
		FRawDistributionFloat Velocity; // 0x68(0x30)
		FVector Direction; // 0x98(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityCone");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityInheritParent
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x60 (0x98 - 0x38)
	class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionVector Scale; // 0x38(0x60)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityInheritParent");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocityOverLifetime
	// Inherited from UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x68 (0xA0 - 0x38)
	class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase	
	{
	public:
		FRawDistributionVector VelOverLife; // 0x38(0x60)
		bool Absolute : 1; // 0x98:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x99(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocityOverLifetime");
			return ret;
		}
	};


	// Class Engine.ParticleModuleVelocity_Seeded
	// Inherited from UParticleModuleVelocity -> UParticleModuleVelocityBase -> UParticleModule -> UObject
	// Size: 0x18 (0xE0 - 0xC8)
	class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity	
	{
	public:
		FParticleRandomSeedInfo RandomSeedInfo; // 0xC8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleModuleVelocity_Seeded");
			return ret;
		}
	};


	// Class Engine.ParticleSpriteEmitter
	// Inherited from UParticleEmitter -> UObject
	// Size: 0x0 (0x1B8 - 0x1B8)
	class UParticleSpriteEmitter : public UParticleEmitter	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSpriteEmitter");
			return ret;
		}
	};


	// Class Engine.FXSystemComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x4D0 - 0x4C8)
	class UFXSystemComponent : public UPrimitiveComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FXSystemComponent");
			return ret;
		}

		void SetVectorParameter(FName ParameterName, FVector Param); // Flags: Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7478D3124(relative to base address)
		void SetUseAutoManageAttachment(bool bAutoManage); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38A384(relative to base address)
		void SetIntParameter(FName ParameterName, int32_t Param); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF747A0A14C(relative to base address)
		void SetFloatParameter(FName ParameterName, float Param); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF7478D3618(relative to base address)
		void SetEmitterEnable(FName EmitterName, bool bNewEnableState); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF747E3BE9C(relative to base address)
		void SetColorParameter(FName ParameterName, FLinearColor Param); // Flags: Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7472D75E4(relative to base address)
		void SetBoolParameter(FName ParameterName, bool Param); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF748989808(relative to base address)
		void SetAutoAttachmentParameters(USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C389100(relative to base address)
		void SetActorParameter(FName ParameterName, AActor* Param); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF7498437F8(relative to base address)
		void ReleaseToPool(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF7472D8840(relative to base address)
		UFXSystemAsset GetFXSystemAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C388358(relative to base address)
	};


	// Class Engine.ParticleSystemComponent
	// Inherited from UFXSystemComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x308 (0x7D0 - 0x4C8)
	class UParticleSystemComponent : public UFXSystemComponent	
	{
	public:
		UParticleSystem* Template; // 0x4C8(0x8)
		TArray<UMaterialInterface*> EmitterMaterials; // 0x4D0(0x10)
		TArray<USkeletalMeshComponent*> SkelMeshComponents; // 0x4E0(0x10)
		unsigned char UnknownData00_6[0x1]; // 0x4F0(0x1) UNKNOWN PROPERTY
		bool bResetOnDetach : 1; // 0x4F1:0(0x1)
		bool bUpdateOnDedicatedServer : 1; // 0x4F1:1(0x1)
		unsigned char UnknownBit01 : 1; // 0x4F1:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0x4F1:3(0x1) UNKNOWN PROPERTY
		bool bAllowRecycling : 1; // 0x4F1:4(0x1)
		bool bAutoManageAttachment : 1; // 0x4F1:5(0x1)
		bool bAutoAttachWeldSimulatedBodies : 1; // 0x4F1:6(0x1)
		unsigned char UnknownBit03 : 1; // 0x4F1:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x4F2:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit05 : 1; // 0x4F2:1(0x1) UNKNOWN PROPERTY
		bool bWarmingUp : 1; // 0x4F2:2(0x1)
		bool bOverrideLODMethod : 1; // 0x4F2:3(0x1)
		bool bSkipUpdateDynamicDataDuringTick : 1; // 0x4F2:4(0x1)
		unsigned char UnknownData06_5[0xA]; // 0x4F3(0xA) UNKNOWN PROPERTY
		TEnumAsByte<ParticleSystemLODMethod> LODMethod; // 0x4FD(0x1)
		EParticleSignificanceLevel RequiredSignificance; // 0x4FE(0x1)
		unsigned char UnknownData07_6[0x1]; // 0x4FF(0x1) UNKNOWN PROPERTY
		TArray<FParticleSysParam> InstanceParameters; // 0x500(0x10)
		FMulticastInlineDelegate OnParticleSpawn; // 0x510(0x10)
		FMulticastInlineDelegate OnParticleBurst; // 0x520(0x10)
		FMulticastInlineDelegate OnParticleDeath; // 0x530(0x10)
		FMulticastInlineDelegate OnParticleCollide; // 0x540(0x10)
		bool bOldPositionValid; // 0x550(0x1)
		unsigned char UnknownData08_6[0x7]; // 0x551(0x7) UNKNOWN PROPERTY
		FVector OldPosition; // 0x558(0x18)
		FVector PartSysVelocity; // 0x570(0x18)
		float WarmupTime; // 0x588(0x4)
		float WarmupTickRate; // 0x58C(0x4)
		unsigned char UnknownData09_6[0x4]; // 0x590(0x4) UNKNOWN PROPERTY
		float SecondsBeforeInactive; // 0x594(0x4)
		unsigned char UnknownData10_6[0x4]; // 0x598(0x4) UNKNOWN PROPERTY
		float MaxTimeBeforeForceUpdateTransform; // 0x59C(0x4)
		unsigned char UnknownData11_6[0x20]; // 0x5A0(0x20) UNKNOWN PROPERTY
		TArray<UParticleSystemReplay*> ReplayClips; // 0x5C0(0x10)
		unsigned char UnknownData12_6[0x8]; // 0x5D0(0x8) UNKNOWN PROPERTY
		float CustomTimeDilation; // 0x5D8(0x4)
		unsigned char UnknownData13_6[0x54]; // 0x5DC(0x54) UNKNOWN PROPERTY
		TWeakObjectPtr<USceneComponent*> AutoAttachParent; // 0x630(0x8)
		FName AutoAttachSocketName; // 0x638(0x4)
		EAttachmentRule AutoAttachLocationRule; // 0x63C(0x1)
		EAttachmentRule AutoAttachRotationRule; // 0x63D(0x1)
		EAttachmentRule AutoAttachScaleRule; // 0x63E(0x1)
		unsigned char UnknownData14_6[0x51]; // 0x63F(0x51) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnSystemFinished; // 0x690(0x10)
		unsigned char UnknownData15_7[0x130]; // 0x6A0(0x130) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSystemComponent");
			return ret;
		}

		void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38A248(relative to base address)
		void SetTemplate(UParticleSystem* NewTemplate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7492B7AD4(relative to base address)
		void SetMaterialParameter(FName ParameterName, UMaterialInterface* Param); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38A098(relative to base address)
		void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C389C44(relative to base address)
		void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C389B48(relative to base address)
		void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C389928(relative to base address)
		void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C389708(relative to base address)
		void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38960C(relative to base address)
		void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3893EC(relative to base address)
		void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C389284(relative to base address)
		void SetAutoAttachParams(USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C388F20(relative to base address)
		int32_t GetNumActiveParticles(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C388654(relative to base address)
		UMaterialInterface GetNamedMaterial(FName InName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38858C(relative to base address)
		bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387F90(relative to base address)
		bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387E88(relative to base address)
		bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387D38(relative to base address)
		bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387BE8(relative to base address)
		bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387AE0(relative to base address)
		bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387990(relative to base address)
		bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C387874(relative to base address)
		void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C387554(relative to base address)
		void EndTrails(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747C02DFC(relative to base address)
		UMaterialInstanceDynamic CreateNamedDynamicMaterialInstance(FName InName, UMaterialInterface* SourceMaterial); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3872E4(relative to base address)
		void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748D39E88(relative to base address)
	};


	// Class Engine.ParticleSystemReplay
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UParticleSystemReplay : public UObject	
	{
	public:
		int32_t ClipIDNumber; // 0x28(0x4)
		unsigned char UnknownData00_7[0x14]; // 0x2C(0x14) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleSystemReplay");
			return ret;
		}
	};


	// Class Engine.PathFollowingAgentInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPathFollowingAgentInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PathFollowingAgentInterface");
			return ret;
		}
	};


	// Class Engine.PhysicsObjectBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsObjectBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsObjectBlueprintLibrary");
			return ret;
		}

		FTransform GetPhysicsObjectWorldTransform(UPrimitiveComponent* Component, FName BoneName); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3886A0(relative to base address)
		FClosestPhysicsObjectResult GetClosestPhysicsObjectFromWorldLocation(UPrimitiveComponent* Component, FVector& WorldLocation); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C38811C(relative to base address)
		bool ExtractClosestPhysicsObjectResults(FClosestPhysicsObjectResult& Result, FName& OutName); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3873AC(relative to base address)
		void ApplyRadialImpulse(UPrimitiveComponent* Component, FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bApplyStrain, float Strain, bool bVelChange, float MinValue, float MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C386A60(relative to base address)
	};


	// Class Engine.PhysicsSpringComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x30 (0x250 - 0x220)
	class UPhysicsSpringComponent : public USceneComponent	
	{
	public:
		float SpringStiffness; // 0x220(0x4)
		float SpringDamping; // 0x224(0x4)
		float SpringLengthAtRest; // 0x228(0x4)
		float SpringRadius; // 0x22C(0x4)
		TEnumAsByte<ECollisionChannel> SpringChannel; // 0x230(0x1)
		bool bIgnoreSelf; // 0x231(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x232(0x2) UNKNOWN PROPERTY
		float SpringCompression; // 0x234(0x4)
		unsigned char UnknownData01_7[0x18]; // 0x238(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsSpringComponent");
			return ret;
		}

		FVector GetSpringRestingPoint(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C388870(relative to base address)
		FVector GetSpringDirection(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749892230(relative to base address)
		FVector GetSpringCurrentEndPoint(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C388838(relative to base address)
		float GetNormalizedCompressionScalar(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C388620(relative to base address)
	};


	// Class Engine.PhysicsThreadLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsThreadLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsThreadLibrary");
			return ret;
		}

		void AddForce(FBodyInstanceAsyncPhysicsTickHandle Handle, FVector Force, bool bAccelChange); // Flags: Final|Native|Static|Private|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C386620(relative to base address)
	};


	// Class Engine.PhysicsThrusterComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x230 - 0x220)
	class UPhysicsThrusterComponent : public USceneComponent	
	{
	public:
		float ThrustStrength; // 0x220(0x4)
		unsigned char UnknownData00_7[0xC]; // 0x224(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsThrusterComponent");
			return ret;
		}
	};


	// Class Engine.PieFixupTestObject
	// Inherited from UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UPieFixupTestObject : public UObject	
	{
	public:
		FSoftObjectPath Path; // 0x28(0x18)
		TWeakObjectPtr<AActor*> TypedPtr; // 0x40(0x20)
		FPieFixupStructWithSoftObjectPath Struct; // 0x60(0x38)
		TArray<FPieFixupStructWithSoftObjectPath> Array; // 0x98(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PieFixupTestObject");
			return ret;
		}
	};


	// Class Engine.SceneCapture
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ASceneCapture : public AActor	
	{
	public:
		UStaticMeshComponent* MeshComp; // 0x290(0x8)
		USceneComponent* SceneComponent; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCapture");
			return ret;
		}
	};


	// Class Engine.PlanarReflection
	// Inherited from ASceneCapture -> AActor -> UObject
	// Size: 0x10 (0x2B0 - 0x2A0)
	class APlanarReflection : public ASceneCapture	
	{
	public:
		UPlanarReflectionComponent* PlanarReflectionComponent; // 0x2A0(0x8)
		bool bShowPreviewPlane; // 0x2A8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x2A9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlanarReflection");
			return ret;
		}

		void OnInterpToggle(bool bEnable); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3888A8(relative to base address)
	};


	// Class Engine.SceneCaptureComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xD0 (0x2F0 - 0x220)
	class USceneCaptureComponent : public USceneComponent	
	{
	public:
		ESceneCapturePrimitiveRenderMode PrimitiveRenderMode; // 0x220(0x1)
		TEnumAsByte<ESceneCaptureSource> CaptureSource; // 0x221(0x1)
		bool bCaptureEveryFrame : 1; // 0x222:0(0x1)
		bool bCaptureOnMovement : 1; // 0x222:1(0x1)
		bool bCaptureGpuNextRender : 1; // 0x222:2(0x1)
		bool bDumpGpuNextRender : 1; // 0x222:3(0x1)
		bool bAlwaysPersistRenderingState; // 0x223(0x1)
		unsigned char UnknownData00_6[0x4]; // 0x224(0x4) UNKNOWN PROPERTY
		TArray<TWeakObjectPtr> HiddenComponents; // 0x228(0x10)
		TArray<AActor*> HiddenActors; // 0x238(0x10)
		TArray<TWeakObjectPtr> ShowOnlyComponents; // 0x248(0x10)
		TArray<AActor*> ShowOnlyActors; // 0x258(0x10)
		float LODDistanceFactor; // 0x268(0x4)
		float MaxViewDistanceOverride; // 0x26C(0x4)
		int32_t CaptureSortPriority; // 0x270(0x4)
		bool bUseRayTracingIfEnabled; // 0x274(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x275(0x3) UNKNOWN PROPERTY
		TArray<FEngineShowFlagsSetting> ShowFlagSettings; // 0x278(0x10)
		unsigned char UnknownData02_6[0x40]; // 0x288(0x40) UNKNOWN PROPERTY
		FString ProfilingEventName; // 0x2C8(0x10)
		unsigned char UnknownData03_7[0x18]; // 0x2D8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureComponent");
			return ret;
		}

		void ShowOnlyComponent(UPrimitiveComponent* InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503A28(relative to base address)
		void ShowOnlyActorComponents(AActor* InActor, bool bIncludeFromChildActors); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C50381C(relative to base address)
		void SetShowFlagSettings(TArray<FEngineShowFlagsSetting>& InShowFlagSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C503478(relative to base address)
		void SetCaptureSortPriority(int32_t NewCaptureSortPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5029E0(relative to base address)
		void RemoveShowOnlyComponent(UPrimitiveComponent* InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C50121C(relative to base address)
		void RemoveShowOnlyActorComponents(AActor* InActor, bool bIncludeFromChildActors); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C501034(relative to base address)
		void HideComponent(UPrimitiveComponent* InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C50082C(relative to base address)
		void HideActorComponents(AActor* InActor, bool bIncludeFromChildActors); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C500650(relative to base address)
		TArray GetShowFlagSettings(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4FFABC(relative to base address)
		void ClearShowOnlyComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE71C(relative to base address)
		void ClearHiddenComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4FE6D8(relative to base address)
	};


	// Class Engine.PlanarReflectionComponent
	// Inherited from USceneCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x160 (0x450 - 0x2F0)
	class UPlanarReflectionComponent : public USceneCaptureComponent	
	{
	public:
		UBoxComponent* PreviewBox; // 0x2F0(0x8)
		float NormalDistortionStrength; // 0x2F8(0x4)
		float PrefilterRoughness; // 0x2FC(0x4)
		float PrefilterRoughnessDistance; // 0x300(0x4)
		int32_t ScreenPercentage; // 0x304(0x4)
		float ExtraFOV; // 0x308(0x4)
		float DistanceFromPlaneFadeStart; // 0x30C(0x4)
		float DistanceFromPlaneFadeEnd; // 0x310(0x4)
		float DistanceFromPlaneFadeoutStart; // 0x314(0x4)
		float DistanceFromPlaneFadeoutEnd; // 0x318(0x4)
		float AngleFromPlaneFadeStart; // 0x31C(0x4)
		float AngleFromPlaneFadeEnd; // 0x320(0x4)
		bool bShowPreviewPlane; // 0x324(0x1)
		bool bRenderSceneTwoSided; // 0x325(0x1)
		unsigned char UnknownData00_7[0x12A]; // 0x326(0x12A) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlanarReflectionComponent");
			return ret;
		}
	};


	// Class Engine.PlaneReflectionCapture
	// Inherited from AReflectionCapture -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class APlaneReflectionCapture : public AReflectionCapture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlaneReflectionCapture");
			return ret;
		}
	};


	// Class Engine.PlaneReflectionCaptureComponent
	// Inherited from UReflectionCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x2A0 - 0x288)
	class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent	
	{
	public:
		float InfluenceRadiusScale; // 0x288(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x28C(0x4) UNKNOWN PROPERTY
		UDrawSphereComponent* PreviewInfluenceRadius; // 0x290(0x8)
		UBoxComponent* PreviewCaptureBox; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlaneReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.PlatformInterfaceWebResponse
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UPlatformInterfaceWebResponse : public UObject	
	{
	public:
		FString OriginalURL; // 0x28(0x10)
		int32_t ResponseCode; // 0x38(0x4)
		int32_t Tag; // 0x3C(0x4)
		FString StringResponse; // 0x40(0x10)
		TArray<char> BinaryResponse; // 0x50(0x10)
		unsigned char UnknownData00_7[0x50]; // 0x60(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformInterfaceWebResponse");
			return ret;
		}

		int32_t GetNumHeaders(); // Flags: Native|Public, Memory Exec: 0x7FF74C388678(relative to base address)
		FString GetHeaderValue(FString HeaderName); // Flags: Native|Public, Memory Exec: 0x7FF74C3884CC(relative to base address)
		void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value); // Flags: Native|Public|HasOutParms, Memory Exec: 0x7FF74C388380(relative to base address)
	};


	// Class Engine.PlayerCameraManager
	// Inherited from AActor -> UObject
	// Size: 0x2270 (0x2500 - 0x290)
	class APlayerCameraManager : public AActor	
	{
	public:
		APlayerController* PCOwner; // 0x290(0x8)
		USceneComponent* TransformComponent; // 0x298(0x8)
		unsigned char UnknownData00_6[0x4]; // 0x2A0(0x4) UNKNOWN PROPERTY
		float DefaultFOV; // 0x2A4(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x2A8(0x4) UNKNOWN PROPERTY
		float DefaultOrthoWidth; // 0x2AC(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x2B0(0x4) UNKNOWN PROPERTY
		float DefaultAspectRatio; // 0x2B4(0x4)
		unsigned char UnknownData03_6[0x68]; // 0x2B8(0x68) UNKNOWN PROPERTY
		FTViewTarget ViewTarget; // 0x320(0x830)
		FTViewTarget PendingViewTarget; // 0xB50(0x830)
		unsigned char UnknownData04_6[0x30]; // 0x1380(0x30) UNKNOWN PROPERTY
		FCameraCacheEntry CameraCachePrivate; // 0x13B0(0x820)
		FCameraCacheEntry LastFrameCameraCachePrivate; // 0x1BD0(0x820)
		TArray<UCameraModifier*> ModifierList; // 0x23F0(0x10)
		TArray<UClass*> DefaultModifiers; // 0x2400(0x10)
		float FreeCamDistance; // 0x2410(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x2414(0x4) UNKNOWN PROPERTY
		FVector FreeCamOffset; // 0x2418(0x18)
		FVector ViewTargetOffset; // 0x2430(0x18)
		FMulticastInlineDelegate OnAudioFadeChangeEvent; // 0x2448(0x10)
		unsigned char UnknownData06_6[0x18]; // 0x2458(0x18) UNKNOWN PROPERTY
		TArray<TScriptInterface> CameraLensEffects; // 0x2470(0x10)
		UCameraModifier_CameraShake* CachedCameraShakeMod; // 0x2480(0x8)
		TArray<FPostProcessSettings> PostProcessBlendCache; // 0x2488(0x10)
		unsigned char UnknownData07_6[0x20]; // 0x2498(0x20) UNKNOWN PROPERTY
		ACameraActor* AnimCameraActor; // 0x24B8(0x8)
		bool bIsOrthographic : 1; // 0x24C0:0(0x1)
		bool bAutoCalculateOrthoPlanes : 1; // 0x24C0:1(0x1)
		unsigned char UnknownData08_5[0x3]; // 0x24C1(0x3) UNKNOWN PROPERTY
		float AutoPlaneShift; // 0x24C4(0x4)
		bool bUpdateOrthoPlanes : 1; // 0x24C8:0(0x1)
		bool bUseCameraHeightAsViewTarget : 1; // 0x24C8:1(0x1)
		bool bDefaultConstrainAspectRatio : 1; // 0x24C8:2(0x1)
		unsigned char UnknownBit09 : 1; // 0x24C8:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit10 : 1; // 0x24C8:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit11 : 1; // 0x24C8:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit12 : 1; // 0x24C8:6(0x1) UNKNOWN PROPERTY
		bool bClientSimulatingViewTarget : 1; // 0x24C8:7(0x1)
		bool bUseClientSideCameraUpdates : 1; // 0x24C9:0(0x1)
		unsigned char UnknownBit13 : 1; // 0x24C9:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit14 : 1; // 0x24C9:2(0x1) UNKNOWN PROPERTY
		bool bGameCameraCutThisFrame : 1; // 0x24C9:3(0x1)
		unsigned char UnknownData15_5[0x2]; // 0x24CA(0x2) UNKNOWN PROPERTY
		float ViewPitchMin; // 0x24CC(0x4)
		float ViewPitchMax; // 0x24D0(0x4)
		float ViewYawMin; // 0x24D4(0x4)
		float ViewYawMax; // 0x24D8(0x4)
		float ViewRollMin; // 0x24DC(0x4)
		float ViewRollMax; // 0x24E0(0x4)
		unsigned char UnknownData16_6[0x4]; // 0x24E4(0x4) UNKNOWN PROPERTY
		float ServerUpdateCameraTimeout; // 0x24E8(0x4)
		unsigned char UnknownData17_7[0xC]; // 0x24EC(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerCameraManager");
			return ret;
		}

		void SwapPendingViewTargetWhenUsingClientSideCameraUpdates(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C38B018(relative to base address)
		void StopCameraShake(UCameraShakeBase* ShakeInstance, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38AF4C(relative to base address)
		void StopCameraFade(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38AF34(relative to base address)
		void StopAllInstancesOfCameraShakeFromSource(UClass* Shake, UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38AE0C(relative to base address)
		void StopAllInstancesOfCameraShake(UClass* Shake, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38AD28(relative to base address)
		void StopAllCameraShakesFromSource(UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38AC5C(relative to base address)
		void StopAllCameraShakes(bool bImmediately); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C38ABD8(relative to base address)
		UCameraShakeBase StartCameraShakeFromSource(UClass* ShakeClass, UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38A97C(relative to base address)
		UCameraShakeBase StartCameraShake(UClass* ShakeClass, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38A75C(relative to base address)
		void StartCameraFade(float FromAlpha, float ToAlpha, float duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38A408(relative to base address)
		void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C389E7C(relative to base address)
		void SetGameCameraCutThisFrame(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C389E64(relative to base address)
		void RemoveGenericCameraLensEffect(TScriptInterface<Class> Emitter); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C388DF4(relative to base address)
		bool RemoveCameraModifier(UCameraModifier* ModifierToRemove); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C388D60(relative to base address)
		void RemoveCameraLensEffect(AEmitterCameraLensEffectBase* Emitter); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C388CDC(relative to base address)
		void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF74C388948(relative to base address)
		void OnPhotographySessionStart(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF749066BE0(relative to base address)
		void OnPhotographySessionEnd(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C388930(relative to base address)
		void OnPhotographyMultiPartCaptureStart(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF747E38E94(relative to base address)
		void OnPhotographyMultiPartCaptureEnd(); // Flags: RequiredAPI|BlueprintCosmetic|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		APlayerController GetOwningPlayerController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749C6491C(relative to base address)
		float GetFOVAngle(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C38832C(relative to base address)
		FRotator GetCameraRotation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3880E0(relative to base address)
		FVector GetCameraLocation(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7491B07C8(relative to base address)
		UCameraModifier FindCameraModifierByClass(UClass* ModifierClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3874A8(relative to base address)
		void ClearCameraLensEffects(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747A8F09C(relative to base address)
		bool BlueprintUpdateCamera(AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		UCameraModifier AddNewCameraModifier(UClass* ModifierClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3869B4(relative to base address)
		TScriptInterface AddGenericCameraLensEffect(UClass* LensEffectEmitterClass); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3868FC(relative to base address)
		AEmitterCameraLensEffectBase AddCameraLensEffect(UClass* LensEffectEmitterClass); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C386574(relative to base address)
	};


	// Class Engine.PluginBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPluginBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PluginBlueprintLibrary");
			return ret;
		}

		bool IsPluginMounted(FString PluginName); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C38FB90(relative to base address)
		bool GetPluginVersionName(FString PluginName, FString& OutVersionName); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38F458(relative to base address)
		bool GetPluginVersion(FString PluginName, int32_t& OutVersion); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38F2E0(relative to base address)
		bool GetPluginNameForObjectPath(FSoftObjectPath& ObjectPath, FString& OutPluginName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C38F1C8(relative to base address)
		bool GetPluginMountedAssetPath(FString PluginName, FString& OutAssetPath); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38F0CC(relative to base address)
		bool GetPluginEditorCustomVirtualPath(FString PluginName, FString& OutVirtualPath); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38EF6C(relative to base address)
		bool GetPluginDescriptorFilePath(FString PluginName, FString& OutFilePath); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38EE14(relative to base address)
		bool GetPluginDescription(FString PluginName, FString& OutDescription); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38ECB8(relative to base address)
		bool GetPluginContentDir(FString PluginName, FString& OutContentDir); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38EBBC(relative to base address)
		bool GetPluginBaseDir(FString PluginName, FString& OutBaseDir); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C38EAC0(relative to base address)
		TArray GetEnabledPluginNames(); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C38E0F8(relative to base address)
		TArray GetAdditionalProjectPluginSearchPaths(); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DCB8(relative to base address)
		TArray GetAdditionalPluginSearchPaths(); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C38DC7C(relative to base address)
	};


	// Class Engine.PointLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class APointLight : public ALight	
	{
	public:
		UPointLightComponent* PointLightComponent; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PointLight");
			return ret;
		}

		void SetRadius(float NewRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C393F34(relative to base address)
		void SetLightFalloffExponent(float NewLightFalloffExponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C392DB0(relative to base address)
	};


	// Class Engine.Polys
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UPolys : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Polys");
			return ret;
		}
	};


	// Class Engine.PrecomputedVisibilityOverrideVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x30 (0x2F8 - 0x2C8)
	class APrecomputedVisibilityOverrideVolume : public AVolume	
	{
	public:
		TArray<AActor*> OverrideVisibleActors; // 0x2C8(0x10)
		TArray<AActor*> OverrideInvisibleActors; // 0x2D8(0x10)
		TArray<FName> OverrideInvisibleLevels; // 0x2E8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrecomputedVisibilityOverrideVolume");
			return ret;
		}
	};


	// Class Engine.RigidBodyBase
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ARigidBodyBase : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RigidBodyBase");
			return ret;
		}
	};


	// Class Engine.RadialForceActor
	// Inherited from ARigidBodyBase -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ARadialForceActor : public ARigidBodyBase	
	{
	public:
		URadialForceComponent* ForceComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RadialForceActor");
			return ret;
		}

		void ToggleForce(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF749066BE0(relative to base address)
		void FireImpulse(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		void EnableForce(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF747E38E94(relative to base address)
		void DisableForce(); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C388930(relative to base address)
	};


	// Class Engine.ReplicationDriver
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UReplicationDriver : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplicationDriver");
			return ret;
		}
	};


	// Class Engine.ReplicationConnectionDriver
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UReplicationConnectionDriver : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplicationConnectionDriver");
			return ret;
		}
	};


	// Class Engine.RuntimePartition
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class URuntimePartition : public UObject	
	{
	public:
		FName Name; // 0x28(0x4)
		bool bBlockOnSlowStreaming; // 0x2C(0x1)
		bool bClientOnlyVisible; // 0x2D(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x2E(0x2) UNKNOWN PROPERTY
		int32_t Priority; // 0x30(0x4)
		ERuntimePartitionCellBoundsMethod BoundsMethod; // 0x34(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		int32_t LoadingRange; // 0x38(0x4)
		FLinearColor DebugColor; // 0x3C(0x10)
		int32_t HLODIndex; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartition");
			return ret;
		}
	};


	// Class Engine.RuntimePartitionLevelStreaming
	// Inherited from URuntimePartition -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class URuntimePartitionLevelStreaming : public URuntimePartition	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartitionLevelStreaming");
			return ret;
		}
	};


	// Class Engine.RuntimePartitionLHGrid
	// Inherited from URuntimePartition -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class URuntimePartitionLHGrid : public URuntimePartition	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartitionLHGrid");
			return ret;
		}
	};


	// Class Engine.RuntimePartitionPersistent
	// Inherited from URuntimePartition -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class URuntimePartitionPersistent : public URuntimePartition	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimePartitionPersistent");
			return ret;
		}
	};


	// Class Engine.RVOAvoidanceInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class URVOAvoidanceInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RVOAvoidanceInterface");
			return ret;
		}
	};


	// Class Engine.Scene
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UScene : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Scene");
			return ret;
		}
	};


	// Class Engine.SceneCapture2D
	// Inherited from ASceneCapture -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ASceneCapture2D : public ASceneCapture	
	{
	public:
		USceneCaptureComponent2D* CaptureComponent2D; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCapture2D");
			return ret;
		}

		void OnInterpToggle(bool bEnable); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3888A8(relative to base address)
	};


	// Class Engine.SceneCaptureComponent2D
	// Inherited from USceneCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x810 (0xB00 - 0x2F0)
	class USceneCaptureComponent2D : public USceneCaptureComponent	
	{
	public:
		TEnumAsByte<ECameraProjectionMode> ProjectionType; // 0x2F0(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x2F1(0x3) UNKNOWN PROPERTY
		float FOVAngle; // 0x2F4(0x4)
		float OrthoWidth; // 0x2F8(0x4)
		bool bAutoCalculateOrthoPlanes; // 0x2FC(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x2FD(0x3) UNKNOWN PROPERTY
		float AutoPlaneShift; // 0x300(0x4)
		bool bUpdateOrthoPlanes; // 0x304(0x1)
		bool bUseCameraHeightAsViewTarget; // 0x305(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x306(0x2) UNKNOWN PROPERTY
		UTextureRenderTarget2D* TextureTarget; // 0x308(0x8)
		TEnumAsByte<ESceneCaptureCompositeMode> CompositeMode; // 0x310(0x1)
		unsigned char UnknownData03_6[0xF]; // 0x311(0xF) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x320(0x6F0)
		float PostProcessBlendWeight; // 0xA10(0x4)
		bool bOverride_CustomNearClippingPlane : 1; // 0xA14:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0xA15(0x3) UNKNOWN PROPERTY
		float CustomNearClippingPlane; // 0xA18(0x4)
		bool bUseCustomProjectionMatrix; // 0xA1C(0x1)
		unsigned char UnknownData05_6[0x3]; // 0xA1D(0x3) UNKNOWN PROPERTY
		FMatrix CustomProjectionMatrix; // 0xA20(0x80)
		bool bUseFauxOrthoViewPos; // 0xAA0(0x1)
		bool bEnableOrthographicTiling; // 0xAA1(0x1)
		unsigned char UnknownData06_6[0x2]; // 0xAA2(0x2) UNKNOWN PROPERTY
		int32_t NumXTiles; // 0xAA4(0x4)
		int32_t NumYTiles; // 0xAA8(0x4)
		bool bEnableClipPlane; // 0xAAC(0x1)
		unsigned char UnknownData07_6[0x3]; // 0xAAD(0x3) UNKNOWN PROPERTY
		FVector ClipPlaneBase; // 0xAB0(0x18)
		FVector ClipPlaneNormal; // 0xAC8(0x18)
		bool bRenderInMainRenderer; // 0xAE0(0x1)
		unsigned char UnknownData08_6[0x3]; // 0xAE1(0x3) UNKNOWN PROPERTY
		bool bCameraCutThisFrame : 1; // 0xAE4:0(0x1)
		bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1; // 0xAE4:1(0x1)
		unsigned char UnknownData09_7[0x1B]; // 0xAE5(0x1B) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureComponent2D");
			return ret;
		}

		void RemoveBlendable(TScriptInterface<Class> InBlendableObject); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C399F20(relative to base address)
		void CaptureScene(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3975A8(relative to base address)
		void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3973A0(relative to base address)
	};


	// Class Engine.SceneCaptureComponentCube
	// Inherited from USceneCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x710 (0xA00 - 0x2F0)
	class USceneCaptureComponentCube : public USceneCaptureComponent	
	{
	public:
		UTextureRenderTargetCube* TextureTarget; // 0x2F0(0x8)
		bool bCaptureRotation; // 0x2F8(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x2F9(0x7) UNKNOWN PROPERTY
		FPostProcessSettings PostProcessSettings; // 0x300(0x6F0)
		float PostProcessBlendWeight; // 0x9F0(0x4)
		unsigned char UnknownData01_7[0xC]; // 0x9F4(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureComponentCube");
			return ret;
		}

		void CaptureScene(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3975A8(relative to base address)
	};


	// Class Engine.SceneCaptureCube
	// Inherited from ASceneCapture -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ASceneCaptureCube : public ASceneCapture	
	{
	public:
		USceneCaptureComponentCube* CaptureComponentCube; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SceneCaptureCube");
			return ret;
		}

		void OnInterpToggle(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3888A8(relative to base address)
	};


	// Class Engine.ShadowMapTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class UShadowMapTexture2D : public UTexture2D	
	{
	public:
		TEnumAsByte<EShadowMapFlags> ShadowmapFlags; // 0x150(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x151(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ShadowMapTexture2D");
			return ret;
		}
	};


	// Class Engine.SkeletalBodySetup
	// Inherited from UBodySetup -> UBodySetupCore -> UObject
	// Size: 0x18 (0x308 - 0x2F0)
	class USkeletalBodySetup : public UBodySetup	
	{
	public:
		bool bSkipScaleFromAnimation; // 0x2F0(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x2F1(0x7) UNKNOWN PROPERTY
		TArray<FPhysicalAnimationProfile> PhysicalAnimationData; // 0x2F8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalBodySetup");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshSocket
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class USkeletalMeshSocket : public UObject	
	{
	public:
		FName SocketName; // 0x28(0x4)
		FName BoneName; // 0x2C(0x4)
		FVector RelativeLocation; // 0x30(0x18)
		FRotator RelativeRotation; // 0x48(0x18)
		FVector RelativeScale; // 0x60(0x18)
		bool bForceAlwaysAnimated; // 0x78(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x79(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshSocket");
			return ret;
		}

		void InitializeSocketFromLocation(USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39B6F4(relative to base address)
		FVector GetSocketLocation(USkeletalMeshComponent* SkelComp); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39B4C8(relative to base address)
	};


	// Class Engine.SkeletalMeshDescriptionBulkData
	// Inherited from UMeshDescriptionBaseBulkData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USkeletalMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshDescriptionBulkData");
			return ret;
		}
	};


	// Class Engine.SkyLight
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ASkyLight : public AInfo	
	{
	public:
		USkyLightComponent* LightComponent; // 0x290(0x8)
		bool bEnabled : 1; // 0x298:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyLight");
			return ret;
		}

		void OnRep_bEnabled(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
	};


	// Class Engine.SkyLightComponent
	// Inherited from ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x1D8 (0x440 - 0x268)
	class USkyLightComponent : public ULightComponentBase	
	{
	public:
		bool bRealTimeCapture; // 0x268(0x1)
		TEnumAsByte<ESkyLightSourceType> SourceType; // 0x269(0x1)
		unsigned char UnknownData00_6[0x6]; // 0x26A(0x6) UNKNOWN PROPERTY
		UTextureCube* Cubemap; // 0x270(0x8)
		float SourceCubemapAngle; // 0x278(0x4)
		int32_t CubemapResolution; // 0x27C(0x4)
		float SkyDistanceThreshold; // 0x280(0x4)
		bool bCaptureEmissiveOnly; // 0x284(0x1)
		bool bLowerHemisphereIsBlack; // 0x285(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x286(0x2) UNKNOWN PROPERTY
		FLinearColor LowerHemisphereColor; // 0x288(0x10)
		float OcclusionMaxDistance; // 0x298(0x4)
		float Contrast; // 0x29C(0x4)
		float OcclusionExponent; // 0x2A0(0x4)
		float MinOcclusion; // 0x2A4(0x4)
		FColor OcclusionTint; // 0x2A8(0x4)
		bool bCloudAmbientOcclusion : 1; // 0x2AC:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x2AD(0x3) UNKNOWN PROPERTY
		float CloudAmbientOcclusionStrength; // 0x2B0(0x4)
		float CloudAmbientOcclusionExtent; // 0x2B4(0x4)
		float CloudAmbientOcclusionMapResolutionScale; // 0x2B8(0x4)
		float CloudAmbientOcclusionApertureScale; // 0x2BC(0x4)
		TEnumAsByte<EOcclusionCombineMode> OcclusionCombineMode; // 0x2C0(0x1)
		unsigned char UnknownData03_6[0xA7]; // 0x2C1(0xA7) UNKNOWN PROPERTY
		UTextureCube* BlendDestinationCubemap; // 0x368(0x8)
		unsigned char UnknownData04_7[0xD0]; // 0x370(0xD0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyLightComponent");
			return ret;
		}

		void SetVolumetricScatteringIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C9F8(relative to base address)
		void SetSourceCubemapAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74886F230(relative to base address)
		void SetOcclusionTint(FColor& InTint); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39C494(relative to base address)
		void SetOcclusionExponent(float InOcclusionExponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C414(relative to base address)
		void SetOcclusionContrast(float InOcclusionContrast); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C394(relative to base address)
		void SetMinOcclusion(float InMinOcclusion); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39C314(relative to base address)
		void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7472D7870(relative to base address)
		void SetLightColor(FLinearColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39C0F4(relative to base address)
		void SetIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BF68(relative to base address)
		void SetIndirectLightingIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BEE8(relative to base address)
		void SetCubemapBlend(UTextureCube* SourceCubemap, UTextureCube* DestinationCubemap, float InBlendFraction); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BD70(relative to base address)
		void SetCubemap(UTextureCube* NewCubemap); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BCF0(relative to base address)
		void RecaptureSky(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39BBA0(relative to base address)
	};


	// Class Engine.SMInstanceManager
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USMInstanceManager : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceManager");
			return ret;
		}
	};


	// Class Engine.SMInstanceManagerProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USMInstanceManagerProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceManagerProvider");
			return ret;
		}
	};


	// Class Engine.SoundAttenuation
	// Inherited from UObject
	// Size: 0x3D0 (0x3F8 - 0x28)
	class USoundAttenuation : public UObject	
	{
	public:
		FSoundAttenuationSettings Attenuation; // 0x28(0x3D0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundAttenuation");
			return ret;
		}
	};


	// Class Engine.SoundAttenuationEditorSettings
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USoundAttenuationEditorSettings : public UObject	
	{
	public:
		bool bEnableReverbSend; // 0x28(0x1)
		bool bEnableSendToAudioLink; // 0x29(0x1)
		unsigned char UnknownData00_7[0x6]; // 0x2A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundAttenuationEditorSettings");
			return ret;
		}
	};


	// Class Engine.SoundEffectPresetWidgetInterface
	// Inherited from UAudioPanelWidgetInterface -> UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USoundEffectPresetWidgetInterface : public UAudioPanelWidgetInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectPresetWidgetInterface");
			return ret;
		}

		void OnPropertyChanged(USoundEffectPreset* Preset, FName PropertyName); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnConstructed(USoundEffectPreset* Preset); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		UClass GetClass(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.SoundEffectSourcePreset
	// Inherited from USoundEffectPreset -> UObject
	// Size: 0x0 (0x68 - 0x68)
	class USoundEffectSourcePreset : public USoundEffectPreset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectSourcePreset");
			return ret;
		}
	};


	// Class Engine.SoundEffectSourcePresetChain
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class USoundEffectSourcePresetChain : public UObject	
	{
	public:
		TArray<FSourceEffectChainEntry> Chain; // 0x28(0x10)
		bool bPlayEffectChainTails : 1; // 0x38:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x39(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundEffectSourcePresetChain");
			return ret;
		}
	};


	// Class Engine.SoundGroups
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class USoundGroups : public UObject	
	{
	public:
		TArray<FSoundGroup> SoundGroupProfiles; // 0x28(0x10)
		unsigned char UnknownData00_7[0x50]; // 0x38(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundGroups");
			return ret;
		}
	};


	// Class Engine.SoundNode
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class USoundNode : public UObject	
	{
	public:
		TArray<USoundNode*> ChildNodes; // 0x28(0x10)
		unsigned char UnknownData00_7[0x10]; // 0x38(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNode");
			return ret;
		}
	};


	// Class Engine.SoundNodeModulatorContinuous
	// Inherited from USoundNode -> UObject
	// Size: 0x38 (0x80 - 0x48)
	class USoundNodeModulatorContinuous : public USoundNode	
	{
	public:
		FModulatorContinuousParams PitchModulationParams; // 0x48(0x1C)
		FModulatorContinuousParams VolumeModulationParams; // 0x64(0x1C)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeModulatorContinuous");
			return ret;
		}
	};


	// Class Engine.SoundSubmixWidgetInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USoundSubmixWidgetInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmixWidgetInterface");
			return ret;
		}

		void OnConstructed(USoundSubmixBase* SoundSubmix); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.SparseVolumeTexture
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USparseVolumeTexture : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SparseVolumeTexture");
			return ret;
		}

		int32_t GetSizeZ(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EE04(relative to base address)
		int32_t GetSizeY(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EDDC(relative to base address)
		int32_t GetSizeX(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C388678(relative to base address)
		int32_t GetNumMipLevels(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39ED80(relative to base address)
		int32_t GetNumFrames(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39ED58(relative to base address)
		FTransform GetFrameTransform(); // Flags: Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EC64(relative to base address)
	};


	// Class Engine.SparseVolumeTextureFrame
	// Inherited from USparseVolumeTexture -> UObject
	// Size: 0x1A8 (0x1D0 - 0x28)
	class USparseVolumeTextureFrame : public USparseVolumeTexture	
	{
	public:
		USparseVolumeTexture* Owner; // 0x28(0x8)
		int32_t FrameIndex; // 0x30(0x4)
		unsigned char UnknownData00_6[0xC]; // 0x34(0xC) UNKNOWN PROPERTY
		FTransform Transform; // 0x40(0x60)
		unsigned char UnknownData01_7[0x130]; // 0xA0(0x130) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SparseVolumeTextureFrame");
			return ret;
		}
	};


	// Class Engine.StreamableSparseVolumeTexture
	// Inherited from USparseVolumeTexture -> UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UStreamableSparseVolumeTexture : public USparseVolumeTexture	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FIntVector VolumeResolution; // 0x30(0xC)
		int32_t NumMipLevels; // 0x3C(0x4)
		int32_t NumFrames; // 0x40(0x4)
		TEnumAsByte<EPixelFormat> FormatA; // 0x44(0x1)
		TEnumAsByte<EPixelFormat> FormatB; // 0x45(0x1)
		unsigned char UnknownData01_6[0xA]; // 0x46(0xA) UNKNOWN PROPERTY
		FVector4f FallbackValueA; // 0x50(0x10)
		FVector4f FallbackValueB; // 0x60(0x10)
		TEnumAsByte<TextureAddress> AddressX; // 0x70(0x1)
		TEnumAsByte<TextureAddress> AddressY; // 0x71(0x1)
		TEnumAsByte<TextureAddress> AddressZ; // 0x72(0x1)
		bool bLocalDDCOnly; // 0x73(0x1)
		float StreamingPoolSizeFactor; // 0x74(0x4)
		int32_t NumberOfPrefetchFrames; // 0x78(0x4)
		float PrefetchPercentageStepSize; // 0x7C(0x4)
		float PrefetchPercentageBias; // 0x80(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x84(0x4) UNKNOWN PROPERTY
		TArray<UAssetUserData*> AssetUserData; // 0x88(0x10)
		TArray<USparseVolumeTextureFrame*> Frames; // 0x98(0x10)
		unsigned char UnknownData03_7[0x8]; // 0xA8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamableSparseVolumeTexture");
			return ret;
		}
	};


	// Class Engine.StaticSparseVolumeTexture
	// Inherited from UStreamableSparseVolumeTexture -> USparseVolumeTexture -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UStaticSparseVolumeTexture : public UStreamableSparseVolumeTexture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticSparseVolumeTexture");
			return ret;
		}
	};


	// Class Engine.AnimatedSparseVolumeTexture
	// Inherited from UStreamableSparseVolumeTexture -> USparseVolumeTexture -> UObject
	// Size: 0x0 (0xB0 - 0xB0)
	class UAnimatedSparseVolumeTexture : public UStreamableSparseVolumeTexture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimatedSparseVolumeTexture");
			return ret;
		}
	};


	// Class Engine.AnimatedSparseVolumeTextureController
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UAnimatedSparseVolumeTextureController : public UObject	
	{
	public:
		USparseVolumeTexture* SparseVolumeTexture; // 0x28(0x8)
		float Time; // 0x30(0x4)
		bool bIsPlaying; // 0x34(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		float FrameRate; // 0x38(0x4)
		int32_t MipLevel; // 0x3C(0x4)
		bool bBlockingStreamingRequests; // 0x40(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x41(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimatedSparseVolumeTextureController");
			return ret;
		}

		void Update(float DeltaTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F894(relative to base address)
		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F874(relative to base address)
		void Play(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EEC8(relative to base address)
		void Pause(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EEB4(relative to base address)
		USparseVolumeTextureFrame GetFrameByIndex(int32_t FrameIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EB70(relative to base address)
		float GetFractionalFrameIndex(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EB48(relative to base address)
		float GetDuration(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EAE0(relative to base address)
		void GetCurrentFramesForInterpolation(USparseVolumeTextureFrame* Frame0, USparseVolumeTextureFrame* Frame1, float& LerpAlpha); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C39E954(relative to base address)
		USparseVolumeTextureFrame GetCurrentFrame(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39E930(relative to base address)
	};


	// Class Engine.SphereReflectionCapture
	// Inherited from AReflectionCapture -> AActor -> UObject
	// Size: 0x8 (0x2A0 - 0x298)
	class ASphereReflectionCapture : public AReflectionCapture	
	{
	public:
		UDrawSphereComponent* DrawCaptureRadius; // 0x298(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SphereReflectionCapture");
			return ret;
		}
	};


	// Class Engine.SphereReflectionCaptureComponent
	// Inherited from UReflectionCaptureComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x2A0 - 0x288)
	class USphereReflectionCaptureComponent : public UReflectionCaptureComponent	
	{
	public:
		float InfluenceRadius; // 0x288(0x4)
		float CaptureDistanceScale; // 0x28C(0x4)
		UDrawSphereComponent* PreviewInfluenceRadius; // 0x290(0x8)
		unsigned char UnknownData00_7[0x8]; // 0x298(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SphereReflectionCaptureComponent");
			return ret;
		}
	};


	// Class Engine.StaticMeshSocket
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class UStaticMeshSocket : public UObject	
	{
	public:
		FName SocketName; // 0x28(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY
		FVector RelativeLocation; // 0x30(0x18)
		FRotator RelativeRotation; // 0x48(0x18)
		FVector RelativeScale; // 0x60(0x18)
		FString Tag; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshSocket");
			return ret;
		}
	};


	// Class Engine.EditorFlagCollector
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEditorFlagCollector : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EditorFlagCollector");
			return ret;
		}

		TArray GetFlagNames(); // Flags: Final|Native|Static|Public, Memory Exec: 0x7FF74C39EB08(relative to base address)
	};


	// Class Engine.StereoLayerShape
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStereoLayerShape : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShape");
			return ret;
		}
	};


	// Class Engine.StereoLayerShapeQuad
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStereoLayerShapeQuad : public UStereoLayerShape	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeQuad");
			return ret;
		}
	};


	// Class Engine.StereoLayerShapeCylinder
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UStereoLayerShapeCylinder : public UStereoLayerShape	
	{
	public:
		float Radius; // 0x28(0x4)
		float OverlayArc; // 0x2C(0x4)
		int32_t Height; // 0x30(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeCylinder");
			return ret;
		}

		void SetRadius(float InRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F564(relative to base address)
		void SetOverlayArc(float InOverlayArc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F318(relative to base address)
		void SetHeight(int32_t InHeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F1E4(relative to base address)
	};


	// Class Engine.StereoLayerShapeCubemap
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStereoLayerShapeCubemap : public UStereoLayerShape	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeCubemap");
			return ret;
		}
	};


	// Class Engine.StereoLayerShapeEquirect
	// Inherited from UStereoLayerShape -> UObject
	// Size: 0x98 (0xC0 - 0x28)
	class UStereoLayerShapeEquirect : public UStereoLayerShape	
	{
	public:
		FBox2D LeftUVRect; // 0x28(0x28)
		FBox2D RightUVRect; // 0x50(0x28)
		FVector2D LeftScale; // 0x78(0x10)
		FVector2D RightScale; // 0x88(0x10)
		FVector2D LeftBias; // 0x98(0x10)
		FVector2D RightBias; // 0xA8(0x10)
		float Radius; // 0xB8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerShapeEquirect");
			return ret;
		}

		void SetEquirectProps(FEquirectProps InScaleBiases); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F060(relative to base address)
	};


	// Class Engine.StereoLayerComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x100 (0x320 - 0x220)
	class UStereoLayerComponent : public USceneComponent	
	{
	public:
		bool bLiveTexture : 1; // 0x220:0(0x1)
		bool bSupportsDepth : 1; // 0x220:1(0x1)
		bool bNoAlphaChannel : 1; // 0x220:2(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x221(0x7) UNKNOWN PROPERTY
		UTexture* Texture; // 0x228(0x8)
		UTexture* LeftTexture; // 0x230(0x8)
		bool bQuadPreserveTextureRatio : 1; // 0x238:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x239(0x7) UNKNOWN PROPERTY
		TArray<FName> AdditionalFlags; // 0x240(0x10)
		FVector2D QuadSize; // 0x250(0x10)
		FBox2D UVRect; // 0x260(0x28)
		TEnumAsByte<EStereoLayerType> StereoLayerType; // 0x288(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x289(0x7) UNKNOWN PROPERTY
		UStereoLayerShape* Shape; // 0x290(0x8)
		int32_t Priority; // 0x298(0x4)
		unsigned char UnknownData03_7[0x84]; // 0x29C(0x84) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StereoLayerComponent");
			return ret;
		}

		void SetUVRect(FBox2D InUVRect); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39F740(relative to base address)
		void SetTexture(UTexture* InTexture); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F694(relative to base address)
		void SetQuadSize(FVector2D InQuadSize); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C39F430(relative to base address)
		void SetPriority(int32_t InPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F3A4(relative to base address)
		void SetLeftTexture(UTexture* InTexture); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39F26C(relative to base address)
		void SetEquirectProps(FEquirectProps InEquirectProps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EEDC(relative to base address)
		void MarkTextureForUpdate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39EE9C(relative to base address)
		FBox2D GetUVRect(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EE68(relative to base address)
		UTexture GetTexture(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EE50(relative to base address)
		FVector2D GetQuadSize(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EDC0(relative to base address)
		int32_t GetPriority(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39EDA8(relative to base address)
		UTexture GetLeftTexture(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C39ECE4(relative to base address)
	};


	// Class Engine.StreamingWorldSubsystemInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStreamingWorldSubsystemInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamingWorldSubsystemInterface");
			return ret;
		}
	};


	// Class Engine.SubUVAnimation
	// Inherited from UObject
	// Size: 0x38 (0x60 - 0x28)
	class USubUVAnimation : public UObject	
	{
	public:
		UTexture2D* SubUVTexture; // 0x28(0x8)
		int32_t SubImages_Horizontal; // 0x30(0x4)
		int32_t SubImages_Vertical; // 0x34(0x4)
		TEnumAsByte<ESubUVBoundingVertexCount> BoundingMode; // 0x38(0x1)
		TEnumAsByte<EOpacitySourceMode> OpacitySourceMode; // 0x39(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x3A(0x2) UNKNOWN PROPERTY
		float AlphaThreshold; // 0x3C(0x4)
		unsigned char UnknownData01_7[0x20]; // 0x40(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SubUVAnimation");
			return ret;
		}
	};


	// Class Engine.TextPropertyTestObject
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UTextPropertyTestObject : public UObject	
	{
	public:
		FText DefaultedText; // 0x28(0x10)
		FText UndefaultedText; // 0x38(0x10)
		FText TransientText; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextPropertyTestObject");
			return ret;
		}
	};


	// Class Engine.TextRenderActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ATextRenderActor : public AActor	
	{
	public:
		UTextRenderComponent* TextRender; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextRenderActor");
			return ret;
		}
	};


	// Class Engine.TextRenderComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x48 (0x510 - 0x4C8)
	class UTextRenderComponent : public UPrimitiveComponent	
	{
	public:
		FText Text; // 0x4C8(0x10)
		UMaterialInterface* TextMaterial; // 0x4D8(0x8)
		UFont* Font; // 0x4E0(0x8)
		TEnumAsByte<EHorizTextAligment> HorizontalAlignment; // 0x4E8(0x1)
		TEnumAsByte<EVerticalTextAligment> VerticalAlignment; // 0x4E9(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x4EA(0x2) UNKNOWN PROPERTY
		FColor TextRenderColor; // 0x4EC(0x4)
		float XScale; // 0x4F0(0x4)
		float YScale; // 0x4F4(0x4)
		float WorldSize; // 0x4F8(0x4)
		float InvDefaultSize; // 0x4FC(0x4)
		float HorizSpacingAdjust; // 0x500(0x4)
		float VertSpacingAdjust; // 0x504(0x4)
		bool bAlwaysRenderAsText : 1; // 0x508:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x509(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextRenderComponent");
			return ret;
		}

		void SetYScale(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A147C(relative to base address)
		void SetXScale(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A13F4(relative to base address)
		void SetWorldSize(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A136C(relative to base address)
		void SetVertSpacingAdjust(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A1260(relative to base address)
		void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A12E8(relative to base address)
		void SetTextRenderColor(FColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3A0DE0(relative to base address)
		void SetTextMaterial(UMaterialInterface* Material); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0D60(relative to base address)
		void SetText(FText& Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms, Memory Exec: 0x7FF74C3A0698(relative to base address)
		void SetHorizSpacingAdjust(float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A09E8(relative to base address)
		void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0A70(relative to base address)
		void SetFont(UFont* Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0968(relative to base address)
		void K2_SetText(FText& Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3A0698(relative to base address)
		FVector GetTextWorldSize(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A0538(relative to base address)
		FVector GetTextLocalSize(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A04AC(relative to base address)
	};


	// Class Engine.TextureCollection
	// Inherited from UDataAsset -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UTextureCollection : public UDataAsset	
	{
	public:
		TArray<UTexture*> Textures; // 0x30(0x10)
		unsigned char UnknownData00_7[0x10]; // 0x40(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureCollection");
			return ret;
		}
	};


	// Class Engine.TextureEncodingProjectSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UTextureEncodingProjectSettings : public UDeveloperSettings	
	{
	public:
		bool bSharedLinearTextureEncoding : 1; // 0x30:0(0x1)
		bool bFinalUsesRDO : 1; // 0x30:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		int8_t FinalRDOLambda; // 0x34(0x1)
		ETextureEncodeEffort FinalEffortLevel; // 0x35(0x1)
		ETextureUniversalTiling FinalUniversalTiling; // 0x36(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x37(0x1) UNKNOWN PROPERTY
		bool bFastUsesRDO : 1; // 0x38:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		int8_t FastRDOLambda; // 0x3C(0x1)
		ETextureEncodeEffort FastEffortLevel; // 0x3D(0x1)
		ETextureUniversalTiling FastUniversalTiling; // 0x3E(0x1)
		ETextureEncodeSpeed CookUsesSpeed; // 0x3F(0x1)
		ETextureEncodeSpeed EditorUsesSpeed; // 0x40(0x1)
		unsigned char UnknownData03_7[0x7]; // 0x41(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureEncodingProjectSettings");
			return ret;
		}
	};


	// Class Engine.TextureEncodingUserSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UTextureEncodingUserSettings : public UDeveloperSettings	
	{
	public:
		ETextureEncodeSpeedOverride ForceEncodeSpeed; // 0x30(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureEncodingUserSettings");
			return ret;
		}
	};


	// Class Engine.TimelineComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x98 (0x138 - 0xA0)
	class UTimelineComponent : public UActorComponent	
	{
	public:
		FTimeline TheTimeline; // 0xA0(0x90)
		bool bIgnoreTimeDilation : 1; // 0x130:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x131(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TimelineComponent");
			return ret;
		}

		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748E75D5C(relative to base address)
		void SetVectorCurve(UCurveVector* NewVectorCurve, FName VectorTrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A1108(relative to base address)
		void SetTimelinePostUpdateFunc(FDelegateProperty NewTimelinePostUpdateFunc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A107C(relative to base address)
		void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A1000(relative to base address)
		void SetTimelineLength(float NewLength); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0F7C(relative to base address)
		void SetTimelineFinishedFunc(FDelegateProperty NewTimelineFinishedFunc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0EF0(relative to base address)
		void SetPlayRate(float NewRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748D9ADB8(relative to base address)
		void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7499BCA4C(relative to base address)
		void SetNewTime(float NewTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749177DE4(relative to base address)
		void SetLooping(bool bNewLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0CD8(relative to base address)
		void SetLinearColorCurve(UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0B80(relative to base address)
		void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0AF4(relative to base address)
		void SetFloatCurve(UCurveFloat* NewFloatCurve, FName FloatTrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A0810(relative to base address)
		void ReverseFromEnd(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B02124(relative to base address)
		void Reverse(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B02174(relative to base address)
		void PlayFromStart(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B021E4(relative to base address)
		void Play(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B021A4(relative to base address)
		void OnRep_Timeline(FTimeline& OldTimeline); // Flags: Final|Native|Public|HasOutParms, Memory Exec: 0x7FF748E166EC(relative to base address)
		bool IsReversing(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A0678(relative to base address)
		bool IsPlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749C97870(relative to base address)
		bool IsLooping(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A065C(relative to base address)
		float GetTimelineLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749C648F0(relative to base address)
		float GetScaledTimelineLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A0480(relative to base address)
		float GetPlayRate(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C0DFE78(relative to base address)
		float GetPlaybackPosition(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C0DFE60(relative to base address)
		bool GetIgnoreTimeDilation(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A043C(relative to base address)
		void AddInterpVector(UCurveVector* VectorCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A021C(relative to base address)
		void AddInterpLinearColor(UCurveLinearColor* LinearColorCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A00CC(relative to base address)
		void AddInterpFloat(UCurveFloat* FloatCurve, FDelegateProperty InterpFunc, FName PropertyName, FName TrackName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39FF7C(relative to base address)
		void AddEvent(float Time, FDelegateProperty EventFunc); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C39FEA0(relative to base address)
	};


	// Class Engine.TriggerBase
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ATriggerBase : public AActor	
	{
	public:
		UShapeComponent* CollisionComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerBase");
			return ret;
		}
	};


	// Class Engine.TriggerBox
	// Inherited from ATriggerBase -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ATriggerBox : public ATriggerBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerBox");
			return ret;
		}
	};


	// Class Engine.TriggerCapsule
	// Inherited from ATriggerBase -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ATriggerCapsule : public ATriggerBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerCapsule");
			return ret;
		}
	};


	// Class Engine.TriggerSphere
	// Inherited from ATriggerBase -> AActor -> UObject
	// Size: 0x0 (0x298 - 0x298)
	class ATriggerSphere : public ATriggerBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerSphere");
			return ret;
		}
	};


	// Class Engine.TwitterIntegrationBase
	// Inherited from UPlatformInterfaceBase -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UTwitterIntegrationBase : public UPlatformInterfaceBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TwitterIntegrationBase");
			return ret;
		}

		bool TwitterRequest(FString URL, TArray<FString>& ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int32_t AccountIndex); // Flags: Native|Public|HasOutParms, Memory Exec: 0x7FF74C3A1B58(relative to base address)
		bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture); // Flags: Native|Public, Memory Exec: 0x7FF74C3A1504(relative to base address)
		void Init(); // Flags: Native|Public, Memory Exec: 0x7FF747B0DC80(relative to base address)
		int32_t GetNumAccounts(); // Flags: Native|Public, Memory Exec: 0x7FF74C3A0458(relative to base address)
		FString GetAccountName(int32_t AccountIndex); // Flags: Native|Public, Memory Exec: 0x7FF74C3A0394(relative to base address)
		bool CanShowTweetUI(); // Flags: Native|Public, Memory Exec: 0x7FF7495F94FC(relative to base address)
		bool AuthorizeAccounts(); // Flags: Native|Public, Memory Exec: 0x7FF74C3A036C(relative to base address)
	};


	// Class Engine.UniversalObjectLocatorScriptingExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UUniversalObjectLocatorScriptingExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.UniversalObjectLocatorScriptingExtensions");
			return ret;
		}

		FUniversalObjectLocator UniversalObjectLocatorFromString(FString InString); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A1E10(relative to base address)
		FString ToString(FUniversalObjectLocator& Locator); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A1AA4(relative to base address)
		void SyncUnload(FUniversalObjectLocator& Locator, UObject* Context); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A1938(relative to base address)
		UObject SyncLoad(FUniversalObjectLocator& Locator, UObject* Context); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A17C8(relative to base address)
		UObject SyncFind(FUniversalObjectLocator& Locator, UObject* Context); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A1658(relative to base address)
		FUniversalObjectLocator MakeUniversalObjectLocator(UObject* Object, UObject* Context); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A0734(relative to base address)
		bool IsEmpty(FUniversalObjectLocator& Locator); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3A05C4(relative to base address)
	};


	// Class Engine.VariableFrameStrippingSettings
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UVariableFrameStrippingSettings : public UObject	
	{
	public:
		FPerPlatformBool UseVariableFrameStripping; // 0x28(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		FPerPlatformInt FrameStrippingRate; // 0x2C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VariableFrameStrippingSettings");
			return ret;
		}
	};


	// Class Engine.VectorField
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UVectorField : public UObject	
	{
	public:
		FBox Bounds; // 0x28(0x38)
		float Intensity; // 0x60(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x64(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorField");
			return ret;
		}
	};


	// Class Engine.VectorFieldAnimated
	// Inherited from UVectorField -> UObject
	// Size: 0x40 (0xA8 - 0x68)
	class UVectorFieldAnimated : public UVectorField	
	{
	public:
		UTexture2D* Texture; // 0x68(0x8)
		TEnumAsByte<EVectorFieldConstructionOp> ConstructionOp; // 0x70(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x71(0x3) UNKNOWN PROPERTY
		int32_t VolumeSizeX; // 0x74(0x4)
		int32_t VolumeSizeY; // 0x78(0x4)
		int32_t VolumeSizeZ; // 0x7C(0x4)
		int32_t SubImagesX; // 0x80(0x4)
		int32_t SubImagesY; // 0x84(0x4)
		int32_t FrameCount; // 0x88(0x4)
		float FramesPerSecond; // 0x8C(0x4)
		bool bLoop : 1; // 0x90:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x91(0x7) UNKNOWN PROPERTY
		UVectorFieldStatic* NoiseField; // 0x98(0x8)
		float NoiseScale; // 0xA0(0x4)
		float NoiseMax; // 0xA4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldAnimated");
			return ret;
		}
	};


	// Class Engine.VectorFieldComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UVectorFieldComponent : public UPrimitiveComponent	
	{
	public:
		UVectorField* VectorField; // 0x4C8(0x8)
		float Intensity; // 0x4D0(0x4)
		float Tightness; // 0x4D4(0x4)
		bool bPreviewVectorField : 1; // 0x4D8:0(0x1)
		unsigned char UnknownData00_7[0x17]; // 0x4D9(0x17) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldComponent");
			return ret;
		}

		void SetIntensity(float NewIntensity); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A651C(relative to base address)
	};


	// Class Engine.VectorFieldStatic
	// Inherited from UVectorField -> UObject
	// Size: 0x50 (0xB8 - 0x68)
	class UVectorFieldStatic : public UVectorField	
	{
	public:
		int32_t SizeX; // 0x68(0x4)
		int32_t SizeY; // 0x6C(0x4)
		int32_t SizeZ; // 0x70(0x4)
		bool bAllowCPUAccess; // 0x74(0x1)
		unsigned char UnknownData00_7[0x43]; // 0x75(0x43) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldStatic");
			return ret;
		}
	};


	// Class Engine.VisualLoggerDebugSnapshotInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVisualLoggerDebugSnapshotInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerDebugSnapshotInterface");
			return ret;
		}
	};


	// Class Engine.WindDirectionalSourceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x20 (0x240 - 0x220)
	class UWindDirectionalSourceComponent : public USceneComponent	
	{
	public:
		float Strength; // 0x220(0x4)
		float Speed; // 0x224(0x4)
		float MinGustAmount; // 0x228(0x4)
		float MaxGustAmount; // 0x22C(0x4)
		float Radius; // 0x230(0x4)
		bool bPointWind : 1; // 0x234:0(0x1)
		unsigned char UnknownData00_7[0xB]; // 0x235(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WindDirectionalSourceComponent");
			return ret;
		}

		void SetWindType(EWindSourceType InNewType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A6848(relative to base address)
		void SetStrength(float InNewStrength); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A67C0(relative to base address)
		void SetSpeed(float InNewSpeed); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A6738(relative to base address)
		void SetRadius(float InNewRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A66B0(relative to base address)
		void SetMinimumGustAmount(float InNewMinGust); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A6628(relative to base address)
		void SetMaximumGustAmount(float InNewMaxGust); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3A65A0(relative to base address)
	};


	// Class Engine.WorldPartitionEditorLoaderAdapter
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UWorldPartitionEditorLoaderAdapter : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorLoaderAdapter");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellData
	// Inherited from UObject
	// Size: 0xB0 (0xD8 - 0x28)
	class UWorldPartitionRuntimeCellData : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x28]; // 0x28(0x28) UNKNOWN PROPERTY
		FBox ContentBounds; // 0x50(0x38)
		unsigned char UnknownData01_6[0x40]; // 0x88(0x40) UNKNOWN PROPERTY
		FName GridName; // 0xC8(0x4)
		int32_t Priority; // 0xCC(0x4)
		int32_t HierarchicalLevel; // 0xD0(0x4)
		unsigned char UnknownData02_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellData");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCell
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UWorldPartitionRuntimeCell : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		bool bIsAlwaysLoaded; // 0x38(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x39(0x7) UNKNOWN PROPERTY
		FDataLayerInstanceNames DataLayers; // 0x40(0x18)
		bool bClientOnlyVisible; // 0x58(0x1)
		bool bIsHLOD; // 0x59(0x1)
		bool bBlockOnSlowLoading; // 0x5A(0x1)
		unsigned char UnknownData02_6[0x1]; // 0x5B(0x1) UNKNOWN PROPERTY
		FGuid ContentBundleID; // 0x5C(0x10)
		FLinearColor CellDebugColor; // 0x6C(0x10)
		FGuid CellGuid; // 0x7C(0x10)
		FGuid SourceCellGuid; // 0x8C(0x10)
		unsigned char UnknownData03_6[0xC]; // 0x9C(0xC) UNKNOWN PROPERTY
		UWorldPartitionRuntimeCellData* RuntimeCellData; // 0xA8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCell");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellDataHashSet
	// Inherited from UWorldPartitionRuntimeCellData -> UObject
	// Size: 0x8 (0xE0 - 0xD8)
	class UWorldPartitionRuntimeCellDataHashSet : public UWorldPartitionRuntimeCellData	
	{
	public:
		bool bIs2D; // 0xD8(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xD9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellDataHashSet");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellTransformer
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionRuntimeCellTransformer : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellTransformer");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellTransformerISM
	// Inherited from UWorldPartitionRuntimeCellTransformer -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionRuntimeCellTransformerISM : public UWorldPartitionRuntimeCellTransformer	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellTransformerISM");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellTransformerLog
	// Inherited from UWorldPartitionRuntimeCellTransformer -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionRuntimeCellTransformerLog : public UWorldPartitionRuntimeCellTransformer	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellTransformerLog");
			return ret;
		}
	};


	// Class Engine.RuntimeHashExternalStreamingObjectBase
	// Inherited from UObject
	// Size: 0x190 (0x1B8 - 0x28)
	class URuntimeHashExternalStreamingObjectBase : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TMap<FName, FName> SubObjectsToCellRemapping; // 0x38(0x50)
		FWorldPartitionRuntimeContainerResolver ContainerResolver; // 0x88(0x58)
		unsigned char UnknownData01_6[0x10]; // 0xE0(0x10) UNKNOWN PROPERTY
		TWeakObjectPtr<UWorld*> OuterWorld; // 0xF0(0x20)
		TMap<FName, FWorldPartitionRuntimeCellStreamingData> CellToStreamingData; // 0x110(0x50)
		TSet<UDataLayerInstance*> DataLayerInstances; // 0x160(0x50)
		UExternalDataLayerInstance* RootExternalDataLayerInstance; // 0x1B0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeHashExternalStreamingObjectBase");
			return ret;
		}
	};


	// Class Engine.RuntimeHashSetExternalStreamingObject
	// Inherited from URuntimeHashExternalStreamingObjectBase -> UObject
	// Size: 0x10 (0x1C8 - 0x1B8)
	class URuntimeHashSetExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase	
	{
	public:
		TArray<FRuntimePartitionStreamingData> RuntimeStreamingData; // 0x1B8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeHashSetExternalStreamingObject");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeHash
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UWorldPartitionRuntimeHash : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x28(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeHashSet
	// Inherited from UWorldPartitionRuntimeHash -> UObject
	// Size: 0xD0 (0x148 - 0x78)
	class UWorldPartitionRuntimeHashSet : public UWorldPartitionRuntimeHash	
	{
	public:
		TArray<FRuntimePartitionDesc> RuntimePartitions; // 0x78(0x10)
		TArray<FRuntimePartitionStreamingData> RuntimeStreamingData; // 0x88(0x10)
		TMap<FGuid, URuntimeHashSetExternalStreamingObject*> WorldAssetStreamingObjects; // 0x98(0x50)
		unsigned char UnknownData00_7[0x60]; // 0xE8(0x60) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeHashSet");
			return ret;
		}
	};


	// Class Engine.WorldPartitionSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UWorldPartitionSettings : public UDeveloperSettings	
	{
	public:
		EWorldPartitionDataLayersLogicOperator NewMapsDataLayersLogicOperator; // 0x30(0x1)
		bool bNewMapsEnableWorldPartition; // 0x31(0x1)
		bool bNewMapsEnableWorldPartitionStreaming; // 0x32(0x1)
		unsigned char UnknownData00_6[0x5]; // 0x33(0x5) UNKNOWN PROPERTY
		UClass* EditorHashDefaultClass; // 0x38(0x8)
		UClass* RuntimeHashDefaultClass; // 0x40(0x8)
		UWorldPartitionPropertyOverridePolicy* PropertyOverridePolicy; // 0x48(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionSettings");
			return ret;
		}
	};


	// Class Engine.WorldSettings
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x220 (0x4B0 - 0x290)
	class AWorldSettings : public AInfo	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		int32_t VisibilityCellSize; // 0x298(0x4)
		TEnumAsByte<EVisibilityAggressiveness> VisibilityAggressiveness; // 0x29C(0x1)
		bool bPrecomputeVisibility : 1; // 0x29D:0(0x1)
		bool bPlaceCellsOnlyAlongCameraTracks : 1; // 0x29D:1(0x1)
		bool bEnableWorldBoundsChecks : 1; // 0x29D:2(0x1)
		bool bEnableNavigationSystem : 1; // 0x29D:3(0x1)
		bool bEnableAISystem : 1; // 0x29D:4(0x1)
		bool bEnableWorldComposition : 1; // 0x29D:5(0x1)
		bool bUseClientSideLevelStreamingVolumes : 1; // 0x29D:6(0x1)
		bool bEnableWorldOriginRebasing : 1; // 0x29D:7(0x1)
		bool bWorldGravitySet : 1; // 0x29E:0(0x1)
		bool bGlobalGravitySet : 1; // 0x29E:1(0x1)
		bool bMinimizeBSPSections : 1; // 0x29E:2(0x1)
		bool bForceNoPrecomputedLighting : 1; // 0x29E:3(0x1)
		bool bForceVolumetricLightmapsOnly : 1; // 0x29E:4(0x1)
		bool bHighPriorityLoading : 1; // 0x29E:5(0x1)
		bool bHighPriorityLoadingLocal : 1; // 0x29E:6(0x1)
		bool bOverrideDefaultBroadphaseSettings : 1; // 0x29E:7(0x1)
		bool bGenerateSingleClusterForLevel : 1; // 0x29F:0(0x1)
		bool bReuseAddressAndPort : 1; // 0x29F:1(0x1)
		TWeakObjectPtr<UClass*> AISystemClass; // 0x2A0(0x20)
		FVector LevelInstancePivotOffset; // 0x2C0(0x18)
		UNavigationSystemConfig* NavigationSystemConfig; // 0x2D8(0x8)
		UNavigationSystemConfig* NavigationSystemConfigOverride; // 0x2E0(0x8)
		UWorldPartition* WorldPartition; // 0x2E8(0x8)
		TArray<UDataLayerAsset*> BaseNavmeshDataLayers; // 0x2F0(0x10)
		float WorldToMeters; // 0x300(0x4)
		float KillZ; // 0x304(0x4)
		UClass* KillZDamageType; // 0x308(0x8)
		float WorldGravityZ; // 0x310(0x4)
		float GlobalGravityZ; // 0x314(0x4)
		UClass* DefaultPhysicsVolumeClass; // 0x318(0x8)
		UClass* PhysicsCollisionHandlerClass; // 0x320(0x8)
		UClass* DefaultGameMode; // 0x328(0x8)
		UClass* GameNetworkManagerClass; // 0x330(0x8)
		int32_t PackedLightAndShadowMapTextureSize; // 0x338(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x33C(0x4) UNKNOWN PROPERTY
		FVector DefaultColorScale; // 0x340(0x18)
		float DefaultMaxDistanceFieldOcclusionDistance; // 0x358(0x4)
		float GlobalDistanceFieldViewDistance; // 0x35C(0x4)
		float DynamicIndirectShadowsSelfShadowingIntensity; // 0x360(0x4)
		float VolumetricLightmapLoadingRange; // 0x364(0x4)
		FNaniteSettings NaniteSettings; // 0x368(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x369(0x7) UNKNOWN PROPERTY
		FReverbSettings DefaultReverbSettings; // 0x370(0x20)
		FInteriorSettings DefaultAmbientZoneSettings; // 0x390(0x24)
		unsigned char UnknownData03_6[0x4]; // 0x3B4(0x4) UNKNOWN PROPERTY
		USoundMix* DefaultBaseSoundMix; // 0x3B8(0x8)
		float TimeDilation; // 0x3C0(0x4)
		float CinematicTimeDilation; // 0x3C4(0x4)
		float DemoPlayTimeDilation; // 0x3C8(0x4)
		float MinGlobalTimeDilation; // 0x3CC(0x4)
		float MaxGlobalTimeDilation; // 0x3D0(0x4)
		float MinUndilatedFrameTime; // 0x3D4(0x4)
		float MaxUndilatedFrameTime; // 0x3D8(0x4)
		unsigned char UnknownData04_6[0x4]; // 0x3DC(0x4) UNKNOWN PROPERTY
		FBroadphaseSettings BroadphaseSettings; // 0x3E0(0x80)
		TArray<FNetViewer> ReplicationViewers; // 0x460(0x10)
		TArray<UAssetUserData*> AssetUserData; // 0x470(0x10)
		APlayerState* PauserPlayerState; // 0x480(0x8)
		int32_t MaxNumberOfBookmarks; // 0x488(0x4)
		unsigned char UnknownData05_6[0x4]; // 0x48C(0x4) UNKNOWN PROPERTY
		UClass* DefaultBookmarkClass; // 0x490(0x8)
		TArray<UBookmarkBase*> BookmarkArray; // 0x498(0x10)
		UClass* LastBookmarkClass; // 0x4A8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldSettings");
			return ret;
		}

		void OnRep_WorldGravityZ(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		void OnRep_NaniteSettings(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C388930(relative to base address)
	};


	// Class Engine.Texture2DArray
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x10 (0x140 - 0x130)
	class UTexture2DArray : public UTexture	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x130(0x8) UNKNOWN PROPERTY
		TEnumAsByte<TextureAddress> AddressX; // 0x138(0x1)
		TEnumAsByte<TextureAddress> AddressY; // 0x139(0x1)
		TEnumAsByte<TextureAddress> AddressZ; // 0x13A(0x1)
		unsigned char UnknownData01_7[0x5]; // 0x13B(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture2DArray");
			return ret;
		}
	};


	// Class Engine.ActorFolder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorFolder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorFolder");
			return ret;
		}
	};


	// Class Engine.ActorPartitionSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UActorPartitionSubsystem : public UWorldSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorPartitionSubsystem");
			return ret;
		}
	};


	// Class Engine.AISystemBase
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UAISystemBase : public UObject	
	{
	public:
		FSoftClassPath AISystemClassName; // 0x28(0x18)
		FName AISystemModuleName; // 0x40(0x4)
		unsigned char UnknownData00_6[0xC]; // 0x44(0xC) UNKNOWN PROPERTY
		bool bInstantiateAISystemOnClient; // 0x50(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x51(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AISystemBase");
			return ret;
		}
	};


	// Class Engine.NavigationSystemBase
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNavigationSystemBase : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationSystemBase");
			return ret;
		}
	};


	// Class Engine.NavigationSystemConfig
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UNavigationSystemConfig : public UObject	
	{
	public:
		FSoftClassPath NavigationSystemClass; // 0x28(0x18)
		FNavAgentSelector SupportedAgentsMask; // 0x40(0x4)
		FName DefaultAgentName; // 0x44(0x4)
		bool bIsOverriden : 1; // 0x48:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationSystemConfig");
			return ret;
		}
	};


	// Class Engine.NullNavSysConfig
	// Inherited from UNavigationSystemConfig -> UObject
	// Size: 0x0 (0x50 - 0x50)
	class UNullNavSysConfig : public UNavigationSystemConfig	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NullNavSysConfig");
			return ret;
		}
	};


	// Class Engine.AvoidanceManager
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class UAvoidanceManager : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		float DefaultTimeToLive; // 0x30(0x4)
		float LockTimeAfterAvoid; // 0x34(0x4)
		float LockTimeAfterClean; // 0x38(0x4)
		float DeltaTimeToPredict; // 0x3C(0x4)
		float ArtificialRadiusExpansion; // 0x40(0x4)
		float TestHeightDifference; // 0x44(0x4)
		float HeightCheckMargin; // 0x48(0x4)
		unsigned char UnknownData01_7[0x94]; // 0x4C(0x94) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AvoidanceManager");
			return ret;
		}

		bool RegisterMovementComponent(UMovementComponent* MovementComp, float AvoidanceWeight); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C4954(relative to base address)
		int32_t GetObjectCount(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C135C(relative to base address)
		int32_t GetNewAvoidanceUID(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3C1338(relative to base address)
		FVector GetAvoidanceVelocityForComponent(UMovementComponent* MovementComp); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C3C0434(relative to base address)
	};


	// Class Engine.NavCollisionBase
	// Inherited from UObject
	// Size: 0x48 (0x70 - 0x28)
	class UNavCollisionBase : public UObject	
	{
	public:
		bool bIsDynamicObstacle : 1; // 0x28:0(0x1)
		unsigned char UnknownData00_7[0x47]; // 0x29(0x47) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavCollisionBase");
			return ret;
		}
	};


	// Class Engine.NavigationDataChunk
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UNavigationDataChunk : public UObject	
	{
	public:
		FName NavigationDataName; // 0x28(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationDataChunk");
			return ret;
		}
	};


	// Class Engine.AmbientSound
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAmbientSound : public AActor	
	{
	public:
		UAudioComponent* AudioComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AmbientSound");
			return ret;
		}

		void Stop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3D50C0(relative to base address)
		void Play(float StartTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3D5040(relative to base address)
		void FadeOut(float FadeOutDuration, float FadeVolumeLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3D4E20(relative to base address)
		void FadeIn(float FadeInDuration, float FadeVolumeLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3D4D4C(relative to base address)
		void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3D4C84(relative to base address)
	};


	// Class Engine.AimOffsetBlendSpace
	// Inherited from UBlendSpace -> UAnimationAsset -> UObject
	// Size: 0x0 (0x1C0 - 0x1C0)
	class UAimOffsetBlendSpace : public UBlendSpace	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AimOffsetBlendSpace");
			return ret;
		}
	};


	// Class Engine.BlendSpace1D
	// Inherited from UBlendSpace -> UAnimationAsset -> UObject
	// Size: 0x8 (0x1C8 - 0x1C0)
	class UBlendSpace1D : public UBlendSpace	
	{
	public:
		bool bScaleAnimation; // 0x1C0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x1C1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendSpace1D");
			return ret;
		}
	};


	// Class Engine.AimOffsetBlendSpace1D
	// Inherited from UBlendSpace1D -> UBlendSpace -> UAnimationAsset -> UObject
	// Size: 0x0 (0x1C8 - 0x1C8)
	class UAimOffsetBlendSpace1D : public UBlendSpace1D	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AimOffsetBlendSpace1D");
			return ret;
		}
	};


	// Class Engine.AnimationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0xF8 (0x128 - 0x30)
	class UAnimationSettings : public UDeveloperSettings	
	{
	public:
		int32_t CompressCommandletVersion; // 0x30(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		TArray<FString> KeyEndEffectorsMatchNameArray; // 0x38(0x10)
		bool ForceRecompression; // 0x48(0x1)
		bool bForceBelowThreshold; // 0x49(0x1)
		bool bFirstRecompressUsingCurrentOrDefault; // 0x4A(0x1)
		bool bRaiseMaxErrorToExisting; // 0x4B(0x1)
		bool bEnablePerformanceLog; // 0x4C(0x1)
		bool bStripAnimationDataOnDedicatedServer; // 0x4D(0x1)
		bool bTickAnimationOnSkeletalMeshInit; // 0x4E(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x4F(0x1) UNKNOWN PROPERTY
		FTimecodeCustomAttributeNameSettings BoneTimecodeCustomAttributeNameSettings; // 0x50(0x1C)
		unsigned char UnknownData02_6[0x4]; // 0x6C(0x4) UNKNOWN PROPERTY
		TArray<FCustomAttributeSetting> BoneCustomAttributesNames; // 0x70(0x10)
		TArray<FString> BoneNamesWithCustomAttributes; // 0x80(0x10)
		TMap<FName, ECustomAttributeBlendType> AttributeBlendModes; // 0x90(0x50)
		ECustomAttributeBlendType DefaultAttributeBlendMode; // 0xE0(0x1)
		unsigned char UnknownData03_6[0x7]; // 0xE1(0x7) UNKNOWN PROPERTY
		TArray<FString> TransformAttributeNames; // 0xE8(0x10)
		TArray<TWeakObjectPtr> UserDefinedStructAttributes; // 0xF8(0x10)
		TArray<FMirrorFindReplaceExpression> MirrorFindReplaceExpressions; // 0x108(0x10)
		FFrameRate DefaultFrameRate; // 0x118(0x8)
		bool bEnforceSupportedFrameRates; // 0x120(0x1)
		unsigned char UnknownData04_7[0x7]; // 0x121(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationSettings");
			return ret;
		}

		TArray GetBoneCustomAttributeNamesToImport(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3D4FD8(relative to base address)
	};


	// Class Engine.AnimBlueprintGeneratedStruct
	// Inherited from UScriptStruct -> UStruct -> UField -> UObject
	// Size: 0x0 (0xC0 - 0xC0)
	class UAnimBlueprintGeneratedStruct : public UScriptStruct	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprintGeneratedStruct");
			return ret;
		}
	};


	// Class Engine.AnimBlueprintGeneratedClass
	// Inherited from UBlueprintGeneratedClass -> UClass -> UStruct -> UField -> UObject
	// Size: 0x268 (0x5C8 - 0x360)
	class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x360(0x8) UNKNOWN PROPERTY
		TArray<FBakedAnimationStateMachine> BakedStateMachines; // 0x368(0x10)
		USkeleton* TargetSkeleton; // 0x378(0x8)
		TArray<FAnimNotifyEvent> AnimNotifies; // 0x380(0x10)
		TMap<FName, FCachedPoseIndices> OrderedSavedPoseIndicesMap; // 0x390(0x50)
		unsigned char UnknownData01_6[0x80]; // 0x3E0(0x80) UNKNOWN PROPERTY
		TArray<FName> SyncGroupNames; // 0x460(0x10)
		TMap<FName, FGraphAssetPlayerInformation> GraphAssetPlayerInformation; // 0x470(0x50)
		TMap<FName, FAnimGraphBlendOptions> GraphBlendOptions; // 0x4C0(0x50)
		TArray<FAnimNodeData> AnimNodeData; // 0x510(0x10)
		TMap<UScriptStruct*, FAnimNodeStructData> NodeTypeMap; // 0x520(0x50)
		unsigned char UnknownData02_7[0x58]; // 0x570(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprintGeneratedClass");
			return ret;
		}
	};


	// Class Engine.AnimBoneCompressionCodec
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnimBoneCompressionCodec : public UObject	
	{
	public:
		FString Description; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBoneCompressionCodec");
			return ret;
		}
	};


	// Class Engine.AnimBoneCompressionSettings
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAnimBoneCompressionSettings : public UObject	
	{
	public:
		TArray<UAnimBoneCompressionCodec*> Codecs; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBoneCompressionSettings");
			return ret;
		}
	};


	// Class Engine.AnimClassInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimClassInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimClassInterface");
			return ret;
		}
	};


	// Class Engine.AnimCompositeBase
	// Inherited from UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UAnimCompositeBase : public UAnimSequenceBase	
	{
	public:
		FFrameRate CommonTargetFrameRate; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompositeBase");
			return ret;
		}
	};


	// Class Engine.AnimComposite
	// Inherited from UAnimCompositeBase -> UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x10 (0xC8 - 0xB8)
	class UAnimComposite : public UAnimCompositeBase	
	{
	public:
		FAnimTrack AnimationTrack; // 0xB8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimComposite");
			return ret;
		}
	};


	// Class Engine.AnimCompress
	// Inherited from UAnimBoneCompressionCodec -> UObject
	// Size: 0x8 (0x40 - 0x38)
	class UAnimCompress : public UAnimBoneCompressionCodec	
	{
	public:
		bool bNeedsSkeleton : 1; // 0x38:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		TEnumAsByte<AnimationCompressionFormat> TranslationCompressionFormat; // 0x3C(0x1)
		TEnumAsByte<AnimationCompressionFormat> RotationCompressionFormat; // 0x3D(0x1)
		TEnumAsByte<AnimationCompressionFormat> ScaleCompressionFormat; // 0x3E(0x1)
		unsigned char UnknownData01_7[0x1]; // 0x3F(0x1) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress");
			return ret;
		}
	};


	// Class Engine.AnimCompress_BitwiseCompressOnly
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x0 (0x40 - 0x40)
	class UAnimCompress_BitwiseCompressOnly : public UAnimCompress	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_BitwiseCompressOnly");
			return ret;
		}
	};


	// Class Engine.AnimCompress_LeastDestructive
	// Inherited from UAnimCompress_BitwiseCompressOnly -> UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x0 (0x40 - 0x40)
	class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_LeastDestructive");
			return ret;
		}
	};


	// Class Engine.AnimCompress_RemoveLinearKeys
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x20 (0x60 - 0x40)
	class UAnimCompress_RemoveLinearKeys : public UAnimCompress	
	{
	public:
		float MaxPosDiff; // 0x40(0x4)
		float MaxAngleDiff; // 0x44(0x4)
		float MaxScaleDiff; // 0x48(0x4)
		float MaxEffectorDiff; // 0x4C(0x4)
		float MinEffectorDiff; // 0x50(0x4)
		float EffectorDiffSocket; // 0x54(0x4)
		float ParentKeyScale; // 0x58(0x4)
		bool bRetarget : 1; // 0x5C:0(0x1)
		bool bActuallyFilterLinearKeys : 1; // 0x5C:1(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x5D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_RemoveLinearKeys");
			return ret;
		}
	};


	// Class Engine.AnimCompress_PerTrackCompression
	// Inherited from UAnimCompress_RemoveLinearKeys -> UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x78 (0xD8 - 0x60)
	class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys	
	{
	public:
		float MaxZeroingThreshold; // 0x60(0x4)
		float MaxPosDiffBitwise; // 0x64(0x4)
		float MaxAngleDiffBitwise; // 0x68(0x4)
		float MaxScaleDiffBitwise; // 0x6C(0x4)
		TArray<TEnumAsByte> AllowedRotationFormats; // 0x70(0x10)
		TArray<TEnumAsByte> AllowedTranslationFormats; // 0x80(0x10)
		TArray<TEnumAsByte> AllowedScaleFormats; // 0x90(0x10)
		bool bResampleAnimation : 1; // 0xA0:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0xA1(0x3) UNKNOWN PROPERTY
		float ResampledFramerate; // 0xA4(0x4)
		int32_t MinKeysForResampling; // 0xA8(0x4)
		bool bUseAdaptiveError : 1; // 0xAC:0(0x1)
		bool bUseOverrideForEndEffectors : 1; // 0xAC:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY
		int32_t TrackHeightBias; // 0xB0(0x4)
		float ParentingDivisor; // 0xB4(0x4)
		float ParentingDivisorExponent; // 0xB8(0x4)
		bool bUseAdaptiveError2 : 1; // 0xBC:0(0x1)
		unsigned char UnknownData02_5[0x3]; // 0xBD(0x3) UNKNOWN PROPERTY
		float RotationErrorSourceRatio; // 0xC0(0x4)
		float TranslationErrorSourceRatio; // 0xC4(0x4)
		float ScaleErrorSourceRatio; // 0xC8(0x4)
		float MaxErrorPerTrackRatio; // 0xCC(0x4)
		float PerturbationProbeSize; // 0xD0(0x4)
		unsigned char UnknownData03_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_PerTrackCompression");
			return ret;
		}
	};


	// Class Engine.AnimCompress_RemoveEverySecondKey
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x8 (0x48 - 0x40)
	class UAnimCompress_RemoveEverySecondKey : public UAnimCompress	
	{
	public:
		int32_t MinKeys; // 0x40(0x4)
		bool bStartAtSecondKey : 1; // 0x44:0(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x45(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_RemoveEverySecondKey");
			return ret;
		}
	};


	// Class Engine.AnimCompress_RemoveTrivialKeys
	// Inherited from UAnimCompress -> UAnimBoneCompressionCodec -> UObject
	// Size: 0x10 (0x50 - 0x40)
	class UAnimCompress_RemoveTrivialKeys : public UAnimCompress	
	{
	public:
		float MaxPosDiff; // 0x40(0x4)
		float MaxAngleDiff; // 0x44(0x4)
		float MaxScaleDiff; // 0x48(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCompress_RemoveTrivialKeys");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
	// Inherited from UAnimCurveCompressionCodec -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec_UniformIndexable
	// Inherited from UAnimCurveCompressionCodec -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec_UniformIndexable");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionCodec_UniformlySampled
	// Inherited from UAnimCurveCompressionCodec -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionCodec_UniformlySampled");
			return ret;
		}
	};


	// Class Engine.AnimCurveCompressionSettings
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAnimCurveCompressionSettings : public UObject	
	{
	public:
		UAnimCurveCompressionCodec* Codec; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimCurveCompressionSettings");
			return ret;
		}
	};


	// Class Engine.AnimDataModel
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class UAnimDataModel : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		int32_t BracketCounter; // 0x30(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		FMulticastInlineDelegate ModifiedEventDynamic; // 0x38(0x10)
		unsigned char UnknownData02_6[0x18]; // 0x48(0x18) UNKNOWN PROPERTY
		TArray<FBoneAnimationTrack> BoneAnimationTracks; // 0x60(0x10)
		float PlayLength; // 0x70(0x4)
		FFrameRate FrameRate; // 0x74(0x8)
		int32_t NumberOfFrames; // 0x7C(0x4)
		int32_t NumberOfKeys; // 0x80(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x84(0x4) UNKNOWN PROPERTY
		FAnimationCurveData CurveData; // 0x88(0x20)
		TArray<FAnimatedBoneAttribute> AnimatedBoneAttributes; // 0xA8(0x10)
		bool bPopulated; // 0xB8(0x1)
		unsigned char UnknownData04_7[0xF]; // 0xB9(0xF) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimDataModel");
			return ret;
		}
	};


	// Class Engine.AnimMetaData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimMetaData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimMetaData");
			return ret;
		}
	};


	// Class Engine.AnimMontage
	// Inherited from UAnimCompositeBase -> UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x128 (0x1E0 - 0xB8)
	class UAnimMontage : public UAnimCompositeBase	
	{
	public:
		EMontageBlendMode BlendModeIn; // 0xB8(0x1)
		EMontageBlendMode BlendModeOut; // 0xB9(0x1)
		unsigned char UnknownData00_6[0x6]; // 0xBA(0x6) UNKNOWN PROPERTY
		FAlphaBlend BlendIn; // 0xC0(0x30)
		FAlphaBlend BlendOut; // 0xF0(0x30)
		float BlendOutTriggerTime; // 0x120(0x4)
		FName SyncGroup; // 0x124(0x4)
		int32_t SyncSlotIndex; // 0x128(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x12C(0x4) UNKNOWN PROPERTY
		FMarkerSyncData MarkerData; // 0x130(0x20)
		TArray<FCompositeSection> CompositeSections; // 0x150(0x10)
		TArray<FSlotAnimationTrack> SlotAnimTracks; // 0x160(0x10)
		bool bEnableRootMotionTranslation; // 0x170(0x1)
		bool bEnableRootMotionRotation; // 0x171(0x1)
		bool bEnableAutoBlendOut; // 0x172(0x1)
		unsigned char UnknownData02_6[0x5]; // 0x173(0x5) UNKNOWN PROPERTY
		UBlendProfile* BlendProfileIn; // 0x178(0x8)
		UBlendProfile* BlendProfileOut; // 0x180(0x8)
		TEnumAsByte<ERootMotionRootLock> RootMotionRootLock; // 0x188(0x1)
		unsigned char UnknownData03_6[0x7]; // 0x189(0x7) UNKNOWN PROPERTY
		TArray<FBranchingPointMarker> BranchingPointMarkers; // 0x190(0x10)
		TArray<int32_t> BranchingPointStateNotifyIndices; // 0x1A0(0x10)
		FTimeStretchCurve TimeStretchCurve; // 0x1B0(0x28)
		FName TimeStretchCurveName; // 0x1D8(0x4)
		unsigned char UnknownData04_7[0x4]; // 0x1DC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimMontage");
			return ret;
		}

		bool IsValidSectionName(FName InSectionName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F21CC(relative to base address)
		bool IsValidAdditiveSlot(FName& SlotNodeName); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F2134(relative to base address)
		bool IsDynamicMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1D54(relative to base address)
		FName GetSectionName(int32_t SectionIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F1A6C(relative to base address)
		int32_t GetSectionIndex(FName InSectionName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748F6B57C(relative to base address)
		int32_t GetNumSections(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C2B8550(relative to base address)
		FName GetGroupName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0C40(relative to base address)
		UAnimSequenceBase GetFirstAnimReference(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0C20(relative to base address)
		float GetDefaultBlendOutTime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0BE0(relative to base address)
		float GetDefaultBlendInTime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749336438(relative to base address)
		FAlphaBlendArgs GetBlendOutArgs(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F0A18(relative to base address)
		FAlphaBlendArgs GetBlendInArgs(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3F09DC(relative to base address)
		UAnimMontage CreateSlotAnimationAsDynamicMontage_WithBlendSettings(UAnimSequenceBase* Asset, FName SlotNodeName, FMontageBlendSettings& BlendInSettings, FMontageBlendSettings& BlendOutSettings, float InPlayRate, int32_t LoopCount, float InBlendOutTriggerTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C3F0284(relative to base address)
	};


	// Class Engine.AnimNotifyLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimNotifyLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyLibrary");
			return ret;
		}

		bool NotifyStateReachedEnd(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C409D98(relative to base address)
		float GetCurrentAnimationTimeRatio(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C409068(relative to base address)
		float GetCurrentAnimationTime(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C408F58(relative to base address)
		float GetCurrentAnimationNotifyStateTimeRatio(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C408E44(relative to base address)
		float GetCurrentAnimationNotifyStateTime(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C408D30(relative to base address)
	};


	// Class Engine.AnimNotifyMirrorInspectionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimNotifyMirrorInspectionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyMirrorInspectionLibrary");
			return ret;
		}

		bool IsTriggeredByMirroredAnimation(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C40930C(relative to base address)
		UMirrorDataTable GetMirrorDataTable(FAnimNotifyEventReference& EventReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C4091A8(relative to base address)
	};


	// Class Engine.AnimNotifyStateMachineInspectionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimNotifyStateMachineInspectionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyStateMachineInspectionLibrary");
			return ret;
		}

		bool IsTriggeredByStateMachine(FAnimNotifyEventReference& EventReference, UAnimInstance* AnimInstance, FName StateMachineName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C409AD4(relative to base address)
		bool IsTriggeredByStateInStateMachine(FAnimNotifyEventReference& EventReference, UAnimInstance* AnimInstance, FName StateMachineName, FName StateName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C409734(relative to base address)
		bool IsTriggeredByState(FAnimNotifyEventReference& EventReference, UAnimInstance* AnimInstance, FName StateName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C409428(relative to base address)
	};


	// Class Engine.AnimNotifyState_DisableRootMotion
	// Inherited from UAnimNotifyState -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState_DisableRootMotion");
			return ret;
		}
	};


	// Class Engine.AnimNotifyState_TimedParticleEffect
	// Inherited from UAnimNotifyState -> UObject
	// Size: 0x48 (0x78 - 0x30)
	class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState	
	{
	public:
		UParticleSystem* PSTemplate; // 0x30(0x8)
		FName SocketName; // 0x38(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		FVector LocationOffset; // 0x40(0x18)
		FRotator RotationOffset; // 0x58(0x18)
		bool bDestroyAtEnd; // 0x70(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState_TimedParticleEffect");
			return ret;
		}
	};


	// Class Engine.AnimNotifyState_Trail
	// Inherited from UAnimNotifyState -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UAnimNotifyState_Trail : public UAnimNotifyState	
	{
	public:
		UParticleSystem* PSTemplate; // 0x30(0x8)
		FName FirstSocketName; // 0x38(0x4)
		FName SecondSocketName; // 0x3C(0x4)
		TEnumAsByte<ETrailWidthMode> WidthScaleMode; // 0x40(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		FName WidthScaleCurve; // 0x44(0x4)
		bool bRecycleSpawnedSystems : 1; // 0x48:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotifyState_Trail");
			return ret;
		}

		UParticleSystem OverridePSTemplate(USkeletalMeshComponent* MeshComp, UAnimSequenceBase* Animation); // Flags: RequiredAPI|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.AnimNotify_PauseClothingSimulation
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_PauseClothingSimulation : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_PauseClothingSimulation");
			return ret;
		}
	};


	// Class Engine.AnimNotify_PlayParticleEffect
	// Inherited from UAnimNotify -> UObject
	// Size: 0x88 (0xC0 - 0x38)
	class UAnimNotify_PlayParticleEffect : public UAnimNotify	
	{
	public:
		UParticleSystem* PSTemplate; // 0x38(0x8)
		FVector LocationOffset; // 0x40(0x18)
		FRotator RotationOffset; // 0x58(0x18)
		FVector Scale; // 0x70(0x18)
		unsigned char UnknownData00_6[0x28]; // 0x88(0x28) UNKNOWN PROPERTY
		bool Attached : 1; // 0xB0:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0xB1(0x3) UNKNOWN PROPERTY
		FName SocketName; // 0xB4(0x4)
		unsigned char UnknownData02_7[0x8]; // 0xB8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_PlayParticleEffect");
			return ret;
		}
	};


	// Class Engine.AnimNotify_PlaySound
	// Inherited from UAnimNotify -> UObject
	// Size: 0x18 (0x50 - 0x38)
	class UAnimNotify_PlaySound : public UAnimNotify	
	{
	public:
		USoundBase* Sound; // 0x38(0x8)
		float VolumeMultiplier; // 0x40(0x4)
		float PitchMultiplier; // 0x44(0x4)
		bool bFollow : 1; // 0x48:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		FName AttachName; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_PlaySound");
			return ret;
		}
	};


	// Class Engine.AnimNotify_ResetClothingSimulation
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_ResetClothingSimulation : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_ResetClothingSimulation");
			return ret;
		}
	};


	// Class Engine.AnimNotify_ResetDynamics
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_ResetDynamics : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_ResetDynamics");
			return ret;
		}
	};


	// Class Engine.AnimNotify_ResumeClothingSimulation
	// Inherited from UAnimNotify -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UAnimNotify_ResumeClothingSimulation : public UAnimNotify	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimNotify_ResumeClothingSimulation");
			return ret;
		}
	};


	// Class Engine.AnimSequence
	// Inherited from UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x140 (0x1F0 - 0xB0)
	class UAnimSequence : public UAnimSequenceBase	
	{
	public:
		UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xB0(0x8)
		UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xB8(0x8)
		unsigned char UnknownData00_6[0x80]; // 0xC0(0x80) UNKNOWN PROPERTY
		UVariableFrameStrippingSettings* VariableFrameStrippingSettings; // 0x140(0x8)
		TEnumAsByte<EAdditiveAnimationType> AdditiveAnimType; // 0x148(0x1)
		TEnumAsByte<EAdditiveBasePoseType> RefPoseType; // 0x149(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x14A(0x2) UNKNOWN PROPERTY
		int32_t RefFrameIndex; // 0x14C(0x4)
		UAnimSequence* RefPoseSeq; // 0x150(0x8)
		FName RetargetSource; // 0x158(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x15C(0x4) UNKNOWN PROPERTY
		TArray<FTransform> RetargetSourceAssetReferencePose; // 0x160(0x10)
		EAnimInterpolationType Interpolation; // 0x170(0x1)
		bool bEnableRootMotion; // 0x171(0x1)
		TEnumAsByte<ERootMotionRootLock> RootMotionRootLock; // 0x172(0x1)
		bool bForceRootLock; // 0x173(0x1)
		bool bUseNormalizedRootMotionScale; // 0x174(0x1)
		bool bRootMotionSettingsCopiedFromMontage; // 0x175(0x1)
		EStripAnimDataOnDedicatedServerSettings StripAnimDataOnDedicatedServer; // 0x176(0x1)
		unsigned char UnknownData03_6[0x1]; // 0x177(0x1) UNKNOWN PROPERTY
		TArray<FAnimSyncMarker> AuthoredSyncMarkers; // 0x178(0x10)
		unsigned char UnknownData04_6[0x10]; // 0x188(0x10) UNKNOWN PROPERTY
		FPerPlatformFrameRate PlatformTargetFrameRate; // 0x198(0x8)
		TMap<FAnimationAttributeIdentifier, FAttributeCurve> AttributeCurves; // 0x1A0(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSequence");
			return ret;
		}
	};


	// Class Engine.AnimSet
	// Inherited from UObject
	// Size: 0xC0 (0xE8 - 0x28)
	class UAnimSet : public UObject	
	{
	public:
		bool bAnimRotationOnly : 1; // 0x28:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		TArray<FName> TrackBoneNames; // 0x30(0x10)
		TArray<FAnimSetMeshLinkup> LinkupCache; // 0x40(0x10)
		TArray<char> BoneUseAnimTranslation; // 0x50(0x10)
		TArray<char> ForceUseMeshTranslation; // 0x60(0x10)
		TArray<FName> UseTranslationBoneNames; // 0x70(0x10)
		TArray<FName> ForceMeshTranslationBoneNames; // 0x80(0x10)
		FName PreviewSkelMeshName; // 0x90(0x4)
		FName BestRatioSkelMeshName; // 0x94(0x4)
		unsigned char UnknownData01_7[0x50]; // 0x98(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSet");
			return ret;
		}
	};


	// Class Engine.AnimSingleNodeInstance
	// Inherited from UAnimInstance -> UObject
	// Size: 0x18 (0x3D0 - 0x3B8)
	class UAnimSingleNodeInstance : public UAnimInstance	
	{
	public:
		UAnimationAsset* CurrentAsset; // 0x3B8(0x8)
		FDelegateProperty PostEvaluateAnimEvent; // 0x3C0(0xC)
		unsigned char UnknownData00_7[0x4]; // 0x3CC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimSingleNodeInstance");
			return ret;
		}

		void StopAnim(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C417748(relative to base address)
		void SetReverse(bool bInReverse); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C416B90(relative to base address)
		void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4169F8(relative to base address)
		void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4168FC(relative to base address)
		void SetPosition(float InPosition, bool bFireNotifies); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C416834(relative to base address)
		void SetPlayRate(float InPlayRate); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C416734(relative to base address)
		void SetPlaying(bool bIsPlaying); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4167B4(relative to base address)
		void SetMirrorDataTable(UMirrorDataTable* MirrorDataTable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C416680(relative to base address)
		void SetLooping(bool bIsLooping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C416600(relative to base address)
		void SetBlendSpacePosition(FVector& InPosition); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4164EC(relative to base address)
		void SetAnimationAsset(UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4163EC(relative to base address)
		void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4162E0(relative to base address)
		UMirrorDataTable GetMirrorDataTable(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C415FE8(relative to base address)
		float GetLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C415FC0(relative to base address)
		UAnimationAsset GetAnimationAsset(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C415E40(relative to base address)
	};


	// Class Engine.AnimStateMachineTypes
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimStateMachineTypes : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimStateMachineTypes");
			return ret;
		}
	};


	// Class Engine.AnimStreamable
	// Inherited from UAnimSequenceBase -> UAnimationAsset -> UObject
	// Size: 0x48 (0xF8 - 0xB0)
	class UAnimStreamable : public UAnimSequenceBase	
	{
	public:
		int32_t NumberOfKeys; // 0xB0(0x4)
		EAnimInterpolationType Interpolation; // 0xB4(0x1)
		unsigned char UnknownData00_6[0x3]; // 0xB5(0x3) UNKNOWN PROPERTY
		FName RetargetSource; // 0xB8(0x4)
		FFrameRate SamplingFrameRate; // 0xBC(0x8)
		unsigned char UnknownData01_6[0x14]; // 0xC4(0x14) UNKNOWN PROPERTY
		UAnimBoneCompressionSettings* BoneCompressionSettings; // 0xD8(0x8)
		UAnimCurveCompressionSettings* CurveCompressionSettings; // 0xE0(0x8)
		UVariableFrameStrippingSettings* VariableFrameStrippingSettings; // 0xE8(0x8)
		bool bEnableRootMotion; // 0xF0(0x1)
		TEnumAsByte<ERootMotionRootLock> RootMotionRootLock; // 0xF1(0x1)
		bool bForceRootLock; // 0xF2(0x1)
		bool bUseNormalizedRootMotionScale; // 0xF3(0x1)
		unsigned char UnknownData02_7[0x4]; // 0xF4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimStreamable");
			return ret;
		}
	};


	// Class Engine.AssetMappingTable
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAssetMappingTable : public UObject	
	{
	public:
		TArray<FAssetMapping> MappedAssets; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetMappingTable");
			return ret;
		}
	};


	// Class Engine.AnimationAttributeIdentifierExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationAttributeIdentifierExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationAttributeIdentifierExtensions");
			return ret;
		}

		bool IsValid(FAnimationAttributeIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416178(relative to base address)
	};


	// Class Engine.Skeleton
	// Inherited from UObject
	// Size: 0x438 (0x460 - 0x28)
	class USkeleton : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TArray<FBoneNode> BoneTree; // 0x38(0x10)
		unsigned char UnknownData01_6[0x128]; // 0x48(0x128) UNKNOWN PROPERTY
		FGuid VirtualBoneGuid; // 0x170(0x10)
		TArray<FVirtualBone> VirtualBones; // 0x180(0x10)
		TArray<TWeakObjectPtr> CompatibleSkeletons; // 0x190(0x10)
		TArray<USkeletalMeshSocket*> Sockets; // 0x1A0(0x10)
		unsigned char UnknownData02_6[0x50]; // 0x1B0(0x50) UNKNOWN PROPERTY
		FSmartNameContainer SmartNames; // 0x200(0x50)
		unsigned char UnknownData03_6[0x10]; // 0x250(0x10) UNKNOWN PROPERTY
		TArray<UBlendProfile*> BlendProfiles; // 0x260(0x10)
		TArray<FAnimSlotGroup> SlotGroups; // 0x270(0x10)
		unsigned char UnknownData04_6[0x1D0]; // 0x280(0x1D0) UNKNOWN PROPERTY
		TArray<UAssetUserData*> AssetUserData; // 0x450(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Skeleton");
			return ret;
		}

		UBlendProfile GetBlendProfile(FName& InProfileName); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C42CDDC(relative to base address)
		void AddCompatibleSkeletonSoft(TWeakObjectPtr<USkeleton*>& SourceSkeleton); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C42C174(relative to base address)
		void AddCompatibleSkeleton(USkeleton* SourceSkeleton); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42C0F4(relative to base address)
	};


	// Class Engine.BlendProfile
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UBlendProfile : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		USkeleton* OwningSkeleton; // 0x30(0x8)
		TArray<FBlendProfileBoneEntry> ProfileEntries; // 0x38(0x10)
		EBlendProfileMode Mode; // 0x48(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x49(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlendProfile");
			return ret;
		}
	};


	// Class Engine.BoneMaskFilter
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UBoneMaskFilter : public UObject	
	{
	public:
		TArray<FInputBlendPose> BlendPoses; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoneMaskFilter");
			return ret;
		}
	};


	// Class Engine.CachedAnimDataLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCachedAnimDataLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CachedAnimDataLibrary");
			return ret;
		}

		bool StateMachine_IsStateRelevant(UAnimInstance* InAnimInstance, FCachedAnimStateData& CachedAnimStateData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C41765C(relative to base address)
		bool StateMachine_IsRelevant(UAnimInstance* InAnimInstance, FCachedAnimStateArray& CachedAnimStateArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C417560(relative to base address)
		bool StateMachine_IsFullWeight(UAnimInstance* InAnimInstance, FCachedAnimStateArray& CachedAnimStateArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C417464(relative to base address)
		float StateMachine_GetTotalWeight(UAnimInstance* InAnimInstance, FCachedAnimStateArray& CachedAnimStateArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C417364(relative to base address)
		float StateMachine_GetRelevantAnimTimeRemainingFraction(UAnimInstance* InAnimInstance, FCachedAnimRelevancyData& CachedAnimRelevancyData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C417278(relative to base address)
		float StateMachine_GetRelevantAnimTimeRemaining(UAnimInstance* InAnimInstance, FCachedAnimRelevancyData& CachedAnimRelevancyData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C41718C(relative to base address)
		float StateMachine_GetRelevantAnimTime(UAnimInstance* InAnimInstance, FCachedAnimRelevancyData& CachedAnimRelevancyData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C4170A0(relative to base address)
		float StateMachine_GetLocalWeight(UAnimInstance* InAnimInstance, FCachedAnimStateData& CachedAnimStateData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416FB4(relative to base address)
		float StateMachine_GetGlobalWeight(UAnimInstance* InAnimInstance, FCachedAnimStateData& CachedAnimStateData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416EC8(relative to base address)
		float StateMachine_GetCrossfadeDuration(UAnimInstance* InAnimInstance, FCachedAnimTransitionData& CachedAnimTransitionData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416DD8(relative to base address)
		float StateMachine_GetAssetPlayerTimeRatio(UAnimInstance* InAnimInstance, FCachedAnimAssetPlayerData& CachedAnimAssetPlayerData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416CF4(relative to base address)
		float StateMachine_GetAssetPlayerTime(UAnimInstance* InAnimInstance, FCachedAnimAssetPlayerData& CachedAnimAssetPlayerData); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416C10(relative to base address)
	};


	// Class Engine.AnimationCurveIdentifierExtensions
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAnimationCurveIdentifierExtensions : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimationCurveIdentifierExtensions");
			return ret;
		}

		bool IsValid(FAnimationCurveIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416244(relative to base address)
		ERawCurveTrackTypes GetType(FAnimationCurveIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C4160E8(relative to base address)
		FName GetName(FAnimationCurveIdentifier& Identifier); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C416058(relative to base address)
	};


	// Class Engine.CurveSourceInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCurveSourceInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveSourceInterface");
			return ret;
		}

		float GetCurveValue(FName CurveName); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C415E94(relative to base address)
		void GetCurves(TArray<FNamedCurveValue>& OutValues); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|BlueprintEvent|Const, Memory Exec: 0x7FF74C415F24(relative to base address)
		FName GetBindingName(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C415E68(relative to base address)
	};


	// Class Engine.DataTable
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class UDataTable : public UObject	
	{
	public:
		UScriptStruct* RowStruct; // 0x28(0x8)
		unsigned char UnknownData00_6[0x50]; // 0x30(0x50) UNKNOWN PROPERTY
		bool bStripFromClientBuilds : 1; // 0x80:0(0x1)
		bool bIgnoreExtraFields : 1; // 0x80:1(0x1)
		bool bIgnoreMissingFields : 1; // 0x80:2(0x1)
		bool bPreserveExistingValues : 1; // 0x80:3(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x81(0x7) UNKNOWN PROPERTY
		FString ImportKeyField; // 0x88(0x10)
		unsigned char UnknownData02_7[0x18]; // 0x98(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataTable");
			return ret;
		}
	};


	// Class Engine.MirrorDataTable
	// Inherited from UDataTable -> UObject
	// Size: 0x140 (0x1F0 - 0xB0)
	class UMirrorDataTable : public UDataTable	
	{
	public:
		TArray<FMirrorFindReplaceExpression> MirrorFindReplaceExpressions; // 0xB0(0x10)
		TEnumAsByte<EAxis> MirrorAxis; // 0xC0(0x1)
		bool bMirrorRootMotion; // 0xC1(0x1)
		unsigned char UnknownData00_6[0x6]; // 0xC2(0x6) UNKNOWN PROPERTY
		USkeleton* Skeleton; // 0xC8(0x8)
		unsigned char UnknownData01_7[0x120]; // 0xD0(0x120) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MirrorDataTable");
			return ret;
		}
	};


	// Class Engine.NodeMappingContainer
	// Inherited from UObject
	// Size: 0x130 (0x158 - 0x28)
	class UNodeMappingContainer : public UObject	
	{
	public:
		TMap<FName, FNodeItem> SourceItems; // 0x28(0x50)
		TMap<FName, FNodeItem> TargetItems; // 0x78(0x50)
		TMap<FName, FName> SourceToTarget; // 0xC8(0x50)
		TWeakObjectPtr<UObject*> SourceAsset; // 0x118(0x20)
		TWeakObjectPtr<UObject*> TargetAsset; // 0x138(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NodeMappingContainer");
			return ret;
		}
	};


	// Class Engine.NodeMappingProviderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNodeMappingProviderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NodeMappingProviderInterface");
			return ret;
		}
	};


	// Class Engine.PoseAsset
	// Inherited from UAnimationAsset -> UObject
	// Size: 0x90 (0x110 - 0x80)
	class UPoseAsset : public UAnimationAsset	
	{
	public:
		FPoseDataContainer PoseContainer; // 0x80(0x70)
		bool bAdditivePose; // 0xF0(0x1)
		unsigned char UnknownData00_6[0x3]; // 0xF1(0x3) UNKNOWN PROPERTY
		int32_t BasePoseIndex; // 0xF4(0x4)
		FName RetargetSource; // 0xF8(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xFC(0x4) UNKNOWN PROPERTY
		TArray<FTransform> RetargetSourceAssetReferencePose; // 0x100(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseAsset");
			return ret;
		}
	};


	// Class Engine.PreviewCollectionInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPreviewCollectionInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PreviewCollectionInterface");
			return ret;
		}
	};


	// Class Engine.PreviewMeshCollection
	// Inherited from UDataAsset -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UPreviewMeshCollection : public UDataAsset	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x30(0x8) UNKNOWN PROPERTY
		USkeleton* Skeleton; // 0x38(0x8)
		TArray<FPreviewMeshCollectionEntry> SkeletalMeshes; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PreviewMeshCollection");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshActor
	// Inherited from AActor -> UObject
	// Size: 0x80 (0x310 - 0x290)
	class ASkeletalMeshActor : public AActor	
	{
	public:
		bool bShouldDoAnimNotifies : 1; // 0x290:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x291(0x7) UNKNOWN PROPERTY
		USkeletalMeshComponent* SkeletalMeshComponent; // 0x298(0x8)
		USkeletalMesh* ReplicatedMesh; // 0x2A0(0x8)
		UPhysicsAsset* ReplicatedPhysAsset; // 0x2A8(0x8)
		UMaterialInterface* ReplicatedMaterial0; // 0x2B0(0x8)
		UMaterialInterface* ReplicatedMaterial1; // 0x2B8(0x8)
		unsigned char UnknownData01_7[0x50]; // 0x2C0(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshActor");
			return ret;
		}

		void OnRep_ReplicatedPhysAsset(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747E38E94(relative to base address)
		void OnRep_ReplicatedMesh(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF748BA0AC4(relative to base address)
		void OnRep_ReplicatedMaterial1(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF749066BE0(relative to base address)
		void OnRep_ReplicatedMaterial0(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C388930(relative to base address)
	};


	// Class Engine.AnimBlueprint
	// Inherited from UBlueprint -> UBlueprintCore -> UObject
	// Size: 0x28 (0xD0 - 0xA8)
	class UAnimBlueprint : public UBlueprint	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0xA8(0x8) UNKNOWN PROPERTY
		USkeleton* TargetSkeleton; // 0xB0(0x8)
		TArray<FAnimGroupInfo> Groups; // 0xB8(0x10)
		bool bIsTemplate; // 0xC8(0x1)
		bool bUseMultiThreadedAnimationUpdate; // 0xC9(0x1)
		bool bWarnAboutBlueprintUsage; // 0xCA(0x1)
		bool bEnableLinkedAnimLayerInstanceSharing : 1; // 0xCB:0(0x1)
		unsigned char UnknownData01_7[0x4]; // 0xCC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AnimBlueprint");
			return ret;
		}
	};


	// Class Engine.AssetManager
	// Inherited from UObject
	// Size: 0x4A8 (0x4D0 - 0x28)
	class UAssetManager : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x308]; // 0x28(0x308) UNKNOWN PROPERTY
		TArray<UObject*> ObjectReferenceList; // 0x330(0x10)
		bool bIsGlobalAsyncScanEnvironment; // 0x340(0x1)
		bool bShouldGuessTypeAndName; // 0x341(0x1)
		bool bShouldUseSynchronousLoad; // 0x342(0x1)
		bool bIsLoadingFromPakFiles; // 0x343(0x1)
		bool bShouldAcquireMissingChunksOnLoad; // 0x344(0x1)
		bool bOnlyCookProductionAssets; // 0x345(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x346(0x2) UNKNOWN PROPERTY
		int32_t NumBulkScanRequests; // 0x348(0x4)
		bool bIsPrimaryAssetDirectoryCurrent; // 0x34C(0x1)
		bool bIsManagementDatabaseCurrent; // 0x34D(0x1)
		bool bUpdateManagementDatabaseAfterScan; // 0x34E(0x1)
		bool bIncludeOnlyOnDiskAssets; // 0x34F(0x1)
		bool bHasCompletedInitialScan; // 0x350(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x351(0x3) UNKNOWN PROPERTY
		int32_t NumberOfSpawnedNotifications; // 0x354(0x4)
		unsigned char UnknownData03_7[0x178]; // 0x358(0x178) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetManager");
			return ret;
		}
	};


	// Class Engine.AsyncActionLoadPrimaryAssetBase
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x48 (0x78 - 0x30)
	class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase	
	{
	public:
		unsigned char UnknownData00_1[0x48]; // 0x30(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetBase");
			return ret;
		}
	};


	// Class Engine.AsyncActionLoadPrimaryAsset
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAsset");
			return ret;
		}

		UAsyncActionLoadPrimaryAsset AsyncLoadPrimaryAsset(UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C42C694(relative to base address)
	};


	// Class Engine.AsyncActionLoadPrimaryAssetClass
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetClass");
			return ret;
		}

		UAsyncActionLoadPrimaryAssetClass AsyncLoadPrimaryAssetClass(UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C42C878(relative to base address)
	};


	// Class Engine.AsyncActionLoadPrimaryAssetList
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetList");
			return ret;
		}

		UAsyncActionLoadPrimaryAssetList AsyncLoadPrimaryAssetList(UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C42CC1C(relative to base address)
	};


	// Class Engine.AsyncActionLoadPrimaryAssetClassList
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionLoadPrimaryAssetClassList");
			return ret;
		}

		UAsyncActionLoadPrimaryAssetClassList AsyncLoadPrimaryAssetClassList(UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C42CA5C(relative to base address)
	};


	// Class Engine.AsyncActionChangePrimaryAssetBundles
	// Inherited from UAsyncActionLoadPrimaryAssetBase -> UBlueprintAsyncActionBase -> UObject
	// Size: 0x10 (0x88 - 0x78)
	class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionChangePrimaryAssetBundles");
			return ret;
		}

		UAsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForPrimaryAssetList(UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C42C420(relative to base address)
		UAsyncActionChangePrimaryAssetBundles AsyncChangeBundleStateForMatchingPrimaryAssets(UObject* WorldContextObject, TArray<FName>& NewBundles, TArray<FName>& OldBundles); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C42C220(relative to base address)
	};


	// Class Engine.AtmosphericFog
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AAtmosphericFog : public AInfo	
	{
	public:
		UAtmosphericFogComponent* AtmosphericFogComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AtmosphericFog");
			return ret;
		}
	};


	// Class Engine.SkyAtmosphereComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x100 (0x320 - 0x220)
	class USkyAtmosphereComponent : public USceneComponent	
	{
	public:
		ESkyAtmosphereTransformMode TransformMode; // 0x220(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x221(0x3) UNKNOWN PROPERTY
		float BottomRadius; // 0x224(0x4)
		FColor GroundAlbedo; // 0x228(0x4)
		float AtmosphereHeight; // 0x22C(0x4)
		float MultiScatteringFactor; // 0x230(0x4)
		float TraceSampleCountScale; // 0x234(0x4)
		float RayleighScatteringScale; // 0x238(0x4)
		FLinearColor RayleighScattering; // 0x23C(0x10)
		float RayleighExponentialDistribution; // 0x24C(0x4)
		float MieScatteringScale; // 0x250(0x4)
		FLinearColor MieScattering; // 0x254(0x10)
		float MieAbsorptionScale; // 0x264(0x4)
		FLinearColor MieAbsorption; // 0x268(0x10)
		float MieAnisotropy; // 0x278(0x4)
		float MieExponentialDistribution; // 0x27C(0x4)
		float OtherAbsorptionScale; // 0x280(0x4)
		FLinearColor OtherAbsorption; // 0x284(0x10)
		FTentDistribution OtherTentDistribution; // 0x294(0xC)
		FLinearColor SkyLuminanceFactor; // 0x2A0(0x10)
		float AerialPespectiveViewDistanceScale; // 0x2B0(0x4)
		float HeightFogContribution; // 0x2B4(0x4)
		float TransmittanceMinLightElevationAngle; // 0x2B8(0x4)
		float AerialPerspectiveStartDepth; // 0x2BC(0x4)
		bool bHoldout : 1; // 0x2C0:0(0x1)
		bool bRenderInMainPass : 1; // 0x2C0:1(0x1)
		unsigned char UnknownData01_5[0x47]; // 0x2C1(0x47) UNKNOWN PROPERTY
		FGuid bStaticLightingBuiltGUID; // 0x308(0x10)
		unsigned char UnknownData02_7[0x8]; // 0x318(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyAtmosphereComponent");
			return ret;
		}

		void SetSkyLuminanceFactor(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523DE8(relative to base address)
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523684(relative to base address)
		void SetRayleighScatteringScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C52336C(relative to base address)
		void SetRayleighScattering(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C52346C(relative to base address)
		void SetRayleighExponentialDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5233EC(relative to base address)
		void SetOtherAbsorptionScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C52326C(relative to base address)
		void SetOtherAbsorption(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523154(relative to base address)
		void SetMultiScatteringFactor(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5230D4(relative to base address)
		void SetMieScatteringScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523054(relative to base address)
		void SetMieScattering(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C522F3C(relative to base address)
		void SetMieExponentialDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522EBC(relative to base address)
		void SetMieAnisotropy(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522E3C(relative to base address)
		void SetMieAbsorptionScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522DBC(relative to base address)
		void SetMieAbsorption(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C522CA4(relative to base address)
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522628(relative to base address)
		void SetHeightFogContribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5225A8(relative to base address)
		void SetGroundAlbedo(FColor& NewValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5223E8(relative to base address)
		void SetBottomRadius(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520F20(relative to base address)
		void SetAtmosphereHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520EA0(relative to base address)
		void SetAerialPespectiveViewDistanceScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520E20(relative to base address)
		void ResetAtmosphereLightDirectionOverride(int32_t AtmosphereLightIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520D68(relative to base address)
		void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C520B1C(relative to base address)
		bool IsAtmosphereLightDirectionOverriden(int32_t AtmosphereLightIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5206A4(relative to base address)
		FVector GetOverridenAtmosphereLightDirection(int32_t AtmosphereLightIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51DFD4(relative to base address)
		float GetAtmosphericLightToMatchIlluminanceOnGround(FVector LightDirection, float IlluminanceOnGround); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51C91C(relative to base address)
		FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(UDirectionalLightComponent* DirectionalLight); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51C828(relative to base address)
	};


	// Class Engine.AtmosphericFogComponent
	// Inherited from USkyAtmosphereComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x320 - 0x320)
	class UAtmosphericFogComponent : public USkyAtmosphereComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AtmosphericFogComponent");
			return ret;
		}

		void SetSunMultiplier(float NewSunMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetStartDistance(float NewStartDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CFC4(relative to base address)
		void SetFogMultiplier(float NewFogMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetDistanceScale(float NewDistanceScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetDistanceOffset(float NewDistanceOffset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetDensityOffset(float NewDensityOffset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetDensityMultiplier(float NewDensityMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetDefaultLightColor(FLinearColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C42CEDC(relative to base address)
		void SetDefaultBrightness(float NewBrightness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void SetAltitudeScale(float NewAltitudeScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C42CE74(relative to base address)
		void DisableSunDisk(bool NewSunDisk); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		void DisableGroundScattering(bool NewGroundScattering); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
	};


	// Class Engine.AudioBus
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UAudioBus : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		EAudioBusChannels AudioBusChannels; // 0x30(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioBus");
			return ret;
		}
	};


	// Class Engine.AudioSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x168 (0x198 - 0x30)
	class UAudioSettings : public UDeveloperSettings	
	{
	public:
		FSoftObjectPath DefaultSoundClassName; // 0x30(0x18)
		FSoftObjectPath DefaultMediaSoundClassName; // 0x48(0x18)
		FSoftObjectPath DefaultSoundConcurrencyName; // 0x60(0x18)
		FSoftObjectPath DefaultBaseSoundMix; // 0x78(0x18)
		FSoftObjectPath VoiPSoundClass; // 0x90(0x18)
		FSoftObjectPath MasterSubmix; // 0xA8(0x18)
		FSoftObjectPath BaseDefaultSubmix; // 0xC0(0x18)
		FSoftObjectPath ReverbSubmix; // 0xD8(0x18)
		FSoftObjectPath EQSubmix; // 0xF0(0x18)
		EVoiceSampleRate VoiPSampleRate; // 0x108(0x4)
		EDefaultAudioCompressionType DefaultAudioCompressionType; // 0x10C(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		int32_t DefaultCompressionQuality; // 0x110(0x4)
		float DefaultReverbSendLevel; // 0x114(0x4)
		int32_t MaximumConcurrentStreams; // 0x118(0x4)
		float GlobalMinPitchScale; // 0x11C(0x4)
		float GlobalMaxPitchScale; // 0x120(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x124(0x4) UNKNOWN PROPERTY
		TArray<FAudioQualitySettings> QualityLevels; // 0x128(0x10)
		bool bAllowPlayWhenSilent : 1; // 0x138:0(0x1)
		bool bDisableMasterEQ : 1; // 0x138:1(0x1)
		bool bAllowCenterChannel3DPanning : 1; // 0x138:2(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		uint32_t NumStoppingSources; // 0x13C(0x4)
		EPanningMethod PanningMethod; // 0x140(0x1)
		EMonoChannelUpmixMethod MonoChannelUpmixMethod; // 0x141(0x1)
		unsigned char UnknownData03_6[0x6]; // 0x142(0x6) UNKNOWN PROPERTY
		FString DialogueFilenameFormat; // 0x148(0x10)
		TArray<FSoundDebugEntry> DebugSounds; // 0x158(0x10)
		TArray<FDefaultAudioBusSettings> DefaultAudioBuses; // 0x168(0x10)
		USoundClass* DefaultSoundClass; // 0x178(0x8)
		USoundClass* DefaultMediaSoundClass; // 0x180(0x8)
		USoundConcurrency* DefaultSoundConcurrency; // 0x188(0x8)
		unsigned char UnknownData04_7[0x8]; // 0x190(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioSettings");
			return ret;
		}
	};


	// Class Engine.AudioVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x70 (0x338 - 0x2C8)
	class AAudioVolume : public AVolume	
	{
	public:
		float Priority; // 0x2C8(0x4)
		bool bEnabled : 1; // 0x2CC:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2CD(0x3) UNKNOWN PROPERTY
		FReverbSettings Settings; // 0x2D0(0x20)
		FInteriorSettings AmbientZoneSettings; // 0x2F0(0x24)
		unsigned char UnknownData01_6[0x4]; // 0x314(0x4) UNKNOWN PROPERTY
		TArray<FAudioVolumeSubmixSendSettings> SubmixSendSettings; // 0x318(0x10)
		TArray<FAudioVolumeSubmixOverrideSettings> SubmixOverrideSettings; // 0x328(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioVolume");
			return ret;
		}

		void SetSubmixSendSettings(TArray<FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4619B8(relative to base address)
		void SetSubmixOverrideSettings(TArray<FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4618E0(relative to base address)
		void SetReverbSettings(FReverbSettings& NewReverbSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C461500(relative to base address)
		void SetPriority(float NewPriority); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461404(relative to base address)
		void SetInteriorSettings(FInteriorSettings& NewInteriorSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C460F68(relative to base address)
		void SetEnabled(bool bNewEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C460A80(relative to base address)
		void OnRep_bEnabled(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74917265C(relative to base address)
	};


	// Class Engine.ActorSoundParameterInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UActorSoundParameterInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorSoundParameterInterface");
			return ret;
		}

		void GetActorSoundParams(TArray<FAudioParameter>& Params); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|BlueprintEvent|Const, Memory Exec: 0x7FF74858C260(relative to base address)
	};


	// Class Engine.AudioWidgetSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UAudioWidgetSubsystem : public UEngineSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioWidgetSubsystem");
			return ret;
		}
	};


	// Class Engine.SoundParameterControllerInterface
	// Inherited from UAudioParameterControllerInterface -> UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USoundParameterControllerInterface : public UAudioParameterControllerInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundParameterControllerInterface");
			return ret;
		}
	};


	// Class Engine.AudioParameterConversionStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAudioParameterConversionStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioParameterConversionStatics");
			return ret;
		}

		FAudioParameter StringToAudioParameter(FName Name, FString String); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C46372C(relative to base address)
		FAudioParameter StringArrayToAudioParameter(FName Name, TArray<FString> Strings); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C463594(relative to base address)
		FAudioParameter ObjectToAudioParameter(FName Name, UObject* Object); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45D12C(relative to base address)
		FAudioParameter ObjectArrayToAudioParameter(FName Name, TArray<UObject*> Objects); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45D010(relative to base address)
		FAudioParameter IntegerToAudioParameter(FName Name, int32_t Integer); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45C4F4(relative to base address)
		FAudioParameter IntegerArrayToAudioParameter(FName Name, TArray<int32_t> Integers); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45C3B8(relative to base address)
		FAudioParameter FloatToAudioParameter(FName Name, float float); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45BAAC(relative to base address)
		FAudioParameter FloatArrayToAudioParameter(FName Name, TArray<float> Floats); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45B970(relative to base address)
		FAudioParameter BooleanToAudioParameter(FName Name, bool bool); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C459408(relative to base address)
		FAudioParameter BooleanArrayToAudioParameter(FName Name, TArray<bool> Bools); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C4592D0(relative to base address)
	};


	// Class Engine.BlockingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ABlockingVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlockingVolume");
			return ret;
		}
	};


	// Class Engine.BlueprintInstancedStructLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintInstancedStructLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintInstancedStructLibrary");
			return ret;
		}

		void SetInstancedStructValue(FInstancedStruct& InstancedStruct, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C460C28(relative to base address)
		void Reset(FInstancedStruct& InstancedStruct, UScriptStruct* StructType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45D5E8(relative to base address)
		bool NotEqual_InstancedStruct(FInstancedStruct& A, FInstancedStruct& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45CF04(relative to base address)
		FInstancedStruct MakeInstancedStruct(int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45CC24(relative to base address)
		bool IsValid_InstancedStruct(FInstancedStruct& InstancedStruct); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45C8D4(relative to base address)
		EStructUtilsResult IsInstancedStructValid(FInstancedStruct& InstancedStruct); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45C614(relative to base address)
		void GetInstancedStructValue(EStructUtilsResult& ExecResult, FInstancedStruct& InstancedStruct, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45BE44(relative to base address)
		bool EqualEqual_InstancedStruct(FInstancedStruct& A, FInstancedStruct& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45B868(relative to base address)
	};


	// Class Engine.BlueprintMapLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintMapLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintMapLibrary");
			return ret;
		}

		void SetMapPropertyByName(UObject* Object, FName PropertyName, TMap<int32_t, int32_t>& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C461020(relative to base address)
		void Map_Values(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Values); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74A04DA58(relative to base address)
		bool Map_Remove(TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748F07B58(relative to base address)
		int32_t Map_Length(TMap<int32_t, int32_t>& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74A04D8FC(relative to base address)
		void Map_Keys(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Keys); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74A04D69C(relative to base address)
		bool Map_IsNotEmpty(TMap<int32_t, int32_t>& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74928CCC0(relative to base address)
		bool Map_IsEmpty(TMap<int32_t, int32_t>& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45CDC0(relative to base address)
		bool Map_Find(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74A04D1AC(relative to base address)
		bool Map_Contains(TMap<int32_t, int32_t>& TargetMap, int32_t& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749975F5C(relative to base address)
		void Map_Clear(TMap<int32_t, int32_t>& TargetMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748E684A0(relative to base address)
		void Map_Add(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748B478E8(relative to base address)
	};


	// Class Engine.BlueprintSetLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintSetLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintSetLibrary");
			return ret;
		}

		void SetSetPropertyByName(UObject* Object, FName PropertyName, TSet<int32_t>& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4616FC(relative to base address)
		void Set_Union(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C462E4C(relative to base address)
		void Set_ToArray(TSet<int32_t>& A, TArray<int32_t>& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7479179B8(relative to base address)
		void Set_RemoveItems(TSet<int32_t>& TargetSet, TArray<int32_t>& Items); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C462C28(relative to base address)
		bool Set_Remove(TSet<int32_t>& TargetSet, int32_t& Item); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C462950(relative to base address)
		int32_t Set_Length(TSet<int32_t>& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749B292FC(relative to base address)
		bool Set_IsNotEmpty(TSet<int32_t>& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C462814(relative to base address)
		bool Set_IsEmpty(TSet<int32_t>& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749B230E0(relative to base address)
		void Set_Intersection(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4624E8(relative to base address)
		void Set_Difference(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4621BC(relative to base address)
		bool Set_Contains(TSet<int32_t>& TargetSet, int32_t& ItemToFind); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C461EE0(relative to base address)
		void Set_Clear(TSet<int32_t>& TargetSet); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74791767C(relative to base address)
		void Set_AddItems(TSet<int32_t>& TargetSet, TArray<int32_t>& NewItems); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7479183BC(relative to base address)
		void Set_Add(TSet<int32_t>& TargetSet, int32_t& NewItem); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C461C18(relative to base address)
	};


	// Class Engine.BookMark
	// Inherited from UBookmarkBase -> UObject
	// Size: 0x40 (0x68 - 0x28)
	class UBookMark : public UBookmarkBase	
	{
	public:
		FVector Location; // 0x28(0x18)
		FRotator Rotation; // 0x40(0x18)
		TArray<FString> HiddenLevels; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BookMark");
			return ret;
		}
	};


	// Class Engine.BrushBuilder
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UBrushBuilder : public UObject	
	{
	public:
		FString BitmapFilename; // 0x28(0x10)
		FString ToolTip; // 0x38(0x10)
		bool NotifyBadParams : 1; // 0x48:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x49(0x7) UNKNOWN PROPERTY
		TArray<FVector> Vertices; // 0x50(0x10)
		TArray<FBuilderPoly> Polys; // 0x60(0x10)
		FName Layer; // 0x70(0x4)
		bool MergeCoplanars : 1; // 0x74:0(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x75(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BrushBuilder");
			return ret;
		}
	};


	// Class Engine.BrushShape
	// Inherited from ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ABrushShape : public ABrush	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BrushShape");
			return ret;
		}
	};


	// Class Engine.CameraBlockingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ACameraBlockingVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraBlockingVolume");
			return ret;
		}
	};


	// Class Engine.CameraProxyMeshComponent
	// Inherited from UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x590 - 0x590)
	class UCameraProxyMeshComponent : public UStaticMeshComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraProxyMeshComponent");
			return ret;
		}
	};


	// Class Engine.CameraLensEffectInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCameraLensEffectInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraLensEffectInterface");
			return ret;
		}

		UFXSystemComponent GetPrimaryParticleComponent(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C190(relative to base address)
		TArray GetParticleComponents(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C14C(relative to base address)
	};


	// Class Engine.CameraLensEffectInterfaceClassSupportLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCameraLensEffectInterfaceClassSupportLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraLensEffectInterfaceClassSupportLibrary");
			return ret;
		}

		void SetInterfaceClass(UClass* Class, FCameraLensInterfaceClassSupport& Var, EInterfaceValidResult& Result); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C460E2C(relative to base address)
		void IsInterfaceValid(TScriptInterface<Class>& CameraLens, EInterfaceValidResult& Result); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45C7A4(relative to base address)
		void IsInterfaceClassValid(FCameraLensInterfaceClassSupport& CameraLens, EInterfaceValidResult& Result); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C45C6B8(relative to base address)
		UClass GetInterfaceClass(FCameraLensInterfaceClassSupport& CameraLens); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45C0B4(relative to base address)
	};


	// Class Engine.CameraModifier
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UCameraModifier : public UObject	
	{
	public:
		bool bDebug : 1; // 0x28:0(0x1)
		bool bExclusive : 1; // 0x28:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		char Priority; // 0x2C(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		APlayerCameraManager* CameraOwner; // 0x30(0x8)
		float AlphaInTime; // 0x38(0x4)
		float AlphaOutTime; // 0x3C(0x4)
		float Alpha; // 0x40(0x4)
		unsigned char UnknownData02_7[0x4]; // 0x44(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraModifier");
			return ret;
		}

		void OnCameraOwnerDestroyed(AActor* InOwner); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF7492C97A0(relative to base address)
		bool IsPendingDisable(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C864(relative to base address)
		bool IsDisabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A036C(relative to base address)
		AActor GetViewTarget(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C358(relative to base address)
		void EnableModifier(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C45B850(relative to base address)
		void DisableModifier(bool bImmediate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C45B7CC(relative to base address)
		void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // Flags: RequiredAPI|BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.CameraModifier_CameraShake
	// Inherited from UCameraModifier -> UObject
	// Size: 0x68 (0xB0 - 0x48)
	class UCameraModifier_CameraShake : public UCameraModifier	
	{
	public:
		TArray<FActiveCameraShakeInfo> ActiveShakes; // 0x48(0x10)
		TMap<UClass*, FPooledCameraShakes> ExpiredPooledShakesMap; // 0x58(0x50)
		float SplitScreenShakeScale; // 0xA8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0xAC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraModifier_CameraShake");
			return ret;
		}
	};


	// Class Engine.CameraShakeBase
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class UCameraShakeBase : public UObject	
	{
	public:
		bool bSingleInstance; // 0x28(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float ShakeScale; // 0x2C(0x4)
		UCameraShakePattern* RootShakePattern; // 0x30(0x8)
		APlayerCameraManager* CameraManager; // 0x38(0x8)
		unsigned char UnknownData01_7[0x98]; // 0x40(0x98) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakeBase");
			return ret;
		}

		void SetRootShakePattern(UCameraShakePattern* InPattern); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4615A0(relative to base address)
		UCameraShakePattern GetRootShakePattern(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749B40500(relative to base address)
	};


	// Class Engine.CameraShakePattern
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCameraShakePattern : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakePattern");
			return ret;
		}
	};


	// Class Engine.CameraShakeSourceActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ACameraShakeSourceActor : public AActor	
	{
	public:
		UCameraShakeSourceComponent* CameraShakeSourceComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakeSourceActor");
			return ret;
		}
	};


	// Class Engine.CameraShakeSourceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x20 (0x240 - 0x220)
	class UCameraShakeSourceComponent : public USceneComponent	
	{
	public:
		ECameraShakeAttenuation Attenuation; // 0x220(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x221(0x3) UNKNOWN PROPERTY
		float InnerAttenuationRadius; // 0x224(0x4)
		float OuterAttenuationRadius; // 0x228(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x22C(0x4) UNKNOWN PROPERTY
		UClass* CameraShake; // 0x230(0x8)
		bool bAutoStart; // 0x238(0x1)
		unsigned char UnknownData02_7[0x7]; // 0x239(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CameraShakeSourceComponent");
			return ret;
		}

		void StopAllCameraShakesOfType(UClass* InCameraShake, bool bImmediately); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C463424(relative to base address)
		void StopAllCameraShakes(bool bImmediately); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4633A4(relative to base address)
		void StartCameraShake(UClass* InCameraShake, float Scale, ECameraShakePlaySpace Playspace, FRotator UserPlaySpaceRot); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C46318C(relative to base address)
		void Start(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C463178(relative to base address)
		float GetAttenuationFactor(FVector& Location); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45BBBC(relative to base address)
	};


	// Class Engine.TextureRenderTarget
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x138 - 0x130)
	class UTextureRenderTarget : public UTexture	
	{
	public:
		float TargetGamma; // 0x130(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x134(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTarget");
			return ret;
		}
	};


	// Class Engine.TextureRenderTarget2D
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x28 (0x160 - 0x138)
	class UTextureRenderTarget2D : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		int32_t SizeY; // 0x13C(0x4)
		FLinearColor ClearColor; // 0x140(0x10)
		TEnumAsByte<TextureAddress> AddressX; // 0x150(0x1)
		TEnumAsByte<TextureAddress> AddressY; // 0x151(0x1)
		bool bForceLinearGamma : 1; // 0x152:0(0x1)
		unsigned char UnknownBit00 : 1; // 0x152:1(0x1) UNKNOWN PROPERTY
		bool bHDR : 1; // 0x152:2(0x1)
		bool bGPUSharedFlag : 1; // 0x152:3(0x1)
		TEnumAsByte<ETextureRenderTargetFormat> RenderTargetFormat; // 0x153(0x1)
		bool bAutoGenerateMips : 1; // 0x154:0(0x1)
		TEnumAsByte<TextureFilter> MipsSamplerFilter; // 0x155(0x1)
		TEnumAsByte<TextureAddress> MipsAddressU; // 0x156(0x1)
		TEnumAsByte<TextureAddress> MipsAddressV; // 0x157(0x1)
		TEnumAsByte<EPixelFormat> OverrideFormat; // 0x158(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x159(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTarget2D");
			return ret;
		}
	};


	// Class Engine.CanvasRenderTarget2D
	// Inherited from UTextureRenderTarget2D -> UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x180 - 0x160)
	class UCanvasRenderTarget2D : public UTextureRenderTarget2D	
	{
	public:
		FMulticastInlineDelegate OnCanvasRenderTargetUpdate; // 0x160(0x10)
		TWeakObjectPtr<UWorld*> World; // 0x170(0x8)
		ETextureRenderTargetSampleCount SampleCount; // 0x178(0x1)
		bool bShouldClearRenderTargetOnReceiveUpdate; // 0x179(0x1)
		unsigned char UnknownData00_7[0x6]; // 0x17A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CanvasRenderTarget2D");
			return ret;
		}

		void UpdateResource(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747A5CDF4(relative to base address)
		void SetSampleCount(ETextureRenderTargetSampleCount InSampleCount); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461634(relative to base address)
		void ReceiveUpdate(UCanvas* Canvas, int32_t Width, int32_t Height); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void GetSize(int32_t& Width, int32_t& Height); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C45C1E0(relative to base address)
		ETextureRenderTargetSampleCount GetSampleCount(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C1B8(relative to base address)
		UCanvasRenderTarget2D CreateCanvasRenderTarget2D(UObject* WorldContextObject, UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C45B588(relative to base address)
	};


	// Class Engine.Character
	// Inherited from APawn -> AActor -> UObject
	// Size: 0x310 (0x620 - 0x310)
	class ACharacter : public APawn	
	{
	public:
		USkeletalMeshComponent* Mesh; // 0x310(0x8)
		UCharacterMovementComponent* CharacterMovement; // 0x318(0x8)
		UCapsuleComponent* CapsuleComponent; // 0x320(0x8)
		FBasedMovementInfo BasedMovement; // 0x328(0x40)
		FBasedMovementInfo ReplicatedBasedMovement; // 0x368(0x40)
		float ReplicatedServerLastTransformUpdateTimeStamp; // 0x3A8(0x4)
		float ReplayLastTransformUpdateTimeStamp; // 0x3AC(0x4)
		FQuat BaseRotationOffset; // 0x3B0(0x20)
		FVector BaseTranslationOffset; // 0x3D0(0x18)
		FVector_NetQuantizeNormal ReplicatedGravityDirection; // 0x3E8(0x18)
		unsigned char UnknownData00_6[0x18]; // 0x400(0x18) UNKNOWN PROPERTY
		float AnimRootMotionTranslationScale; // 0x418(0x4)
		float CrouchedEyeHeight; // 0x41C(0x4)
		bool bInBaseReplication : 1; // 0x420:0(0x1)
		bool bIsCrouched : 1; // 0x420:1(0x1)
		bool bProxyIsJumpForceApplied : 1; // 0x420:2(0x1)
		bool bPressedJump : 1; // 0x420:3(0x1)
		bool bClientUpdating : 1; // 0x420:4(0x1)
		bool bClientWasFalling : 1; // 0x420:5(0x1)
		bool bClientResimulateRootMotion : 1; // 0x420:6(0x1)
		bool bClientResimulateRootMotionSources : 1; // 0x420:7(0x1)
		bool bSimGravityDisabled : 1; // 0x421:0(0x1)
		bool bClientCheckEncroachmentOnNetUpdate : 1; // 0x421:1(0x1)
		bool bServerMoveIgnoreRootMotion : 1; // 0x421:2(0x1)
		bool bWasJumping : 1; // 0x421:3(0x1)
		char ReplicatedMovementMode; // 0x422(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x423(0x1) UNKNOWN PROPERTY
		float JumpKeyHoldTime; // 0x424(0x4)
		float JumpForceTimeRemaining; // 0x428(0x4)
		float ProxyJumpForceStartedTime; // 0x42C(0x4)
		float JumpMaxHoldTime; // 0x430(0x4)
		int32_t JumpMaxCount; // 0x434(0x4)
		int32_t JumpCurrentCount; // 0x438(0x4)
		int32_t JumpCurrentCountPreJump; // 0x43C(0x4)
		unsigned char UnknownData02_6[0x8]; // 0x440(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnReachedJumpApex; // 0x448(0x10)
		FMulticastInlineDelegate LandedDelegate; // 0x458(0x10)
		FMulticastInlineDelegate MovementModeChangedDelegate; // 0x468(0x10)
		FMulticastInlineDelegate OnCharacterMovementUpdated; // 0x478(0x10)
		FRootMotionSourceGroup SavedRootMotion; // 0x488(0x48)
		FRootMotionMovementParams ClientRootMotionParams; // 0x4D0(0x70)
		TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves; // 0x540(0x10)
		FRepRootMotionMontage RepRootMotion; // 0x550(0xC8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Character");
			return ret;
		}

		void UnCrouch(bool bClientSimulation); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C463840(relative to base address)
		void StopJumping(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7487A5948(relative to base address)
		void StopAnimMontage(UAnimMontage* AnimMontage); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C463510(relative to base address)
		void ServerMovePacked(FCharacterServerMovePackedBits PackedBits); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C460588(relative to base address)
		void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C460328(relative to base address)
		void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C45FD8C(relative to base address)
		void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C45F470(relative to base address)
		void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C45E9C0(relative to base address)
		void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C45DF10(relative to base address)
		void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C45D7E4(relative to base address)
		void RootMotionDebugClientPrintOnScreen(FString InString); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C45D750(relative to base address)
		float PlayAnimMontage(UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7494E48C4(relative to base address)
		void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF74C45D23C(relative to base address)
		void OnRep_RootMotion(); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74881EFD0(relative to base address)
		void OnRep_ReplicatedBasedMovement(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF747A8F09C(relative to base address)
		void OnRep_ReplayLastTransformUpdateTimeStamp(); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF7485F6818(relative to base address)
		void OnRep_IsCrouched(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74759A628(relative to base address)
		void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Flags: RequiredAPI|Event|Public|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnLanded(FHitResult& Hit); // Flags: RequiredAPI|Event|Public|HasOutParms|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnJumped(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C45D224(relative to base address)
		void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C45C978(relative to base address)
		void K2_UpdateCustomMovement(float DeltaTime); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, char PrevCustomMode, char NewCustomMode); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void Jump(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7491831D8(relative to base address)
		bool IsPlayingRootMotion(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C8B0(relative to base address)
		bool IsPlayingNetworkedRootMotionMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C88C(relative to base address)
		bool IsJumpProvidingForce(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748840868(relative to base address)
		bool HasAnyRootMotion(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C380(relative to base address)
		UAnimMontage GetCurrentMontage(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45BE20(relative to base address)
		FVector GetBaseTranslationOffset(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45BCE8(relative to base address)
		FRotator GetBaseRotationOffsetRotator(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45BCB0(relative to base address)
		float GetAnimRootMotionTranslationScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45BBA4(relative to base address)
		void Crouch(bool bClientSimulation); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C45B748(relative to base address)
		void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C45B058(relative to base address)
		void ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient|NetValidate, Memory Exec: 0x7FF74C45AEFC(relative to base address)
		void ClientCheatWalk(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C45AEE4(relative to base address)
		void ClientCheatGhost(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF74C45AECC(relative to base address)
		void ClientCheatFly(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetClient, Memory Exec: 0x7FF748BF2F74(relative to base address)
		void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C45A500(relative to base address)
		void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C459E04(relative to base address)
		void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // Flags: RequiredAPI|Net|Native|Event|Public|HasDefaults|NetClient, Memory Exec: 0x7FF74C459808(relative to base address)
		void ClientAckGoodMove(float Timestamp); // Flags: RequiredAPI|Net|Native|Event|Public|NetClient, Memory Exec: 0x7FF74C459780(relative to base address)
		bool CanJumpInternal(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent|Const, Memory Exec: 0x7FF74C38F934(relative to base address)
		bool CanJump(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45975C(relative to base address)
		bool CanCrouch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C459734(relative to base address)
		void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C459528(relative to base address)
	};


	// Class Engine.CheatManager
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class UCheatManager : public UObject	
	{
	public:
		ADebugCameraController* DebugCameraControllerRef; // 0x28(0x8)
		UClass* DebugCameraControllerClass; // 0x30(0x8)
		unsigned char UnknownData00_6[0x40]; // 0x38(0x40) UNKNOWN PROPERTY
		TArray<UCheatManagerExtension*> CheatManagerExtensions; // 0x78(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CheatManager");
			return ret;
		}

		void Walk(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747E989FC(relative to base address)
		void ViewSelf(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4418(relative to base address)
		void ViewPlayer(FString S); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4384(relative to base address)
		void ViewClass(UClass* DesiredClass); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A42E8(relative to base address)
		void ViewActor(FName ActorName); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4264(relative to base address)
		void UpdateSafeArea(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4248(relative to base address)
		void ToggleServerStatReplicatorUpdateStatNet(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4200(relative to base address)
		void ToggleServerStatReplicatorClientOverwrite(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A41B8(relative to base address)
		void ToggleDebugCamera(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A41A0(relative to base address)
		void ToggleAILogging(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4188(relative to base address)
		void TestCollisionDistance(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4170(relative to base address)
		void Teleport(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7494B08D8(relative to base address)
		void Summon(FString ClassName); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A40DC(relative to base address)
		void StreamLevelOut(FName PackageName); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A4058(relative to base address)
		void StreamLevelIn(FName PackageName); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A3FD4(relative to base address)
		void SpawnServerStatReplicator(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A3F24(relative to base address)
		void Slomo(float NewTimeDilation); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3EA0(relative to base address)
		void SetWorldOrigin(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A3E8C(relative to base address)
		void SetMouseSensitivityToDefault(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A3840(relative to base address)
		void ServerToggleAILogging(); // Flags: RequiredAPI|Net|NetReliableNative|Event|Public|NetServer|NetValidate, Memory Exec: 0x7FF74C4A2D9C(relative to base address)
		void ReceiveInitCheatManager(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveEndPlay(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlayersOnly(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A2AB4(relative to base address)
		void OnPlayerEndPlayed(AActor* Player, TEnumAsByte<EEndPlayReason> EndPlayReason); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C4A2494(relative to base address)
		void OnlyLoadLevel(FName PackageName); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A2558(relative to base address)
		void LogLoc(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A247C(relative to base address)
		void InvertMouse(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A2448(relative to base address)
		void God(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A23E8(relative to base address)
		void Ghost(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74802F76C(relative to base address)
		APlayerController GetPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4A23A8(relative to base address)
		void FreezeFrame(float Delay); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A1EEC(relative to base address)
		void Fly(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A1ED4(relative to base address)
		void FlushLog(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1EBC(relative to base address)
		void EnableDebugCamera(); // Flags: RequiredAPI|Native|Protected|BlueprintCallable, Memory Exec: 0x7FF74C4A1EA4(relative to base address)
		void DumpVoiceMutingState(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1E8C(relative to base address)
		void DumpPartyState(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1E74(relative to base address)
		void DumpOnlineSessionState(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1E5C(relative to base address)
		void DumpChatState(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1E44(relative to base address)
		void DisableDebugCamera(); // Flags: RequiredAPI|Native|Protected|BlueprintCallable, Memory Exec: 0x7FF74C4A1E2C(relative to base address)
		void DestroyTarget(); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A1E14(relative to base address)
		void DestroyServerStatReplicator(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1E00(relative to base address)
		void DestroyPawns(UClass* aClass); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1D64(relative to base address)
		void DestroyAllPawnsExceptTarget(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1D4C(relative to base address)
		void DestroyAll(UClass* aClass); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1CB0(relative to base address)
		void DebugCapsuleSweepSize(float HalfHeight, float Radius); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1BE8(relative to base address)
		void DebugCapsuleSweepPawn(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1BD0(relative to base address)
		void DebugCapsuleSweepComplex(bool bTraceComplex); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1B4C(relative to base address)
		void DebugCapsuleSweepClear(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1B34(relative to base address)
		void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1AB0(relative to base address)
		void DebugCapsuleSweepCapture(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1A98(relative to base address)
		void DebugCapsuleSweep(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1A80(relative to base address)
		void DamageTarget(float DamageAmount); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A19FC(relative to base address)
		void CheatScript(FString ScriptName); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1960(relative to base address)
		void ChangeSize(float F); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74BCA249C(relative to base address)
		void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString); // Flags: RequiredAPI|Exec|Native|Public|HasOutParms|HasDefaults, Memory Exec: 0x7FF74C4A169C(relative to base address)
		void BugItGo(float X, float Y, float Z, float pitch, float Yaw, float Roll); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A14C8(relative to base address)
		void BugIt(FString ScreenShotDescription); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C4A1434(relative to base address)
	};


	// Class Engine.CheatManagerExtension
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCheatManagerExtension : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CheatManagerExtension");
			return ret;
		}

		void RemovedFromCheatManager(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C349660(relative to base address)
		APlayerController GetPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4A23C8(relative to base address)
		void AddedToCheatManager(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF746F37328(relative to base address)
	};


	// Class Engine.CollisionProfile
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x138 (0x168 - 0x30)
	class UCollisionProfile : public UDeveloperSettings	
	{
	public:
		TArray<FCollisionResponseTemplate> Profiles; // 0x30(0x10)
		TArray<FCustomChannelSetup> DefaultChannelResponses; // 0x40(0x10)
		TArray<FCustomProfile> EditProfiles; // 0x50(0x10)
		TArray<FRedirector> ProfileRedirects; // 0x60(0x10)
		TArray<FRedirector> CollisionChannelRedirects; // 0x70(0x10)
		unsigned char UnknownData00_7[0xE8]; // 0x80(0xE8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CollisionProfile");
			return ret;
		}
	};


	// Class Engine.Commandlet
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UCommandlet : public UObject	
	{
	public:
		FString HelpDescription; // 0x28(0x10)
		FString HelpUsage; // 0x38(0x10)
		FString HelpWebLink; // 0x48(0x10)
		TArray<FString> HelpParamNames; // 0x58(0x10)
		TArray<FString> HelpParamDescriptions; // 0x68(0x10)
		bool IsServer : 1; // 0x78:0(0x1)
		bool IsClient : 1; // 0x78:1(0x1)
		bool IsEditor : 1; // 0x78:2(0x1)
		bool LogToConsole : 1; // 0x78:3(0x1)
		bool ShowErrorCount : 1; // 0x78:4(0x1)
		bool ShowProgress : 1; // 0x78:5(0x1)
		bool FastExit : 1; // 0x78:6(0x1)
		bool UseCommandletResultAsExitCode : 1; // 0x78:7(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x79(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Commandlet");
			return ret;
		}
	};


	// Class Engine.PluginCommandlet
	// Inherited from UCommandlet -> UObject
	// Size: 0x20 (0xA0 - 0x80)
	class UPluginCommandlet : public UCommandlet	
	{
	public:
		unsigned char UnknownData00_1[0x20]; // 0x80(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PluginCommandlet");
			return ret;
		}
	};


	// Class Engine.SmokeTestCommandlet
	// Inherited from UCommandlet -> UObject
	// Size: 0x0 (0x80 - 0x80)
	class USmokeTestCommandlet : public UCommandlet	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SmokeTestCommandlet");
			return ret;
		}
	};


	// Class Engine.ComponentDelegateBinding
	// Inherited from UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UComponentDelegateBinding : public UDynamicBlueprintBinding	
	{
	public:
		TArray<FBlueprintComponentDelegateBinding> ComponentDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentDelegateBinding");
			return ret;
		}
	};


	// Class Engine.ApplicationLifecycleComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x90 (0x130 - 0xA0)
	class UApplicationLifecycleComponent : public UActorComponent	
	{
	public:
		FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0xA0(0x10)
		FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0xB0(0x10)
		FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0xC0(0x10)
		FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0xD0(0x10)
		FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0xE0(0x10)
		FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0xF0(0x10)
		FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x100(0x10)
		FMulticastInlineDelegate OnTemperatureChangeDelegate; // 0x110(0x10)
		FMulticastInlineDelegate OnLowPowerModeDelegate; // 0x120(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ApplicationLifecycleComponent");
			return ret;
		}

		void OnTemperatureChangeDelegate__DelegateSignature(ETemperatureSeverityType Severity); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnLowPowerModeDelegate__DelegateSignature(bool bInLowPowerMode); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ApplicationStartupArgumentsDelegate__DelegateSignature(TArray<FString>& StartupArguments); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ApplicationLifetimeDelegate__DelegateSignature(); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.ArrowComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UArrowComponent : public UPrimitiveComponent	
	{
	public:
		FColor ArrowColor; // 0x4C8(0x4)
		float ArrowSize; // 0x4CC(0x4)
		float ArrowLength; // 0x4D0(0x4)
		float ScreenSize; // 0x4D4(0x4)
		bool bIsScreenSizeScaled : 1; // 0x4D8:0(0x1)
		bool bTreatAsASprite : 1; // 0x4D8:1(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x4D9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ArrowComponent");
			return ret;
		}

		void SetUseInEditorScaling(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		void SetTreatAsASprite(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3CB0(relative to base address)
		void SetScreenSize(float NewScreenSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3958(relative to base address)
		void SetIsScreenSizeScaled(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3430(relative to base address)
		void SetArrowSize(float NewSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A309C(relative to base address)
		void SetArrowLength(float NewLength); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3014(relative to base address)
		void SetArrowFColor(FColor NewColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4A2F04(relative to base address)
		void SetArrowColor(FLinearColor NewColor); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4A2DE8(relative to base address)
	};


	// Class Engine.InitialActiveSoundParams
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInitialActiveSoundParams : public UObject	
	{
	public:
		TArray<FAudioParameter> AudioParams; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InitialActiveSoundParams");
			return ret;
		}
	};


	// Class Engine.AudioComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x9F0 (0xC10 - 0x220)
	class UAudioComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData00_3[0x1B8]; // 0x220(0x1B8) UNKNOWN PROPERTY
		USoundBase* Sound; // 0x3D8(0x8)
		TArray<FAudioParameter> DefaultParameters; // 0x3E0(0x10)
		TArray<FAudioParameter> InstanceParameters; // 0x3F0(0x10)
		USoundClass* SoundClassOverride; // 0x400(0x8)
		bool bAutoDestroy : 1; // 0x408:0(0x1)
		bool bStopWhenOwnerDestroyed : 1; // 0x408:1(0x1)
		bool bShouldRemainActiveIfDropped : 1; // 0x408:2(0x1)
		bool bAllowSpatialization : 1; // 0x408:3(0x1)
		bool bOverrideAttenuation : 1; // 0x408:4(0x1)
		bool bOverrideSubtitlePriority : 1; // 0x408:5(0x1)
		bool bIsUISound : 1; // 0x408:6(0x1)
		bool bEnableLowPassFilter : 1; // 0x408:7(0x1)
		bool bOverridePriority : 1; // 0x409:0(0x1)
		bool bSuppressSubtitles : 1; // 0x409:1(0x1)
		bool bCanPlayMultipleInstances : 1; // 0x409:2(0x1)
		bool bDisableParameterUpdatesWhilePlaying : 1; // 0x409:3(0x1)
		unsigned char UnknownBit01 : 1; // 0x409:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit02 : 1; // 0x409:5(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit03 : 1; // 0x409:6(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit04 : 1; // 0x409:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit05 : 1; // 0x40A:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit06 : 1; // 0x40A:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x40A:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit08 : 1; // 0x40A:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit09 : 1; // 0x40A:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit10 : 1; // 0x40A:5(0x1) UNKNOWN PROPERTY
		bool bAutoManageAttachment : 1; // 0x40A:6(0x1)
		unsigned char UnknownData11_5[0x5]; // 0x40B(0x5) UNKNOWN PROPERTY
		FName AudioComponentUserID; // 0x410(0x4)
		float PitchModulationMin; // 0x414(0x4)
		float PitchModulationMax; // 0x418(0x4)
		float VolumeModulationMin; // 0x41C(0x4)
		float VolumeModulationMax; // 0x420(0x4)
		float VolumeMultiplier; // 0x424(0x4)
		int32_t EnvelopeFollowerAttackTime; // 0x428(0x4)
		int32_t EnvelopeFollowerReleaseTime; // 0x42C(0x4)
		float Priority; // 0x430(0x4)
		float SubtitlePriority; // 0x434(0x4)
		USoundEffectSourcePresetChain* SourceEffectChain; // 0x438(0x8)
		float PitchMultiplier; // 0x440(0x4)
		float LowPassFilterFrequency; // 0x444(0x4)
		unsigned char UnknownData12_6[0x8]; // 0x448(0x8) UNKNOWN PROPERTY
		USoundAttenuation* AttenuationSettings; // 0x450(0x8)
		FSoundAttenuationSettings AttenuationOverrides; // 0x458(0x3D0)
		USoundConcurrency* ConcurrencySettings; // 0x828(0x8)
		TSet<USoundConcurrency*> ConcurrencySet; // 0x830(0x50)
		unsigned char UnknownData13_6[0xC]; // 0x880(0xC) UNKNOWN PROPERTY
		EAttachmentRule AutoAttachLocationRule; // 0x88C(0x1)
		EAttachmentRule AutoAttachRotationRule; // 0x88D(0x1)
		EAttachmentRule AutoAttachScaleRule; // 0x88E(0x1)
		unsigned char UnknownData14_6[0x1]; // 0x88F(0x1) UNKNOWN PROPERTY
		FSoundModulationDefaultRoutingSettings ModulationRouting; // 0x890(0x168)
		FMulticastInlineDelegate OnAudioPlayStateChanged; // 0x9F8(0x10)
		unsigned char UnknownData15_6[0x18]; // 0xA08(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioVirtualizationChanged; // 0xA20(0x10)
		unsigned char UnknownData16_6[0x18]; // 0xA30(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioFinished; // 0xA48(0x10)
		unsigned char UnknownData17_6[0x18]; // 0xA58(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioPlaybackPercent; // 0xA70(0x10)
		unsigned char UnknownData18_6[0x18]; // 0xA80(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioSingleEnvelopeValue; // 0xA98(0x10)
		unsigned char UnknownData19_6[0x18]; // 0xAA8(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnAudioMultiEnvelopeValue; // 0xAC0(0x10)
		unsigned char UnknownData20_6[0x18]; // 0xAD0(0x18) UNKNOWN PROPERTY
		FDelegateProperty OnQueueSubtitles; // 0xAE8(0xC)
		unsigned char UnknownData21_6[0x14]; // 0xAF4(0x14) UNKNOWN PROPERTY
		TWeakObjectPtr<USceneComponent*> AutoAttachParent; // 0xB08(0x8)
		FName AutoAttachSocketName; // 0xB10(0x4)
		unsigned char UnknownData22_7[0xF4]; // 0xB14(0xF4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioComponent");
			return ret;
		}

		void StopDelayed(float DelayTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3F54(relative to base address)
		void Stop(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7493A7BDC(relative to base address)
		void SetWaveParameter(FName InName, USoundWave* InWave); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3DC4(relative to base address)
		void SetVolumeMultiplier(float NewVolumeMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B33124(relative to base address)
		void SetUISound(bool bInUISound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3D44(relative to base address)
		void SetSubmixSend(USoundSubmixBase* Submix, float SendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3B68(relative to base address)
		void SetSourceBusSendPreEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3AA4(relative to base address)
		void SetSourceBusSendPostEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A39E0(relative to base address)
		void SetSound(USoundBase* NewSound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747DA2CA8(relative to base address)
		void SetPitchMultiplier(float NewPitchMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748F2F29C(relative to base address)
		void SetPaused(bool bPause); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A38D8(relative to base address)
		void SetOverrideAttenuation(bool bInOverrideAttenuation); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749574B28(relative to base address)
		void SetOutputToBusOnly(bool bInOutputToBusOnly); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3858(relative to base address)
		void SetModulationRouting(TSet<USoundModulatorBase*>& Modulators, EModulationDestination Destination, EModulationRouting RoutingMethod); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A35C0(relative to base address)
		void SetLowPassFilterFrequency(float InLowPassFilterFrequency); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3540(relative to base address)
		void SetLowPassFilterEnabled(bool InLowPassFilterEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A34C0(relative to base address)
		void SetIntParameter(FName InName, int32_t inInt); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF748E53F50(relative to base address)
		void SetFloatParameter(FName InName, float InFloat); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF748D7E28C(relative to base address)
		void SetBoolParameter(FName InName, bool InBool); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF747CE214C(relative to base address)
		void SetAudioBusSendPreEffect(UAudioBus* AudioBus, float AudioBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A31E8(relative to base address)
		void SetAudioBusSendPostEffect(UAudioBus* AudioBus, float AudioBusSendLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A3124(relative to base address)
		void SetAttenuationSettings(USoundAttenuation* InAttenuationSettings); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7496C45FC(relative to base address)
		void SetAttenuationOverrides(FSoundAttenuationSettings& InAttenuationOverrides); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7483F7F40(relative to base address)
		void RemoveModulationRouting(TSet<USoundModulatorBase*>& Modulators, EModulationDestination Destination); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A2ACC(relative to base address)
		void PlayQuantized(UObject* WorldContextObject, UQuartzClockHandle* InClockHandle, FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A25DC(relative to base address)
		void Play(float StartTime); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747DA221C(relative to base address)
		bool IsVirtualized(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74954C5BC(relative to base address)
		bool IsPlaying(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748C3BF8C(relative to base address)
		bool HasCookedFFTData(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4A2424(relative to base address)
		bool HasCookedAmplitudeEnvelopeData(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4A2400(relative to base address)
		EAudioComponentPlayState GetPlayState(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4A2384(relative to base address)
		TSet GetModulators(EModulationDestination Destination); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C4A22B8(relative to base address)
		bool GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A2210(relative to base address)
		bool GetCookedFFTData(TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A20B4(relative to base address)
		bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A2008(relative to base address)
		bool GetCookedEnvelopeData(float& OutEnvelopeData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A1F70(relative to base address)
		void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7478E5AD8(relative to base address)
		void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747DA2A08(relative to base address)
		bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7483F7E84(relative to base address)
		void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B22CC0(relative to base address)
		void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7483F7DD8(relative to base address)
		void AddModulationRouting(TSet<USoundModulatorBase*>& Modulators, EModulationDestination Destination, bool bShouldModulationRoutingBeUpdated); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4A10A8(relative to base address)
	};


	// Class Engine.BillboardComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UBillboardComponent : public UPrimitiveComponent	
	{
	public:
		UTexture2D* Sprite; // 0x4C8(0x8)
		bool bIsScreenSizeScaled : 1; // 0x4D0:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x4D1(0x3) UNKNOWN PROPERTY
		float ScreenSize; // 0x4D4(0x4)
		float U; // 0x4D8(0x4)
		float UL; // 0x4DC(0x4)
		float V; // 0x4E0(0x4)
		float VL; // 0x4E4(0x4)
		float OpacityMaskRefVal; // 0x4E8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4EC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BillboardComponent");
			return ret;
		}

		void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6FCC(relative to base address)
		void SetSpriteAndUV(UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6E4C(relative to base address)
		void SetSprite(UTexture2D* NewSprite); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C3495DC(relative to base address)
		void SetOpacityMaskRefVal(float RefVal); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6DC4(relative to base address)
	};


	// Class Engine.BoundsCopyComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0xA0 (0x140 - 0xA0)
	class UBoundsCopyComponent : public UActorComponent	
	{
	public:
		TWeakObjectPtr<AActor*> BoundsSourceActor; // 0xA0(0x20)
		bool bUseCollidingComponentsForSourceBounds; // 0xC0(0x1)
		bool bKeepOwnBoundsScale; // 0xC1(0x1)
		bool bUseCollidingComponentsForOwnBounds; // 0xC2(0x1)
		unsigned char UnknownData00_6[0xD]; // 0xC3(0xD) UNKNOWN PROPERTY
		FTransform PostTransform; // 0xD0(0x60)
		bool bCopyXBounds; // 0x130(0x1)
		bool bCopyYBounds; // 0x131(0x1)
		bool bCopyZBounds; // 0x132(0x1)
		unsigned char UnknownData01_7[0xD]; // 0x133(0xD) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoundsCopyComponent");
			return ret;
		}
	};


	// Class Engine.ShapeComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UShapeComponent : public UPrimitiveComponent	
	{
	public:
		UBodySetup* ShapeBodySetup; // 0x4C8(0x8)
		FColor ShapeColor; // 0x4D0(0x4)
		bool bDrawOnlyIfSelected : 1; // 0x4D4:0(0x1)
		bool bShouldCollideWhenPlacing : 1; // 0x4D4:1(0x1)
		bool bDynamicObstacle : 1; // 0x4D4:2(0x1)
		bool bUseSystemDefaultObstacleAreaClass : 1; // 0x4D4:3(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x4D5(0x3) UNKNOWN PROPERTY
		UClass* AreaClassOverride; // 0x4D8(0x8)
		float LineThickness; // 0x4E0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4E4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ShapeComponent");
			return ret;
		}

		void SetLineThickness(float Thickness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5030B0(relative to base address)
	};


	// Class Engine.BoxComponent
	// Inherited from UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x500 - 0x4E8)
	class UBoxComponent : public UShapeComponent	
	{
	public:
		FVector BoxExtent; // 0x4E8(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BoxComponent");
			return ret;
		}

		void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747CA0C20(relative to base address)
		FVector GetUnscaledBoxExtent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5DD0(relative to base address)
		FVector GetScaledBoxExtent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749268CF8(relative to base address)
	};


	// Class Engine.BrushComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UBrushComponent : public UPrimitiveComponent	
	{
	public:
		UModel* Brush; // 0x4C8(0x8)
		UBodySetup* BrushBodySetup; // 0x4D0(0x8)
		unsigned char UnknownData00_7[0x8]; // 0x4D8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BrushComponent");
			return ret;
		}
	};


	// Class Engine.CapsuleComponent
	// Inherited from UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x4F0 - 0x4E8)
	class UCapsuleComponent : public UShapeComponent	
	{
	public:
		float CapsuleHalfHeight; // 0x4E8(0x4)
		float CapsuleRadius; // 0x4EC(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CapsuleComponent");
			return ret;
		}

		void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6890(relative to base address)
		void SetCapsuleRadius(float Radius, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748EA0C6C(relative to base address)
		void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749070AEC(relative to base address)
		void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5F10(relative to base address)
		void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5E34(relative to base address)
		float GetUnscaledCapsuleRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749B40518(relative to base address)
		float GetUnscaledCapsuleHalfHeight_WithoutHemisphere(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5E10(relative to base address)
		float GetUnscaledCapsuleHalfHeight(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5DF8(relative to base address)
		float GetShapeScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5D64(relative to base address)
		void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5C14(relative to base address)
		void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5AF0(relative to base address)
		float GetScaledCapsuleRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5AB4(relative to base address)
		float GetScaledCapsuleHalfHeight_WithoutHemisphere(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5A58(relative to base address)
		float GetScaledCapsuleHalfHeight(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5A1C(relative to base address)
	};


	// Class Engine.MovementComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x68 (0x108 - 0xA0)
	class UMovementComponent : public UActorComponent	
	{
	public:
		USceneComponent* UpdatedComponent; // 0xA0(0x8)
		UPrimitiveComponent* UpdatedPrimitive; // 0xA8(0x8)
		unsigned char UnknownData00_6[0x8]; // 0xB0(0x8) UNKNOWN PROPERTY
		FVector Velocity; // 0xB8(0x18)
		FVector PlaneConstraintNormal; // 0xD0(0x18)
		FVector PlaneConstraintOrigin; // 0xE8(0x18)
		bool bUpdateOnlyIfRendered : 1; // 0x100:0(0x1)
		bool bAutoUpdateTickRegistration : 1; // 0x100:1(0x1)
		bool bTickBeforeOwner : 1; // 0x100:2(0x1)
		bool bAutoRegisterUpdatedComponent : 1; // 0x100:3(0x1)
		bool bConstrainToPlane : 1; // 0x100:4(0x1)
		bool bSnapToPlaneAtStart : 1; // 0x100:5(0x1)
		bool bAutoRegisterPhysicsVolumeUpdates : 1; // 0x100:6(0x1)
		bool bComponentShouldUpdatePhysicsVolume : 1; // 0x100:7(0x1)
		unsigned char UnknownData01_5[0x2]; // 0x101(0x2) UNKNOWN PROPERTY
		EPlaneConstraintAxisSetting PlaneConstraintAxisSetting; // 0x103(0x1)
		unsigned char UnknownData02_7[0x4]; // 0x104(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MovementComponent");
			return ret;
		}

		void StopMovementImmediately(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7470D9EB4(relative to base address)
		void SnapUpdatedComponentToPlane(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ED38C(relative to base address)
		void SetUpdatedComponent(USceneComponent* NewUpdatedComponent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748E16628(relative to base address)
		void SetPlaneConstraintOrigin(FVector PlaneOrigin); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EC498(relative to base address)
		void SetPlaneConstraintNormal(FVector PlaneNormal); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EC374(relative to base address)
		void SetPlaneConstraintFromVectors(FVector Forward, FVector Up); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EC168(relative to base address)
		void SetPlaneConstraintEnabled(bool bEnabled); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC0E4(relative to base address)
		void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC060(relative to base address)
		void PhysicsVolumeChanged(APhysicsVolume* NewVolume); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF74C3C4F88(relative to base address)
		bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E86E4(relative to base address)
		bool IsExceedingMaxSpeed(float MaxSpeed); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E84C8(relative to base address)
		FVector GetPlaneConstraintOrigin(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8004(relative to base address)
		FVector GetPlaneConstraintNormal(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7FDC(relative to base address)
		EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7FC4(relative to base address)
		APhysicsVolume GetPhysicsVolume(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7F9C(relative to base address)
		float GetMaxSpeed(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7EFC(relative to base address)
		float GetGravityZ(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7E90(relative to base address)
		FVector ConstrainNormalToPlane(FVector Normal); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7204(relative to base address)
		FVector ConstrainLocationToPlane(FVector Location); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E70B4(relative to base address)
		FVector ConstrainDirectionToPlane(FVector Direction); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E6F64(relative to base address)
	};


	// Class Engine.NavMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0x58 (0x160 - 0x108)
	class UNavMovementComponent : public UMovementComponent	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x108(0x8) UNKNOWN PROPERTY
		float FixedPathBrakingDistance; // 0x110(0x4)
		bool bUpdateNavAgentWithOwnersCollision : 1; // 0x114:0(0x1)
		bool bUseAccelerationForPaths : 1; // 0x114:1(0x1)
		bool bUseFixedBrakingDistanceForPaths : 1; // 0x114:2(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		FNavMovementProperties NavMovementProperties; // 0x118(0x8)
		FNavAgentProperties NavAgentProps; // 0x120(0x30)
		FMovementProperties MovementState; // 0x150(0x1)
		unsigned char UnknownData02_6[0x7]; // 0x151(0x7) UNKNOWN PROPERTY
		UObject* PathFollowingComp; // 0x158(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavMovementComponent");
			return ret;
		}

		bool IsSwimming(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8660(relative to base address)
		bool IsMovingOnGround(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C611C(relative to base address)
		bool IsFlying(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8590(relative to base address)
		bool IsFalling(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8560(relative to base address)
		bool IsCrouching(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8498(relative to base address)
		FVector GetVelocityForNavMovement(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8250(relative to base address)
	};


	// Class Engine.PawnMovementComponent
	// Inherited from UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x168 - 0x160)
	class UPawnMovementComponent : public UNavMovementComponent	
	{
	public:
		APawn* PawnOwner; // 0x160(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PawnMovementComponent");
			return ret;
		}

		void ServerAsyncPhysicsStateAction(UPrimitiveComponent* ActionComponent, FName BoneName, FAsyncPhysicsTimestamp Timestamp, EPhysicsStateAction ActionType, FVector ActionDatas, FVector ActionPosition); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|Private|NetServer|HasDefaults, Memory Exec: 0x7FF74C4E9650(relative to base address)
		void MulticastAsyncPhysicsStateAction(UPrimitiveComponent* ActionComponent, FName BoneName, FAsyncPhysicsTimestamp Timestamp, EPhysicsStateAction ActionType, FVector ActionDatas, FVector ActionPosition); // Flags: Final|RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults, Memory Exec: 0x7FF74C4E8F38(relative to base address)
		bool IsMoveInputIgnored(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8638(relative to base address)
		FVector GetPendingInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7F68(relative to base address)
		APawn GetPawnOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7F50(relative to base address)
		FVector GetLastInputVector(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7491826C0(relative to base address)
		FVector ConsumeInputVector(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E7354(relative to base address)
		void AddInputVector(FVector WorldVector, bool bForce); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E69BC(relative to base address)
	};


	// Class Engine.CharacterMovementComponent
	// Inherited from UPawnMovementComponent -> UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0xE18 (0xF80 - 0x168)
	class UCharacterMovementComponent : public UPawnMovementComponent	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x168(0x10) UNKNOWN PROPERTY
		ACharacter* CharacterOwner; // 0x178(0x8)
		float GravityScale; // 0x180(0x4)
		float MaxStepHeight; // 0x184(0x4)
		float JumpZVelocity; // 0x188(0x4)
		float JumpOffJumpZFactor; // 0x18C(0x4)
		unsigned char UnknownData01_6[0x1C]; // 0x190(0x1C) UNKNOWN PROPERTY
		float WalkableFloorAngle; // 0x1AC(0x4)
		float WalkableFloorZ; // 0x1B0(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x1B4(0x4) UNKNOWN PROPERTY
		FVector GravityDirection; // 0x1B8(0x18)
		FQuat WorldToGravityTransform; // 0x1D0(0x20)
		FQuat GravityToWorldTransform; // 0x1F0(0x20)
		unsigned char UnknownData03_6[0x1]; // 0x210(0x1) UNKNOWN PROPERTY
		TEnumAsByte<EMovementMode> MovementMode; // 0x211(0x1)
		char CustomMovementMode; // 0x212(0x1)
		ENetworkSmoothingMode NetworkSmoothingMode; // 0x213(0x1)
		float GroundFriction; // 0x214(0x4)
		unsigned char UnknownData04_6[0x40]; // 0x218(0x40) UNKNOWN PROPERTY
		float MaxWalkSpeed; // 0x258(0x4)
		float MaxWalkSpeedCrouched; // 0x25C(0x4)
		float MaxSwimSpeed; // 0x260(0x4)
		float MaxFlySpeed; // 0x264(0x4)
		float MaxCustomMovementSpeed; // 0x268(0x4)
		float MaxAcceleration; // 0x26C(0x4)
		float MinAnalogWalkSpeed; // 0x270(0x4)
		float BrakingFrictionFactor; // 0x274(0x4)
		float BrakingFriction; // 0x278(0x4)
		float BrakingSubStepTime; // 0x27C(0x4)
		float BrakingDecelerationWalking; // 0x280(0x4)
		float BrakingDecelerationFalling; // 0x284(0x4)
		float BrakingDecelerationSwimming; // 0x288(0x4)
		float BrakingDecelerationFlying; // 0x28C(0x4)
		float AirControl; // 0x290(0x4)
		float AirControlBoostMultiplier; // 0x294(0x4)
		float AirControlBoostVelocityThreshold; // 0x298(0x4)
		float FallingLateralFriction; // 0x29C(0x4)
		float CrouchedHalfHeight; // 0x2A0(0x4)
		float Buoyancy; // 0x2A4(0x4)
		float PerchRadiusThreshold; // 0x2A8(0x4)
		float PerchAdditionalHeight; // 0x2AC(0x4)
		FRotator RotationRate; // 0x2B0(0x18)
		bool bUseSeparateBrakingFriction : 1; // 0x2C8:0(0x1)
		bool bApplyGravityWhileJumping : 1; // 0x2C8:1(0x1)
		bool bUseControllerDesiredRotation : 1; // 0x2C8:2(0x1)
		bool bOrientRotationToMovement : 1; // 0x2C8:3(0x1)
		bool bSweepWhileNavWalking : 1; // 0x2C8:4(0x1)
		unsigned char UnknownBit05 : 1; // 0x2C8:5(0x1) UNKNOWN PROPERTY
		bool bMovementInProgress : 1; // 0x2C8:6(0x1)
		bool bEnableScopedMovementUpdates : 1; // 0x2C8:7(0x1)
		bool bEnableServerDualMoveScopedMovementUpdates : 1; // 0x2C9:0(0x1)
		bool bForceMaxAccel : 1; // 0x2C9:1(0x1)
		bool bRunPhysicsWithNoController : 1; // 0x2C9:2(0x1)
		bool bForceNextFloorCheck : 1; // 0x2C9:3(0x1)
		bool bShrinkProxyCapsule : 1; // 0x2C9:4(0x1)
		bool bCanWalkOffLedges : 1; // 0x2C9:5(0x1)
		bool bCanWalkOffLedgesWhenCrouching : 1; // 0x2C9:6(0x1)
		unsigned char UnknownBit06 : 1; // 0x2C9:7(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit07 : 1; // 0x2CA:0(0x1) UNKNOWN PROPERTY
		bool bNetworkSkipProxyPredictionOnNetUpdate : 1; // 0x2CA:1(0x1)
		bool bNetworkAlwaysReplicateTransformUpdateTimestamp : 1; // 0x2CA:2(0x1)
		bool bDeferUpdateMoveComponent : 1; // 0x2CA:3(0x1)
		bool bEnablePhysicsInteraction : 1; // 0x2CA:4(0x1)
		bool bTouchForceScaledToMass : 1; // 0x2CA:5(0x1)
		bool bPushForceScaledToMass : 1; // 0x2CA:6(0x1)
		bool bPushForceUsingZOffset : 1; // 0x2CA:7(0x1)
		bool bScalePushForceToVelocity : 1; // 0x2CB:0(0x1)
		unsigned char UnknownData08_5[0x4]; // 0x2CC(0x4) UNKNOWN PROPERTY
		USceneComponent* DeferredUpdatedMoveComponent; // 0x2D0(0x8)
		float MaxOutOfWaterStepHeight; // 0x2D8(0x4)
		float OutofWaterZ; // 0x2DC(0x4)
		float Mass; // 0x2E0(0x4)
		float StandingDownwardForceScale; // 0x2E4(0x4)
		float InitialPushForceFactor; // 0x2E8(0x4)
		float PushForceFactor; // 0x2EC(0x4)
		float PushForcePointZOffsetFactor; // 0x2F0(0x4)
		float TouchForceFactor; // 0x2F4(0x4)
		float MinTouchForce; // 0x2F8(0x4)
		float MaxTouchForce; // 0x2FC(0x4)
		float RepulsionForce; // 0x300(0x4)
		unsigned char UnknownData09_6[0x4]; // 0x304(0x4) UNKNOWN PROPERTY
		FVector Acceleration; // 0x308(0x18)
		FQuat LastUpdateRotation; // 0x320(0x20)
		FVector LastUpdateLocation; // 0x340(0x18)
		FVector LastUpdateVelocity; // 0x358(0x18)
		float ServerLastTransformUpdateTimeStamp; // 0x370(0x4)
		float ServerLastClientGoodMoveAckTime; // 0x374(0x4)
		float ServerLastClientAdjustmentTime; // 0x378(0x4)
		unsigned char UnknownData10_6[0x4]; // 0x37C(0x4) UNKNOWN PROPERTY
		FVector PendingImpulseToApply; // 0x380(0x18)
		FVector PendingForceToApply; // 0x398(0x18)
		float AnalogInputModifier; // 0x3B0(0x4)
		unsigned char UnknownData11_6[0xC]; // 0x3B4(0xC) UNKNOWN PROPERTY
		float MaxSimulationTimeStep; // 0x3C0(0x4)
		int32_t MaxSimulationIterations; // 0x3C4(0x4)
		int32_t MaxJumpApexAttemptsPerSimulation; // 0x3C8(0x4)
		float MaxDepenetrationWithGeometry; // 0x3CC(0x4)
		float MaxDepenetrationWithGeometryAsProxy; // 0x3D0(0x4)
		float MaxDepenetrationWithPawn; // 0x3D4(0x4)
		float MaxDepenetrationWithPawnAsProxy; // 0x3D8(0x4)
		float NetworkSimulatedSmoothLocationTime; // 0x3DC(0x4)
		float NetworkSimulatedSmoothRotationTime; // 0x3E0(0x4)
		float ListenServerNetworkSimulatedSmoothLocationTime; // 0x3E4(0x4)
		float ListenServerNetworkSimulatedSmoothRotationTime; // 0x3E8(0x4)
		float NetProxyShrinkRadius; // 0x3EC(0x4)
		float NetProxyShrinkHalfHeight; // 0x3F0(0x4)
		float NetworkMaxSmoothUpdateDistance; // 0x3F4(0x4)
		float NetworkNoSmoothUpdateDistance; // 0x3F8(0x4)
		float NetworkMinTimeBetweenClientAckGoodMoves; // 0x3FC(0x4)
		float NetworkMinTimeBetweenClientAdjustments; // 0x400(0x4)
		float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x404(0x4)
		float NetworkLargeClientCorrectionDistance; // 0x408(0x4)
		float LedgeCheckThreshold; // 0x40C(0x4)
		float JumpOutOfWaterPitch; // 0x410(0x4)
		unsigned char UnknownData12_6[0x4]; // 0x414(0x4) UNKNOWN PROPERTY
		FFindFloorResult CurrentFloor; // 0x418(0x108)
		TEnumAsByte<EMovementMode> DefaultLandMovementMode; // 0x520(0x1)
		TEnumAsByte<EMovementMode> DefaultWaterMovementMode; // 0x521(0x1)
		TEnumAsByte<EMovementMode> GroundMovementMode; // 0x522(0x1)
		unsigned char UnknownData13_6[0x9]; // 0x523(0x9) UNKNOWN PROPERTY
		bool bMaintainHorizontalGroundVelocity : 1; // 0x52C:0(0x1)
		bool bImpartBaseVelocityX : 1; // 0x52C:1(0x1)
		bool bImpartBaseVelocityY : 1; // 0x52C:2(0x1)
		bool bImpartBaseVelocityZ : 1; // 0x52C:3(0x1)
		bool bImpartBaseAngularVelocity : 1; // 0x52C:4(0x1)
		bool bJustTeleported : 1; // 0x52C:5(0x1)
		bool bNetworkUpdateReceived : 1; // 0x52C:6(0x1)
		bool bNetworkMovementModeChanged : 1; // 0x52C:7(0x1)
		bool bNetworkGravityDirectionChanged : 1; // 0x52D:0(0x1)
		bool bIgnoreClientMovementErrorChecksAndCorrection : 1; // 0x52D:1(0x1)
		bool bServerAcceptClientAuthoritativePosition : 1; // 0x52D:2(0x1)
		bool bNotifyApex : 1; // 0x52D:3(0x1)
		bool bCheatFlying : 1; // 0x52D:4(0x1)
		bool bWantsToCrouch : 1; // 0x52D:5(0x1)
		bool bCrouchMaintainsBaseLocation : 1; // 0x52D:6(0x1)
		bool bIgnoreBaseRotation : 1; // 0x52D:7(0x1)
		bool bFastAttachedMove : 1; // 0x52E:0(0x1)
		bool bAlwaysCheckFloor : 1; // 0x52E:1(0x1)
		bool bUseFlatBaseForFloorChecks : 1; // 0x52E:2(0x1)
		bool bPerformingJumpOff : 1; // 0x52E:3(0x1)
		bool bWantsToLeaveNavWalking : 1; // 0x52E:4(0x1)
		bool bUseRVOAvoidance : 1; // 0x52E:5(0x1)
		bool bRequestedMoveUseAcceleration : 1; // 0x52E:6(0x1)
		unsigned char UnknownBit14 : 1; // 0x52E:7(0x1) UNKNOWN PROPERTY
		bool bWasSimulatingRootMotion : 1; // 0x52F:0(0x1)
		bool bAllowPhysicsRotationDuringAnimRootMotion : 1; // 0x52F:1(0x1)
		float FormerBaseVelocityDecayHalfLife; // 0x530(0x4)
		bool bHasRequestedVelocity : 1; // 0x534:0(0x1)
		bool bRequestedMoveWithMaxSpeed : 1; // 0x534:1(0x1)
		bool bWasAvoidanceUpdated : 1; // 0x534:2(0x1)
		unsigned char UnknownBit15 : 1; // 0x534:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit16 : 1; // 0x534:4(0x1) UNKNOWN PROPERTY
		bool bProjectNavMeshWalking : 1; // 0x534:5(0x1)
		bool bProjectNavMeshOnBothWorldChannels : 1; // 0x534:6(0x1)
		unsigned char UnknownData17_5[0x1F]; // 0x535(0x1F) UNKNOWN PROPERTY
		float AvoidanceConsiderationRadius; // 0x554(0x4)
		FVector RequestedVelocity; // 0x558(0x18)
		FVector LastUpdateRequestedVelocity; // 0x570(0x18)
		int32_t AvoidanceUID; // 0x588(0x4)
		FNavAvoidanceMask AvoidanceGroup; // 0x58C(0x4)
		FNavAvoidanceMask GroupsToAvoid; // 0x590(0x4)
		FNavAvoidanceMask GroupsToIgnore; // 0x594(0x4)
		float AvoidanceWeight; // 0x598(0x4)
		unsigned char UnknownData18_6[0x4]; // 0x59C(0x4) UNKNOWN PROPERTY
		FVector PendingLaunchVelocity; // 0x5A0(0x18)
		unsigned char UnknownData19_6[0x140]; // 0x5B8(0x140) UNKNOWN PROPERTY
		float NavMeshProjectionInterval; // 0x6F8(0x4)
		float NavMeshProjectionTimer; // 0x6FC(0x4)
		float NavMeshProjectionInterpSpeed; // 0x700(0x4)
		float NavMeshProjectionHeightScaleUp; // 0x704(0x4)
		float NavMeshProjectionHeightScaleDown; // 0x708(0x4)
		float NavWalkingFloorDistTolerance; // 0x70C(0x4)
		bool bBasedMovementIgnorePhysicsBase; // 0x710(0x1)
		bool bBaseOnAttachmentRoot; // 0x711(0x1)
		bool bStayBasedInAir; // 0x712(0x1)
		unsigned char UnknownData20_6[0x1]; // 0x713(0x1) UNKNOWN PROPERTY
		float StayBasedInAirHeight; // 0x714(0x4)
		unsigned char UnknownData21_6[0x30]; // 0x718(0x30) UNKNOWN PROPERTY
		FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction; // 0x748(0x30)
		unsigned char UnknownData22_6[0x18]; // 0x778(0x18) UNKNOWN PROPERTY
		float MinTimeBetweenTimeStampResets; // 0x790(0x4)
		unsigned char UnknownData23_6[0x544]; // 0x794(0x544) UNKNOWN PROPERTY
		FRootMotionSourceGroup CurrentRootMotion; // 0xCD8(0x48)
		FRootMotionSourceGroup ServerCorrectionRootMotion; // 0xD20(0x48)
		unsigned char UnknownData24_6[0x168]; // 0xD68(0x168) UNKNOWN PROPERTY
		FRootMotionMovementParams RootMotionParams; // 0xED0(0x70)
		FVector AnimRootMotionVelocity; // 0xF40(0x18)
		unsigned char UnknownData25_7[0x20]; // 0xF58(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CharacterMovementComponent");
			return ret;
		}

		void SetWalkableFloorZ(float InWalkableFloorZ); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C71B0(relative to base address)
		void SetWalkableFloorAngle(float InWalkableFloorAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C7108(relative to base address)
		void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, char NewCustomMode); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6CFC(relative to base address)
		void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4C6C6C(relative to base address)
		void SetGroupsToIgnore(int32_t GroupFlags); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6BE8(relative to base address)
		void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4C6B58(relative to base address)
		void SetGroupsToAvoid(int32_t GroupFlags); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C6AD4(relative to base address)
		void SetGravityDirection(FVector& GravityDir); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4C6A0C(relative to base address)
		void SetCrouchedHalfHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C698C(relative to base address)
		void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4C6800(relative to base address)
		void SetAvoidanceGroup(int32_t GroupFlags); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C677C(relative to base address)
		void SetAvoidanceEnabled(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C66FC(relative to base address)
		float K2_GetWalkableFloorZ(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C66E4(relative to base address)
		float K2_GetWalkableFloorAngle(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C66CC(relative to base address)
		void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C6538(relative to base address)
		void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C614C(relative to base address)
		bool IsWalking(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C611C(relative to base address)
		bool IsWalkable(FHitResult& Hit); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C6030(relative to base address)
		bool HasCustomGravity(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C6018(relative to base address)
		float GetValidPerchRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5FF8(relative to base address)
		float GetPerchRadiusThreshold(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C59F8(relative to base address)
		UPrimitiveComponent GetMovementBase(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7494A9914(relative to base address)
		float GetMinAnalogSpeed(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C59CC(relative to base address)
		float GetMaxJumpHeightWithJumpTime(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C59A0(relative to base address)
		float GetMaxJumpHeight(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5974(relative to base address)
		float GetMaxBrakingDeceleration(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5948(relative to base address)
		float GetMaxAcceleration(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C591C(relative to base address)
		FVector GetLastUpdateVelocity(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748A4F2D8(relative to base address)
		FRotator GetLastUpdateRotation(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C58E4(relative to base address)
		FVector GetLastUpdateRequestedVelocity(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C58BC(relative to base address)
		FVector GetLastUpdateLocation(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5894(relative to base address)
		FVector GetImpartedMovementBaseVelocity(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5858(relative to base address)
		FVector GetGravityDirection(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5830(relative to base address)
		FVector GetCurrentAcceleration(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5808(relative to base address)
		float GetCrouchedHalfHeight(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C57F0(relative to base address)
		ACharacter GetCharacterOwner(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C57D8(relative to base address)
		float GetAnalogInputModifier(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C57C0(relative to base address)
		void DisableMovement(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C57A8(relative to base address)
		void ClearAccumulatedForces(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C5790(relative to base address)
		void CapsuleTouched(UPrimitiveComponent* OverlappedComp, AActor* Other, UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // Flags: RequiredAPI|Native|Protected|HasOutParms, Memory Exec: 0x7FF74C4C5540(relative to base address)
		void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4C53F8(relative to base address)
		void AddImpulse(FVector Impulse, bool bVelocityChange); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4C520C(relative to base address)
		void AddForce(FVector Force); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4C50E8(relative to base address)
	};


	// Class Engine.DecalComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x70 (0x290 - 0x220)
	class UDecalComponent : public USceneComponent	
	{
	public:
		UMaterialInterface* DecalMaterial; // 0x220(0x8)
		int32_t SortOrder; // 0x228(0x4)
		float FadeScreenSize; // 0x22C(0x4)
		float FadeStartDelay; // 0x230(0x4)
		float FadeDuration; // 0x234(0x4)
		float FadeInDuration; // 0x238(0x4)
		float FadeInStartDelay; // 0x23C(0x4)
		bool bDestroyOwnerAfterFade : 1; // 0x240:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x241(0x7) UNKNOWN PROPERTY
		FVector DecalSize; // 0x248(0x18)
		FLinearColor DecalColor; // 0x260(0x10)
		unsigned char UnknownData01_7[0x20]; // 0x270(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DecalComponent");
			return ret;
		}

		void SetSortOrder(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECA9C(relative to base address)
		void SetFadeScreenSize(float NewFadeScreenSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EADF0(relative to base address)
		void SetFadeOut(float StartDelay, float duration, bool DestroyOwnerAfterFade); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7490E95D0(relative to base address)
		void SetFadeIn(float StartDelay, float duration); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7490E9230(relative to base address)
		void SetDecalMaterial(UMaterialInterface* NewDecalMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747D15118(relative to base address)
		void SetDecalColor(FLinearColor& Color); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EA844(relative to base address)
		float GetFadeStartDelay(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7E78(relative to base address)
		float GetFadeInStartDelay(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7E60(relative to base address)
		float GetFadeInDuration(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7E48(relative to base address)
		float GetFadeDuration(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7E30(relative to base address)
		UMaterialInterface GetDecalMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7E18(relative to base address)
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7499D7B70(relative to base address)
	};


	// Class Engine.LightComponent
	// Inherited from ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x118 (0x380 - 0x268)
	class ULightComponent : public ULightComponentBase	
	{
	public:
		float Temperature; // 0x268(0x4)
		float MaxDrawDistance; // 0x26C(0x4)
		float MaxDistanceFadeRange; // 0x270(0x4)
		bool bUseTemperature : 1; // 0x274:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x275(0x3) UNKNOWN PROPERTY
		int32_t ShadowMapChannel; // 0x278(0x4)
		int32_t PreviewShadowMapChannel; // 0x27C(0x4)
		float MinRoughness; // 0x280(0x4)
		float SpecularScale; // 0x284(0x4)
		float DiffuseScale; // 0x288(0x4)
		float ShadowResolutionScale; // 0x28C(0x4)
		float ShadowBias; // 0x290(0x4)
		float ShadowSlopeBias; // 0x294(0x4)
		float ShadowSharpen; // 0x298(0x4)
		float ContactShadowLength; // 0x29C(0x4)
		bool ContactShadowLengthInWS : 1; // 0x2A0:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x2A1(0x3) UNKNOWN PROPERTY
		float ContactShadowCastingIntensity; // 0x2A4(0x4)
		float ContactShadowNonCastingIntensity; // 0x2A8(0x4)
		bool InverseSquaredFalloff : 1; // 0x2AC:0(0x1)
		bool CastTranslucentShadows : 1; // 0x2AC:1(0x1)
		bool bCastShadowsFromCinematicObjectsOnly : 1; // 0x2AC:2(0x1)
		bool bForceCachedShadowsForMovablePrimitives : 1; // 0x2AC:3(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x2AD(0x3) UNKNOWN PROPERTY
		FLightingChannels LightingChannels; // 0x2B0(0x1)
		unsigned char UnknownData03_6[0x7]; // 0x2B1(0x7) UNKNOWN PROPERTY
		UMaterialInterface* LightFunctionMaterial; // 0x2B8(0x8)
		FVector LightFunctionScale; // 0x2C0(0x18)
		UTextureLightProfile* IESTexture; // 0x2D8(0x8)
		bool bUseIESBrightness : 1; // 0x2E0:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x2E1(0x3) UNKNOWN PROPERTY
		float IESBrightnessScale; // 0x2E4(0x4)
		float LightFunctionFadeDistance; // 0x2E8(0x4)
		float DisabledBrightness; // 0x2EC(0x4)
		bool bEnableLightShaftBloom : 1; // 0x2F0:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x2F1(0x3) UNKNOWN PROPERTY
		float BloomScale; // 0x2F4(0x4)
		float BloomThreshold; // 0x2F8(0x4)
		float BloomMaxBrightness; // 0x2FC(0x4)
		FColor BloomTint; // 0x300(0x4)
		bool bUseRayTracedDistanceFieldShadows; // 0x304(0x1)
		unsigned char UnknownData06_6[0x3]; // 0x305(0x3) UNKNOWN PROPERTY
		float RayStartOffsetDepthScale; // 0x308(0x4)
		unsigned char UnknownData07_7[0x6C]; // 0x30C(0x6C) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightComponent");
			return ret;
		}

		void SetVolumetricScatteringIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ED30C(relative to base address)
		void SetUseTemperature(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ED048(relative to base address)
		void SetUseIESBrightness(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECF10(relative to base address)
		void SetTransmission(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECE50(relative to base address)
		void SetTemperature(float NewTemperature); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECDD0(relative to base address)
		void SetSpecularScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECC20(relative to base address)
		void SetShadowSlopeBias(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC91C(relative to base address)
		void SetShadowBias(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC774(relative to base address)
		void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBC54(relative to base address)
		void SetLightFunctionScale(FVector NewLightFunctionScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EB914(relative to base address)
		void SetLightFunctionMaterial(UMaterialInterface* NewLightFunctionMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7499D4358(relative to base address)
		void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB894(relative to base address)
		void SetLightFunctionDisabledBrightness(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB814(relative to base address)
		void SetLightFColor(FColor NewLightColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults, Memory Exec: 0x7FF74C4EB688(relative to base address)
		void SetLightColor(FLinearColor NewLightColor, bool bSRGB); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748FCA638(relative to base address)
		void SetIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748BC9FD4(relative to base address)
		void SetIndirectLightingIntensity(float NewIntensity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB560(relative to base address)
		void SetIESTexture(UTextureLightProfile* NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB4E0(relative to base address)
		void SetIESBrightnessScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB460(relative to base address)
		void SetForceCachedShadowsForMovablePrimitives(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748ECAB24(relative to base address)
		void SetEnableLightShaftBloom(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EAC00(relative to base address)
		void SetDiffuseScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EA914(relative to base address)
		void SetBloomTint(FColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E9E00(relative to base address)
		void SetBloomThreshold(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9D80(relative to base address)
		void SetBloomScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9D00(relative to base address)
		void SetBloomMaxBrightness(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9C80(relative to base address)
		void SetAffectTranslucentLighting(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9A48(relative to base address)
	};


	// Class Engine.DirectionalLightComponent
	// Inherited from ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0xD8 (0x450 - 0x378)
	class UDirectionalLightComponent : public ULightComponent	
	{
	public:
		float ShadowCascadeBiasDistribution; // 0x378(0x4)
		bool bEnableLightShaftOcclusion : 1; // 0x37C:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x37D(0x3) UNKNOWN PROPERTY
		float OcclusionMaskDarkness; // 0x380(0x4)
		float OcclusionDepthRange; // 0x384(0x4)
		FVector LightShaftOverrideDirection; // 0x388(0x18)
		float WholeSceneDynamicShadowRadius; // 0x3A0(0x4)
		float DynamicShadowDistanceMovableLight; // 0x3A4(0x4)
		float DynamicShadowDistanceStationaryLight; // 0x3A8(0x4)
		int32_t DynamicShadowCascades; // 0x3AC(0x4)
		float CascadeDistributionExponent; // 0x3B0(0x4)
		float CascadeTransitionFraction; // 0x3B4(0x4)
		float ShadowDistanceFadeoutFraction; // 0x3B8(0x4)
		bool bUseInsetShadowsForMovableObjects : 1; // 0x3BC:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x3BD(0x3) UNKNOWN PROPERTY
		int32_t FarShadowCascadeCount; // 0x3C0(0x4)
		float FarShadowDistance; // 0x3C4(0x4)
		float DistanceFieldShadowDistance; // 0x3C8(0x4)
		int32_t ForwardShadingPriority; // 0x3CC(0x4)
		float LightSourceAngle; // 0x3D0(0x4)
		float LightSourceSoftAngle; // 0x3D4(0x4)
		float ShadowSourceAngleFactor; // 0x3D8(0x4)
		float TraceDistance; // 0x3DC(0x4)
		bool bUsedAsAtmosphereSunLight : 1; // 0x3E0:0(0x1)
		bool bAtmosphereSunLight : 1; // 0x3E0:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x3E1(0x3) UNKNOWN PROPERTY
		int32_t AtmosphereSunLightIndex; // 0x3E4(0x4)
		FLinearColor AtmosphereSunDiskColorScale; // 0x3E8(0x10)
		bool bPerPixelAtmosphereTransmittance : 1; // 0x3F8:0(0x1)
		bool bCastShadowsOnClouds : 1; // 0x3F8:1(0x1)
		bool bCastShadowsOnAtmosphere : 1; // 0x3F8:2(0x1)
		bool bCastCloudShadows : 1; // 0x3F8:3(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x3F9(0x3) UNKNOWN PROPERTY
		float CloudShadowStrength; // 0x3FC(0x4)
		float CloudShadowOnAtmosphereStrength; // 0x400(0x4)
		float CloudShadowOnSurfaceStrength; // 0x404(0x4)
		float CloudShadowDepthBias; // 0x408(0x4)
		float CloudShadowExtent; // 0x40C(0x4)
		float CloudShadowMapResolutionScale; // 0x410(0x4)
		float CloudShadowRaySampleCountScale; // 0x414(0x4)
		FLinearColor CloudScatteredLuminanceScale; // 0x418(0x10)
		FLightmassDirectionalLightSettings LightmassSettings; // 0x428(0x10)
		bool bCastModulatedShadows : 1; // 0x438:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x439(0x3) UNKNOWN PROPERTY
		FColor ModulatedShadowColor; // 0x43C(0x4)
		float ShadowAmount; // 0x440(0x4)
		unsigned char UnknownData05_7[0xC]; // 0x444(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DirectionalLightComponent");
			return ret;
		}

		void SetShadowSourceAngleFactor(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC99C(relative to base address)
		void SetShadowDistanceFadeoutFraction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC888(relative to base address)
		void SetShadowCascadeBiasDistribution(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC7F4(relative to base address)
		void SetShadowAmount(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC6F4(relative to base address)
		void SetOcclusionMaskDarkness(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBEE0(relative to base address)
		void SetOcclusionDepthRange(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBE60(relative to base address)
		void SetLightSourceSoftAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBBD4(relative to base address)
		void SetLightSourceAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBB54(relative to base address)
		void SetLightShaftOverrideDirection(FVector NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EBA34(relative to base address)
		void SetForwardShadingPriority(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB1A8(relative to base address)
		void SetEnableLightShaftOcclusion(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EACB8(relative to base address)
		void SetDynamicShadowDistanceStationaryLight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EAAB4(relative to base address)
		void SetDynamicShadowDistanceMovableLight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EAA20(relative to base address)
		void SetDynamicShadowCascades(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EA994(relative to base address)
		void SetCascadeTransitionFraction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EA7B0(relative to base address)
		void SetCascadeDistributionExponent(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EA71C(relative to base address)
		void SetAtmosphereSunLightIndex(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9B48(relative to base address)
		void SetAtmosphereSunLight(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9AC8(relative to base address)
		void SetAtmosphereSunDiskColorScale(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7488820B0(relative to base address)
	};


	// Class Engine.DrawFrustumComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x4F0 - 0x4C8)
	class UDrawFrustumComponent : public UPrimitiveComponent	
	{
	public:
		bool bFrustumEnabled; // 0x4C8(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x4C9(0x3) UNKNOWN PROPERTY
		FColor FrustumColor; // 0x4CC(0x4)
		float FrustumAngle; // 0x4D0(0x4)
		float FrustumAspectRatio; // 0x4D4(0x4)
		float FrustumStartDist; // 0x4D8(0x4)
		float FrustumEndDist; // 0x4DC(0x4)
		UTexture* Texture; // 0x4E0(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x4E8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DrawFrustumComponent");
			return ret;
		}
	};


	// Class Engine.SphereComponent
	// Inherited from UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x4F0 - 0x4E8)
	class USphereComponent : public UShapeComponent	
	{
	public:
		float SphereRadius; // 0x4E8(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x4EC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SphereComponent");
			return ret;
		}

		void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74820DBDC(relative to base address)
		float GetUnscaledSphereRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5DF8(relative to base address)
		float GetShapeScale(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4C5D64(relative to base address)
		float GetScaledSphereRadius(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748878FD8(relative to base address)
	};


	// Class Engine.DrawSphereComponent
	// Inherited from USphereComponent -> UShapeComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x4F0 - 0x4F0)
	class UDrawSphereComponent : public USphereComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DrawSphereComponent");
			return ret;
		}
	};


	// Class Engine.ForceFeedbackComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xF0 (0x310 - 0x220)
	class UForceFeedbackComponent : public USceneComponent	
	{
	public:
		UForceFeedbackEffect* ForceFeedbackEffect; // 0x220(0x8)
		bool bAutoDestroy : 1; // 0x228:0(0x1)
		bool bStopWhenOwnerDestroyed : 1; // 0x228:1(0x1)
		bool bLooping : 1; // 0x228:2(0x1)
		bool bIgnoreTimeDilation : 1; // 0x228:3(0x1)
		bool bOverrideAttenuation : 1; // 0x228:4(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x229(0x3) UNKNOWN PROPERTY
		float IntensityMultiplier; // 0x22C(0x4)
		UForceFeedbackAttenuation* AttenuationSettings; // 0x230(0x8)
		FForceFeedbackAttenuationSettings AttenuationOverrides; // 0x238(0xC0)
		FMulticastInlineDelegate OnForceFeedbackFinished; // 0x2F8(0x10)
		unsigned char UnknownData01_7[0x8]; // 0x308(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ForceFeedbackComponent");
			return ret;
		}

		void Stop(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ED3A4(relative to base address)
		void SetIntensityMultiplier(float NewIntensityMultiplier); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C461304(relative to base address)
		void SetForceFeedbackEffect(UForceFeedbackEffect* NewForceFeedbackEffect); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB128(relative to base address)
		void Play(float StartTime); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C2FD384(relative to base address)
		bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E6E7C(relative to base address)
		void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4E6DA0(relative to base address)
	};


	// Class Engine.HeterogeneousVolumeComponent
	// Inherited from UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0xB8 (0x5B0 - 0x4F8)
	class UHeterogeneousVolumeComponent : public UMeshComponent	
	{
	public:
		FIntVector VolumeResolution; // 0x4F8(0xC)
		unsigned char UnknownData00_6[0xC]; // 0x504(0xC) UNKNOWN PROPERTY
		FTransform FrameTransform; // 0x510(0x60)
		float Frame; // 0x570(0x4)
		float FrameRate; // 0x574(0x4)
		float StartFrame; // 0x578(0x4)
		float EndFrame; // 0x57C(0x4)
		bool bPlaying : 1; // 0x580:0(0x1)
		bool bLooping : 1; // 0x580:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x581(0x3) UNKNOWN PROPERTY
		float StreamingMipBias; // 0x584(0x4)
		bool bIssueBlockingRequests : 1; // 0x588:0(0x1)
		bool bPivotAtCentroid : 1; // 0x588:1(0x1)
		unsigned char UnknownData02_5[0x3]; // 0x589(0x3) UNKNOWN PROPERTY
		float StepFactor; // 0x58C(0x4)
		float ShadowStepFactor; // 0x590(0x4)
		float ShadowBiasFactor; // 0x594(0x4)
		float LightingDownsampleFactor; // 0x598(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x59C(0x4) UNKNOWN PROPERTY
		UMaterialInstanceDynamic* MaterialInstanceDynamic; // 0x5A0(0x8)
		unsigned char UnknownData04_7[0x8]; // 0x5A8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HeterogeneousVolumeComponent");
			return ret;
		}

		void SetVolumeResolution(FIntVector NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4ED1EC(relative to base address)
		void SetStreamingMipBias(int32_t NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECD20(relative to base address)
		void SetStartFrame(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECCA0(relative to base address)
		void SetPlaying(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC5BC(relative to base address)
		void SetLooping(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EBDA4(relative to base address)
		void SetFrameRate(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB2E0(relative to base address)
		void SetFrame(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB260(relative to base address)
		void SetEndFrame(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EAD70(relative to base address)
		void Play(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9330(relative to base address)
	};


	// Class Engine.HeterogeneousVolume
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AHeterogeneousVolume : public AInfo	
	{
	public:
		UHeterogeneousVolumeComponent* HeterogeneousVolumeComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HeterogeneousVolume");
			return ret;
		}
	};


	// Class Engine.InputComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x88 (0x128 - 0xA0)
	class UInputComponent : public UActorComponent	
	{
	public:
		unsigned char UnknownData00_3[0x70]; // 0xA0(0x70) UNKNOWN PROPERTY
		TArray<FCachedKeyToActionInfo> CachedKeyToActionInfo; // 0x110(0x10)
		unsigned char UnknownData01_7[0x8]; // 0x120(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputComponent");
			return ret;
		}

		bool WasControllerKeyJustReleased(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8294(relative to base address)
		bool WasControllerKeyJustPressed(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8294(relative to base address)
		void OnInputOwnerEndPlayed(AActor* InOwner, TEnumAsByte<EEndPlayReason> EndPlayReason); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF748FD4F6C(relative to base address)
		bool IsControllerKeyDown(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8294(relative to base address)
		void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E802C(relative to base address)
		FVector GetControllerVectorKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7BF4(relative to base address)
		void GetControllerMouseDelta(float& DeltaX, float& DeltaY); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7B48(relative to base address)
		float GetControllerKeyTimeDown(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E785C(relative to base address)
		void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY); // Flags: Final|RequiredAPI|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7A60(relative to base address)
		float GetControllerAnalogKeyState(FKey Key); // Flags: Final|RequiredAPI|Native|Private|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E785C(relative to base address)
	};


	// Class Engine.InterpToMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0xB8 (0x1C0 - 0x108)
	class UInterpToMovementComponent : public UMovementComponent	
	{
	public:
		float duration; // 0x108(0x4)
		bool bPauseOnImpact : 1; // 0x10C:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		bool bSweep; // 0x110(0x1)
		ETeleportType TeleportType; // 0x111(0x1)
		EInterpToBehaviourType BehaviourType; // 0x112(0x1)
		bool bCheckIfStillInWorld; // 0x113(0x1)
		bool bForceSubStepping : 1; // 0x114:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInterpToReverse; // 0x118(0x10)
		FMulticastInlineDelegate OnInterpToStop; // 0x128(0x10)
		FMulticastInlineDelegate OnWaitBeginDelegate; // 0x138(0x10)
		FMulticastInlineDelegate OnWaitEndDelegate; // 0x148(0x10)
		FMulticastInlineDelegate OnResetDelegate; // 0x158(0x10)
		float MaxSimulationTimeStep; // 0x168(0x4)
		float SpeedMultiplier; // 0x16C(0x4)
		int32_t MaxSimulationIterations; // 0x170(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x174(0x4) UNKNOWN PROPERTY
		TArray<FInterpControlPoint> ControlPoints; // 0x178(0x10)
		unsigned char UnknownData03_7[0x38]; // 0x188(0x38) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InterpToMovementComponent");
			return ret;
		}

		void StopSimulating(FHitResult& HitResult); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4ED3BC(relative to base address)
		void RestartMovement(float InitialDirection); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E95C8(relative to base address)
		void ResetControlPoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E959C(relative to base address)
		void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void FinaliseControlPoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E7410(relative to base address)
		void AddControlPointPosition(FVector Pos, bool bPositionIsRelative); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E65F4(relative to base address)
	};


	// Class Engine.LineBatchComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x48 (0x510 - 0x4C8)
	class ULineBatchComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData00_1[0x48]; // 0x4C8(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LineBatchComponent");
			return ret;
		}
	};


	// Class Engine.LocalFogVolumeComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x40 (0x260 - 0x220)
	class ULocalFogVolumeComponent : public USceneComponent	
	{
	public:
		float RadialFogExtinction; // 0x220(0x4)
		float HeightFogExtinction; // 0x224(0x4)
		float HeightFogFalloff; // 0x228(0x4)
		float HeightFogOffset; // 0x22C(0x4)
		float FogPhaseG; // 0x230(0x4)
		FLinearColor FogAlbedo; // 0x234(0x10)
		FLinearColor FogEmissive; // 0x244(0x10)
		int32_t FogSortPriority; // 0x254(0x4)
		unsigned char UnknownData00_7[0x8]; // 0x258(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalFogVolumeComponent");
			return ret;
		}

		void SetRadialFogExtinction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EC674(relative to base address)
		void SetHeightFogOffset(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB3E0(relative to base address)
		void SetHeightFogFalloff(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB360(relative to base address)
		void SetHeightFogExtinction(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74886F190(relative to base address)
		void SetFogPhaseG(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB0A8(relative to base address)
		void SetFogEmissive(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EAF90(relative to base address)
		void SetFogAlbedo(FLinearColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EAE78(relative to base address)
	};


	// Class Engine.LocalLightComponent
	// Inherited from ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x3A0 - 0x378)
	class ULocalLightComponent : public ULightComponent	
	{
	public:
		ELightUnits IntensityUnits; // 0x378(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x379(0x3) UNKNOWN PROPERTY
		float InverseExposureBlend; // 0x37C(0x4)
		float Radius; // 0x380(0x4)
		float AttenuationRadius; // 0x384(0x4)
		FLightmassPointLightSettings LightmassSettings; // 0x388(0xC)
		unsigned char UnknownData01_7[0x4]; // 0x394(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalLightComponent");
			return ret;
		}

		void SetIntensityUnits(ELightUnits NewIntensityUnits); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB5E0(relative to base address)
		void SetAttenuationRadius(float NewRadius); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E9C00(relative to base address)
		float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C4E8158(relative to base address)
	};


	// Class Engine.LODSyncComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x98 (0x138 - 0xA0)
	class ULODSyncComponent : public UActorComponent	
	{
	public:
		int32_t NumLODs; // 0xA0(0x4)
		int32_t ForcedLOD; // 0xA4(0x4)
		int32_t MinLOD; // 0xA8(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xAC(0x4) UNKNOWN PROPERTY
		TArray<FComponentSync> ComponentsToSync; // 0xB0(0x10)
		TMap<FName, FLODMappingData> CustomLODMapping; // 0xC0(0x50)
		int32_t CurrentLOD; // 0x110(0x4)
		int32_t CurrentNumLODs; // 0x114(0x4)
		TArray<UPrimitiveComponent*> DriveComponents; // 0x118(0x10)
		TArray<UPrimitiveComponent*> SubComponents; // 0x128(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LODSyncComponent");
			return ret;
		}

		FString GetLODSyncDebugText(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E7EBC(relative to base address)
	};


	// Class Engine.MaterialBillboardComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x4E0 - 0x4C8)
	class UMaterialBillboardComponent : public UPrimitiveComponent	
	{
	public:
		TArray<FMaterialSpriteElement> Elements; // 0x4C8(0x10)
		unsigned char UnknownData00_7[0x8]; // 0x4D8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialBillboardComponent");
			return ret;
		}

		void SetElements(TArray<FMaterialSpriteElement>& NewElements); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C4EAB48(relative to base address)
		void AddElement(UMaterialInterface* Material, UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, UCurveFloat* DistanceToSizeCurve); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E67E0(relative to base address)
	};


	// Class Engine.ModelComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x48 (0x510 - 0x4C8)
	class UModelComponent : public UPrimitiveComponent	
	{
	public:
		unsigned char UnknownData00_3[0x18]; // 0x4C8(0x18) UNKNOWN PROPERTY
		UBodySetup* ModelBodySetup; // 0x4E0(0x8)
		unsigned char UnknownData01_7[0x28]; // 0x4E8(0x28) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ModelComponent");
			return ret;
		}
	};


	// Class Engine.PawnNoiseEmitterComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x38 (0xD8 - 0xA0)
	class UPawnNoiseEmitterComponent : public UActorComponent	
	{
	public:
		bool bAIPerceptionSystemCompatibilityMode : 1; // 0xA0:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0xA1(0x7) UNKNOWN PROPERTY
		FVector LastRemoteNoisePosition; // 0xA8(0x18)
		float NoiseLifetime; // 0xC0(0x4)
		float LastRemoteNoiseVolume; // 0xC4(0x4)
		float LastRemoteNoiseTime; // 0xC8(0x4)
		float LastLocalNoiseVolume; // 0xCC(0x4)
		float LastLocalNoiseTime; // 0xD0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xD4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PawnNoiseEmitterComponent");
			return ret;
		}

		void MakeNoise(AActor* NoiseMaker, float Loudness, FVector& NoiseLocation); // Flags: RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E8CC0(relative to base address)
	};


	// Class Engine.PlatformEventsComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x20 (0xC0 - 0xA0)
	class UPlatformEventsComponent : public UActorComponent	
	{
	public:
		FMulticastInlineDelegate PlatformChangedToLaptopModeDelegate; // 0xA0(0x10)
		FMulticastInlineDelegate PlatformChangedToTabletModeDelegate; // 0xB0(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformEventsComponent");
			return ret;
		}

		bool SupportsConvertibleLaptops(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ED494(relative to base address)
		void PlatformEventDelegate__DelegateSignature(); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		bool IsInTabletMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E85EC(relative to base address)
		bool IsInLaptopMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E85C0(relative to base address)
	};


	// Class Engine.PointLightComponent
	// Inherited from ULocalLightComponent -> ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x3B0 - 0x398)
	class UPointLightComponent : public ULocalLightComponent	
	{
	public:
		bool bUseInverseSquaredFalloff : 1; // 0x398:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x399(0x3) UNKNOWN PROPERTY
		float LightFalloffExponent; // 0x39C(0x4)
		float SourceRadius; // 0x3A0(0x4)
		float SoftSourceRadius; // 0x3A4(0x4)
		float SourceLength; // 0x3A8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3AC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PointLightComponent");
			return ret;
		}

		void SetUseInverseSquaredFalloff(bool bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECF90(relative to base address)
		void SetSourceRadius(float bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECBA0(relative to base address)
		void SetSourceLength(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECB20(relative to base address)
		void SetSoftSourceRadius(float bNewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4ECA1C(relative to base address)
		void SetLightFalloffExponent(float NewLightFalloffExponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB794(relative to base address)
		void SetInverseExposureBlend(float NewInverseExposureBlend); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7491AA478(relative to base address)
	};


	// Class Engine.PoseableMeshComponent
	// Inherited from USkinnedMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x160 (0x9C0 - 0x860)
	class UPoseableMeshComponent : public USkinnedMeshComponent	
	{
	public:
		unsigned char UnknownData00_1[0x160]; // 0x860(0x160) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseableMeshComponent");
			return ret;
		}

		void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EA560(relative to base address)
		void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EA344(relative to base address)
		void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4EA128(relative to base address)
		void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E9F0C(relative to base address)
		void ResetBoneTransformByName(FName BoneName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E951C(relative to base address)
		FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E773C(relative to base address)
		FVector GetBoneScaleByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E7634(relative to base address)
		FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E7528(relative to base address)
		FVector GetBoneLocationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E7424(relative to base address)
		void CopyPoseFromSkeletalComponent(USkeletalMeshComponent* InComponentToCopy); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E7390(relative to base address)
	};


	// Class Engine.PostProcessComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x710 (0x930 - 0x220)
	class UPostProcessComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x220(0x10) UNKNOWN PROPERTY
		FPostProcessSettings Settings; // 0x230(0x6F0)
		float Priority; // 0x920(0x4)
		float BlendRadius; // 0x924(0x4)
		float BlendWeight; // 0x928(0x4)
		bool bEnabled : 1; // 0x92C:0(0x1)
		bool bUnbound : 1; // 0x92C:1(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x92D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PostProcessComponent");
			return ret;
		}

		void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E6BA8(relative to base address)
	};


	// Class Engine.ProjectileMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0x158 (0x260 - 0x108)
	class UProjectileMovementComponent : public UMovementComponent	
	{
	public:
		float InitialSpeed; // 0x108(0x4)
		float MaxSpeed; // 0x10C(0x4)
		bool bRotationFollowsVelocity : 1; // 0x110:0(0x1)
		bool bRotationRemainsVertical : 1; // 0x110:1(0x1)
		bool bShouldBounce : 1; // 0x110:2(0x1)
		bool bInitialVelocityInLocalSpace : 1; // 0x110:3(0x1)
		bool bForceSubStepping : 1; // 0x110:4(0x1)
		bool bSimulationEnabled : 1; // 0x110:5(0x1)
		bool bSweepCollision : 1; // 0x110:6(0x1)
		bool bIsHomingProjectile : 1; // 0x110:7(0x1)
		bool bBounceAngleAffectsFriction : 1; // 0x111:0(0x1)
		bool bIsSliding : 1; // 0x111:1(0x1)
		bool bInterpMovement : 1; // 0x111:2(0x1)
		bool bInterpRotation : 1; // 0x111:3(0x1)
		bool bThrottleInterpolation : 1; // 0x111:4(0x1)
		unsigned char UnknownData00_3[0x6]; // 0x112(0x6) UNKNOWN PROPERTY
		bool bSimulationUseScopedMovement : 1; // 0x118:0(0x1)
		bool bInterpolationUseScopedMovement : 1; // 0x118:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x119(0x3) UNKNOWN PROPERTY
		float PreviousHitTime; // 0x11C(0x4)
		FVector PreviousHitNormal; // 0x120(0x18)
		float ProjectileGravityScale; // 0x138(0x4)
		float Buoyancy; // 0x13C(0x4)
		float Bounciness; // 0x140(0x4)
		float Friction; // 0x144(0x4)
		float BounceVelocityStopSimulatingThreshold; // 0x148(0x4)
		float MinFrictionFraction; // 0x14C(0x4)
		FMulticastInlineDelegate OnProjectileBounce; // 0x150(0x10)
		FMulticastInlineDelegate OnProjectileStop; // 0x160(0x10)
		float HomingAccelerationMagnitude; // 0x170(0x4)
		TWeakObjectPtr<USceneComponent*> HomingTargetComponent; // 0x174(0x8)
		float MaxSimulationTimeStep; // 0x17C(0x4)
		int32_t MaxSimulationIterations; // 0x180(0x4)
		int32_t BounceAdditionalIterations; // 0x184(0x4)
		float InterpLocationTime; // 0x188(0x4)
		float InterpRotationTime; // 0x18C(0x4)
		float InterpLocationMaxLagDistance; // 0x190(0x4)
		float InterpLocationSnapToTargetDistance; // 0x194(0x4)
		float ThrottleInterpolationThresholdNotRenderedShortTime; // 0x198(0x4)
		float ThrottleInterpolationThresholdNotRenderedLongTime; // 0x19C(0x4)
		int32_t ThrottleInterpolationSkipFramesRecent; // 0x1A0(0x4)
		int32_t ThrottleInterpolationSkipFramesNotRecent; // 0x1A4(0x4)
		unsigned char UnknownData02_7[0xB8]; // 0x1A8(0xB8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ProjectileMovementComponent");
			return ret;
		}

		void StopSimulating(FHitResult& HitResult); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7491A15D8(relative to base address)
		void SetVelocityInLocalSpace(FVector NewVelocity); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4ED0C8(relative to base address)
		void SetInterpolatedComponent(USceneComponent* Component); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7491BF6E0(relative to base address)
		void ResetInterpolation(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4E95B0(relative to base address)
		void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity); // Flags: MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C4E8E10(relative to base address)
		FVector LimitVelocity(FVector NewVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8B74(relative to base address)
		bool IsVelocityUnderSimulationThreshold(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8690(relative to base address)
		bool IsInterpolationComplete(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C4E8618(relative to base address)
	};


	// Class Engine.RectLightComponent
	// Inherited from ULocalLightComponent -> ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x28 (0x3C0 - 0x398)
	class URectLightComponent : public ULocalLightComponent	
	{
	public:
		float SourceWidth; // 0x398(0x4)
		float SourceHeight; // 0x39C(0x4)
		float BarnDoorAngle; // 0x3A0(0x4)
		float BarnDoorLength; // 0x3A4(0x4)
		UTexture* SourceTexture; // 0x3A8(0x8)
		unsigned char UnknownData00_7[0x10]; // 0x3B0(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RectLightComponent");
			return ret;
		}

		void SetSourceWidth(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C503678(relative to base address)
		void SetSourceTexture(UTexture* NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5035A4(relative to base address)
		void SetSourceHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4EB794(relative to base address)
		void SetBarnDoorLength(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C502734(relative to base address)
		void SetBarnDoorAngle(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5026B4(relative to base address)
	};


	// Class Engine.RotatingMovementComponent
	// Inherited from UMovementComponent -> UActorComponent -> UObject
	// Size: 0x38 (0x140 - 0x108)
	class URotatingMovementComponent : public UMovementComponent	
	{
	public:
		FRotator RotationRate; // 0x108(0x18)
		FVector PivotTranslation; // 0x120(0x18)
		bool bRotationInLocalSpace : 1; // 0x138:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x139(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RotatingMovementComponent");
			return ret;
		}
	};


	// Class Engine.RuntimeVirtualTextureComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x90 (0x2B0 - 0x220)
	class URuntimeVirtualTextureComponent : public USceneComponent	
	{
	public:
		TWeakObjectPtr<AActor*> BoundsAlignActor; // 0x220(0x20)
		bool bSetBoundsButton; // 0x240(0x1)
		bool bSnapBoundsToLandscape; // 0x241(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x242(0x2) UNKNOWN PROPERTY
		float ExpandBounds; // 0x244(0x4)
		URuntimeVirtualTexture* VirtualTexture; // 0x248(0x8)
		FPerPlatformBool EnableInGamePerPlatform; // 0x250(0x1)
		bool bEnableForNaniteOnly; // 0x251(0x1)
		bool bUseMinMaterialQuality; // 0x252(0x1)
		ERuntimeVirtualTextureMaterialQuality MinInGameMaterialQuality; // 0x253(0x1)
		bool bEnableScalability; // 0x254(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x255(0x3) UNKNOWN PROPERTY
		uint32_t ScalabilityGroup; // 0x258(0x4)
		bool bHidePrimitives; // 0x25C(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x25D(0x3) UNKNOWN PROPERTY
		UVirtualTextureBuilder* StreamingTexture; // 0x260(0x8)
		int32_t StreamLowMips; // 0x268(0x4)
		bool bBuildStreamingMipsButton; // 0x26C(0x1)
		TEnumAsByte<ETextureLossyCompressionAmount> LossyCompressionAmount; // 0x26D(0x1)
		bool bUseStreamingMipsFixedColor; // 0x26E(0x1)
		unsigned char UnknownData03_6[0x1]; // 0x26F(0x1) UNKNOWN PROPERTY
		FLinearColor StreamingMipsFixedColor; // 0x270(0x10)
		bool bUseStreamingMipsOnly; // 0x280(0x1)
		bool bUseStreamingMipsInEditor; // 0x281(0x1)
		unsigned char UnknownData04_7[0x2E]; // 0x282(0x2E) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTextureComponent");
			return ret;
		}

		void Invalidate(FBoxSphereBounds& WorldBounds); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C500930(relative to base address)
	};


	// Class Engine.SkyAtmosphere
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ASkyAtmosphere : public AInfo	
	{
	public:
		USkyAtmosphereComponent* SkyAtmosphereComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkyAtmosphere");
			return ret;
		}
	};


	// Class Engine.SplineMetadata
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USplineMetadata : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineMetadata");
			return ret;
		}
	};


	// Class Engine.SplineComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x98 (0x560 - 0x4C8)
	class USplineComponent : public UPrimitiveComponent	
	{
	public:
		FSplineCurves SplineCurves; // 0x4C8(0x68)
		int32_t ReparamStepsPerSegment; // 0x530(0x4)
		float duration; // 0x534(0x4)
		bool bStationaryEndpoints; // 0x538(0x1)
		bool bSplineHasBeenEdited; // 0x539(0x1)
		bool bModifiedByConstructionScript; // 0x53A(0x1)
		bool bInputSplinePointsToConstructionScript; // 0x53B(0x1)
		bool bDrawDebug; // 0x53C(0x1)
		bool bClosedLoop; // 0x53D(0x1)
		bool bLoopPositionOverride; // 0x53E(0x1)
		unsigned char UnknownData00_6[0x1]; // 0x53F(0x1) UNKNOWN PROPERTY
		float LoopPosition; // 0x540(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x544(0x4) UNKNOWN PROPERTY
		FVector DefaultUpVector; // 0x548(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineComponent");
			return ret;
		}

		void UpdateSpline(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525D8C(relative to base address)
		void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C525ABC(relative to base address)
		void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5258A8(relative to base address)
		void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523BC8(relative to base address)
		void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C525500(relative to base address)
		void SetTangentColor(FLinearColor& TangentColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523BC8(relative to base address)
		void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5252EC(relative to base address)
		void SetSplineWorldPoints(TArray<FVector>& Points); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C524428(relative to base address)
		void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523FA4(relative to base address)
		void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5240A0(relative to base address)
		void SetSplineLocalPoints(TArray<FVector>& Points); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C523F00(relative to base address)
		void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523BC8(relative to base address)
		void SetScaleAtSplinePoint(int32_t PointIndex, FVector& InScaleVector, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523A3C(relative to base address)
		void SetRotationAtSplinePoint(int32_t PointIndex, FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C523864(relative to base address)
		void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C522A90(relative to base address)
		void SetDrawDebug(bool bShow); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5217B0(relative to base address)
		void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5213B8(relative to base address)
		void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C52120C(relative to base address)
		void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C521148(relative to base address)
		void RemoveSplinePoint(int32_t Index, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520CA4(relative to base address)
		bool IsClosedLoop(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520738(relative to base address)
		FVector GetWorldTangentAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5205F8(relative to base address)
		FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520508(relative to base address)
		FRotator GetWorldRotationAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C52045C(relative to base address)
		FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C52036C(relative to base address)
		FVector GetWorldLocationAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5202CC(relative to base address)
		FVector GetWorldLocationAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520228(relative to base address)
		FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C520138(relative to base address)
		FVector GetWorldDirectionAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C52008C(relative to base address)
		FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51FFB8(relative to base address)
		FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51FEE0(relative to base address)
		FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51FDCC(relative to base address)
		FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51FCF4(relative to base address)
		FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51FC1C(relative to base address)
		FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51FB44(relative to base address)
		FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F99C(relative to base address)
		FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F848(relative to base address)
		FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F6F4(relative to base address)
		FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F5A0(relative to base address)
		float GetTimeAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D61C(relative to base address)
		FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F48C(relative to base address)
		FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D7CC(relative to base address)
		FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F268(relative to base address)
		FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F190(relative to base address)
		TEnumAsByte GetSplinePointType(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F03C(relative to base address)
		FSplinePoint GetSplinePointAt(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51EF0C(relative to base address)
		float GetSplineLength(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74759A708(relative to base address)
		FVector GetScaleAtTime(float Time, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51EE34(relative to base address)
		FVector GetScaleAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51ED94(relative to base address)
		FVector GetScaleAtSplineInputKey(float InKey); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51ECF0(relative to base address)
		FVector GetScaleAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51EC4C(relative to base address)
		FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51EB38(relative to base address)
		FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51EA60(relative to base address)
		FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E988(relative to base address)
		FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E8B0(relative to base address)
		float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E7B0(relative to base address)
		float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E6E0(relative to base address)
		float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E618(relative to base address)
		float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E550(relative to base address)
		FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E43C(relative to base address)
		FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E364(relative to base address)
		FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E28C(relative to base address)
		FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51E1B4(relative to base address)
		int32_t GetNumberOfSplineSegments(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51DFB4(relative to base address)
		int32_t GetNumberOfSplinePoints(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7492E0244(relative to base address)
		FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51DEA0(relative to base address)
		FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7490A4104(relative to base address)
		FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51DDC8(relative to base address)
		FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748C3E0C8(relative to base address)
		void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51DBA4(relative to base address)
		void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51DA04(relative to base address)
		FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D7CC(relative to base address)
		float GetInputKeyValueAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D73C(relative to base address)
		float GetInputKeyValueAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D6AC(relative to base address)
		float GetInputKeyAtDistanceAlongSpline(float Distance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D61C(relative to base address)
		float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D514(relative to base address)
		float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D450(relative to base address)
		float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D320(relative to base address)
		float GetDistanceAlongSplineAtSplineInputKey(float InKey); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D290(relative to base address)
		float GetDistanceAlongSplineAtLocation(FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D12C(relative to base address)
		FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D018(relative to base address)
		FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CF40(relative to base address)
		FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CE68(relative to base address)
		FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CD90(relative to base address)
		FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CB7C(relative to base address)
		FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51C750(relative to base address)
		FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51C5C8(relative to base address)
		FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51C398(relative to base address)
		FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51C220(relative to base address)
		FVector FindScaleClosestToWorldLocation(FVector& WorldLocation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51C12C(relative to base address)
		FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51BFA4(relative to base address)
		float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51BE34(relative to base address)
		FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51BCAC(relative to base address)
		FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51BB34(relative to base address)
		float FindInputKeyClosestToWorldLocation(FVector& WorldLocation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51BA60(relative to base address)
		FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51B8D8(relative to base address)
		bool DivideSplineIntoPolylineRecursiveWithDistances(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints, TArray<double>& OutDistancesAlongSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51B6A0(relative to base address)
		bool DivideSplineIntoPolylineRecursive(float StartDistanceAlongSpline, float EndDistanceAlongSpline, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51B4F4(relative to base address)
		bool ConvertSplineToPolyLineWithDistances(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints, TArray<double>& OutDistancesAlongSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|Const, Memory Exec: 0x7FF74C51AD84(relative to base address)
		bool ConvertSplineToPolyline_InTimeRange(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, float StartTimeAlongSpline, float EndTimeAlongSpline, bool bUseConstantVelocity, TArray<FVector>& OutPoints, TArray<double>& OutDistancesAlongSpline, bool bAllowWrappingIfClosed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|Const, Memory Exec: 0x7FF74C51B1D8(relative to base address)
		bool ConvertSplineToPolyline_InDistanceRange(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, float StartDistAlongSpline, float EndDistAlongSpline, TArray<FVector>& OutPoints, TArray<double>& OutDistancesAlongSpline, bool bAllowWrappingIfClosed); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|Const, Memory Exec: 0x7FF74C51AF14(relative to base address)
		bool ConvertSplineToPolyLine(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51AC5C(relative to base address)
		bool ConvertSplineSegmentToPolyLine(int32_t SplinePointStartIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, float MaxSquareDistanceFromSpline, TArray<FVector>& OutPoints); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51AAF8(relative to base address)
		void ClearSplinePoints(bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C51A5F8(relative to base address)
		void AddSplineWorldPoint(FVector& Position); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51A52C(relative to base address)
		void AddSplinePointAtIndex(FVector& Position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51A2E0(relative to base address)
		void AddSplinePoint(FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51A108(relative to base address)
		void AddSplineLocalPoint(FVector& Position); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C51A03C(relative to base address)
		void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C519EB8(relative to base address)
		void AddPoint(FSplinePoint& Point, bool bUpdateSpline); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C519D2C(relative to base address)
	};


	// Class Engine.SplineMeshComponent
	// Inherited from UStaticMeshComponent -> UMeshComponent -> UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x130 (0x6C0 - 0x590)
	class USplineMeshComponent : public UStaticMeshComponent	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x590(0x8) UNKNOWN PROPERTY
		FSplineMeshParams SplineParams; // 0x598(0xB0)
		FVector SplineUpDir; // 0x648(0x18)
		float SplineBoundaryMin; // 0x660(0x4)
		FGuid CachedMeshBodySetupGuid; // 0x664(0x10)
		float VirtualTextureMainPassMaxDrawDistance; // 0x674(0x4)
		unsigned char UnknownData01_6[0x38]; // 0x678(0x38) UNKNOWN PROPERTY
		UBodySetup* BodySetup; // 0x6B0(0x8)
		float SplineBoundaryMax; // 0x6B8(0x4)
		TEnumAsByte<ESplineMeshAxis> ForwardAxis; // 0x6BC(0x1)
		bool bAllowSplineEditingPerInstance : 1; // 0x6BD:0(0x1)
		bool bSmoothInterpRollScale : 1; // 0x6BD:1(0x1)
		bool bMeshDirty : 1; // 0x6BD:2(0x1)
		bool bNeverNeedsCookedCollisionData : 1; // 0x6BD:3(0x1)
		unsigned char UnknownData02_7[0x2]; // 0x6BE(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineMeshComponent");
			return ret;
		}

		void UpdateMesh(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525D78(relative to base address)
		void SetStartTangent(FVector StartTangent, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C525084(relative to base address)
		void SetStartScale(FVector2D StartScale, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C524EA4(relative to base address)
		void SetStartRollDegrees(float StartRollDegrees, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C524DD4(relative to base address)
		void SetStartRoll(float StartRoll, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C524D0C(relative to base address)
		void SetStartPosition(FVector StartPos, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C524B24(relative to base address)
		void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C524934(relative to base address)
		void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5244D0(relative to base address)
		void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5242D4(relative to base address)
		void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522320(relative to base address)
		void SetEndTangent(FVector EndTangent, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C521F88(relative to base address)
		void SetEndScale(FVector2D EndScale, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C521DA8(relative to base address)
		void SetEndRollDegrees(float EndRollDegrees, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C521CD8(relative to base address)
		void SetEndRoll(float EndRoll, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C521C10(relative to base address)
		void SetEndPosition(FVector EndPos, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C521A28(relative to base address)
		void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C521838(relative to base address)
		void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C521074(relative to base address)
		void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520FA0(relative to base address)
		FVector GetStartTangent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F168(relative to base address)
		FVector2D GetStartScale(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F14C(relative to base address)
		float GetStartRoll(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F134(relative to base address)
		FVector GetStartPosition(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F10C(relative to base address)
		FVector2D GetStartOffset(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F0F0(relative to base address)
		FVector GetSplineUpDir(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51F0C8(relative to base address)
		TEnumAsByte GetForwardAxis(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D5E8(relative to base address)
		FVector GetEndTangent(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D428(relative to base address)
		FVector2D GetEndScale(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D40C(relative to base address)
		float GetEndRoll(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D3F4(relative to base address)
		FVector GetEndPosition(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D3CC(relative to base address)
		FVector2D GetEndOffset(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51D3B0(relative to base address)
		float GetBoundaryMin(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CB28(relative to base address)
		float GetBoundaryMax(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C51CB10(relative to base address)
	};


	// Class Engine.SpotLightComponent
	// Inherited from UPointLightComponent -> ULocalLightComponent -> ULightComponent -> ULightComponentBase -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x3C0 - 0x3B0)
	class USpotLightComponent : public UPointLightComponent	
	{
	public:
		float InnerConeAngle; // 0x3B0(0x4)
		float OuterConeAngle; // 0x3B4(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpotLightComponent");
			return ret;
		}

		void SetOuterConeAngle(float NewOuterConeAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5232EC(relative to base address)
		void SetInnerConeAngle(float NewInnerConeAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522990(relative to base address)
	};


	// Class Engine.VolumetricCloudComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x80 (0x2A0 - 0x220)
	class UVolumetricCloudComponent : public USceneComponent	
	{
	public:
		float LayerBottomAltitude; // 0x220(0x4)
		float LayerHeight; // 0x224(0x4)
		float TracingStartMaxDistance; // 0x228(0x4)
		float TracingStartDistanceFromCamera; // 0x22C(0x4)
		EVolumetricCloudTracingMaxDistanceMode TracingMaxDistanceMode; // 0x230(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x231(0x3) UNKNOWN PROPERTY
		float TracingMaxDistance; // 0x234(0x4)
		float PlanetRadius; // 0x238(0x4)
		FColor GroundAlbedo; // 0x23C(0x4)
		UMaterialInterface* Material; // 0x240(0x8)
		bool bUsePerSampleAtmosphericLightTransmittance : 1; // 0x248:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x249(0x3) UNKNOWN PROPERTY
		float SkyLightCloudBottomOcclusion; // 0x24C(0x4)
		float ViewSampleCountScale; // 0x250(0x4)
		float ReflectionViewSampleCountScaleValue; // 0x254(0x4)
		float ReflectionViewSampleCountScale; // 0x258(0x4)
		float ReflectionSampleCountScale; // 0x25C(0x4)
		float ShadowViewSampleCountScale; // 0x260(0x4)
		float ShadowReflectionViewSampleCountScaleValue; // 0x264(0x4)
		float ShadowReflectionViewSampleCountScale; // 0x268(0x4)
		float ShadowReflectionSampleCountScale; // 0x26C(0x4)
		float ShadowTracingDistance; // 0x270(0x4)
		float StopTracingTransmittanceThreshold; // 0x274(0x4)
		float AerialPespectiveRayleighScatteringStartDistance; // 0x278(0x4)
		float AerialPespectiveRayleighScatteringFadeDistance; // 0x27C(0x4)
		float AerialPespectiveMieScatteringStartDistance; // 0x280(0x4)
		float AerialPespectiveMieScatteringFadeDistance; // 0x284(0x4)
		bool bHoldout : 1; // 0x288:0(0x1)
		bool bRenderInMainPass : 1; // 0x288:1(0x1)
		unsigned char UnknownData02_7[0x17]; // 0x289(0x17) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumetricCloudComponent");
			return ret;
		}

		void SetViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523054(relative to base address)
		void SetTracingStartMaxDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525828(relative to base address)
		void SetTracingStartDistanceFromCamera(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520EA0(relative to base address)
		void SetTracingMaxDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5257A8(relative to base address)
		void SetStopTracingTransmittanceThreshold(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C52526C(relative to base address)
		void SetSkyLightCloudBottomOcclusion(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5233EC(relative to base address)
		void SetShadowViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523D68(relative to base address)
		void SetShadowTracingDistance(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523CE8(relative to base address)
		void SetShadowReflectionViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522DBC(relative to base address)
		void SetShadowReflectionSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523C68(relative to base address)
		void SetRenderInMainPass(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523724(relative to base address)
		void SetReflectionViewSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523604(relative to base address)
		void SetReflectionSampleCountScale(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C523584(relative to base address)
		void SetPlanetRadius(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C52336C(relative to base address)
		void SetMaterial(UMaterialInterface* NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748D1441C(relative to base address)
		void SetLayerHeight(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C520F20(relative to base address)
		void SetLayerBottomAltitude(float NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C522A10(relative to base address)
		void SetHoldout(bool bNewHoldout); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5226C4(relative to base address)
		void SetGroundAlbedo(FColor NewValue); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C52249C(relative to base address)
		void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C525C84(relative to base address)
	};


	// Class Engine.VolumetricCloud
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AVolumetricCloud : public AInfo	
	{
	public:
		UVolumetricCloudComponent* VolumetricCloudComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumetricCloud");
			return ret;
		}
	};


	// Class Engine.WorldPartitionStreamingSourceComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x58 (0xF8 - 0xA0)
	class UWorldPartitionStreamingSourceComponent : public UActorComponent	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0xA0(0x8) UNKNOWN PROPERTY
		EStreamingSourceTargetBehavior TargetBehavior; // 0xA8(0x1)
		unsigned char UnknownData01_6[0x7]; // 0xA9(0x7) UNKNOWN PROPERTY
		TArray<FName> TargetGrids; // 0xB0(0x10)
		FName TargetGrid; // 0xC0(0x4)
		FColor DebugColor; // 0xC4(0x4)
		TArray<UHLODLayer*> TargetHLODLayers; // 0xC8(0x10)
		UHLODLayer* TargetHLODLayer; // 0xD8(0x8)
		TArray<FStreamingSourceShape> Shapes; // 0xE0(0x10)
		EStreamingSourcePriority Priority; // 0xF0(0x1)
		bool bStreamingSourceEnabled; // 0xF1(0x1)
		EStreamingSourceTargetState TargetState; // 0xF2(0x1)
		unsigned char UnknownData02_7[0x5]; // 0xF3(0x5) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionStreamingSourceComponent");
			return ret;
		}

		bool IsStreamingSourceEnabled(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C52081C(relative to base address)
		bool IsStreamingCompleted(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5207BC(relative to base address)
		void EnableStreamingSource(); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C51B8C0(relative to base address)
		void DisableStreamingSource(); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C51B4DC(relative to base address)
	};


	// Class Engine.CurveTable
	// Inherited from UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UCurveTable : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x78]; // 0x28(0x78) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveTable");
			return ret;
		}
	};


	// Class Engine.CompositeCurveTable
	// Inherited from UCurveTable -> UObject
	// Size: 0x28 (0xC8 - 0xA0)
	class UCompositeCurveTable : public UCurveTable	
	{
	public:
		TArray<UCurveTable*> ParentTables; // 0xA0(0x10)
		TArray<UCurveTable*> OldParentTables; // 0xB0(0x10)
		unsigned char UnknownData00_7[0x8]; // 0xC0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CompositeCurveTable");
			return ret;
		}
	};


	// Class Engine.CompositeDataTable
	// Inherited from UDataTable -> UObject
	// Size: 0x28 (0xD8 - 0xB0)
	class UCompositeDataTable : public UDataTable	
	{
	public:
		TArray<UDataTable*> ParentTables; // 0xB0(0x10)
		TArray<UDataTable*> OldParentTables; // 0xC0(0x10)
		unsigned char UnknownData00_7[0x8]; // 0xD0(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CompositeDataTable");
			return ret;
		}
	};


	// Class Engine.StreamingSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UStreamingSettings : public UDeveloperSettings	
	{
	public:
		bool AsyncLoadingThreadEnabled : 1; // 0x30:0(0x1)
		bool WarnIfTimeLimitExceeded : 1; // 0x30:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		float TimeLimitExceededMultiplier; // 0x34(0x4)
		float TimeLimitExceededMinTime; // 0x38(0x4)
		int32_t MinBulkDataSizeForAsyncLoading; // 0x3C(0x4)
		bool UseBackgroundLevelStreaming : 1; // 0x40:0(0x1)
		bool AsyncLoadingUseFullTimeLimit : 1; // 0x40:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		float AsyncLoadingTimeLimit; // 0x44(0x4)
		float PriorityAsyncLoadingExtraTime; // 0x48(0x4)
		float LevelStreamingActorsUpdateTimeLimit; // 0x4C(0x4)
		float PriorityLevelStreamingActorsUpdateExtraTime; // 0x50(0x4)
		int32_t LevelStreamingComponentsRegistrationGranularity; // 0x54(0x4)
		int32_t LevelStreamingAddPrimitiveGranularity; // 0x58(0x4)
		float LevelStreamingUnregisterComponentsTimeLimit; // 0x5C(0x4)
		int32_t LevelStreamingComponentsUnregistrationGranularity; // 0x60(0x4)
		bool FlushStreamingOnExit : 1; // 0x64:0(0x1)
		bool EventDrivenLoaderEnabled : 1; // 0x64:1(0x1)
		unsigned char UnknownData02_7[0x3]; // 0x65(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StreamingSettings");
			return ret;
		}
	};


	// Class Engine.GarbageCollectionSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UGarbageCollectionSettings : public UDeveloperSettings	
	{
	public:
		float TimeBetweenPurgingPendingKillObjects; // 0x30(0x4)
		bool FlushStreamingOnGC : 1; // 0x34:0(0x1)
		bool AllowParallelGC : 1; // 0x34:1(0x1)
		bool IncrementalBeginDestroyEnabled : 1; // 0x34:2(0x1)
		bool CreateGCClusters : 1; // 0x34:3(0x1)
		bool AssetClusteringEnabled : 1; // 0x34:4(0x1)
		bool ActorClusteringEnabled : 1; // 0x34:5(0x1)
		bool VerifyUObjectsAreNotFGCObjects : 1; // 0x34:6(0x1)
		bool GarbageEliminationEnabled : 1; // 0x34:7(0x1)
		bool DumpObjectCountsToLogWhenMaxObjectLimitExceeded : 1; // 0x35:0(0x1)
		unsigned char UnknownData00_5[0x2]; // 0x36(0x2) UNKNOWN PROPERTY
		int32_t MinGCClusterSize; // 0x38(0x4)
		int32_t NumRetriesBeforeForcingGC; // 0x3C(0x4)
		int32_t MaxObjectsNotConsideredByGC; // 0x40(0x4)
		int32_t MaxObjectsInGame; // 0x44(0x4)
		int32_t MaxObjectsInEditor; // 0x48(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GarbageCollectionSettings");
			return ret;
		}
	};


	// Class Engine.CullDistanceVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x18 (0x2E0 - 0x2C8)
	class ACullDistanceVolume : public AVolume	
	{
	public:
		TArray<FCullDistanceSizePair> CullDistances; // 0x2C8(0x10)
		bool bEnabled : 1; // 0x2D8:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x2D9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CullDistanceVolume");
			return ret;
		}
	};


	// Class Engine.CurveBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UCurveBase : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveBase");
			return ret;
		}

		void GetValueRange(float& MinValue, float& MaxValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53F7F0(relative to base address)
		void GetTimeRange(float& MinTime, float& MaxTime); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53F680(relative to base address)
	};


	// Class Engine.CurveEdPresetCurve
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UCurveEdPresetCurve : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveEdPresetCurve");
			return ret;
		}
	};


	// Class Engine.CurveFloat
	// Inherited from UCurveBase -> UObject
	// Size: 0x88 (0xB8 - 0x30)
	class UCurveFloat : public UCurveBase	
	{
	public:
		FRichCurve FloatCurve; // 0x30(0x80)
		bool bIsEventCurve; // 0xB0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xB1(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveFloat");
			return ret;
		}

		float GetFloatValue(float InTime); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53F554(relative to base address)
	};


	// Class Engine.CurveLinearColor
	// Inherited from UCurveBase -> UObject
	// Size: 0x220 (0x250 - 0x30)
	class UCurveLinearColor : public UCurveBase	
	{
	public:
		FRichCurve FloatCurves; // 0x30(0x200)
		float AdjustHue; // 0x230(0x4)
		float AdjustSaturation; // 0x234(0x4)
		float AdjustBrightness; // 0x238(0x4)
		float AdjustBrightnessCurve; // 0x23C(0x4)
		float AdjustVibrance; // 0x240(0x4)
		float AdjustMinAlpha; // 0x244(0x4)
		float AdjustMaxAlpha; // 0x248(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x24C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveLinearColor");
			return ret;
		}

		FLinearColor GetUnadjustedLinearColorValue(float InTime); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53F758(relative to base address)
		FLinearColor GetLinearColorValue(float InTime); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53F5E4(relative to base address)
		FLinearColor GetClampedLinearColorValue(float InTime); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53EB34(relative to base address)
	};


	// Class Engine.CurveLinearColorAtlas
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x170 - 0x150)
	class UCurveLinearColorAtlas : public UTexture2D	
	{
	public:
		uint32_t TextureSize; // 0x150(0x4)
		bool bSquareResolution : 1; // 0x154:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x155(0x3) UNKNOWN PROPERTY
		uint32_t TextureHeight; // 0x158(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x15C(0x4) UNKNOWN PROPERTY
		TArray<UCurveLinearColor*> GradientCurves; // 0x160(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveLinearColorAtlas");
			return ret;
		}

		bool GetCurvePosition(UCurveLinearColor* InCurve, float& Position); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C53EBD0(relative to base address)
	};


	// Class Engine.CurveVector
	// Inherited from UCurveBase -> UObject
	// Size: 0x180 (0x1B0 - 0x30)
	class UCurveVector : public UCurveBase	
	{
	public:
		FRichCurve FloatCurves; // 0x30(0x180)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CurveVector");
			return ret;
		}

		FVector GetVectorValue(float InTime); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C53F8C8(relative to base address)
	};


	// Class Engine.DamageType
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UDamageType : public UObject	
	{
	public:
		bool bCausedByWorld : 1; // 0x28:0(0x1)
		bool bScaleMomentumByMass : 1; // 0x28:1(0x1)
		bool bRadialDamageVelChange : 1; // 0x28:2(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float DamageImpulse; // 0x2C(0x4)
		float DestructibleImpulse; // 0x30(0x4)
		float DestructibleDamageSpreadScale; // 0x34(0x4)
		float DamageFalloff; // 0x38(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DamageType");
			return ret;
		}
	};


	// Class Engine.PrimaryDataAsset
	// Inherited from UDataAsset -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UPrimaryDataAsset : public UDataAsset	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrimaryDataAsset");
			return ret;
		}
	};


	// Class Engine.DataDrivenCVarEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem	
	{
	public:
		FMulticastInlineDelegate OnDataDrivenCVarDelegate; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataDrivenCVarEngineSubsystem");
			return ret;
		}

		void OnDataDrivenCVarChanged__DelegateSignature(FString CVarName); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.DataDrivenConsoleVariableSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UDataDrivenConsoleVariableSettings : public UDeveloperSettings	
	{
	public:
		unsigned char UnknownData00_3[0x18]; // 0x30(0x18) UNKNOWN PROPERTY
		TArray<FDataDrivenConsoleVariable> CVarsArray; // 0x48(0x10)
		unsigned char UnknownData01_7[0x10]; // 0x58(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataDrivenConsoleVariableSettings");
			return ret;
		}
	};


	// Class Engine.DataTableFunctionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataTableFunctionLibrary");
			return ret;
		}

		UScriptStruct GetDataTableRowStruct(UDataTable* Table); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C53F4CC(relative to base address)
		void GetDataTableRowNames(UDataTable* Table, TArray<FName>& OutRowNames); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C53F380(relative to base address)
		bool GetDataTableRowFromName(UDataTable* Table, FName RowName, FTableRowBase& OutRow); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF747B5B9F8(relative to base address)
		void GetDataTableColumnNames(UDataTable* Table, TArray<FName>& OutColumnNames); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C53F22C(relative to base address)
		bool GetDataTableColumnNameFromExportName(UDataTable* Table, FString ColumnExportName, FName& OutColumnName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C53F068(relative to base address)
		void GetDataTableColumnExportNames(UDataTable* Table, TArray<FString>& OutExportColumnNames); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C53EEC0(relative to base address)
		TArray GetDataTableColumnAsString(UDataTable* DataTable, FName PropertyName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C53ECA0(relative to base address)
		void EvaluateCurveTableRow(UCurveTable* CurveTable, FName RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>& OutResult, float& OutXY, FString ContextString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748AECB94(relative to base address)
		bool DoesDataTableRowExist(UDataTable* Table, FName RowName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C53E9E0(relative to base address)
	};


	// Class Engine.DebugCameraController
	// Inherited from APlayerController -> AController -> AActor -> UObject
	// Size: 0x190 (0x9D8 - 0x848)
	class ADebugCameraController : public APlayerController	
	{
	public:
		bool bShowSelectedInfo : 1; // 0x848:0(0x1)
		bool bIsFrozenRendering : 1; // 0x848:1(0x1)
		bool bIsOrbitingSelectedActor : 1; // 0x848:2(0x1)
		bool bOrbitPivotUseCenter : 1; // 0x848:3(0x1)
		bool bEnableBufferVisualization : 1; // 0x848:4(0x1)
		bool bEnableBufferVisualizationFullMode : 1; // 0x848:5(0x1)
		bool bIsBufferVisualizationInputSetup : 1; // 0x848:6(0x1)
		bool bLastDisplayEnabled : 1; // 0x848:7(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x849(0x7) UNKNOWN PROPERTY
		UDrawFrustumComponent* DrawFrustum; // 0x850(0x8)
		TWeakObjectPtr<AActor*> SelectedActor; // 0x858(0x8)
		TWeakObjectPtr<UPrimitiveComponent*> SelectedComponent; // 0x860(0x8)
		FHitResult SelectedHitPoint; // 0x868(0xF8)
		APlayerController* OriginalControllerRef; // 0x960(0x8)
		UPlayer* OriginalPlayer; // 0x968(0x8)
		float SpeedScale; // 0x970(0x4)
		float InitialMaxSpeed; // 0x974(0x4)
		float InitialAccel; // 0x978(0x4)
		float InitialDecel; // 0x97C(0x4)
		unsigned char UnknownData01_7[0x58]; // 0x980(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugCameraController");
			return ret;
		}

		void ToggleDisplay(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5642A8(relative to base address)
		void ShowDebugSelectedInfo(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C564290(relative to base address)
		void SetPawnMovementSpeedScale(float NewSpeedScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C564204(relative to base address)
		void ReceiveOnDeactivate(APlayerController* RestoredPC); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveOnActorSelected(AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // Flags: RequiredAPI|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveOnActivate(APlayerController* OriginalPC); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		AActor GetSelectedActor(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C563F4C(relative to base address)
	};


	// Class Engine.DebugCameraControllerSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UDebugCameraControllerSettings : public UDeveloperSettings	
	{
	public:
		TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugCameraControllerSettings");
			return ret;
		}
	};


	// Class Engine.DebugCameraHUD
	// Inherited from AHUD -> AActor -> UObject
	// Size: 0x0 (0x380 - 0x380)
	class ADebugCameraHUD : public AHUD	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugCameraHUD");
			return ret;
		}
	};


	// Class Engine.DebugDrawService
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDebugDrawService : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DebugDrawService");
			return ret;
		}
	};


	// Class Engine.ReporterBase
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UReporterBase : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReporterBase");
			return ret;
		}
	};


	// Class Engine.ReporterGraph
	// Inherited from UReporterBase -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UReporterGraph : public UReporterBase	
	{
	public:
		unsigned char UnknownData00_1[0x98]; // 0x30(0x98) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReporterGraph");
			return ret;
		}
	};


	// Class Engine.DecalActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ADecalActor : public AActor	
	{
	public:
		UDecalComponent* Decal; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DecalActor");
			return ret;
		}

		void SetDecalMaterial(UMaterialInterface* NewDecalMaterial); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C564184(relative to base address)
		UMaterialInterface GetDecalMaterial(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C563F24(relative to base address)
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748985DB4(relative to base address)
	};


	// Class Engine.DefaultPawn
	// Inherited from APawn -> AActor -> UObject
	// Size: 0x28 (0x338 - 0x310)
	class ADefaultPawn : public APawn	
	{
	public:
		float BaseTurnRate; // 0x310(0x4)
		float BaseLookUpRate; // 0x314(0x4)
		UPawnMovementComponent* MovementComponent; // 0x318(0x8)
		USphereComponent* CollisionComponent; // 0x320(0x8)
		UStaticMeshComponent* MeshComponent; // 0x328(0x8)
		bool bAddDefaultMovementBindings : 1; // 0x330:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x331(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DefaultPawn");
			return ret;
		}

		void TurnAtRate(float Rate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5642BC(relative to base address)
		void MoveUp_World(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C564100(relative to base address)
		void MoveRight(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C56407C(relative to base address)
		void MoveForward(float Val); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C563FF8(relative to base address)
		void LookUpAtRate(float Rate); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C563F74(relative to base address)
	};


	// Class Engine.PhysicsVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x10 (0x2D8 - 0x2C8)
	class APhysicsVolume : public AVolume	
	{
	public:
		float TerminalVelocity; // 0x2C8(0x4)
		int32_t Priority; // 0x2CC(0x4)
		float FluidFriction; // 0x2D0(0x4)
		bool bWaterVolume : 1; // 0x2D4:0(0x1)
		bool bPhysicsOnContact : 1; // 0x2D4:1(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x2D5(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsVolume");
			return ret;
		}
	};


	// Class Engine.DefaultPhysicsVolume
	// Inherited from APhysicsVolume -> AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2D8 - 0x2D8)
	class ADefaultPhysicsVolume : public APhysicsVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DefaultPhysicsVolume");
			return ret;
		}
	};


	// Class Engine.DeformableInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDeformableInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeformableInterface");
			return ret;
		}
	};


	// Class Engine.NetDriver
	// Inherited from UObject
	// Size: 0x868 (0x890 - 0x28)
	class UNetDriver : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FString NetConnectionClassName; // 0x30(0x10)
		FString ReplicationDriverClassName; // 0x40(0x10)
		FString ReplicationBridgeClassName; // 0x50(0x10)
		FNetDriverReplicationSystemConfig ReplicationSystemConfigServer; // 0x60(0x1C)
		FNetDriverReplicationSystemConfig ReplicationSystemConfigClient; // 0x7C(0x1C)
		int32_t MaxDownloadSize; // 0x98(0x4)
		bool bClampListenServerTickRate : 1; // 0x9C:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x9D(0x3) UNKNOWN PROPERTY
		int32_t NetServerMaxTickRate; // 0xA0(0x4)
		unsigned char UnknownData02_6[0x1C]; // 0xA4(0x1C) UNKNOWN PROPERTY
		int32_t MaxNetTickRate; // 0xC0(0x4)
		int32_t MaxInternetClientRate; // 0xC4(0x4)
		int32_t MaxClientRate; // 0xC8(0x4)
		float ServerTravelPause; // 0xCC(0x4)
		float SpawnPrioritySeconds; // 0xD0(0x4)
		float RelevantTimeout; // 0xD4(0x4)
		float KeepAliveTime; // 0xD8(0x4)
		float InitialConnectTimeout; // 0xDC(0x4)
		float ConnectionTimeout; // 0xE0(0x4)
		float GracefulCloseConnectionTimeout; // 0xE4(0x4)
		float TimeoutMultiplierForUnoptimizedBuilds; // 0xE8(0x4)
		unsigned char UnknownData03_6[0x4]; // 0xEC(0x4) UNKNOWN PROPERTY
		UNetConnection* ServerConnection; // 0xF0(0x8)
		TArray<UNetConnection*> ClientConnections; // 0xF8(0x10)
		unsigned char UnknownData04_6[0x60]; // 0x108(0x60) UNKNOWN PROPERTY
		int32_t RecentlyDisconnectedTrackingTime; // 0x168(0x4)
		unsigned char UnknownData05_6[0x3C]; // 0x16C(0x3C) UNKNOWN PROPERTY
		UWorld* World; // 0x1A8(0x8)
		UPackage* WorldPackage; // 0x1B0(0x8)
		unsigned char UnknownData06_6[0x20]; // 0x1B8(0x20) UNKNOWN PROPERTY
		UClass* NetConnectionClass; // 0x1D8(0x8)
		UClass* ReplicationDriverClass; // 0x1E0(0x8)
		UClass* ReplicationBridgeClass; // 0x1E8(0x8)
		unsigned char UnknownData07_6[0x10]; // 0x1F0(0x10) UNKNOWN PROPERTY
		FName NetDriverName; // 0x200(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x204(0x4) UNKNOWN PROPERTY
		TArray<FChannelDefinition> ChannelDefinitions; // 0x208(0x10)
		TMap<FName, FChannelDefinition> ChannelDefinitionMap; // 0x218(0x50)
		TArray<UChannel*> ActorChannelPool; // 0x268(0x10)
		unsigned char UnknownData09_6[0x8]; // 0x278(0x8) UNKNOWN PROPERTY
		UNetworkMetricsDatabase* NetworkMetricsDatabase; // 0x280(0x8)
		TMap<FName, UNetworkMetricsBaseListener*> NetworkMetricsListeners; // 0x288(0x50)
		unsigned char UnknownData10_6[0x29]; // 0x2D8(0x29) UNKNOWN PROPERTY
		unsigned char UnknownBit11 : 1; // 0x301:0(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit12 : 1; // 0x301:1(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit13 : 1; // 0x301:2(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit14 : 1; // 0x301:3(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit15 : 1; // 0x301:4(0x1) UNKNOWN PROPERTY
		unsigned char UnknownBit16 : 1; // 0x301:5(0x1) UNKNOWN PROPERTY
		bool bNoTimeouts : 1; // 0x301:6(0x1)
		bool bNeverApplyNetworkEmulationSettings : 1; // 0x301:7(0x1)
		unsigned char UnknownData17_5[0x4F6]; // 0x302(0x4F6) UNKNOWN PROPERTY
		UReplicationDriver* ReplicationDriver; // 0x7F8(0x8)
		unsigned char UnknownData18_7[0x90]; // 0x800(0x90) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetDriver");
			return ret;
		}
	};


	// Class Engine.DemoNetDriver
	// Inherited from UNetDriver -> UObject
	// Size: 0xCC0 (0x1550 - 0x890)
	class UDemoNetDriver : public UNetDriver	
	{
	public:
		unsigned char UnknownData00_3[0x38]; // 0x890(0x38) UNKNOWN PROPERTY
		TMap<FString, FRollbackNetStartupActorInfo> RollbackNetStartupActors; // 0x8C8(0x50)
		unsigned char UnknownData01_6[0xE4]; // 0x918(0xE4) UNKNOWN PROPERTY
		float CheckpointSaveMaxMSPerFrame; // 0x9FC(0x4)
		unsigned char UnknownData02_6[0x18]; // 0xA00(0x18) UNKNOWN PROPERTY
		TArray<FMulticastRecordOptions> MulticastRecordOptions; // 0xA18(0x10)
		TArray<APlayerController*> SpectatorControllers; // 0xA28(0x10)
		unsigned char UnknownData03_7[0xB18]; // 0xA38(0xB18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DemoNetDriver");
			return ret;
		}
	};


	// Class Engine.DestructibleInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDestructibleInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DestructibleInterface");
			return ret;
		}
	};


	// Class Engine.TextureLODSettings
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UTextureLODSettings : public UObject	
	{
	public:
		TArray<FTextureLODGroup> TextureLODGroups; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureLODSettings");
			return ret;
		}
	};


	// Class Engine.DeviceProfile
	// Inherited from UTextureLODSettings -> UObject
	// Size: 0x98 (0xD0 - 0x38)
	class UDeviceProfile : public UTextureLODSettings	
	{
	public:
		FString DeviceType; // 0x38(0x10)
		FString BaseProfileName; // 0x48(0x10)
		bool bIsVisibleForAssets : 1; // 0x58:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x59(0x7) UNKNOWN PROPERTY
		UDeviceProfile* Parent; // 0x60(0x8)
		unsigned char UnknownData01_6[0x28]; // 0x68(0x28) UNKNOWN PROPERTY
		TArray<FString> CVars; // 0x90(0x10)
		TArray<FDPMatchingRulestruct> MatchingRules; // 0xA0(0x10)
		unsigned char UnknownData02_7[0x20]; // 0xB0(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeviceProfile");
			return ret;
		}
	};


	// Class Engine.DeviceProfileManager
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class UDeviceProfileManager : public UObject	
	{
	public:
		TArray<UDeviceProfile*> Profiles; // 0x28(0x10)
		TArray<UDeviceProfile*> BackupProfiles; // 0x38(0x10)
		unsigned char UnknownData00_7[0x48]; // 0x48(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeviceProfileManager");
			return ret;
		}
	};


	// Class Engine.DialogueVoice
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UDialogueVoice : public UObject	
	{
	public:
		TEnumAsByte<EGrammaticalGender> Gender; // 0x28(0x1)
		TEnumAsByte<EGrammaticalNumber> Plurality; // 0x29(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x2A(0x2) UNKNOWN PROPERTY
		FGuid LocalizationGUID; // 0x2C(0x10)
		unsigned char UnknownData01_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DialogueVoice");
			return ret;
		}
	};


	// Class Engine.DialogueWave
	// Inherited from UObject
	// Size: 0x48 (0x70 - 0x28)
	class UDialogueWave : public UObject	
	{
	public:
		bool bMature : 1; // 0x28:0(0x1)
		bool bOverride_SubtitleOverride : 1; // 0x28:1(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		FString SpokenText; // 0x30(0x10)
		FString SubtitleOverride; // 0x40(0x10)
		TArray<FDialogueContextMapping> ContextMappings; // 0x50(0x10)
		FGuid LocalizationGUID; // 0x60(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DialogueWave");
			return ret;
		}
	};


	// Class Engine.DocumentationActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ADocumentationActor : public AActor	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DocumentationActor");
			return ret;
		}
	};


	// Class Engine.DPICustomScalingRule
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDPICustomScalingRule : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DPICustomScalingRule");
			return ret;
		}
	};


	// Class Engine.EdGraphNode_Documentation
	// Inherited from UEdGraphNode -> UObject
	// Size: 0x20 (0xB8 - 0x98)
	class UEdGraphNode_Documentation : public UEdGraphNode	
	{
	public:
		FString Link; // 0x98(0x10)
		FString Excerpt; // 0xA8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EdGraphNode_Documentation");
			return ret;
		}
	};


	// Class Engine.AssetImportData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UAssetImportData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AssetImportData");
			return ret;
		}
	};


	// Class Engine.ThumbnailInfo
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UThumbnailInfo : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ThumbnailInfo");
			return ret;
		}
	};


	// Class Engine.ActorElementAssetDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementAssetDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementAssetDataInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementCounterInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementCounterInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementCounterInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementHierarchyInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementHierarchyInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementHierarchyInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementObjectInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementObjectInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementObjectInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.ActorElementWorldInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UActorElementWorldInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorElementWorldInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementCounterInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementCounterInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementCounterInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementHierarchyInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementHierarchyInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementHierarchyInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementObjectInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementObjectInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementObjectInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.ComponentElementWorldInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UComponentElementWorldInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ComponentElementWorldInterface");
			return ret;
		}
	};


	// Class Engine.EngineElementsLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineElementsLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineElementsLibrary");
			return ret;
		}
	};


	// Class Engine.TypedElementCommonActions
	// Inherited from UObject
	// Size: 0x800 (0x828 - 0x28)
	class UTypedElementCommonActions : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x800]; // 0x28(0x800) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TypedElementCommonActions");
			return ret;
		}

		TArray PasteNormalizedElementsFromString(FScriptTypedElementListProxy& ElementList, UWorld* World, FTypedElementPasteOptions& PasteOption, FString InputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5792B0(relative to base address)
		TArray PasteElementsFromString(UTypedElementSelectionSet* SelectionSet, UWorld* World, FTypedElementPasteOptions& PasteOption, FString InputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C578FBC(relative to base address)
		TArray K2_PasteNormalizedElements(FScriptTypedElementListProxy& ElementList, UWorld* World, FTypedElementPasteOptions& PasteOption); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C578A14(relative to base address)
		TArray K2_PasteElements(UTypedElementSelectionSet* SelectionSet, UWorld* World, FTypedElementPasteOptions& PasteOption); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5787F0(relative to base address)
		TArray K2_DuplicateSelectedElements(UTypedElementSelectionSet* SelectionSet, UWorld* World, FVector& LocationOffset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C578608(relative to base address)
		TArray DuplicateNormalizedElements(FScriptTypedElementListProxy ElementList, UWorld* World, FVector& LocationOffset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C577B24(relative to base address)
		bool DeleteSelectedElements(UTypedElementSelectionSet* SelectionSet, UWorld* World, FTypedElementDeletionOptions& DeletionOptions); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C577754(relative to base address)
		bool DeleteNormalizedElements(FScriptTypedElementListProxy ElementList, UWorld* World, UTypedElementSelectionSet* InSelectionSet, FTypedElementDeletionOptions& DeletionOptions); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5773D4(relative to base address)
		bool CopySelectedElementsToString(UTypedElementSelectionSet* SelectionSet, FString& OutputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C577008(relative to base address)
		bool CopySelectedElements(UTypedElementSelectionSet* SelectionSet); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C576F10(relative to base address)
		bool CopyNormalizedElementsToString(FScriptTypedElementListProxy& ElementList, FString& OutputString); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C576D94(relative to base address)
		bool CopyNormalizedElements(FScriptTypedElementListProxy& ElementList); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C576C88(relative to base address)
	};


	// Class Engine.TypedElementWorldInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UTypedElementWorldInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TypedElementWorldInterface");
			return ret;
		}

		bool SetWorldTransform(FScriptTypedElementHandle& InElementHandle, FTransform& InTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C579B28(relative to base address)
		bool SetRelativeTransform(FScriptTypedElementHandle& InElementHandle, FTransform& InTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C579974(relative to base address)
		bool SetPivotOffset(FScriptTypedElementHandle& InElementHandle, FVector& InPivotOffset); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5797D8(relative to base address)
		FScriptTypedElementHandle PromoteElement(FScriptTypedElementHandle& InElementHandle, UWorld* OverrideWorld); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C579644(relative to base address)
		void NotifyMovementStarted(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C578E14(relative to base address)
		void NotifyMovementOngoing(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C578D6C(relative to base address)
		void NotifyMovementEnded(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C578CC4(relative to base address)
		bool IsTemplateElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74BC1DC2C(relative to base address)
		bool GetWorldTransform(FScriptTypedElementHandle& InElementHandle, FTransform& OutTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C578454(relative to base address)
		bool GetRelativeTransform(FScriptTypedElementHandle& InElementHandle, FTransform& OutTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5782A0(relative to base address)
		bool GetPivotOffset(FScriptTypedElementHandle& InElementHandle, FVector& OutPivotOffset); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C578104(relative to base address)
		UWorld GetOwnerWorld(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C578050(relative to base address)
		ULevel GetOwnerLevel(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C577F9C(relative to base address)
		bool GetBounds(FScriptTypedElementHandle& InElementHandle, FBoxSphereBounds& OutBounds); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C577E8C(relative to base address)
		FScriptTypedElementHandle DuplicateElement(FScriptTypedElementHandle& InElementHandle, UWorld* InWorld, FVector& InLocationOffset); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5778DC(relative to base address)
		bool DeleteElement(FScriptTypedElementHandle& InElementHandle, UWorld* InWorld, UTypedElementSelectionSet* InSelectionSet, FTypedElementDeletionOptions& InDeletionOptions); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C577164(relative to base address)
		bool CanScaleElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C576BD4(relative to base address)
		bool CanPromoteElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C576B20(relative to base address)
		bool CanMoveElement(FScriptTypedElementHandle& InElementHandle, ETypedElementWorldType InWorldType); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C576998(relative to base address)
		bool CanEditElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5768E4(relative to base address)
		bool CanDuplicateElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C576830(relative to base address)
		bool CanDeleteElement(FScriptTypedElementHandle& InElementHandle); // Flags: RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C57677C(relative to base address)
	};


	// Class Engine.ObjectElementAssetDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementAssetDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementAssetDataInterface");
			return ret;
		}
	};


	// Class Engine.ObjectElementCounterInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementCounterInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementCounterInterface");
			return ret;
		}
	};


	// Class Engine.ObjectElementObjectInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementObjectInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementObjectInterface");
			return ret;
		}
	};


	// Class Engine.ObjectElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UObjectElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementAssetDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementAssetDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementAssetDataInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementHierarchyInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementHierarchyInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementHierarchyInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementIdMapTransactor
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USMInstanceElementIdMapTransactor : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementIdMapTransactor");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementPrimitiveCustomDataInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementPrimitiveCustomDataInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementPrimitiveCustomDataInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementSelectionInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementSelectionInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementSelectionInterface");
			return ret;
		}
	};


	// Class Engine.SMInstanceElementWorldInterface
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class USMInstanceElementWorldInterface : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SMInstanceElementWorldInterface");
			return ret;
		}
	};


	// Class Engine.LocalMessage
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULocalMessage : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalMessage");
			return ret;
		}
	};


	// Class Engine.EngineMessage
	// Inherited from ULocalMessage -> UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UEngineMessage : public ULocalMessage	
	{
	public:
		FString FailedPlaceMessage; // 0x28(0x10)
		FString MaxedOutMessage; // 0x38(0x10)
		FString EnteredMessage; // 0x48(0x10)
		FString LeftMessage; // 0x58(0x10)
		FString GlobalNameChange; // 0x68(0x10)
		FString SpecEnteredMessage; // 0x78(0x10)
		FString NewPlayerMessage; // 0x88(0x10)
		FString NewSpecMessage; // 0x98(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineMessage");
			return ret;
		}
	};


	// Class Engine.AutoDestroySubsystem
	// Inherited from UTickableWorldSubsystem -> UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x50 - 0x40)
	class UAutoDestroySubsystem : public UTickableWorldSubsystem	
	{
	public:
		TArray<AActor*> ActorsToPoll; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutoDestroySubsystem");
			return ret;
		}

		void OnActorEndPlay(AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason); // Flags: Final|Native|Private, Memory Exec: 0x7FF74C578EBC(relative to base address)
	};


	// Class Engine.CancellableAsyncAction
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UCancellableAsyncAction : public UBlueprintAsyncActionBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CancellableAsyncAction");
			return ret;
		}

		bool IsActive(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A036C(relative to base address)
		void Cancel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748333524(relative to base address)
	};


	// Class Engine.LODSyncInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULODSyncInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LODSyncInterface");
			return ret;
		}
	};


	// Class Engine.PoseWatchFolder
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatchFolder : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatchFolder");
			return ret;
		}
	};


	// Class Engine.PoseWatchElement
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatchElement : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatchElement");
			return ret;
		}
	};


	// Class Engine.PoseWatchPoseElement
	// Inherited from UPoseWatchElement -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatchPoseElement : public UPoseWatchElement	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatchPoseElement");
			return ret;
		}
	};


	// Class Engine.PoseWatch
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPoseWatch : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PoseWatch");
			return ret;
		}
	};


	// Class Engine.ServerStatReplicator
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xC8 (0x358 - 0x290)
	class AServerStatReplicator : public AInfo	
	{
	public:
		bool bUpdateStatNet; // 0x290(0x1)
		bool bOverwriteClientStats; // 0x291(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x292(0x2) UNKNOWN PROPERTY
		uint32_t Channels; // 0x294(0x4)
		uint32_t InRate; // 0x298(0x4)
		uint32_t OutRate; // 0x29C(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x2A0(0x4) UNKNOWN PROPERTY
		uint32_t MaxPacketOverhead; // 0x2A4(0x4)
		uint32_t InRateClientMax; // 0x2A8(0x4)
		uint32_t InRateClientMin; // 0x2AC(0x4)
		uint32_t InRateClientAvg; // 0x2B0(0x4)
		uint32_t InPacketsClientMax; // 0x2B4(0x4)
		uint32_t InPacketsClientMin; // 0x2B8(0x4)
		uint32_t InPacketsClientAvg; // 0x2BC(0x4)
		uint32_t OutRateClientMax; // 0x2C0(0x4)
		uint32_t OutRateClientMin; // 0x2C4(0x4)
		uint32_t OutRateClientAvg; // 0x2C8(0x4)
		uint32_t OutPacketsClientMax; // 0x2CC(0x4)
		uint32_t OutPacketsClientMin; // 0x2D0(0x4)
		uint32_t OutPacketsClientAvg; // 0x2D4(0x4)
		uint32_t NetNumClients; // 0x2D8(0x4)
		uint32_t InPackets; // 0x2DC(0x4)
		uint32_t OutPackets; // 0x2E0(0x4)
		uint32_t InBunches; // 0x2E4(0x4)
		uint32_t OutBunches; // 0x2E8(0x4)
		uint32_t OutLoss; // 0x2EC(0x4)
		uint32_t InLoss; // 0x2F0(0x4)
		uint32_t VoiceBytesSent; // 0x2F4(0x4)
		uint32_t VoiceBytesRecv; // 0x2F8(0x4)
		uint32_t VoicePacketsSent; // 0x2FC(0x4)
		uint32_t VoicePacketsRecv; // 0x300(0x4)
		uint32_t PercentInVoice; // 0x304(0x4)
		uint32_t PercentOutVoice; // 0x308(0x4)
		uint32_t NumActorChannels; // 0x30C(0x4)
		uint32_t NumConsideredActors; // 0x310(0x4)
		uint32_t PrioritizedActors; // 0x314(0x4)
		uint32_t NumRelevantActors; // 0x318(0x4)
		uint32_t NumRelevantDeletedActors; // 0x31C(0x4)
		uint32_t NumReplicatedActorAttempts; // 0x320(0x4)
		uint32_t NumReplicatedActors; // 0x324(0x4)
		uint32_t NumActors; // 0x328(0x4)
		uint32_t NumNetActors; // 0x32C(0x4)
		uint32_t NumDormantActors; // 0x330(0x4)
		uint32_t NumInitiallyDormantActors; // 0x334(0x4)
		uint32_t NumNetGUIDsAckd; // 0x338(0x4)
		uint32_t NumNetGUIDsPending; // 0x33C(0x4)
		uint32_t NumNetGUIDsUnAckd; // 0x340(0x4)
		uint32_t ObjPathBytes; // 0x344(0x4)
		uint32_t NetGUIDOutRate; // 0x348(0x4)
		uint32_t NetGUIDInRate; // 0x34C(0x4)
		uint32_t NetSaturated; // 0x350(0x4)
		unsigned char UnknownData02_7[0x4]; // 0x354(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ServerStatReplicator");
			return ret;
		}
	};


	// Class Engine.SystemTimeTimecodeProvider
	// Inherited from UTimecodeProvider -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class USystemTimeTimecodeProvider : public UTimecodeProvider	
	{
	public:
		FFrameRate FrameRate; // 0x30(0x8)
		bool bGenerateFullFrame; // 0x38(0x1)
		bool bUseHighPerformanceClock; // 0x39(0x1)
		unsigned char UnknownData00_7[0x6]; // 0x3A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SystemTimeTimecodeProvider");
			return ret;
		}
	};


	// Class Engine.ViewportStatsSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x20 (0x50 - 0x30)
	class UViewportStatsSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x20]; // 0x30(0x20) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ViewportStatsSubsystem");
			return ret;
		}

		void RemoveDisplayDelegate(int32_t IndexToRemove); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A71A0(relative to base address)
		void AddTimedDisplay(FText Text, FLinearColor Color, float duration, FVector2D& DisplayOffset); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59C440(relative to base address)
		int32_t AddDisplayDelegate(FDelegateProperty& Delegate); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C59C390(relative to base address)
	};


	// Class Engine.FloatingPawnMovement
	// Inherited from UPawnMovementComponent -> UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0x18 (0x180 - 0x168)
	class UFloatingPawnMovement : public UPawnMovementComponent	
	{
	public:
		float MaxSpeed; // 0x168(0x4)
		float Acceleration; // 0x16C(0x4)
		float Deceleration; // 0x170(0x4)
		float TurningBoost; // 0x174(0x4)
		bool bPositionCorrected : 1; // 0x178:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x179(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FloatingPawnMovement");
			return ret;
		}
	};


	// Class Engine.Font
	// Inherited from UObject
	// Size: 0x1B0 (0x1D8 - 0x28)
	class UFont : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		EFontCacheType FontCacheType; // 0x30(0x1)
		EFontRasterizationMode FontRasterizationMode; // 0x31(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x32(0x2) UNKNOWN PROPERTY
		FFontSdfSettings SdfSettings; // 0x34(0x4)
		TArray<FFontCharacter> Characters; // 0x38(0x10)
		TArray<UTexture2D*> Textures; // 0x48(0x10)
		int32_t IsRemapped; // 0x58(0x4)
		float EmScale; // 0x5C(0x4)
		float Ascent; // 0x60(0x4)
		float Descent; // 0x64(0x4)
		float Leading; // 0x68(0x4)
		int32_t Kerning; // 0x6C(0x4)
		FFontImportOptionsData ImportOptions; // 0x70(0xB0)
		int32_t NumCharacters; // 0x120(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x124(0x4) UNKNOWN PROPERTY
		TArray<int32_t> MaxCharHeight; // 0x128(0x10)
		float ScalingFactor; // 0x138(0x4)
		int32_t LegacyFontSize; // 0x13C(0x4)
		FName LegacyFontName; // 0x140(0x4)
		unsigned char UnknownData03_6[0x4]; // 0x144(0x4) UNKNOWN PROPERTY
		FCompositeFont CompositeFont; // 0x148(0x40)
		unsigned char UnknownData04_7[0x50]; // 0x188(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Font");
			return ret;
		}
	};


	// Class Engine.FontFace
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UFontFace : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FString SourceFilename; // 0x30(0x10)
		EFontHinting Hinting; // 0x40(0x1)
		EFontLoadingPolicy LoadingPolicy; // 0x41(0x1)
		EFontLayoutMethod LayoutMethod; // 0x42(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x43(0x1) UNKNOWN PROPERTY
		int32_t AscendOverriddenValue; // 0x44(0x4)
		bool bIsAscendOverridden; // 0x48(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		int32_t DescendOverriddenValue; // 0x4C(0x4)
		bool bIsDescendOverridden; // 0x50(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		int32_t StrikeBrushHeightPercentage; // 0x54(0x4)
		unsigned char UnknownData04_7[0x10]; // 0x58(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.FontFace");
			return ret;
		}
	};


	// Class Engine.GameEngine
	// Inherited from UEngine -> UObject
	// Size: 0x58 (0xF78 - 0xF20)
	class UGameEngine : public UEngine	
	{
	public:
		float MaxDeltaTime; // 0xF20(0x4)
		float ServerFlushLogInterval; // 0xF24(0x4)
		UGameInstance* GameInstance; // 0xF28(0x8)
		unsigned char UnknownData00_7[0x48]; // 0xF30(0x48) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameEngine");
			return ret;
		}
	};


	// Class Engine.AsyncActionHandleSaveGame
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase	
	{
	public:
		FMulticastInlineDelegate Completed; // 0x30(0x10)
		unsigned char UnknownData00_6[0x20]; // 0x40(0x20) UNKNOWN PROPERTY
		USaveGame* SaveGameObject; // 0x60(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncActionHandleSaveGame");
			return ret;
		}

		UAsyncActionHandleSaveGame AsyncSaveGameToSlot(UObject* WorldContextObject, USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C59DD58(relative to base address)
		UAsyncActionHandleSaveGame AsyncLoadGameFromSlot(UObject* WorldContextObject, FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C59D9D8(relative to base address)
	};


	// Class Engine.ForceFeedbackEffect
	// Inherited from UObject
	// Size: 0x78 (0xA0 - 0x28)
	class UForceFeedbackEffect : public UObject	
	{
	public:
		TArray<FForceFeedbackChannelDetails> ChannelDetails; // 0x28(0x10)
		TMap<FName, FForceFeedbackEffectOverridenChannelDetails> PerDeviceOverrides; // 0x38(0x50)
		TArray<UInputDeviceProperty*> DeviceProperties; // 0x88(0x10)
		float duration; // 0x98(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x9C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ForceFeedbackEffect");
			return ret;
		}
	};


	// Class Engine.InputDeviceProperty
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UInputDeviceProperty : public UObject	
	{
	public:
		float PropertyDuration; // 0x28(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x2C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceProperty");
			return ret;
		}

		void ResetDeviceProperty(FPlatformUserId PlatformUser, FInputDeviceId DeviceID, bool bForceReset); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF74C5A733C(relative to base address)
		void EvaluateDeviceProperty(FPlatformUserId PlatformUser, FInputDeviceId DeviceID, float DeltaTime, float duration); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF74C5A1C44(relative to base address)
		void ApplyDeviceProperty(FPlatformUserId UserId, FInputDeviceId DeviceID); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C59C9AC(relative to base address)
	};


	// Class Engine.ColorInputDeviceProperty
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x68 (0x98 - 0x30)
	class UColorInputDeviceProperty : public UInputDeviceProperty	
	{
	public:
		FDeviceColorData ColorData; // 0x30(0x8)
		TMap<FName, FDeviceColorData> DeviceOverrideData; // 0x38(0x50)
		unsigned char UnknownData00_7[0x10]; // 0x88(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ColorInputDeviceProperty");
			return ret;
		}
	};


	// Class Engine.ColorInputDeviceCurveProperty
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x70 (0xA0 - 0x30)
	class UColorInputDeviceCurveProperty : public UInputDeviceProperty	
	{
	public:
		FDeviceColorCurveData ColorData; // 0x30(0x10)
		TMap<FName, FDeviceColorCurveData> DeviceOverrideData; // 0x40(0x50)
		unsigned char UnknownData00_7[0x10]; // 0x90(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ColorInputDeviceCurveProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerEffect
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UInputDeviceTriggerEffect : public UInputDeviceProperty	
	{
	public:
		FDeviceTriggerBaseData BaseTriggerData; // 0x30(0x2)
		unsigned char UnknownData00_7[0xE]; // 0x32(0xE) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerEffect");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerFeedbackProperty
	// Inherited from UInputDeviceTriggerEffect -> UInputDeviceProperty -> UObject
	// Size: 0x70 (0xB0 - 0x40)
	class UInputDeviceTriggerFeedbackProperty : public UInputDeviceTriggerEffect	
	{
	public:
		FDeviceTriggerFeedbackData TriggerData; // 0x40(0x10)
		TMap<FName, FDeviceTriggerFeedbackData> DeviceOverrideData; // 0x50(0x50)
		unsigned char UnknownData00_7[0x10]; // 0xA0(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerFeedbackProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerResistanceProperty
	// Inherited from UInputDeviceTriggerEffect -> UInputDeviceProperty -> UObject
	// Size: 0x78 (0xB8 - 0x40)
	class UInputDeviceTriggerResistanceProperty : public UInputDeviceTriggerEffect	
	{
	public:
		FDeviceTriggerTriggerResistanceData TriggerData; // 0x40(0x10)
		TMap<FName, FDeviceTriggerTriggerResistanceData> DeviceOverrideData; // 0x50(0x50)
		unsigned char UnknownData00_7[0x18]; // 0xA0(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerResistanceProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceTriggerVibrationProperty
	// Inherited from UInputDeviceTriggerEffect -> UInputDeviceProperty -> UObject
	// Size: 0x80 (0xC0 - 0x40)
	class UInputDeviceTriggerVibrationProperty : public UInputDeviceTriggerEffect	
	{
	public:
		FDeviceTriggerTriggerVibrationData TriggerData; // 0x40(0x18)
		TMap<FName, FDeviceTriggerTriggerVibrationData> DeviceOverrideData; // 0x58(0x50)
		unsigned char UnknownData00_7[0x18]; // 0xA8(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceTriggerVibrationProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceAudioBasedVibrationProperty
	// Inherited from UInputDeviceProperty -> UObject
	// Size: 0x58 (0x88 - 0x30)
	class UInputDeviceAudioBasedVibrationProperty : public UInputDeviceProperty	
	{
	public:
		FAudioBasedVibrationData Data; // 0x30(0x8)
		TMap<FName, FAudioBasedVibrationData> DeviceOverrideData; // 0x38(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceAudioBasedVibrationProperty");
			return ret;
		}
	};


	// Class Engine.InputDeviceSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x168 (0x198 - 0x30)
	class UInputDeviceSubsystem : public UEngineSubsystem	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x30(0x8) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInputHardwareDeviceChanged; // 0x38(0x10)
		TSet<FActiveDeviceProperty> ActiveProperties; // 0x48(0x50)
		TSet<FInputDevicePropertyHandle> PropertiesPendingRemoval; // 0x98(0x50)
		unsigned char UnknownData01_7[0xB0]; // 0xE8(0xB0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceSubsystem");
			return ret;
		}

		void RemoveDevicePropertyHandles(TSet<FInputDevicePropertyHandle>& HandlesToRemove); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5A70BC(relative to base address)
		void RemoveDevicePropertyByHandle(FInputDevicePropertyHandle HandleToRemove); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A6FAC(relative to base address)
		void RemoveAllDeviceProperties(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A6F98(relative to base address)
		bool IsPropertyActive(FInputDevicePropertyHandle Handle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4D04(relative to base address)
		FHardwareDeviceIdentifier GetMostRecentlyUsedHardwareDevice(FPlatformUserId InUserId); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3408(relative to base address)
		FHardwareDeviceIdentifier GetInputDeviceHardwareIdentifier(FInputDeviceId InputDevice); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A2F48(relative to base address)
		UInputDeviceProperty GetActiveDeviceProperty(FInputDevicePropertyHandle Handle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A2450(relative to base address)
		FInputDevicePropertyHandle ActivateDevicePropertyOfClass(UClass* PropertyClass, FActivateDevicePropertyParams& Params); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C59C06C(relative to base address)
	};


	// Class Engine.PlayerStateCountLimiterConfig
	// Inherited from UNetObjectCountLimiterConfig -> UNetObjectPrioritizerConfig -> UObject
	// Size: 0x0 (0x40 - 0x40)
	class UPlayerStateCountLimiterConfig : public UNetObjectCountLimiterConfig	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerStateCountLimiterConfig");
			return ret;
		}
	};


	// Class Engine.SaveGame
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USaveGame : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SaveGame");
			return ret;
		}
	};


	// Class Engine.LocalPlayerSaveGame
	// Inherited from USaveGame -> UObject
	// Size: 0x30 (0x58 - 0x28)
	class ULocalPlayerSaveGame : public USaveGame	
	{
	public:
		ULocalPlayer* OwningPlayer; // 0x28(0x8)
		FString SaveSlotName; // 0x30(0x10)
		int32_t SavedDataVersion; // 0x40(0x4)
		int32_t LoadedDataVersion; // 0x44(0x4)
		int32_t CurrentSaveRequest; // 0x48(0x4)
		int32_t LastSuccessfulSaveRequest; // 0x4C(0x4)
		int32_t LastErrorSaveRequest; // 0x50(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalPlayerSaveGame");
			return ret;
		}

		bool WasSaveRequested(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C316770(relative to base address)
		bool WasLoaded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5AD654(relative to base address)
		bool WasLastSaveSuccessful(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5AD62C(relative to base address)
		bool SaveGameToSlotForLocalPlayer(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A798C(relative to base address)
		void ResetToDefault(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A4418(relative to base address)
		void OnResetToDefault(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnPreSave(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnPostSave(bool bSuccess); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnPostLoad(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		ULocalPlayerSaveGame LoadOrCreateSaveGameForLocalPlayer(UClass* SaveGameClass, APlayerController* LocalPlayerController, FString SlotName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A50A4(relative to base address)
		bool IsSaveInProgress(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4E20(relative to base address)
		FString GetSaveSlotName(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3CF0(relative to base address)
		int32_t GetSavedDataVersion(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3D34(relative to base address)
		int32_t GetPlatformUserIndex(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3A0458(relative to base address)
		FPlatformUserId GetPlatformUserId(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3744(relative to base address)
		APlayerController GetLocalPlayerController(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3348(relative to base address)
		int32_t GetLatestDataVersion(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3320(relative to base address)
		int32_t GetInvalidDataVersion(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A31A0(relative to base address)
		bool AsyncSaveGameToSlotForLocalPlayer(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7493F5558(relative to base address)
		bool AsyncLoadOrCreateSaveGameForLocalPlayer(UClass* SaveGameClass, APlayerController* LocalPlayerController, FString SlotName, FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C59DB24(relative to base address)
	};


	// Class Engine.SpringArmComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x100 (0x320 - 0x220)
	class USpringArmComponent : public USceneComponent	
	{
	public:
		float TargetArmLength; // 0x220(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x224(0x4) UNKNOWN PROPERTY
		FVector SocketOffset; // 0x228(0x18)
		FVector TargetOffset; // 0x240(0x18)
		float ProbeSize; // 0x258(0x4)
		TEnumAsByte<ECollisionChannel> ProbeChannel; // 0x25C(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x25D(0x3) UNKNOWN PROPERTY
		bool bDoCollisionTest : 1; // 0x260:0(0x1)
		bool bUsePawnControlRotation : 1; // 0x260:1(0x1)
		bool bInheritPitch : 1; // 0x260:2(0x1)
		bool bInheritYaw : 1; // 0x260:3(0x1)
		bool bInheritRoll : 1; // 0x260:4(0x1)
		bool bEnableCameraLag : 1; // 0x260:5(0x1)
		bool bEnableCameraRotationLag : 1; // 0x260:6(0x1)
		bool bUseCameraLagSubstepping : 1; // 0x260:7(0x1)
		bool bDrawDebugLagMarkers : 1; // 0x261:0(0x1)
		unsigned char UnknownData02_5[0x2]; // 0x262(0x2) UNKNOWN PROPERTY
		float CameraLagSpeed; // 0x264(0x4)
		float CameraRotationLagSpeed; // 0x268(0x4)
		float CameraLagMaxTimeStep; // 0x26C(0x4)
		float CameraLagMaxDistance; // 0x270(0x4)
		bool bClampToMaxPhysicsDeltaTime : 1; // 0x274:0(0x1)
		unsigned char UnknownData03_7[0xAB]; // 0x275(0xAB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpringArmComponent");
			return ret;
		}

		bool IsCollisionFixApplied(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4C2C(relative to base address)
		FVector GetUnfixedCameraPosition(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4074(relative to base address)
		FRotator GetTargetRotation(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3FE0(relative to base address)
	};


	// Class Engine.TouchInterface
	// Inherited from UObject
	// Size: 0x30 (0x58 - 0x28)
	class UTouchInterface : public UObject	
	{
	public:
		TArray<FTouchInputControl> Controls; // 0x28(0x10)
		float ActiveOpacity; // 0x38(0x4)
		float InactiveOpacity; // 0x3C(0x4)
		float TimeUntilDeactive; // 0x40(0x4)
		float TimeUntilReset; // 0x44(0x4)
		float ActivationDelay; // 0x48(0x4)
		bool bPreventRecenter; // 0x4C(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		float StartupDelay; // 0x50(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TouchInterface");
			return ret;
		}
	};


	// Class Engine.GameInstance
	// Inherited from UObject
	// Size: 0x198 (0x1C0 - 0x28)
	class UGameInstance : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		TArray<ULocalPlayer*> LocalPlayers; // 0x38(0x10)
		UOnlineSession* OnlineSession; // 0x48(0x8)
		TArray<UObject*> ReferencedObjects; // 0x50(0x10)
		unsigned char UnknownData01_6[0x18]; // 0x60(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnPawnControllerChangedDelegates; // 0x78(0x10)
		unsigned char UnknownData02_6[0x18]; // 0x88(0x18) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnInputDeviceConnectionChange; // 0xA0(0x10)
		FMulticastInlineDelegate OnUserInputDevicePairingChange; // 0xB0(0x10)
		unsigned char UnknownData03_7[0x100]; // 0xC0(0x100) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameInstance");
			return ret;
		}

		void ReceiveShutdown(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void ReceiveInit(); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void DebugRemovePlayer(int32_t ControllerId); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C5A1340(relative to base address)
		void DebugCreatePlayer(int32_t ControllerId); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C5A12BC(relative to base address)
	};


	// Class Engine.GameModeBase
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x98 (0x328 - 0x290)
	class AGameModeBase : public AInfo	
	{
	public:
		FString OptionsString; // 0x290(0x10)
		UClass* GameSessionClass; // 0x2A0(0x8)
		UClass* GameStateClass; // 0x2A8(0x8)
		UClass* PlayerControllerClass; // 0x2B0(0x8)
		UClass* PlayerStateClass; // 0x2B8(0x8)
		UClass* HUDClass; // 0x2C0(0x8)
		UClass* DefaultPawnClass; // 0x2C8(0x8)
		UClass* SpectatorClass; // 0x2D0(0x8)
		UClass* ReplaySpectatorPlayerControllerClass; // 0x2D8(0x8)
		UClass* ServerStatReplicatorClass; // 0x2E0(0x8)
		AGameSession* GameSession; // 0x2E8(0x8)
		AGameStateBase* GameState; // 0x2F0(0x8)
		AServerStatReplicator* ServerStatReplicator; // 0x2F8(0x8)
		FText DefaultPlayerName; // 0x300(0x10)
		bool bUseSeamlessTravel : 1; // 0x310:0(0x1)
		bool bStartPlayersAsSpectators : 1; // 0x310:1(0x1)
		bool bPauseable : 1; // 0x310:2(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x311(0x3) UNKNOWN PROPERTY
		EReplicationSystem GameNetDriverReplicationSystem; // 0x314(0x1)
		unsigned char UnknownData01_7[0x13]; // 0x315(0x13) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameModeBase");
			return ret;
		}

		void StartPlay(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749734174(relative to base address)
		APawn SpawnDefaultPawnFor(AController* NewPlayer, AActor* StartSpot); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5AA2CC(relative to base address)
		APawn SpawnDefaultPawnAtTransform(AController* NewPlayer, FTransform& SpawnTransform); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF74C5AA198(relative to base address)
		bool ShouldReset(AActor* ActorToReset); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5A9914(relative to base address)
		void ReturnToMainMenuHost(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF749F9E3B4(relative to base address)
		void RestartPlayerAtTransform(AController* NewPlayer, FTransform& SpawnTransform); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5A7740(relative to base address)
		void RestartPlayerAtPlayerStart(AController* NewPlayer, AActor* StartSpot); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7678(relative to base address)
		void RestartPlayer(AController* NewPlayer); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A75F4(relative to base address)
		void ResetLevel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7479984A4(relative to base address)
		bool PlayerCanRestart(APlayerController* Player); // Flags: RequiredAPI|Native|Event|Public|BlueprintCallable|BlueprintEvent, Memory Exec: 0x7FF74C5A6990(relative to base address)
		bool MustSpectate(APlayerController* NewPlayerController); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF74C5A56A4(relative to base address)
		void K2_PostLogin(APlayerController* NewPlayer); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnSwapPlayerControllers(APlayerController* OldPC, APlayerController* NewPC); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnRestartPlayer(AController* NewPlayer); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnLogout(AController* ExitingController); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void K2_OnChangeName(AController* Other, FString NewName, bool bNameChange); // Flags: RequiredAPI|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		AActor K2_FindPlayerStart(AController* Player, FString IncomingName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A4EE8(relative to base address)
		void InitStartSpot(AActor* StartSpot, AController* NewPlayer); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5A4954(relative to base address)
		void InitializeHUDForPlayer(APlayerController* NewPlayer); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF74C5A4A1C(relative to base address)
		bool HasMatchStarted(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749C64878(relative to base address)
		bool HasMatchEnded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4834(relative to base address)
		void HandleStartingNewPlayer(APlayerController* NewPlayer); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5A4708(relative to base address)
		int32_t GetNumSpectators(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A371C(relative to base address)
		int32_t GetNumPlayers(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A36F4(relative to base address)
		UClass GetDefaultPawnClassForController(AController* InController); // Flags: RequiredAPI|Native|Event|Public|BlueprintCallable|BlueprintEvent, Memory Exec: 0x7FF74C5A2C5C(relative to base address)
		AActor FindPlayerStart(AController* Player, FString IncomingName); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5A21D8(relative to base address)
		AActor ChoosePlayerStart(AController* Player); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5A05A8(relative to base address)
		void ChangeName(AController* Controller, FString NewName, bool bNameChange); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A0488(relative to base address)
		bool CanSpectate(APlayerController* Viewer, APlayerState* ViewTarget); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent, Memory Exec: 0x7FF74C5A03A8(relative to base address)
	};


	// Class Engine.GameMode
	// Inherited from AGameModeBase -> AInfo -> AActor -> UObject
	// Size: 0x48 (0x370 - 0x328)
	class AGameMode : public AGameModeBase	
	{
	public:
		FName MatchState; // 0x328(0x4)
		bool bDelayedStart : 1; // 0x32C:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x32D(0x3) UNKNOWN PROPERTY
		int32_t NumSpectators; // 0x330(0x4)
		int32_t NumPlayers; // 0x334(0x4)
		int32_t NumBots; // 0x338(0x4)
		float MinRespawnDelay; // 0x33C(0x4)
		int32_t NumTravellingPlayers; // 0x340(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x344(0x4) UNKNOWN PROPERTY
		UClass* EngineMessageClass; // 0x348(0x8)
		TArray<APlayerState*> InactivePlayerArray; // 0x350(0x10)
		float InactivePlayerStateLifeSpan; // 0x360(0x4)
		int32_t MaxInactivePlayers; // 0x364(0x4)
		bool bHandleDedicatedServerReplays; // 0x368(0x1)
		unsigned char UnknownData02_7[0x7]; // 0x369(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameMode");
			return ret;
		}

		void StartMatch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5AC280(relative to base address)
		void Say(FString Msg); // Flags: RequiredAPI|Exec|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A79B4(relative to base address)
		void RestartGame(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A75DC(relative to base address)
		bool ReadyToStartMatch(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF74C5A6C70(relative to base address)
		bool ReadyToEndMatch(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF748DFCD40(relative to base address)
		void K2_OnSetMatchState(FName NewState); // Flags: RequiredAPI|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		bool IsMatchInProgress(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A4CDC(relative to base address)
		FName GetMatchState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5A3370(relative to base address)
		void EndMatch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A1C2C(relative to base address)
		void AbortMatch(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C59C054(relative to base address)
	};


	// Class Engine.GameplayStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UGameplayStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameplayStatics");
			return ret;
		}

		void UnRetainAllSoundsInSoundClass(USoundClass* InSoundClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5AD098(relative to base address)
		void UnloadStreamLevelBySoftObjectPtr(UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5AD360(relative to base address)
		void UnloadStreamLevel(UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5AD108(relative to base address)
		FVector TransformWorldToFirstPerson(FMinimalViewInfo& ViewInfo, FVector& WorldPosition, bool bIgnoreFirstPersonScale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5ACE0C(relative to base address)
		bool SuggestProjectileVelocity_MovingTarget(UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector ProjectileStartLocation, AActor* TargetActor, FVector TargetLocationOffset, double GravityZOverride, double TimeToTarget, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, FLinearColor DrawDebugColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5AC6CC(relative to base address)
		bool SuggestProjectileVelocity_CustomArc(UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5AC298(relative to base address)
		UAudioComponent SpawnSoundAttached(USoundBase* Sound, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7487A8258(relative to base address)
		UAudioComponent SpawnSoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747DA22A0(relative to base address)
		UAudioComponent SpawnSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74903C16C(relative to base address)
		UObject SpawnObject(UClass* ObjectClass, UObject* Outer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747825600(relative to base address)
		UForceFeedbackComponent SpawnForceFeedbackAttached(UForceFeedbackEffect* ForceFeedbackEffect, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5AB96C(relative to base address)
		UForceFeedbackComponent SpawnForceFeedbackAtLocation(UObject* WorldContextObject, UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74932C538(relative to base address)
		UParticleSystemComponent SpawnEmitterAttached(UParticleSystem* EmitterTemplate, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7473D6910(relative to base address)
		UParticleSystemComponent SpawnEmitterAtLocation(UObject* WorldContextObject, UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7473D6C70(relative to base address)
		UAudioComponent SpawnDialogueAttached(UDialogueWave* Dialogue, FDialogueContext& Context, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5AAF58(relative to base address)
		UAudioComponent SpawnDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5AA810(relative to base address)
		UAudioComponent SpawnDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5AA398(relative to base address)
		UDecalComponent SpawnDecalAttached(UMaterialInterface* DecalMaterial, FVector DecalSize, USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5A99A8(relative to base address)
		UDecalComponent SpawnDecalAtLocation(UObject* WorldContextObject, UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74936F3C4(relative to base address)
		void SetWorldOriginLocation(UObject* WorldContextObject, FIntVector NewLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5A97C4(relative to base address)
		void SetViewportMouseCaptureMode(UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A96F4(relative to base address)
		void SetSubtitlesEnabled(bool bEnabled); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A9684(relative to base address)
		void SetSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float Volume, float pitch, float FadeInTime, bool bApplyToChildren); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A924C(relative to base address)
		void SetSoundClassDistanceScale(UObject* WorldContextObject, USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A9114(relative to base address)
		void SetPlayerPlatformUserId(APlayerController* PlayerController, FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A8484(relative to base address)
		void SetPlayerControllerID(APlayerController* Player, int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A83C0(relative to base address)
		void SetMaxAudioChannelsScaled(UObject* WorldContextObject, float MaxChannelCountScale); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A830C(relative to base address)
		void SetGlobalTimeDilation(UObject* WorldContextObject, float TimeDilation); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A8258(relative to base address)
		void SetGlobalPitchModulation(UObject* WorldContextObject, float PitchModulation, float TimeSec); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A8160(relative to base address)
		void SetGlobalListenerFocusParameters(UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7EC8(relative to base address)
		bool SetGamePaused(UObject* WorldContextObject, bool bPaused); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7DDC(relative to base address)
		void SetForceDisableSplitscreen(UObject* WorldContextObject, bool bDisable); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7D00(relative to base address)
		void SetEnableWorldRendering(UObject* WorldContextObject, bool bEnable); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7C4C(relative to base address)
		void SetBaseSoundMix(UObject* WorldContextObject, USoundMix* InSoundMix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7B34(relative to base address)
		bool SetActiveSpatialPluginByName(UObject* WorldContextObject, FName InPluginName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7A48(relative to base address)
		bool SaveGameToSlot(USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7874(relative to base address)
		void RemovePlayer(APlayerController* Player, bool bDestroyPawn); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A7220(relative to base address)
		FVector RebaseZeroOriginOntoLocal(UObject* WorldContextObject, FVector WorldLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A6E18(relative to base address)
		FVector RebaseLocalOriginOntoZero(UObject* WorldContextObject, FVector WorldLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A6C98(relative to base address)
		void PushSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7479826E0(relative to base address)
		bool ProjectWorldToScreen(APlayerController* Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A6A94(relative to base address)
		void PrimeSound(USoundBase* InSound); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7496B1644(relative to base address)
		void PrimeAllSoundsInSoundClass(USoundClass* InSoundClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A6A24(relative to base address)
		void PopSoundMixModifier(UObject* WorldContextObject, USoundMix* InSoundMixModifier); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7479814B8(relative to base address)
		void PlayWorldCameraShake(UObject* WorldContextObject, UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7486B1C68(relative to base address)
		void PlaySoundAtLocation(UObject* WorldContextObject, USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings, USoundConcurrency* ConcurrencySettings, AActor* OwningActor, UInitialActiveSoundParams* InitialParams); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7489E4A34(relative to base address)
		void PlaySound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, AActor* OwningActor, bool bIsUISound); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74888BDF4(relative to base address)
		void PlayDialogueAtLocation(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundAttenuation* AttenuationSettings); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5A6038(relative to base address)
		void PlayDialogue2D(UObject* WorldContextObject, UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5A5C8C(relative to base address)
		FString ParseOption(FString Options, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A5B78(relative to base address)
		void OpenLevelBySoftObjectPtr(UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bAbsolute, FString Options); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A59C0(relative to base address)
		void OpenLevel(UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A5868(relative to base address)
		bool ObjectIsA(UObject* Object, UClass* ObjectClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A5738(relative to base address)
		FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, UPhysicalMaterial* PhysMat, AActor* HitActor, UPrimitiveComponent* HitComponent, FName HitBoneName, FName BoneName, int32_t HitItem, int32_t ElementIndex, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BB9F4C(relative to base address)
		void LoadStreamLevelBySoftObjectPtr(UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A5418(relative to base address)
		void LoadStreamLevel(UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A5204(relative to base address)
		USaveGame LoadGameFromSlot(FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A4FD0(relative to base address)
		bool IsSplitscreenForceDisabled(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A4E48(relative to base address)
		bool IsGamePaused(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A4C44(relative to base address)
		bool IsAnyLocalPlayerCameraWithinRange(UObject* WorldContextObject, FVector& Location, float MaximumRange); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A4AA0(relative to base address)
		bool HasOption(FString Options, FString InKey); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A485C(relative to base address)
		bool HasLaunchOption(FString OptionToCheck); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A478C(relative to base address)
		int32_t GrassOverlappingSphereCount(UObject* WorldContextObject, UStaticMesh* StaticMesh, FVector CenterPosition, float Radius); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5A44C4(relative to base address)
		FIntVector GetWorldOriginLocation(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A4434(relative to base address)
		double GetWorldDeltaSeconds(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748E538F4(relative to base address)
		void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix& ViewMatrix, FMatrix& ProjectionMatrix, FMatrix& ViewProjectionMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A412C(relative to base address)
		EMouseCaptureMode GetViewportMouseCaptureMode(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A438C(relative to base address)
		double GetUnpausedTimeSeconds(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A409C(relative to base address)
		double GetTimeSeconds(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747948C10(relative to base address)
		TEnumAsByte GetSurfaceType(FHitResult& Hit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3F0C(relative to base address)
		ULevelStreaming GetStreamingLevel(UObject* WorldContextObject, FName PackageName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3D5C(relative to base address)
		double GetRealTimeSeconds(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489F079C(relative to base address)
		APlayerState GetPlayerStateFromUniqueNetId(UObject* WorldContextObject, FUniqueNetIdRepl& UniqueID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3BB4(relative to base address)
		APlayerState GetPlayerState(UObject* WorldContextObject, int32_t PlayerStateIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3AD4(relative to base address)
		APawn GetPlayerPawn(UObject* WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7492B6FCC(relative to base address)
		int32_t GetPlayerControllerID(APlayerController* Player); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3A4C(relative to base address)
		APlayerController GetPlayerControllerFromPlatformUser(UObject* WorldContextObject, FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A38FC(relative to base address)
		APlayerController GetPlayerControllerFromID(UObject* WorldContextObject, int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3838(relative to base address)
		APlayerController GetPlayerController(UObject* WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B30850(relative to base address)
		ACharacter GetPlayerCharacter(UObject* WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3774(relative to base address)
		APlayerCameraManager GetPlayerCameraManager(UObject* WorldContextObject, int32_t PlayerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748FA6950(relative to base address)
		FString GetPlatformName(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7491A30C8(relative to base address)
		UClass GetObjectClass(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BD3470(relative to base address)
		int32_t GetNumPlayerStates(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3668(relative to base address)
		int32_t GetNumPlayerControllers(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A35D4(relative to base address)
		int32_t GetNumLocalPlayerControllers(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3530(relative to base address)
		int32_t GetMaxAudioChannelCount(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A3388(relative to base address)
		void GetKeyValue(FString Pair, FString& Key, FString& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A31C8(relative to base address)
		int32_t GetIntOption(FString Options, FString Key, int32_t DefaultValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A3070(relative to base address)
		float GetGlobalTimeDilation(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A2EC8(relative to base address)
		AGameStateBase GetGameState(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747640154(relative to base address)
		AGameModeBase GetGameMode(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7492D1348(relative to base address)
		UGameInstance GetGameInstance(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A2E48(relative to base address)
		bool GetEnableWorldRendering(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A2D78(relative to base address)
		UReverbEffect GetCurrentReverbEffect(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A2B80(relative to base address)
		FString GetCurrentLevelName(UObject* WorldContextObject, bool bRemovePrefixString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7483D3F50(relative to base address)
		bool GetClosestListenerLocation(UObject* WorldContextObject, FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, FVector& ListenerPosition); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5A291C(relative to base address)
		TArray GetAvailableSpatialPluginNames(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A283C(relative to base address)
		double GetAudioTimeSeconds(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A27AC(relative to base address)
		void GetAllActorsWithTag(UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7496EAA28(relative to base address)
		void GetAllActorsWithInterface(UObject* WorldContextObject, UClass* Interface, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF747F76410(relative to base address)
		void GetAllActorsOfClassWithTag(UObject* WorldContextObject, UClass* ActorClass, FName Tag, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5A2638(relative to base address)
		void GetAllActorsOfClass(UObject* WorldContextObject, UClass* ActorClass, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF746F3CAEC(relative to base address)
		AActor GetActorOfClass(UObject* WorldContextObject, UClass* ActorClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7493E8468(relative to base address)
		void GetActorArrayBounds(TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF746F3C604(relative to base address)
		FVector GetActorArrayAverageLocation(TArray<AActor*>& Actors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7491710E0(relative to base address)
		FName GetActiveSpatialPluginName(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A256C(relative to base address)
		void GetAccurateRealTime(int32_t& Seconds, double& PartialSeconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A2340(relative to base address)
		void FlushLevelStreaming(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A22C4(relative to base address)
		AActor FinishSpawningActor(AActor* Actor, FTransform& SpawnTransform, ESpawnActorScaleMethod TransformScaleMethod); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748EA05B4(relative to base address)
		AActor FindNearestActor(FVector Origin, TArray<AActor*>& ActorsToCheck, float& Distance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749416DA4(relative to base address)
		bool FindCollisionUV(FHitResult& Hit, int32_t UVChannel, FVector2D& UV); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A2050(relative to base address)
		void EnableLiveStreaming(bool Enable); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A1B9C(relative to base address)
		bool DoesSaveGameExist(FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A1AC8(relative to base address)
		bool DeprojectScreenToWorld(APlayerController* Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A18DC(relative to base address)
		bool DeprojectSceneCaptureToWorld(ASceneCapture2D* SceneCapture2D, FVector2D& TargetUV, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A16B0(relative to base address)
		bool DeprojectSceneCaptureComponentToWorld(USceneCaptureComponent2D* SceneCaptureComponent2D, FVector2D& TargetUV, FVector& WorldPosition, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5A14C4(relative to base address)
		bool DeleteGameInSlot(FString SlotName, int32_t UserIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A13C4(relative to base address)
		void DeactivateReverbEffect(UObject* WorldContextObject, FName TagName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A11AC(relative to base address)
		UAudioComponent CreateSound2D(UObject* WorldContextObject, USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // Flags: Final|RequiredAPI|BlueprintCosmetic|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A0D84(relative to base address)
		USaveGame CreateSaveGameObject(UClass* SaveGameClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A0CF0(relative to base address)
		APlayerController CreatePlayerFromPlatformUser(UObject* WorldContextObject, FPlatformUserId UserId, bool bSpawnPlayerController); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A0AF0(relative to base address)
		APlayerController CreatePlayer(UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A09F8(relative to base address)
		void ClearSoundMixModifiers(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A0988(relative to base address)
		void ClearSoundMixClassOverride(UObject* WorldContextObject, USoundMix* InSoundMixModifier, USoundClass* InSoundClass, float FadeOutTime); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A063C(relative to base address)
		void CancelAsyncLoading(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A0474(relative to base address)
		void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, UPhysicalMaterial* PhysMat, AActor* HitActor, UPrimitiveComponent* HitComponent, FName& HitBoneName, FName& BoneName, int32_t& HitItem, int32_t& ElementIndex, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747CBFF4C(relative to base address)
		bool BlueprintSuggestProjectileVelocity(UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, bool bAcceptClosestOnNoSolutions); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59E404(relative to base address)
		bool Blueprint_PredictProjectilePath_ByTraceChannel(UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59F850(relative to base address)
		bool Blueprint_PredictProjectilePath_ByObjectType(UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59ED88(relative to base address)
		bool Blueprint_PredictProjectilePath_Advanced(UObject* WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C59EC2C(relative to base address)
		AActor BeginSpawningActorFromBlueprint(UObject* WorldContextObject, UBlueprint* Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59DEEC(relative to base address)
		AActor BeginDeferredActorSpawnFromClass(UObject* WorldContextObject, UClass* ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, AActor* Owner, ESpawnActorScaleMethod TransformScaleMethod); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748ABF2FC(relative to base address)
		bool AreSubtitlesEnabled(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C59D9B8(relative to base address)
		bool AreAnyListenersWithinRange(UObject* WorldContextObject, FVector& Location, float MaximumRange); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF749168FEC(relative to base address)
		bool ApplyRadialDamageWithFalloff(UObject* WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59D468(relative to base address)
		bool ApplyRadialDamage(UObject* WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, AActor* DamageCauser, AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59CFD4(relative to base address)
		float ApplyPointDamage(AActor* DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C59CB80(relative to base address)
		float ApplyDamage(AActor* DamagedActor, float BaseDamage, AController* EventInstigator, AActor* DamageCauser, UClass* DamageTypeClass); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C59C778(relative to base address)
		void AnnounceAccessibleString(FString AnnouncementString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C59C6D0(relative to base address)
		void ActivateReverbEffect(UObject* WorldContextObject, UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C59C168(relative to base address)
	};


	// Class Engine.GameSession
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x28 (0x2B8 - 0x290)
	class AGameSession : public AInfo	
	{
	public:
		int32_t MaxSpectators; // 0x290(0x4)
		int32_t MaxPlayers; // 0x294(0x4)
		int32_t MaxPartySize; // 0x298(0x4)
		char MaxSplitscreensPerConnection; // 0x29C(0x1)
		bool bRequiresPushToTalk; // 0x29D(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x29E(0x2) UNKNOWN PROPERTY
		FName SessionName; // 0x2A0(0x4)
		unsigned char UnknownData01_7[0x14]; // 0x2A4(0x14) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameSession");
			return ret;
		}
	};


	// Class Engine.GameStateBase
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x58 (0x2E8 - 0x290)
	class AGameStateBase : public AInfo	
	{
	public:
		UClass* GameModeClass; // 0x290(0x8)
		AGameModeBase* AuthorityGameMode; // 0x298(0x8)
		UClass* SpectatorClass; // 0x2A0(0x8)
		TArray<APlayerState*> PlayerArray; // 0x2A8(0x10)
		bool bReplicatedHasBegunPlay; // 0x2B8(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x2B9(0x3) UNKNOWN PROPERTY
		float ReplicatedWorldTimeSeconds; // 0x2BC(0x4)
		double ReplicatedWorldTimeSecondsDouble; // 0x2C0(0x8)
		float ServerWorldTimeSecondsDelta; // 0x2C8(0x4)
		float ServerWorldTimeSecondsUpdateFrequency; // 0x2CC(0x4)
		unsigned char UnknownData01_7[0x18]; // 0x2D0(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameStateBase");
			return ret;
		}

		void OnRep_SpectatorClass(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF74851EA54(relative to base address)
		void OnRep_ReplicatedWorldTimeSecondsDouble(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF7486C1414(relative to base address)
		void OnRep_ReplicatedWorldTimeSeconds(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C5D1E80(relative to base address)
		void OnRep_ReplicatedHasBegunPlay(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF748629A08(relative to base address)
		void OnRep_GameModeClass(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF74851EF54(relative to base address)
		bool HasMatchStarted(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1D78(relative to base address)
		bool HasMatchEnded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7488B0A70(relative to base address)
		bool HasBegunPlay(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1D50(relative to base address)
		double GetServerWorldTimeSeconds(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF749652670(relative to base address)
		float GetPlayerStartTime(AController* Controller); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1A34(relative to base address)
		float GetPlayerRespawnDelay(AController* Controller); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D19A0(relative to base address)
	};


	// Class Engine.GameState
	// Inherited from AGameStateBase -> AInfo -> AActor -> UObject
	// Size: 0x18 (0x300 - 0x2E8)
	class AGameState : public AGameStateBase	
	{
	public:
		FName MatchState; // 0x2E8(0x4)
		FName PreviousMatchState; // 0x2EC(0x4)
		int32_t ElapsedTime; // 0x2F0(0x4)
		unsigned char UnknownData00_7[0xC]; // 0x2F4(0xC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameState");
			return ret;
		}

		void OnRep_MatchState(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF7479984A4(relative to base address)
		void OnRep_ElapsedTime(); // Flags: RequiredAPI|Native|Public, Memory Exec: 0x7FF749F9E3B4(relative to base address)
	};


	// Class Engine.GameUserSettings
	// Inherited from UObject
	// Size: 0x120 (0x148 - 0x28)
	class UGameUserSettings : public UObject	
	{
	public:
		bool bUseVSync; // 0x28(0x1)
		bool bUseDynamicResolution; // 0x29(0x1)
		unsigned char UnknownData00_6[0x5E]; // 0x2A(0x5E) UNKNOWN PROPERTY
		uint32_t ResolutionSizeX; // 0x88(0x4)
		uint32_t ResolutionSizeY; // 0x8C(0x4)
		uint32_t LastUserConfirmedResolutionSizeX; // 0x90(0x4)
		uint32_t LastUserConfirmedResolutionSizeY; // 0x94(0x4)
		int32_t WindowPosX; // 0x98(0x4)
		int32_t WindowPosY; // 0x9C(0x4)
		int32_t FullscreenMode; // 0xA0(0x4)
		int32_t LastConfirmedFullscreenMode; // 0xA4(0x4)
		int32_t PreferredFullscreenMode; // 0xA8(0x4)
		uint32_t Version; // 0xAC(0x4)
		int32_t AudioQualityLevel; // 0xB0(0x4)
		int32_t LastConfirmedAudioQualityLevel; // 0xB4(0x4)
		float FrameRateLimit; // 0xB8(0x4)
		unsigned char UnknownData01_6[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY
		int32_t DesiredScreenWidth; // 0xC0(0x4)
		bool bUseDesiredScreenHeight; // 0xC4(0x1)
		unsigned char UnknownData02_6[0x3]; // 0xC5(0x3) UNKNOWN PROPERTY
		int32_t DesiredScreenHeight; // 0xC8(0x4)
		int32_t LastUserConfirmedDesiredScreenWidth; // 0xCC(0x4)
		int32_t LastUserConfirmedDesiredScreenHeight; // 0xD0(0x4)
		float LastRecommendedScreenWidth; // 0xD4(0x4)
		float LastRecommendedScreenHeight; // 0xD8(0x4)
		float LastCPUBenchmarkResult; // 0xDC(0x4)
		float LastGPUBenchmarkResult; // 0xE0(0x4)
		unsigned char UnknownData03_6[0x4]; // 0xE4(0x4) UNKNOWN PROPERTY
		TArray<float> LastCPUBenchmarkSteps; // 0xE8(0x10)
		TArray<float> LastGPUBenchmarkSteps; // 0xF8(0x10)
		float LastGPUBenchmarkMultiplier; // 0x108(0x4)
		bool bUseHDRDisplayOutput; // 0x10C(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		int32_t HDRDisplayOutputNits; // 0x110(0x4)
		unsigned char UnknownData05_6[0x24]; // 0x114(0x24) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnGameUserSettingsUINeedsUpdate; // 0x138(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameUserSettings");
			return ret;
		}

		void ValidateSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74802F76C(relative to base address)
		bool SupportsHDRDisplayOutput(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D2A88(relative to base address)
		void SetVSyncEnabled(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D290C(relative to base address)
		void SetVisualEffectQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2A08(relative to base address)
		void SetViewDistanceQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2988(relative to base address)
		void SetToDefaults(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A1D4C(relative to base address)
		void SetTextureQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D288C(relative to base address)
		void SetShadowQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D280C(relative to base address)
		void SetShadingQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D278C(relative to base address)
		void SetScreenResolution(FIntPoint Resolution); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5D2680(relative to base address)
		void SetResolutionScaleValueEx(float NewScaleValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2600(relative to base address)
		void SetResolutionScaleNormalized(float NewScaleNormalized); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2578(relative to base address)
		void SetReflectionQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D24F8(relative to base address)
		void SetPostProcessingQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2478(relative to base address)
		void SetOverallScalabilityLevel(int32_t Value); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D23F4(relative to base address)
		void SetGlobalIlluminationQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2374(relative to base address)
		void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D22F4(relative to base address)
		void SetFrameRateLimit(float NewLimit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2274(relative to base address)
		void SetFoliageQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D21F4(relative to base address)
		void SetDynamicResolutionEnabled(bool bEnable); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D2178(relative to base address)
		void SetBenchmarkFallbackValues(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D20DC(relative to base address)
		void SetAudioQualityLevel(int32_t QualityLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D205C(relative to base address)
		void SetAntiAliasingQuality(int32_t Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1FDC(relative to base address)
		void SaveSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C45B850(relative to base address)
		void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1EE0(relative to base address)
		void RevertVideoMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1EAC(relative to base address)
		void ResetToCurrentSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1E94(relative to base address)
		void LoadSettings(bool bForceReload); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C45B7CC(relative to base address)
		bool IsVSyncEnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1E6C(relative to base address)
		bool IsVSyncDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1E48(relative to base address)
		bool IsScreenResolutionDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1E28(relative to base address)
		bool IsHDREnabled(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1E10(relative to base address)
		bool IsFullscreenModeDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1DEC(relative to base address)
		bool IsDynamicResolutionEnabled(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1DC4(relative to base address)
		bool IsDynamicResolutionDirty(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1DA0(relative to base address)
		bool IsDirty(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C45C864(relative to base address)
		int32_t GetVisualEffectQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BA0724(relative to base address)
		int32_t GetViewDistanceQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BA07FC(relative to base address)
		int32_t GetTextureQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1D3C(relative to base address)
		int32_t GetSyncInterval(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5D1D18(relative to base address)
		int32_t GetShadowQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7495769CC(relative to base address)
		int32_t GetShadingQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1D04(relative to base address)
		FIntPoint GetScreenResolution(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1CD8(relative to base address)
		float GetResolutionScaleNormalized(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1CB8(relative to base address)
		void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1B24(relative to base address)
		int32_t GetReflectionQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7499B6EAC(relative to base address)
		float GetRecommendedResolutionScale(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1AF8(relative to base address)
		TEnumAsByte GetPreferredFullscreenMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1ADC(relative to base address)
		int32_t GetPostProcessingQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1AC8(relative to base address)
		int32_t GetOverallScalabilityLevel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1978(relative to base address)
		FIntPoint GetLastConfirmedScreenResolution(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D194C(relative to base address)
		TEnumAsByte GetLastConfirmedFullscreenMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1928(relative to base address)
		int32_t GetGlobalIlluminationQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7496973C8(relative to base address)
		UGameUserSettings GetGameUserSettings(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748B3D33C(relative to base address)
		TEnumAsByte GetFullscreenMode(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1904(relative to base address)
		float GetFrameRateLimit(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C3976C4(relative to base address)
		int32_t GetFramePace(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5D18E0(relative to base address)
		int32_t GetFoliageQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D18CC(relative to base address)
		FIntPoint GetDesktopResolution(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D18A0(relative to base address)
		FIntPoint GetDefaultWindowPosition(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5D187C(relative to base address)
		TEnumAsByte GetDefaultWindowMode(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF749859FE0(relative to base address)
		float GetDefaultResolutionScale(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1850(relative to base address)
		FIntPoint GetDefaultResolution(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C5D1838(relative to base address)
		int32_t GetCurrentHDRDisplayNits(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1818(relative to base address)
		int32_t GetAudioQualityLevel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C0DFE90(relative to base address)
		int32_t GetAntiAliasingQuality(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C5D1804(relative to base address)
		void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D1740(relative to base address)
		void ConfirmVideoMode(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7494B08D8(relative to base address)
		void ApplySettings(bool bCheckForCommandLineOverrides); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D16BC(relative to base address)
		void ApplyResolutionSettings(bool bCheckForCommandLineOverrides); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5D163C(relative to base address)
		void ApplyNonResolutionSettings(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C349660(relative to base address)
		void ApplyHardwareBenchmarkResults(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C4A4418(relative to base address)
	};


	// Class Engine.ScriptViewportClient
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UScriptViewportClient : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ScriptViewportClient");
			return ret;
		}
	};


	// Class Engine.GameViewportClient
	// Inherited from UScriptViewportClient -> UObject
	// Size: 0x370 (0x3A8 - 0x38)
	class UGameViewportClient : public UScriptViewportClient	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x38(0x8) UNKNOWN PROPERTY
		UConsole* ViewportConsole; // 0x40(0x8)
		TArray<FDebugDisplayProperty> DebugProperties; // 0x48(0x10)
		unsigned char UnknownData01_6[0x10]; // 0x58(0x10) UNKNOWN PROPERTY
		int32_t MaxSplitscreenPlayers; // 0x68(0x4)
		unsigned char UnknownData02_6[0xC]; // 0x6C(0xC) UNKNOWN PROPERTY
		UWorld* World; // 0x78(0x8)
		UGameInstance* GameInstance; // 0x80(0x8)
		unsigned char UnknownData03_7[0x320]; // 0x88(0x320) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameViewportClient");
			return ret;
		}

		void SSSwapControllers(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF746F37328(relative to base address)
		void ShowTitleSafeArea(); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C349660(relative to base address)
		void SetConsoleTarget(int32_t PlayerIndex); // Flags: RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C5D20F4(relative to base address)
	};


	// Class Engine.HLODProxy
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class UHLODProxy : public UObject	
	{
	public:
		TArray<FHLODProxyMesh> ProxyMeshes; // 0x28(0x10)
		TMap<UHLODProxyDesc*, FHLODProxyMesh> HLODActors; // 0x38(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODProxy");
			return ret;
		}
	};


	// Class Engine.HLODEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UHLODEngineSubsystem : public UEngineSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.HLODProxyDesc
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHLODProxyDesc : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODProxyDesc");
			return ret;
		}
	};


	// Class Engine.ImportantToggleSettingInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UImportantToggleSettingInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ImportantToggleSettingInterface");
			return ret;
		}
	};


	// Class Engine.InheritableComponentHandler
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UInheritableComponentHandler : public UObject	
	{
	public:
		TArray<FComponentOverrideRecord> Records; // 0x28(0x10)
		TArray<UActorComponent*> UnnecessaryComponents; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InheritableComponentHandler");
			return ret;
		}
	};


	// Class Engine.InputDelegateBinding
	// Inherited from UDynamicBlueprintBinding -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInputDelegateBinding : public UDynamicBlueprintBinding	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputActionDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputActionDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray<FBlueprintInputActionDelegateBinding> InputActionDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputActionDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputAxisDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputAxisDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray<FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputAxisDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputAxisKeyDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputAxisKeyDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray<FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputAxisKeyDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputDeviceLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInputDeviceLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputDeviceLibrary");
			return ret;
		}

		FPlatformUserId PlatformUserId_None(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0A74(relative to base address)
		bool NotEqual_PlatformUserId(FPlatformUserId A, FPlatformUserId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0F60(relative to base address)
		bool NotEqual_InputDeviceId(FInputDeviceId A, FInputDeviceId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0F60(relative to base address)
		bool IsValidPlatformId(FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0E54(relative to base address)
		bool IsValidInputDevice(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0D50(relative to base address)
		bool IsUnpairedUserId(FPlatformUserId PlatformId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0C34(relative to base address)
		bool IsInputDeviceMappedToUnpairedUser(FInputDeviceId InputDevice); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0B18(relative to base address)
		bool IsDevicePropertyHandleValid(FInputDevicePropertyHandle& InHandle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0A88(relative to base address)
		FInputDeviceId InputDeviceId_None(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0A74(relative to base address)
		FPlatformUserId GetUserForUnpairedInputDevices(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F0A3C(relative to base address)
		FPlatformUserId GetUserForInputDevice(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5F0918(relative to base address)
		FPlatformUserId GetPrimaryPlatformUser(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F069C(relative to base address)
		FInputDeviceId GetPrimaryInputDeviceForUser(FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5F0578(relative to base address)
		APlayerController GetPlayerControllerFromPlatformUser(FPlatformUserId UserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5F0468(relative to base address)
		APlayerController GetPlayerControllerFromInputDevice(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5F0358(relative to base address)
		EInputDeviceConnectionState GetInputDeviceConnectionState(FInputDeviceId DeviceID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5F021C(relative to base address)
		FInputDeviceId GetDefaultInputDevice(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5F01E4(relative to base address)
		int32_t GetAllInputDevicesForUser(FPlatformUserId UserId, TArray<FInputDeviceId>& OutInputDevices); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5F0058(relative to base address)
		int32_t GetAllInputDevices(TArray<FInputDeviceId>& OutInputDevices); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5EFFA4(relative to base address)
		int32_t GetAllConnectedInputDevices(TArray<FInputDeviceId>& OutInputDevices); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5EFEF0(relative to base address)
		int32_t GetAllActiveUsers(TArray<FPlatformUserId>& OutUsers); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C5EFE3C(relative to base address)
		bool EqualEqual_PlatformUserId(FPlatformUserId A, FPlatformUserId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5EF9B8(relative to base address)
		bool EqualEqual_InputDeviceId(FInputDeviceId A, FInputDeviceId B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5EF9B8(relative to base address)
	};


	// Class Engine.InputKeyDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputKeyDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray<FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputKeyDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputTouchDelegateBinding
	// Inherited from UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x10 (0x38 - 0x28)
	class UInputTouchDelegateBinding : public UInputDelegateBinding	
	{
	public:
		TArray<FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputTouchDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InputVectorAxisDelegateBinding
	// Inherited from UInputAxisKeyDelegateBinding -> UInputDelegateBinding -> UDynamicBlueprintBinding -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputVectorAxisDelegateBinding");
			return ret;
		}
	};


	// Class Engine.InstancedPlacemenClientSettings
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UInstancedPlacemenClientSettings : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InstancedPlacemenClientSettings");
			return ret;
		}
	};


	// Class Engine.InstancedPlacementPartitionActor
	// Inherited from AISMPartitionActor -> APartitionActor -> AActor -> UObject
	// Size: 0x0 (0x2A0 - 0x2A0)
	class AInstancedPlacementPartitionActor : public AISMPartitionActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InstancedPlacementPartitionActor");
			return ret;
		}
	};


	// Class Engine.StringTable
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UStringTable : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x18]; // 0x28(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StringTable");
			return ret;
		}
	};


	// Class Engine.InterpCurveEdSetup
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UInterpCurveEdSetup : public UObject	
	{
	public:
		TArray<FCurveEdTab> Tabs; // 0x28(0x10)
		int32_t ActiveTab; // 0x38(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InterpCurveEdSetup");
			return ret;
		}
	};


	// Class Engine.IntSerialization
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UIntSerialization : public UObject	
	{
	public:
		uint16_t UnsignedInt16Variable; // 0x28(0x2)
		unsigned char UnknownData00_6[0x2]; // 0x2A(0x2) UNKNOWN PROPERTY
		uint32_t UnsignedInt32Variable; // 0x2C(0x4)
		uint64_t UnsignedInt64Variable; // 0x30(0x8)
		int8_t SignedInt8Variable; // 0x38(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x39(0x1) UNKNOWN PROPERTY
		int16_t SignedInt16Variable; // 0x3A(0x2)
		unsigned char UnknownData02_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		int64_t SignedInt64Variable; // 0x40(0x8)
		char UnsignedInt8Variable; // 0x48(0x1)
		unsigned char UnknownData03_6[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		int32_t SignedInt32Variable; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.IntSerialization");
			return ret;
		}
	};


	// Class Engine.KillZVolume
	// Inherited from APhysicsVolume -> AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2D8 - 0x2D8)
	class AKillZVolume : public APhysicsVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KillZVolume");
			return ret;
		}
	};


	// Class Engine.KismetArrayLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetArrayLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetArrayLibrary");
			return ret;
		}

		void SortStringArray(TArray<FString>& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C671E20(relative to base address)
		void SortNameArray(TArray<FName>& TargetArray, bool bStableSort, bool bLexicalSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C671AAC(relative to base address)
		void SortIntArray(TArray<int32_t>& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C67187C(relative to base address)
		void SortInt64Array(TArray<int64_t>& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C67164C(relative to base address)
		void SortFloatArray(TArray<double>& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C67141C(relative to base address)
		void SortByteArray(TArray<char>& TargetArray, bool bStableSort, EArraySortOrder SortOrder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6711EC(relative to base address)
		void SetArrayPropertyByName(UObject* Object, FName PropertyName, TArray<int32_t>& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66E494(relative to base address)
		void FilterArray(TArray<AActor*>& TargetArray, UClass* FilterClass, TArray<AActor*>& FilteredArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C63EBC8(relative to base address)
		void Array_Swap(TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C61E184(relative to base address)
		void Array_ShuffleFromStream(TArray<int32_t>& TargetArray, FRandomStream& RandomStream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C61E00C(relative to base address)
		void Array_Shuffle(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748ED4EBC(relative to base address)
		void Array_Set(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF747194FF8(relative to base address)
		void Array_Reverse(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C61DF80(relative to base address)
		void Array_Resize(TArray<int32_t>& TargetArray, int32_t Size); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7492FC690(relative to base address)
		bool Array_RemoveItem(TArray<int32_t>& TargetArray, int32_t& Item); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748423300(relative to base address)
		void Array_Remove(TArray<int32_t>& TargetArray, int32_t IndexToRemove); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748423980(relative to base address)
		void Array_RandomFromStream(TArray<int32_t>& TargetArray, FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61DC68(relative to base address)
		void Array_Random(TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748DF6054(relative to base address)
		int32_t Array_Length(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7471F5D28(relative to base address)
		int32_t Array_LastIndex(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748ED22AC(relative to base address)
		bool Array_IsValidIndex(TArray<int32_t>& TargetArray, int32_t IndexToTest); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B83444(relative to base address)
		bool Array_IsNotEmpty(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BA3DCC(relative to base address)
		bool Array_IsEmpty(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7492521B0(relative to base address)
		void Array_Insert(TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C61D960(relative to base address)
		bool Array_Identical(TArray<int32_t>& ArrayA, TArray<int32_t>& ArrayB); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61D858(relative to base address)
		void Array_Get(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7471F5DF0(relative to base address)
		int32_t Array_Find(TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61D608(relative to base address)
		bool Array_Contains(TArray<int32_t>& TargetArray, int32_t& ItemToFind); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747194590(relative to base address)
		void Array_Clear(TArray<int32_t>& TargetArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748889934(relative to base address)
		void Array_Append(TArray<int32_t>& TargetArray, TArray<int32_t>& SourceArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74884F9EC(relative to base address)
		int32_t Array_AddUnique(TArray<int32_t>& TargetArray, int32_t& NewItem); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF7489F8C78(relative to base address)
		int32_t Array_Add(TArray<int32_t>& TargetArray, int32_t& NewItem); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF747194C34(relative to base address)
	};


	// Class Engine.KismetGuidLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetGuidLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetGuidLibrary");
			return ret;
		}

		void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662CD4(relative to base address)
		bool NotEqual_GuidGuid(FGuid& A, FGuid& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66106C(relative to base address)
		FGuid NewGuid(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65FF14(relative to base address)
		bool IsValid_Guid(FGuid& InGUID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BF18(relative to base address)
		void Invalidate_Guid(FGuid& InGUID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748ACBB88(relative to base address)
		bool EqualEqual_GuidGuid(FGuid& A, FGuid& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BF78(relative to base address)
		FString Conv_GuidToString(FGuid& InGUID); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748ACBC74(relative to base address)
	};


	// Class Engine.KismetInputLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetInputLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetInputLibrary");
			return ret;
		}

		bool PointerEvent_IsTouchEvent(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663A20(relative to base address)
		bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663800(relative to base address)
		float PointerEvent_GetWheelDelta(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663760(relative to base address)
		int32_t PointerEvent_GetUserIndex(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6636C0(relative to base address)
		int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663620(relative to base address)
		FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66356C(relative to base address)
		int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6634CC(relative to base address)
		FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663418(relative to base address)
		ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663344(relative to base address)
		FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663290(relative to base address)
		FKey PointerEvent_GetEffectingButton(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6631C0(relative to base address)
		FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66310C(relative to base address)
		bool ModifierKeysState_IsShiftDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65DA90(relative to base address)
		bool ModifierKeysState_IsControlDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65DA08(relative to base address)
		bool ModifierKeysState_IsCommandDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65D97C(relative to base address)
		bool ModifierKeysState_IsAltDown(FSlateModifierKeysState& KeysState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65D8F0(relative to base address)
		bool Key_IsVectorAxis(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E56C(relative to base address)
		bool Key_IsValid(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E468(relative to base address)
		bool Key_IsMouseButton(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E364(relative to base address)
		bool Key_IsModifierKey(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E260(relative to base address)
		bool Key_IsKeyboardKey(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E12C(relative to base address)
		bool Key_IsGamepadKey(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E028(relative to base address)
		bool Key_IsDigital(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64DF24(relative to base address)
		bool Key_IsButtonAxis(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64DE20(relative to base address)
		bool Key_IsAxis3D(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64DD1C(relative to base address)
		bool Key_IsAxis2D(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64DC18(relative to base address)
		bool Key_IsAxis1D(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64DB14(relative to base address)
		bool Key_IsAnalog(FKey& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64DA10(relative to base address)
		EUINavigation Key_GetNavigationDirectionFromKey(FKeyEvent& InKeyEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D928(relative to base address)
		EUINavigation Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent& InAnalogEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D87C(relative to base address)
		EUINavigationAction Key_GetNavigationActionFromKey(FKeyEvent& InKeyEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D794(relative to base address)
		EUINavigationAction Key_GetNavigationAction(FKey& InKey); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D67C(relative to base address)
		FText Key_GetDisplayName(FKey& Key, bool bLongDisplayName); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D478(relative to base address)
		bool InputEvent_IsShiftDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A0B8(relative to base address)
		bool InputEvent_IsRightShiftDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A008(relative to base address)
		bool InputEvent_IsRightControlDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649F58(relative to base address)
		bool InputEvent_IsRightCommandDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649EA8(relative to base address)
		bool InputEvent_IsRightAltDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649DF8(relative to base address)
		bool InputEvent_IsRepeat(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649D4C(relative to base address)
		bool InputEvent_IsLeftShiftDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649CA0(relative to base address)
		bool InputEvent_IsLeftControlDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649BF0(relative to base address)
		bool InputEvent_IsLeftCommandDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649B40(relative to base address)
		bool InputEvent_IsLeftAltDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649A90(relative to base address)
		bool InputEvent_IsControlDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6499E0(relative to base address)
		bool InputEvent_IsCommandDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649930(relative to base address)
		bool InputEvent_IsAltDown(FInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C649880(relative to base address)
		FText InputChord_GetDisplayName(FInputChord& Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6497C8(relative to base address)
		int32_t GetUserIndex(FKeyEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647BB0(relative to base address)
		FSlateModifierKeysState GetModifierKeysState(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644140(relative to base address)
		FKey GetKey(FKeyEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64345C(relative to base address)
		float GetAnalogValue(FAnalogInputEvent& Input); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640F70(relative to base address)
		bool EqualEqual_KeyKey(FKey A, FKey B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63C364(relative to base address)
		bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63C080(relative to base address)
		void CalibrateTilt(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C628270(relative to base address)
	};


	// Class Engine.KismetInternationalizationLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetInternationalizationLibrary");
			return ret;
		}

		bool SetCurrentLocale(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66EE8C(relative to base address)
		bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66EDB4(relative to base address)
		bool SetCurrentLanguage(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66EC68(relative to base address)
		bool SetCurrentCulture(FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66EB90(relative to base address)
		bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66EA74(relative to base address)
		bool IsCultureRightToLeft(FString Culture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A6F4(relative to base address)
		FString GetSuitableCulture(TArray<FString>& AvailableCultures, FString CultureToMatch, FString FallbackCulture); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6469C8(relative to base address)
		FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6442D0(relative to base address)
		TArray GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643780(relative to base address)
		FString GetCurrentLocale(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642544(relative to base address)
		FString GetCurrentLanguage(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747F7BBAC(relative to base address)
		FString GetCurrentCulture(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747F7BBAC(relative to base address)
		void GetCurrentAssetGroupCulture(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642208(relative to base address)
		FString GetCultureDisplayName(FString Culture, bool Localized); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6420D0(relative to base address)
		void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C62C9BC(relative to base address)
	};


	// Class Engine.KismetMaterialLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetMaterialLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetMaterialLibrary");
			return ret;
		}

		void SetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7472D64D4(relative to base address)
		void SetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748808E14(relative to base address)
		FLinearColor GetVectorParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C647E5C(relative to base address)
		float GetScalarParameterValue(UObject* WorldContextObject, UMaterialParameterCollection* Collection, FName ParameterName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7483942F8(relative to base address)
		UMaterialInstanceDynamic CreateDynamicMaterialInstance(UObject* WorldContextObject, UMaterialInterface* Parent, FName OptionalName, EMIDCreationFlags CreationFlags); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747A0B1B0(relative to base address)
	};


	// Class Engine.KismetMathLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetMathLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetMathLibrary");
			return ret;
		}

		int32_t Xor_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680CC4(relative to base address)
		int64_t Xor_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680C04(relative to base address)
		int32_t wrap(int32_t Value, int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680ADC(relative to base address)
		FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6806D4(relative to base address)
		FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680404(relative to base address)
		float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6809C8(relative to base address)
		double VSizeXYSquared(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679268(relative to base address)
		double VSizeXY(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679148(relative to base address)
		double VSizeSquared(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7494E227C(relative to base address)
		double VSize2DSquared(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67902C(relative to base address)
		double VSize2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C678F0C(relative to base address)
		double VSize(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7488AEAB0(relative to base address)
		FVector VLerp(FVector A, FVector B, float Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748970428(relative to base address)
		FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C678B88(relative to base address)
		FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7490C0F1C(relative to base address)
		FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, FVector MinValue, FVector MaxValue, bool bInitializeFromTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67B250(relative to base address)
		FVector Vector_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680398(relative to base address)
		FVector Vector_Up(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74954020C(relative to base address)
		void Vector_UnwindEuler(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6802BC(relative to base address)
		FVector2D Vector_UnitCartesianToSpherical(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680140(relative to base address)
		FVector Vector_ToRadians(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C680020(relative to base address)
		FVector Vector_ToDegrees(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67FF00(relative to base address)
		FVector Vector_SnappedToGrid(FVector InVect, float InGridSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67FCBC(relative to base address)
		FVector Vector_SlerpVectorToDirection(FVector Vector, FVector Direction, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67F9E4(relative to base address)
		FVector Vector_SlerpNormals(FVector NormalA, FVector NormalB, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67F70C(relative to base address)
		void Vector_Set(FVector& A, double X, double Y, double Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67F4B8(relative to base address)
		FVector Vector_Right(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67F490(relative to base address)
		FVector Vector_Reciprocal(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67F370(relative to base address)
		FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67F158(relative to base address)
		FVector Vector_One(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67F130(relative to base address)
		FVector Vector_NormalUnsafe(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67EE48(relative to base address)
		void Vector_Normalize(FVector& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67EF78(relative to base address)
		FVector Vector_Normal2D(FVector A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67EBDC(relative to base address)
		FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67EA50(relative to base address)
		FVector Vector_Left(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67EA28(relative to base address)
		bool Vector_IsZero(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7495DC110(relative to base address)
		bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E8A0(relative to base address)
		bool Vector_IsUniform(FVector& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E710(relative to base address)
		bool Vector_IsNormal(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E610(relative to base address)
		bool Vector_IsNearlyZero(FVector& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E48C(relative to base address)
		bool Vector_IsNAN(FVector& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E390(relative to base address)
		double Vector_HeadingAngle(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E1C8(relative to base address)
		FVector Vector_GetSignVector(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67E070(relative to base address)
		FVector Vector_GetProjection(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67DF44(relative to base address)
		double Vector_GetAbsMin(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67DE18(relative to base address)
		double Vector_GetAbsMax(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67DCEC(relative to base address)
		FVector Vector_GetAbs(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67DBCC(relative to base address)
		FVector Vector_Forward(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67DBA4(relative to base address)
		FVector Vector_Down(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67DB7C(relative to base address)
		double Vector_DistanceSquared(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67D978(relative to base address)
		double Vector_Distance2DSquared(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67D580(relative to base address)
		double Vector_Distance2D(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67D38C(relative to base address)
		double Vector_Distance(FVector v1, FVector v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67D770(relative to base address)
		double Vector_CosineAngle2D(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67D108(relative to base address)
		FVector Vector_ComponentMin(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67CF04(relative to base address)
		FVector Vector_ComponentMax(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67CD00(relative to base address)
		FVector Vector_ClampSizeMax2D(FVector A, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67C824(relative to base address)
		FVector Vector_ClampSizeMax(FVector A, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67CA84(relative to base address)
		FVector Vector_ClampSize2D(FVector A, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67C4F8(relative to base address)
		FVector Vector_BoundedToCube(FVector InVect, float InRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67C2F8(relative to base address)
		FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67C020(relative to base address)
		FVector Vector_Backward(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67BFF8(relative to base address)
		void Vector_Assign(FVector& A, FVector& InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67BEA0(relative to base address)
		void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67BC04(relative to base address)
		FVector4 Vector4_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67B230(relative to base address)
		double Vector4_SizeSquared3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67B0B4(relative to base address)
		double Vector4_SizeSquared(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67B16C(relative to base address)
		double Vector4_Size3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67AF30(relative to base address)
		double Vector4_Size(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67AFEC(relative to base address)
		void Vector4_Set(FVector4& A, double X, double Y, double Z, double W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67AC6C(relative to base address)
		FVector4 Vector4_NormalUnsafe3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A9C4(relative to base address)
		void Vector4_Normalize3(FVector4& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67AAC8(relative to base address)
		FVector4 Vector4_Normal3(FVector4& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A810(relative to base address)
		FVector4 Vector4_Negated(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A764(relative to base address)
		FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A5D0(relative to base address)
		bool Vector4_IsZero(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A518(relative to base address)
		bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A3B4(relative to base address)
		bool Vector4_IsNormal3(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A2E0(relative to base address)
		bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A184(relative to base address)
		bool Vector4_IsNAN(FVector4& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67A0A4(relative to base address)
		double Vector4_DotProduct3(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679E50(relative to base address)
		double Vector4_DotProduct(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679F74(relative to base address)
		FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679CD4(relative to base address)
		void Vector4_Assign(FVector4& A, FVector4& InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C679BD8(relative to base address)
		FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679824(relative to base address)
		FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6794C4(relative to base address)
		FVector2D Vector2D_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679BBC(relative to base address)
		FVector2D Vector2D_Unit45Deg(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679BA0(relative to base address)
		FVector2D Vector2D_One(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679B84(relative to base address)
		FVector VEase(FVector A, FVector B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C678694(relative to base address)
		FDateTime UtcNow(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C678664(relative to base address)
		FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6780A8(relative to base address)
		FRotator TransformRotation(FTransform& T, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C05750(relative to base address)
		FVector TransformLocation(FTransform& T, FVector Location); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747CC16CC(relative to base address)
		FVector TransformDirection(FTransform& T, FVector Direction); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677EB8(relative to base address)
		float Transform_Determinant(FTransform& Transform); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67824C(relative to base address)
		double ToUnixTimestampDouble(FDateTime& Time); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677D50(relative to base address)
		int64_t ToUnixTimestamp(FDateTime& Time); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677CC4(relative to base address)
		FVector2D ToSign2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677B88(relative to base address)
		FVector2D ToRounded2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677A58(relative to base address)
		FString ToHex_LinearColor(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677870(relative to base address)
		void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, double& OutLength); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67763C(relative to base address)
		FDateTime Today(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677E88(relative to base address)
		FTransform TLerp(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676F20(relative to base address)
		FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676C4C(relative to base address)
		FTimespan TimespanZeroValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6345FC(relative to base address)
		float TimespanRatio(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677458(relative to base address)
		FTimespan TimespanMinValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67743C(relative to base address)
		FTimespan TimespanMaxValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677420(relative to base address)
		bool TimespanFromString(FString TimespanString, FTimespan& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67730C(relative to base address)
		FTransform TEase(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676860(relative to base address)
		double tan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6771F0(relative to base address)
		FVector Subtract_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C9D82C(relative to base address)
		FVector Subtract_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676670(relative to base address)
		FVector Subtract_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676488(relative to base address)
		FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676340(relative to base address)
		FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C676154(relative to base address)
		FVector2D Subtract_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675F6C(relative to base address)
		FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675604(relative to base address)
		FQuat Subtract_QuatQuat(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675E8C(relative to base address)
		FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675C54(relative to base address)
		FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675A74(relative to base address)
		FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675898(relative to base address)
		int32_t Subtract_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74890F524(relative to base address)
		int64_t Subtract_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6757D8(relative to base address)
		double Subtract_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748845B18(relative to base address)
		FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675604(relative to base address)
		FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749AF7678(relative to base address)
		char Subtract_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675548(relative to base address)
		double Square(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7494BE308(relative to base address)
		double sqrt(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675310(relative to base address)
		FVector Spherical2DToUnitCartesian(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C674CE0(relative to base address)
		double sin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A26730(relative to base address)
		int64_t SignOfInteger64(int64_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6710D8(relative to base address)
		int32_t SignOfInteger(int32_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C671164(relative to base address)
		double SignOfFloat(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C671030(relative to base address)
		void SetVectorSpringStateVelocity(FVectorSpringState& SpringState, FVector Velocity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C670B30(relative to base address)
		void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66FB88(relative to base address)
		void SetQuaternionSpringStateAngularVelocity(FQuaternionSpringState& SpringState, FVector AngularVelocity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66F9F0(relative to base address)
		void SetFloatSpringStateVelocity(FFloatSpringState& SpringState, float Velocity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66F25C(relative to base address)
		void Set2D(FVector2D& A, double X, double Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66E234(relative to base address)
		FVector SelectVector(FVector A, FVector B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747195A04(relative to base address)
		FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748AA0DCC(relative to base address)
		FText SelectText(FText A, FText B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748F51DF0(relative to base address)
		FString SelectString(FString A, FString B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7491B4DC0(relative to base address)
		FRotator SelectRotator(FRotator A, FRotator B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747195A04(relative to base address)
		UObject SelectObject(UObject* A, UObject* B, bool bSelectA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66E050(relative to base address)
		FName SelectName(FName A, FName B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66E144(relative to base address)
		int32_t SelectInt(int32_t A, int32_t B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A86028(relative to base address)
		double SelectFloat(double A, double B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7471963B8(relative to base address)
		FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B4A484(relative to base address)
		UClass SelectClass(UClass* A, UClass* B, bool bSelectA); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66E050(relative to base address)
		void SeedRandomStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66DFD4(relative to base address)
		double SafeDivide(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748889A90(relative to base address)
		int64_t Round64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D5B4(relative to base address)
		int32_t round(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A2C6FC(relative to base address)
		FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D3B4(relative to base address)
		FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C15268(relative to base address)
		FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489A5C20(relative to base address)
		FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C668A74(relative to base address)
		FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74877AC80(relative to base address)
		void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6688D4(relative to base address)
		void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66858C(relative to base address)
		FLinearColor RGBLinearToHSV(FLinearColor RGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66846C(relative to base address)
		void ResetVectorSpringState(FVectorSpringState& SpringState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66CE98(relative to base address)
		void ResetRandomStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66CE1C(relative to base address)
		void ResetQuaternionSpringState(FQuaternionSpringState& SpringState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66CD4C(relative to base address)
		void ResetFloatSpringState(FFloatSpringState& SpringState); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66CCC8(relative to base address)
		FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C667EAC(relative to base address)
		FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FRandomStream& Stream, FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66ADE8(relative to base address)
		FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66AB34(relative to base address)
		FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FRandomStream& Stream, FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66A8F4(relative to base address)
		FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66A630(relative to base address)
		FVector RandomUnitVectorInConeInRadiansFromStream(FRandomStream& Stream, FVector& ConeDir, float ConeHalfAngleInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66A480(relative to base address)
		FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66A280(relative to base address)
		FVector RandomUnitVectorInConeInDegreesFromStream(FRandomStream& Stream, FVector& ConeDir, float ConeHalfAngleInDegrees); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66A0C8(relative to base address)
		FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669EC0(relative to base address)
		FVector RandomUnitVectorFromStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669E20(relative to base address)
		FVector RandomUnitVector(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669DE4(relative to base address)
		FRotator RandomRotatorFromStream(FRandomStream& Stream, bool bRoll); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669CC0(relative to base address)
		FRotator RandomRotator(bool bRoll); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669C2C(relative to base address)
		FVector RandomPointInBoundingBoxFromStream_Box(FRandomStream& Stream, FBox Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669934(relative to base address)
		FVector RandomPointInBoundingBoxFromStream(FRandomStream& Stream, FVector Center, FVector HalfSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6696D0(relative to base address)
		FVector RandomPointInBoundingBox_Box(FBox Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669AD8(relative to base address)
		FVector RandomPointInBoundingBox(FVector Center, FVector HalfSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C9E33C(relative to base address)
		int32_t RandomIntegerInRangeFromStream(FRandomStream& Stream, int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669508(relative to base address)
		int32_t RandomIntegerInRange(int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749097618(relative to base address)
		int32_t RandomIntegerFromStream(FRandomStream& Stream, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6693BC(relative to base address)
		int64_t RandomInteger64InRange(int64_t Min, int64_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669208(relative to base address)
		int64_t RandomInteger64(int64_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669144(relative to base address)
		int32_t RandomInteger(int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669314(relative to base address)
		float RandomFloatInRangeFromStream(FRandomStream& Stream, float Min, float Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748562E74(relative to base address)
		double RandomFloatInRange(double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489F59C0(relative to base address)
		float RandomFloatFromStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C669098(relative to base address)
		double RandomFloat(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C6C988(relative to base address)
		bool RandomBoolWithWeightFromStream(FRandomStream& RandomStream, float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C668F88(relative to base address)
		bool RandomBoolWithWeight(float Weight); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7491594EC(relative to base address)
		bool RandomBoolFromStream(FRandomStream& Stream); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C668ED0(relative to base address)
		bool RandomBool(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C668E80(relative to base address)
		double RadiansToDegrees(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C668DF8(relative to base address)
		FQuat QuaternionSpringInterp(FQuat Current, FQuat Target, FQuaternionSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bInitializeFromTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C667624(relative to base address)
		FVector Quat_VectorUp(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6658D8(relative to base address)
		FVector Quat_VectorRight(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6657C4(relative to base address)
		FVector Quat_VectorForward(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6656DC(relative to base address)
		FVector Quat_UnrotateVector(FQuat& Q, FVector& V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C667370(relative to base address)
		FQuat Quat_Slerp(FQuat& A, FQuat& B, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C666F7C(relative to base address)
		float Quat_SizeSquared(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C666EC4(relative to base address)
		float Quat_Size(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C666E08(relative to base address)
		void Quat_SetFromEuler(FQuat& Q, FVector& Euler); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C666C8C(relative to base address)
		void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6668E8(relative to base address)
		FRotator Quat_Rotator(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66684C(relative to base address)
		FVector Quat_RotateVector(FQuat& Q, FVector& V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6665A8(relative to base address)
		FQuat Quat_Normalized(FQuat& Q, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6663BC(relative to base address)
		void Quat_Normalize(FQuat& Q, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6661D0(relative to base address)
		FQuat Quat_MakeFromEuler(FVector& Euler); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6660F8(relative to base address)
		FQuat Quat_Log(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66605C(relative to base address)
		bool Quat_IsNormalized(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665F5C(relative to base address)
		bool Quat_IsNonFinite(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665E90(relative to base address)
		bool Quat_IsIdentity(FQuat& Q, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665C94(relative to base address)
		bool Quat_IsFinite(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665BC8(relative to base address)
		FQuat Quat_Inversed(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665B2C(relative to base address)
		FQuat Quat_Identity(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665B04(relative to base address)
		FVector Quat_GetRotationAxis(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6659D4(relative to base address)
		FVector Quat_GetAxisZ(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6658D8(relative to base address)
		FVector Quat_GetAxisY(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6657C4(relative to base address)
		FVector Quat_GetAxisX(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6656DC(relative to base address)
		float Quat_GetAngle(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66562C(relative to base address)
		FQuat Quat_FindBetweenVectors(FVector Start, FVector End); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665414(relative to base address)
		FQuat Quat_FindBetweenNormals(FVector StartNormal, FVector EndNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6651FC(relative to base address)
		FQuat Quat_Exp(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C665160(relative to base address)
		FVector Quat_Euler(FQuat& Q); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6650C4(relative to base address)
		void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C664F84(relative to base address)
		float Quat_AngularDistance(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664E3C(relative to base address)
		FVector ProjectVectorOnToVector(FVector V, FVector Target); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664C20(relative to base address)
		FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664A04(relative to base address)
		FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66468C(relative to base address)
		bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663AC0(relative to base address)
		float PerlinNoise1D(float Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7487B0E50(relative to base address)
		int32_t Percent_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A8B478(relative to base address)
		int64_t Percent_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C663030(relative to base address)
		double Percent_FloatFloat(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662EE8(relative to base address)
		char Percent_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662E08(relative to base address)
		int32_t Or_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748AED864(relative to base address)
		int64_t Or_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6625D0(relative to base address)
		FDateTime Now(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749BC8D20(relative to base address)
		bool NotEqualExactly_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660CA0(relative to base address)
		bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660B6C(relative to base address)
		bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660980(relative to base address)
		bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748D3A41C(relative to base address)
		bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662370(relative to base address)
		bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6620B4(relative to base address)
		bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660E98(relative to base address)
		bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C661BF0(relative to base address)
		bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6619B4(relative to base address)
		bool NotEqual_ObjectObject(UObject* A, UObject* B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748733E94(relative to base address)
		bool NotEqual_NameName(FName A, FName B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749076390(relative to base address)
		bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66162C(relative to base address)
		bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C661410(relative to base address)
		bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C661234(relative to base address)
		bool NotEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7488D811C(relative to base address)
		bool NotEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C661174(relative to base address)
		bool NotEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748869284(relative to base address)
		bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660E98(relative to base address)
		bool NotEqual_ClassClass(UClass* A, UClass* B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748733E94(relative to base address)
		bool NotEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74771C734(relative to base address)
		bool NotEqual_BoolBool(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B50D88(relative to base address)
		bool Not_PreBool(bool A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747196270(relative to base address)
		int64_t Not_Int64(int64_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662550(relative to base address)
		int32_t Not_Int(int32_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B440D0(relative to base address)
		FVector2D NormalSafe2D(FVector2D A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6600A0(relative to base address)
		double NormalizeToRange(double Value, double RangeMin, double RangeMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7477B5978(relative to base address)
		FRotator NormalizedDeltaRotator(FRotator A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660764(relative to base address)
		float NormalizeAxis(float Angle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C660428(relative to base address)
		void Normalize2D(FVector2D& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6602C8(relative to base address)
		FVector2D Normal2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65FF44(relative to base address)
		FVector Normal(FVector A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749082CE0(relative to base address)
		FVector NegateVector(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749AC4744(relative to base address)
		FRotator NegateRotator(FRotator A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65FD48(relative to base address)
		FVector2D Negated2D(FVector2D& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65FE88(relative to base address)
		bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65FA14(relative to base address)
		bool NearlyEqual_FloatFloat(double A, double B, double ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748CDAFDC(relative to base address)
		double MultiplyMultiply_FloatFloat(double base, double exp); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489EAF50(relative to base address)
		double MultiplyByPi(double Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493EC328(relative to base address)
		FVector Multiply_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74873F110(relative to base address)
		FVector Multiply_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65F314(relative to base address)
		FVector Multiply_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B9EDCC(relative to base address)
		FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65F8CC(relative to base address)
		FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7492AAEC8(relative to base address)
		FVector2D Multiply_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65F6E4(relative to base address)
		FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65F500(relative to base address)
		FRotator Multiply_RotatorInt(FRotator A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65F314(relative to base address)
		FRotator Multiply_RotatorFloat(FRotator A, float B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65F128(relative to base address)
		FQuat Multiply_QuatQuat(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65EF60(relative to base address)
		FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65EE0C(relative to base address)
		FMatrix Multiply_MatrixFloat(FMatrix& A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65EC64(relative to base address)
		FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65EA2C(relative to base address)
		FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65E818(relative to base address)
		FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65E630(relative to base address)
		FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65E44C(relative to base address)
		int32_t Multiply_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749259F50(relative to base address)
		double Multiply_IntFloat(int32_t A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65E384(relative to base address)
		int64_t Multiply_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65E2C4(relative to base address)
		double Multiply_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7485E3AE0(relative to base address)
		char Multiply_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65E204(relative to base address)
		FVector MirrorVectorByNormal(FVector InVect, FVector InNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645900(relative to base address)
		void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65D218(relative to base address)
		void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65D028(relative to base address)
		void MinOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65CE64(relative to base address)
		int64_t MinInt64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65CDA0(relative to base address)
		void MinimumAreaRectangle(UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65D414(relative to base address)
		void MinAreaRectangle(UObject* WorldContextObject, TArray<FVector>& InPoints, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutRectLengthX, float& OutRectLengthY, bool bDebugDraw); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65C8C4(relative to base address)
		int32_t Min(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749029970(relative to base address)
		void MedianOfIntArray(TArray<int32_t> IntArray, float& MedianValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65C7A4(relative to base address)
		void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65C5A8(relative to base address)
		void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65C3B8(relative to base address)
		void MaxOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65C1F4(relative to base address)
		int64_t MaxInt64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65C130(relative to base address)
		int32_t Max(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C3B674(relative to base address)
		FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65BD10(relative to base address)
		FVector4 Matrix_TransformVector(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65BF28(relative to base address)
		FVector4 Matrix_TransformPosition(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65BAFC(relative to base address)
		FQuat Matrix_ToQuat(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65BA38(relative to base address)
		void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65B898(relative to base address)
		void Matrix_SetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column, FVector Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65B678(relative to base address)
		void Matrix_SetAxis(FMatrix& M, TEnumAsByte<EAxis> Axis, FVector AxisVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65B468(relative to base address)
		FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65B238(relative to base address)
		FMatrix Matrix_RemoveTranslation(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65B10C(relative to base address)
		void Matrix_RemoveScaling(FMatrix& M, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65AFD4(relative to base address)
		FMatrix Matrix_Mirror(FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65AD84(relative to base address)
		FVector Matrix_InverseTransformVector(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65AB58(relative to base address)
		FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A920(relative to base address)
		FMatrix Matrix_Identity(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A8B0(relative to base address)
		FVector Matrix_GetUnitAxis(FMatrix& M, TEnumAsByte<EAxis> Axis); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7477B5A9C(relative to base address)
		void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A660(relative to base address)
		FMatrix Matrix_GetTransposed(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A510(relative to base address)
		FMatrix Matrix_GetTransposeAdjoint(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A424(relative to base address)
		FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659F3C(relative to base address)
		FVector Matrix_GetScaledAxis(FMatrix& M, TEnumAsByte<EAxis> Axis); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A2D8(relative to base address)
		void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65A088(relative to base address)
		float Matrix_GetRotDeterminant(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659E84(relative to base address)
		FRotator Matrix_GetRotator(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62EB68(relative to base address)
		FVector Matrix_GetOrigin(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659DCC(relative to base address)
		float Matrix_GetMaximumAxisScale(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659D14(relative to base address)
		FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659B90(relative to base address)
		FMatrix Matrix_GetInverse(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659AA4(relative to base address)
		bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6598EC(relative to base address)
		bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659734(relative to base address)
		bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65957C(relative to base address)
		bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6593C4(relative to base address)
		bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659238(relative to base address)
		bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C659080(relative to base address)
		float Matrix_GetDeterminant(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C658FC8(relative to base address)
		FVector Matrix_GetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C658E7C(relative to base address)
		bool Matrix_ContainsNaN(FMatrix& M); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C658DCC(relative to base address)
		FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C658B88(relative to base address)
		FMatrix Matrix_ApplyScale(FMatrix& M, float Scale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C658A04(relative to base address)
		double MapRangeUnclamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6585F4(relative to base address)
		double MapRangeClamped(double Value, double InRangeA, double InRangeB, double OutRangeA, double OutRangeB); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74712EA8C(relative to base address)
		FVector_NetQuantizeNormal MakeVector_NetQuantizeNormal(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6584E0(relative to base address)
		FVector_NetQuantize100 MakeVector_NetQuantize100(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6584E0(relative to base address)
		FVector_NetQuantize10 MakeVector_NetQuantize10(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7485647C4(relative to base address)
		FVector_NetQuantize MakeVector_NetQuantize(double X, double Y, double Z); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6584E0(relative to base address)
		FVector4 MakeVector4(double X, double Y, double Z, double W); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BD63CC(relative to base address)
		FVector2D MakeVector2D(double X, double Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74892A5D0(relative to base address)
		FVector MakeVector(double X, double Y, double Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7485647C4(relative to base address)
		FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489F6868(relative to base address)
		FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657F64(relative to base address)
		FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C658110(relative to base address)
		FRotator MakeRotFromZY(FVector& Z, FVector& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6574A8(relative to base address)
		FRotator MakeRotFromZX(FVector& Z, FVector& X); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657308(relative to base address)
		FRotator MakeRotFromZ(FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748ED5858(relative to base address)
		FRotator MakeRotFromYZ(FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657168(relative to base address)
		FRotator MakeRotFromYX(FVector& Y, FVector& X); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656FC8(relative to base address)
		FRotator MakeRotFromY(FVector& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656EB8(relative to base address)
		FRotator MakeRotFromXZ(FVector& X, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656D18(relative to base address)
		FRotator MakeRotFromXY(FVector& X, FVector& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656B78(relative to base address)
		FRotator MakeRotFromX(FVector& X); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7485176D0(relative to base address)
		FRotator MakeRotator(float Roll, float pitch, float Yaw); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7485FD0EC(relative to base address)
		FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657648(relative to base address)
		FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748E61054(relative to base address)
		FRandomStream MakeRandomStream(int32_t InitialSeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749AB6B50(relative to base address)
		FQuat MakeQuat(float X, float Y, float Z, float W); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656A28(relative to base address)
		FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656764(relative to base address)
		float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65663C(relative to base address)
		FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C656324(relative to base address)
		FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C655F24(relative to base address)
		FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C655D1C(relative to base address)
		FLinearColor MakeColor(float R, float G, float B, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7490669D4(relative to base address)
		FBox MakeBoxWithOrigin(FVector& Origin, FVector& Extent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C655B88(relative to base address)
		FBoxSphereBounds MakeBoxSphereBounds(FVector Origin, FVector BoxExtent, float SphereRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6558B4(relative to base address)
		FBox2D MakeBox2D(FVector2D Min, FVector2D Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65549C(relative to base address)
		FBox MakeBox(FVector Min, FVector Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65569C(relative to base address)
		double Loge(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C654CF0(relative to base address)
		double Log(double A, double base); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C654B0C(relative to base address)
		bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64F650(relative to base address)
		bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64F34C(relative to base address)
		FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C652CE8(relative to base address)
		FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BA0C9C(relative to base address)
		FLinearColor LinearColor_Yellow(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C654858(relative to base address)
		FLinearColor LinearColor_White(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7496460CC(relative to base address)
		FLinearColor LinearColor_Transparent(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65483C(relative to base address)
		FColor LinearColor_ToRGBE(FLinearColor InLinearColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65471C(relative to base address)
		FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C654534(relative to base address)
		void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6543DC(relative to base address)
		void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C654054(relative to base address)
		void LinearColor_SetRandomHue(FLinearColor& InOutColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C654310(relative to base address)
		void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C653EFC(relative to base address)
		void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C653DA4(relative to base address)
		void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C653AD4(relative to base address)
		void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C653918(relative to base address)
		FLinearColor LinearColor_Red(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6538FC(relative to base address)
		FColor LinearColor_QuantizeRound(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C653748(relative to base address)
		FColor LinearColor_Quantize(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6535B8(relative to base address)
		bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7491AC324(relative to base address)
		FLinearColor LinearColor_Green(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65359C(relative to base address)
		FLinearColor LinearColor_Gray(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C653580(relative to base address)
		float LinearColor_GetMin(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C653454(relative to base address)
		float LinearColor_GetMax(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C653328(relative to base address)
		float LinearColor_GetLuminance(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C653210(relative to base address)
		float LinearColor_Distance(FLinearColor C1, FLinearColor C2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C652FD0(relative to base address)
		FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7495197A0(relative to base address)
		FLinearColor LinearColor_Blue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C652FB4(relative to base address)
		FLinearColor LinearColor_Black(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C652F98(relative to base address)
		FVector LessLess_VectorRotator(FVector A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64EDDC(relative to base address)
		bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64EB48(relative to base address)
		bool LessEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7488C25CC(relative to base address)
		bool LessEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64ED1C(relative to base address)
		bool LessEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7488763BC(relative to base address)
		bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64EB48(relative to base address)
		bool LessEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64EA88(relative to base address)
		bool Less_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64F0B8(relative to base address)
		bool Less_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74845C860(relative to base address)
		bool Less_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64F28C(relative to base address)
		bool Less_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748940D70(relative to base address)
		bool Less_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64F0B8(relative to base address)
		bool Less_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64EFF8(relative to base address)
		double Lerp(double A, double B, double Alpha); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7487A4838(relative to base address)
		bool IsZero2D(FVector2D& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7482E9C04(relative to base address)
		bool IsPointInBoxWithTransform_Box(FVector Point, FTransform& BoxWorldTransform, FBox BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B324(relative to base address)
		bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B040(relative to base address)
		bool IsPointInBox_Box(FVector Point, FBox Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B620(relative to base address)
		bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64AD74(relative to base address)
		bool IsNearlyZero2D(FVector2D& A, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64ABA0(relative to base address)
		bool IsMorning(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64AA58(relative to base address)
		bool IsLeapYear(int32_t Year); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A8DC(relative to base address)
		bool IsAfternoon(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A538(relative to base address)
		FTransform InvertTransform(FTransform& T); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A404(relative to base address)
		FRotator InverseTransformRotation(FTransform& T, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C05A20(relative to base address)
		FVector InverseTransformLocation(FTransform& T, FVector Location); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749B29168(relative to base address)
		FVector InverseTransformDirection(FTransform& T, FVector Direction); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A214(relative to base address)
		FIntPoint IntPoint_Zero(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C5D1838(relative to base address)
		FIntPoint IntPoint_Up(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A1F4(relative to base address)
		FIntPoint IntPoint_Right(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A1D0(relative to base address)
		FIntPoint IntPoint_One(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A1AC(relative to base address)
		FIntPoint IntPoint_Left(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A18C(relative to base address)
		FIntPoint IntPoint_Down(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A168(relative to base address)
		bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64964C(relative to base address)
		bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6494C0(relative to base address)
		bool InRange_FloatFloat(double Value, double Min, double Max, bool InclusiveMin, bool InclusiveMax); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493FB5A8(relative to base address)
		double Hypotenuse(double Width, double Height); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64923C(relative to base address)
		FLinearColor HSVToRGBLinear(FLinearColor HSV); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648DAC(relative to base address)
		void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648ECC(relative to base address)
		FLinearColor HSVToRGB(float H, float S, float V, float A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648C50(relative to base address)
		double GridSnap_Float(double Location, double GridSize); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648B58(relative to base address)
		FVector GreaterGreater_VectorRotator(FVector A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6485E8(relative to base address)
		bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648354(relative to base address)
		bool GreaterEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74893A648(relative to base address)
		bool GreaterEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648528(relative to base address)
		bool GreaterEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7487C4994(relative to base address)
		bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648354(relative to base address)
		bool GreaterEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648294(relative to base address)
		bool Greater_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6488C4(relative to base address)
		bool Greater_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7488D0624(relative to base address)
		bool Greater_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648A98(relative to base address)
		bool Greater_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7484D0808(relative to base address)
		bool Greater_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6488C4(relative to base address)
		bool Greater_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C648804(relative to base address)
		int32_t GetYear(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64817C(relative to base address)
		void GetYawPitchFromVector(FVector InVec, float& Yaw, float& pitch); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647F5C(relative to base address)
		FVector GetVectorArrayAverage(TArray<FVector>& Vectors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647D58(relative to base address)
		FVector GetUpVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748213F98(relative to base address)
		float GetTotalSeconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749FA3A50(relative to base address)
		float GetTotalMinutes(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647954(relative to base address)
		float GetTotalMilliseconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647838(relative to base address)
		float GetTotalHours(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64771C(relative to base address)
		float GetTotalDays(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647600(relative to base address)
		FTimespan GetTimeOfDay(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6474B8(relative to base address)
		double GetTAU(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647130(relative to base address)
		void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6461C8(relative to base address)
		int32_t GetSeconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646078(relative to base address)
		int32_t GetSecond(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646078(relative to base address)
		float GetRuntimeFloatCurveValue(FRuntimeFloatCurve& Curve, float InTime, float InDefaultValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645E04(relative to base address)
		FVector2D GetRotated2D(FVector2D A, float AngleDeg); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645BF0(relative to base address)
		FVector GetRightVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493AF55C(relative to base address)
		FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645900(relative to base address)
		float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644B24(relative to base address)
		float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644854(relative to base address)
		double GetPI(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644508(relative to base address)
		int32_t GetMonth(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6441B8(relative to base address)
		int32_t GetMinutes(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643FF4(relative to base address)
		int32_t GetMinute(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643FF4(relative to base address)
		double GetMinElement(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643EA0(relative to base address)
		double GetMin2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74939A370(relative to base address)
		int32_t GetMilliseconds(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643D54(relative to base address)
		int32_t GetMillisecond(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643C08(relative to base address)
		double GetMaxElement(FVector A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643A04(relative to base address)
		double GetMax2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6438F4(relative to base address)
		int32_t GetHours(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6432D4(relative to base address)
		int32_t GetHour12(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6431BC(relative to base address)
		int32_t GetHour(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6432D4(relative to base address)
		FVector GetForwardVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748EDD3AC(relative to base address)
		FTimespan GetDuration(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642AD8(relative to base address)
		FVector GetDirectionUnitVector(FVector From, FVector To); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748D3E6F0(relative to base address)
		int32_t GetDays(FTimespan A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6428D4(relative to base address)
		int32_t GetDayOfYear(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6427BC(relative to base address)
		int32_t GetDay(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6426A4(relative to base address)
		FDateTime GetDate(FDateTime A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642584(relative to base address)
		double GetBoxVolume(FBox& InBox); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641920(relative to base address)
		FVector GetBoxSize(FBox& InBox); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641868(relative to base address)
		FVector GetBoxCenter(FBox& InBox); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64179C(relative to base address)
		void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64137C(relative to base address)
		void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64100C(relative to base address)
		double GetAbsMax2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6409DC(relative to base address)
		FVector2D GetAbs2D(FVector2D A); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6408D0(relative to base address)
		double FWrap(double Value, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E984(relative to base address)
		FIntVector FTruncVector(FVector& InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E89C(relative to base address)
		int64_t FTrunc64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DEC4(relative to base address)
		int32_t FTrunc(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BC9C0C(relative to base address)
		FDateTime FromUnixTimestamp(int64_t UnixTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640734(relative to base address)
		FTimespan FromSeconds(float Seconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6406AC(relative to base address)
		FTimespan FromMinutes(float Minutes); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640624(relative to base address)
		FTimespan FromMilliseconds(float Milliseconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64059C(relative to base address)
		FTimespan FromHours(float Hours); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640514(relative to base address)
		FTimespan FromDays(float Days); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64048C(relative to base address)
		double Fraction(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749477960(relative to base address)
		int64_t FMod64(double Dividend, double Divisor, double& Remainder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E66C(relative to base address)
		int32_t FMod(double Dividend, double Divisor, double& Remainder); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E784(relative to base address)
		double FMin(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749543D1C(relative to base address)
		double FMax(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489A5EAC(relative to base address)
		float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, float TargetVelocityAmount, bool bClamp, float MinValue, float MaxValue, bool bInitializeFromTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C63FC54(relative to base address)
		float FixedTurn(float InCurrent, float InDesired, float InDeltaRate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63FB58(relative to base address)
		double FInterpTo_Constant(double Current, double Target, double DeltaTime, double InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7494165CC(relative to base address)
		double FInterpTo(double Current, double Target, double DeltaTime, double InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489C7408(relative to base address)
		double FInterpEaseInOut(double A, double B, double Alpha, double Exponent); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E51C(relative to base address)
		FRotator FindRelativeLookAtRotation(FTransform& StartTransform, FVector& TargetLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63F800(relative to base address)
		void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63F2FC(relative to base address)
		FRotator FindLookAtRotation(FVector& Start, FVector& Target); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748517B30(relative to base address)
		FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63F01C(relative to base address)
		FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63ED34(relative to base address)
		int64_t FFloor64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E490(relative to base address)
		int32_t FFloor(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BACA20(relative to base address)
		double FClamp(double Value, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74886EF9C(relative to base address)
		int64_t FCeil64(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E404(relative to base address)
		int32_t FCeil(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749333E7C(relative to base address)
		double exp(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63E0C0(relative to base address)
		bool EqualExactly_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63DCEC(relative to base address)
		bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63DBB8(relative to base address)
		bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63D9CC(relative to base address)
		bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493E32E4(relative to base address)
		bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63D7EC(relative to base address)
		bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63D530(relative to base address)
		bool EqualEqual_TransformTransform(FTransform& A, FTransform& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63D390(relative to base address)
		bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BDA4(relative to base address)
		bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63CED0(relative to base address)
		bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63CC94(relative to base address)
		bool EqualEqual_ObjectObject(UObject* A, UObject* B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489705D4(relative to base address)
		bool EqualEqual_NameName(FName A, FName B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74901E6A4(relative to base address)
		bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63C740(relative to base address)
		bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749573DA8(relative to base address)
		bool EqualEqual_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748868BD4(relative to base address)
		bool EqualEqual_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63C2A4(relative to base address)
		bool EqualEqual_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B3E7DC(relative to base address)
		bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BDA4(relative to base address)
		bool EqualEqual_ClassClass(UClass* A, UClass* B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489705D4(relative to base address)
		bool EqualEqual_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7487A5A38(relative to base address)
		bool EqualEqual_BoolBool(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493C8048(relative to base address)
		bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63DEE4(relative to base address)
		double Ease(double A, double B, double Alpha, TEnumAsByte<EEasingFunc> EasingFunc, double BlendExp, int32_t Steps); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748EDF47C(relative to base address)
		FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63B178(relative to base address)
		FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63AD38(relative to base address)
		float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63B5B8(relative to base address)
		double DotProduct2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6365E0(relative to base address)
		double Dot_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749389A68(relative to base address)
		FVector Divide_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748F06C80(relative to base address)
		FVector Divide_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C636214(relative to base address)
		FVector Divide_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C635FD4(relative to base address)
		FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C635E8C(relative to base address)
		FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C635C70(relative to base address)
		FVector2D Divide_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C635A54(relative to base address)
		FTimespan Divide_TimespanFloat(FTimespan A, float Scalar); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C635870(relative to base address)
		FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63562C(relative to base address)
		FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63542C(relative to base address)
		FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C635238(relative to base address)
		int32_t Divide_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749290194(relative to base address)
		int64_t Divide_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63515C(relative to base address)
		double Divide_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748839030(relative to base address)
		char Divide_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63507C(relative to base address)
		double DistanceSquared2D(FVector2D v1, FVector2D v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634E8C(relative to base address)
		double Distance2D(FVector2D v1, FVector2D v2); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634C98(relative to base address)
		double DegTan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634AAC(relative to base address)
		double DegSin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634A1C(relative to base address)
		double DegreesToRadians(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634B3C(relative to base address)
		double DegCos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63498C(relative to base address)
		double DegAtan2(double Y, double X); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634820(relative to base address)
		double DegAtan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6348FC(relative to base address)
		double DegAsin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634774(relative to base address)
		double DegAcos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748213EEC(relative to base address)
		int32_t DaysInYear(int32_t Year); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6346EC(relative to base address)
		int32_t DaysInMonth(int32_t Year, int32_t Month); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634610(relative to base address)
		FDateTime DateTimeMinValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6345FC(relative to base address)
		FDateTime DateTimeMaxValue(); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6345E0(relative to base address)
		bool DateTimeFromString(FString DateTimeString, FDateTime& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6344CC(relative to base address)
		bool DateTimeFromIsoString(FString IsoString, FDateTime& Result); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6343A8(relative to base address)
		double CrossProduct2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C633E60(relative to base address)
		FVector Cross_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634048(relative to base address)
		FVector CreateVectorFromYawPitch(float Yaw, float pitch, float Length); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C633D54(relative to base address)
		double cos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C632E54(relative to base address)
		int32_t Convert3DTo1D(FIntVector& Index3D, int32_t XSize, int32_t YSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C631474(relative to base address)
		int32_t Convert2DTo1D(FIntPoint& Index2D, int32_t XSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6312E0(relative to base address)
		FIntVector Convert1DTo3D(int32_t Index1D, int32_t XSize, int32_t YSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C631194(relative to base address)
		FIntPoint Convert1DTo2D(int32_t Index1D, int32_t XSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63109C(relative to base address)
		FVector2D Conv_VectorToVector2D(FVector InVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630F94(relative to base address)
		FTransform Conv_VectorToTransform(FVector InLocation); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748FE75E8(relative to base address)
		FRotator Conv_VectorToRotator(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748E1A088(relative to base address)
		FQuat Conv_VectorToQuaternion(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630D24(relative to base address)
		FLinearColor Conv_VectorToLinearColor(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748EC259C(relative to base address)
		FVector Conv_Vector4ToVector(FVector4& InVector4); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630C84(relative to base address)
		FRotator Conv_Vector4ToRotator(FVector4& InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630B84(relative to base address)
		FQuat Conv_Vector4ToQuaternion(FVector4& InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630AD8(relative to base address)
		FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630698(relative to base address)
		FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63054C(relative to base address)
		FMatrix Conv_TransformToMatrix(FTransform& Transform); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749225E48(relative to base address)
		FVector Conv_RotatorToVector(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F57C(relative to base address)
		FTransform Conv_RotatorToTransform(FRotator& InRotator); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F4A8(relative to base address)
		FQuat Conv_RotatorToQuaternion(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F234(relative to base address)
		FTransform Conv_MatrixToTransform(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62ECF8(relative to base address)
		FRotator Conv_MatrixToRotator(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62EB68(relative to base address)
		FVector Conv_LinearColorToVector(FLinearColor InLinearColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B142D0(relative to base address)
		FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E8E4(relative to base address)
		FVector Conv_IntVectorToVector(FIntVector& InIntVector); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E828(relative to base address)
		FVector Conv_IntToVector(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E668(relative to base address)
		FIntVector Conv_IntToIntVector(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E5E8(relative to base address)
		int64_t Conv_IntToInt64(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7494AFC78(relative to base address)
		double Conv_IntToDouble(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A2398C(relative to base address)
		char Conv_IntToByte(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74939CEF4(relative to base address)
		bool Conv_IntToBool(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BE91C0(relative to base address)
		FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E4C4(relative to base address)
		int32_t Conv_Int64ToInt(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E288(relative to base address)
		double Conv_Int64ToDouble(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E208(relative to base address)
		char Conv_Int64ToByte(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E190(relative to base address)
		double Conv_FloatToDouble(float InFloat); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DFE4(relative to base address)
		FVector2D Conv_DoubleToVector2D(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74935139C(relative to base address)
		FVector Conv_DoubleToVector(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748854268(relative to base address)
		FLinearColor Conv_DoubleToLinearColor(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C05D00(relative to base address)
		int64_t Conv_DoubleToInt64(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DEC4(relative to base address)
		float Conv_DoubleToFloat(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DE40(relative to base address)
		FLinearColor Conv_ColorToLinearColor(FColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748FE886C(relative to base address)
		int64_t Conv_ByteToInt64(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DA60(relative to base address)
		int32_t Conv_ByteToInt(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74893C094(relative to base address)
		double Conv_ByteToDouble(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62D9DC(relative to base address)
		int32_t Conv_BoolToInt(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749734074(relative to base address)
		double Conv_BoolToDouble(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7488AAB0C(relative to base address)
		char Conv_BoolToByte(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62D818(relative to base address)
		FTransform ComposeTransforms(FTransform& A, FTransform& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62D654(relative to base address)
		FRotator ComposeRotators(FRotator A, FRotator B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A536A4(relative to base address)
		bool ClassIsChildOf(UClass* TestClass, UClass* ParentClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62C624(relative to base address)
		FVector ClampVectorSize(FVector A, double Min, double Max); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62C2DC(relative to base address)
		int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62C1DC(relative to base address)
		float ClampAxis(float Angle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62C158(relative to base address)
		FVector2D ClampAxes2D(FVector2D A, double MinAxisVal, double MaxAxisVal); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62BEAC(relative to base address)
		double ClampAngle(double AngleDegrees, double MinAngleDegrees, double MaxAngleDegrees); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62BCC0(relative to base address)
		int32_t clamp(int32_t Value, int32_t Min, int32_t Max); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748807550(relative to base address)
		FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C627E04(relative to base address)
		void BreakVector_NetQuantizeNormal(FVector_NetQuantizeNormal InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626524(relative to base address)
		void BreakVector_NetQuantize100(FVector_NetQuantize100 InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626524(relative to base address)
		void BreakVector_NetQuantize10(FVector_NetQuantize10 InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626524(relative to base address)
		void BreakVector_NetQuantize(FVector_NetQuantize InVec, double& X, double& Y, double& Z); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626524(relative to base address)
		void BreakVector4(FVector4& InVec, double& X, double& Y, double& Z, double& W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7482E983C(relative to base address)
		void BreakVector2D(FVector2D InVec, double& X, double& Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7482E99BC(relative to base address)
		void BreakVector(FVector InVec, double& X, double& Y, double& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7482E9ABC(relative to base address)
		void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747CC1420(relative to base address)
		void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C625CD0(relative to base address)
		void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62607C(relative to base address)
		void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6252A8(relative to base address)
		void BreakRotator(FRotator InRot, float& Roll, float& pitch, float& Yaw); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74771CA68(relative to base address)
		void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C625198(relative to base address)
		void BreakQuat(FQuat& InQuat, float& X, float& Y, float& Z, float& W); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C624E98(relative to base address)
		void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C624CC8(relative to base address)
		void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C624B1C(relative to base address)
		void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62465C(relative to base address)
		void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74903F9E8(relative to base address)
		void BreakBoxSphereBounds(FBoxSphereBounds& InBoxSphereBounds, FVector& Origin, FVector& BoxExtent, float& SphereRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C624360(relative to base address)
		FBox Box_Overlap(FBox& A, FBox& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C623A64(relative to base address)
		bool Box_IsPointInside(FBox& Box, FVector& Point); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6238F8(relative to base address)
		bool Box_IsInsideOrOn(FBox& InnerTest, FBox& OuterTest); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C623798(relative to base address)
		bool Box_IsInside(FBox& InnerTest, FBox& OuterTest); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C623638(relative to base address)
		bool Box_Intersects(FBox& A, FBox& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C623504(relative to base address)
		FVector Box_GetClosestPointTo(FBox& Box, FVector& Point); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62337C(relative to base address)
		FBox Box_ExpandBy(FBox& Box, FVector& Negative, FVector& Positive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62310C(relative to base address)
		bool BooleanXOR(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61EC2C(relative to base address)
		bool BooleanOR(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7471962EC(relative to base address)
		bool BooleanNOR(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BEB80C(relative to base address)
		bool BooleanNAND(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61EB60(relative to base address)
		bool BooleanAND(bool A, bool B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7471964C8(relative to base address)
		char BMin(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E6F0(relative to base address)
		char BMax(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E628(relative to base address)
		void AverageOfIntArray(TArray<int32_t>& IntArray, float& AverageValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E4E8(relative to base address)
		double Atan2(double Y, double X); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E348(relative to base address)
		double atan(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749855740(relative to base address)
		double asin(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E2A4(relative to base address)
		int32_t And_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748AED920(relative to base address)
		int64_t And_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61D548(relative to base address)
		FVector Add_VectorVector(FVector A, FVector B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748665D08(relative to base address)
		FVector Add_VectorInt(FVector A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61D35C(relative to base address)
		FVector Add_VectorFloat(FVector A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61D174(relative to base address)
		FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61D02C(relative to base address)
		FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7496B1778(relative to base address)
		FVector2D Add_Vector2DFloat(FVector2D A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61CE44(relative to base address)
		FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C32C(relative to base address)
		FQuat Add_QuatQuat(FQuat& A, FQuat& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61CD64(relative to base address)
		FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61CBB4(relative to base address)
		FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C97C(relative to base address)
		FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C79C(relative to base address)
		FIntPoint Add_IntPointInt(FIntPoint A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C5C0(relative to base address)
		int32_t Add_IntInt(int32_t A, int32_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7485F7B88(relative to base address)
		int64_t Add_Int64Int64(int64_t A, int64_t B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C500(relative to base address)
		double Add_DoubleDouble(double A, double B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748734EB4(relative to base address)
		FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C32C(relative to base address)
		FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C32C(relative to base address)
		char Add_ByteByte(char A, char B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C270(relative to base address)
		double acos(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C0A0(relative to base address)
		int64_t Abs_Int64(int64_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61BF9C(relative to base address)
		int32_t Abs_Int(int32_t A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61C020(relative to base address)
		double abs(double A); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7489DC6B8(relative to base address)
	};


	// Class Engine.KismetNodeHelperLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetNodeHelperLibrary");
			return ret;
		}

		void MarkBit(int32_t& Data, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C65878C(relative to base address)
		bool HasUnmarkedBit(int32_t Data, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C649148(relative to base address)
		bool HasMarkedBit(int32_t Data, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64906C(relative to base address)
		char GetValidValue(UEnum* Enum, char EnumeratorValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C647C7C(relative to base address)
		int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C647A70(relative to base address)
		int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64580C(relative to base address)
		int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C642E50(relative to base address)
		char GetEnumeratorValueFromIndex(UEnum* Enum, char EnumeratorIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642C8C(relative to base address)
		FString GetEnumeratorUserFriendlyName(UEnum* Enum, char EnumeratorValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747F9B570(relative to base address)
		FName GetEnumeratorName(UEnum* Enum, char EnumeratorValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747FCDD00(relative to base address)
		void ClearBit(int32_t& Data, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C62C874(relative to base address)
		void ClearAllBits(int32_t& Data); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C62C77C(relative to base address)
		bool BitIsMarked(int32_t Data, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C61EAA0(relative to base address)
	};


	// Class Engine.KismetRenderingLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetRenderingLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetRenderingLibrary");
			return ret;
		}

		void SetCastInsetShadowForAllAttachments(UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66E5E0(relative to base address)
		void ResizeRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget, int32_t Width, int32_t Height); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66CF54(relative to base address)
		UVolumeTexture RenderTargetCreateStaticVolumeTextureEditorOnly(UTextureRenderTargetVolume* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66C80C(relative to base address)
		UTextureCube RenderTargetCreateStaticTextureCubeEditorOnly(UTextureRenderTargetCube* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66C684(relative to base address)
		UTexture2D RenderTargetCreateStaticTexture2DEditorOnly(UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66C510(relative to base address)
		UTexture2DArray RenderTargetCreateStaticTexture2DArrayEditorOnly(UTextureRenderTarget2DArray* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66C388(relative to base address)
		void ReleaseRenderTarget2D(UTextureRenderTarget2D* TextureRenderTarget); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66C21C(relative to base address)
		void RefreshPathTracingOutput(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66C1C8(relative to base address)
		FColor ReadRenderTargetUV(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66C034(relative to base address)
		TArray ReadRenderTargetRawUVArea(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FBox2D Area, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66BD30(relative to base address)
		FLinearColor ReadRenderTargetRawUV(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, float U, float V, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66BB50(relative to base address)
		TArray ReadRenderTargetRawPixelArea(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int32_t MinX, int32_t MinY, int32_t MaxX, int32_t MaxY, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66B930(relative to base address)
		FLinearColor ReadRenderTargetRawPixel(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66B7AC(relative to base address)
		bool ReadRenderTargetRaw(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, TArray<FLinearColor>& OutLinearSamples, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66B444(relative to base address)
		FColor ReadRenderTargetPixel(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66B308(relative to base address)
		bool ReadRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, TArray<FColor>& OutSamples, bool bNormalize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66B018(relative to base address)
		FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657930(relative to base address)
		UTexture2D ImportFileAsTexture2D(UObject* WorldContextObject, FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6493F0(relative to base address)
		UTexture2D ImportBufferAsTexture2D(UObject* WorldContextObject, TArray<char>& Buffer); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C649310(relative to base address)
		void ExportTexture2D(UObject* WorldContextObject, UTexture2D* Texture, FString FilePath, FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C63E2A8(relative to base address)
		void ExportRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C63E148(relative to base address)
		void EndDrawCanvasToRenderTarget(UObject* WorldContextObject, FDrawToRenderTargetContext& Context); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C63B9B0(relative to base address)
		void EnablePathTracing(bool bEnablePathTracer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C63B908(relative to base address)
		void DrawMaterialToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UMaterialInterface* Material); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF749AB17B8(relative to base address)
		UTextureRenderTargetVolume CreateRenderTargetVolume(UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C633750(relative to base address)
		UTextureRenderTarget2DArray CreateRenderTarget2DArray(UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6332C4(relative to base address)
		UTextureRenderTarget2D CreateRenderTarget2D(UObject* WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps, bool bSupportUAVs); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C632EDC(relative to base address)
		void ConvertRenderTargetToTextureVolumeEditorOnly(UObject* WorldContextObject, UTextureRenderTargetVolume* RenderTarget, UVolumeTexture* Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6328D8(relative to base address)
		void ConvertRenderTargetToTextureCubeEditorOnly(UObject* WorldContextObject, UTextureRenderTargetCube* RenderTarget, UTextureCube* Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6328D8(relative to base address)
		void ConvertRenderTargetToTexture2DEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2D* RenderTarget, UTexture2D* Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6328D8(relative to base address)
		void ConvertRenderTargetToTexture2DArrayEditorOnly(UObject* WorldContextObject, UTextureRenderTarget2DArray* RenderTarget, UTexture2DArray* Texture); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6328D8(relative to base address)
		void ClearRenderTarget2D(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C62CAC4(relative to base address)
		FMatrix CalculateProjectionMatrix(FMinimalViewInfo& MinimalViewInfo); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C628168(relative to base address)
		void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C625510(relative to base address)
		void BeginDrawCanvasToRenderTarget(UObject* WorldContextObject, UTextureRenderTarget2D* TextureRenderTarget, UCanvas* Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C61E7B8(relative to base address)
	};


	// Class Engine.KismetStringLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetStringLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetStringLibrary");
			return ret;
		}

		FString TrimTrailing(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6783F8(relative to base address)
		FString Trim(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C67834C(relative to base address)
		FString ToUpper(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677DDC(relative to base address)
		FString ToLower(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6779AC(relative to base address)
		FString TimeSecondsToString(float InSeconds); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C677278(relative to base address)
		bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte<ESearchCase> SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C675418(relative to base address)
		bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C674FE4(relative to base address)
		FString RightPad(FString SourceString, int32_t ChCount); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D27C(relative to base address)
		FString RightChop(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D188(relative to base address)
		FString Right(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7492C7200(relative to base address)
		FString Reverse(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D0D0(relative to base address)
		int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte<ESearchCase> SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66C994(relative to base address)
		FString Replace(FString SourceString, FString From, FString To, TEnumAsByte<ESearchCase> SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748EDE630(relative to base address)
		TArray ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6628E8(relative to base address)
		bool NotEqual_StrStr(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74916B148(relative to base address)
		bool NotEqual_StriStri(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749573C88(relative to base address)
		FString Mid(FString SourceString, int32_t Start, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646838(relative to base address)
		bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte<ESearchCase> SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6588D4(relative to base address)
		int32_t Len(FString S); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E9F4(relative to base address)
		FString LeftPad(FString SourceString, int32_t ChCount); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E900(relative to base address)
		FString LeftChop(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74867F928(relative to base address)
		FString Left(FString SourceString, int32_t Count); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74940BC34(relative to base address)
		FString JoinStringArray(TArray<FString>& SourceArray, FString Separator); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BFB0(relative to base address)
		bool IsNumeric(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64ACDC(relative to base address)
		bool IsEmpty(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493B305C(relative to base address)
		FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646838(relative to base address)
		int32_t GetCharacterAsNumber(FString SourceString, int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641BD8(relative to base address)
		TArray GetCharacterArrayFromString(FString SourceString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641A64(relative to base address)
		int32_t FindSubstring(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63F994(relative to base address)
		bool EqualEqual_StrStr(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B46DDC(relative to base address)
		bool EqualEqual_StriStri(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7494230A8(relative to base address)
		bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte<ESearchCase> SearchCase); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74929B6E4(relative to base address)
		int32_t CullArray(FString SourceString, TArray<FString>& inArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634268(relative to base address)
		FString Conv_VectorToString(FVector InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630E5C(relative to base address)
		FString Conv_Vector3fToString(FVector3f InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6309A8(relative to base address)
		FString Conv_Vector2dToString(FVector2D InVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630870(relative to base address)
		FString Conv_TransformToString(FTransform& InTrans); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630434(relative to base address)
		void Conv_StringToVector3f(FString InString, FVector3f& OutConvertedVector, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C630154(relative to base address)
		void Conv_StringToVector2D(FString InString, FVector2D& OutConvertedVector2D, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62FFD4(relative to base address)
		void Conv_StringToVector(FString InString, FVector& OutConvertedVector, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6302C8(relative to base address)
		void Conv_StringToRotator(FString InString, FRotator& OutConvertedRotator, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62FEA4(relative to base address)
		FName Conv_StringToName(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747B0CAD8(relative to base address)
		int64_t Conv_StringToInt64(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62FE08(relative to base address)
		int32_t Conv_StringToInt(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74817E1D4(relative to base address)
		double Conv_StringToDouble(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62FD68(relative to base address)
		void Conv_StringToColor(FString InString, FLinearColor& OutConvertedColor, bool& OutIsValid); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62FBFC(relative to base address)
		FString Conv_RotatorToString(FRotator InRot); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F370(relative to base address)
		FString Conv_PlatformUserIdToString(FPlatformUserId InPlatformUserId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E064(relative to base address)
		FString Conv_ObjectToString(UObject* InObj); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74912ABA4(relative to base address)
		FString Conv_NameToString(FName InName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A52324(relative to base address)
		FString Conv_MatrixToString(FMatrix& InMatrix); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62EC30(relative to base address)
		FString Conv_IntVectorToString(FIntVector InIntVec); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E6F4(relative to base address)
		FString Conv_IntToString(int32_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74914E148(relative to base address)
		FString Conv_IntPointToString(FIntPoint InIntPoint); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E39C(relative to base address)
		FString Conv_Int64ToString(int64_t inInt); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E300(relative to base address)
		FString Conv_InputDeviceIdToString(FInputDeviceId InDeviceId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62E064(relative to base address)
		FString Conv_DoubleToString(double InDouble); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DF44(relative to base address)
		FString Conv_ColorToString(FLinearColor InColor); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DC24(relative to base address)
		FString Conv_ByteToString(char InByte); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DADC(relative to base address)
		FString Conv_BoxToString(FBox& Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62D938(relative to base address)
		FString Conv_BoxCenterAndExtentsToString(FBox& Box); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62D894(relative to base address)
		FString Conv_BoolToString(bool InBool); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74879AE50(relative to base address)
		bool Contains(FString SearchIn, FString Substring, bool bUseCase, bool bSearchFromEnd); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748ED1D88(relative to base address)
		FString Concat_StrStr(FString A, FString B); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747B0C844(relative to base address)
		FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62788C(relative to base address)
		FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C627B44(relative to base address)
		FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6275CC(relative to base address)
		FString BuildString_Object(FString AppendTo, FString Prefix, UObject* InObj, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62742C(relative to base address)
		FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62728C(relative to base address)
		FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626FD0(relative to base address)
		FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626E30(relative to base address)
		FString BuildString_Double(FString AppendTo, FString Prefix, double InDouble, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626C88(relative to base address)
		FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6269D0(relative to base address)
		FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626828(relative to base address)
	};


	// Class Engine.KismetStringTableLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetStringTableLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetStringTableLibrary");
			return ret;
		}

		bool IsRegisteredTableId(FName TableId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B934(relative to base address)
		bool IsRegisteredTableEntry(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B860(relative to base address)
		FString GetTableNamespace(FName TableId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6473E4(relative to base address)
		FString GetTableEntrySourceString(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6472B0(relative to base address)
		FString GetTableEntryMetaData(FName TableId, FString Key, FName MetaDataId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64714C(relative to base address)
		TArray GetRegisteredStringTables(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645B1C(relative to base address)
		TArray GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643B18(relative to base address)
		TArray GetKeysFromStringTable(FName TableId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64354C(relative to base address)
	};


	// Class Engine.KismetSystemLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UKismetSystemLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.KismetSystemLibrary");
			return ret;
		}

		void UnregisterForRemoteNotifications(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74921B8F8(relative to base address)
		void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6785BC(relative to base address)
		void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6784A4(relative to base address)
		void TransactObject(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C088608(relative to base address)
		void StackTrace(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6753B4(relative to base address)
		bool SphereTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6743C4(relative to base address)
		bool SphereTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C673A54(relative to base address)
		bool SphereTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7491CD644(relative to base address)
		bool SphereTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF7490E6118(relative to base address)
		bool SphereTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C673158(relative to base address)
		bool SphereTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C67285C(relative to base address)
		bool SphereOverlapComponents(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C672468(relative to base address)
		bool SphereOverlapActors(UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C672074(relative to base address)
		void SnapshotObject(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C088608(relative to base address)
		void ShowPlatformSpecificLeaderboardScreen(FString CategoryName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C670FA0(relative to base address)
		void ShowPlatformSpecificAchievementsScreen(APlayerController* SpecificPlayer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C670EB4(relative to base address)
		void ShowInterstitialAd(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C670E80(relative to base address)
		void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C670DA8(relative to base address)
		void SetWindowTitle(FText& Title); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C670CB4(relative to base address)
		void SetVolumeButtonsHandledBySystem(bool bEnabled); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		void SetVectorPropertyByName(UObject* Object, FName PropertyName, FVector& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C670970(relative to base address)
		void SetVector3fPropertyByName(UObject* Object, FName PropertyName, FVector3f& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6707F0(relative to base address)
		void SetUserActivity(FUserActivity& UserActivity); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C670700(relative to base address)
		void SetTransformPropertyByName(UObject* Object, FName PropertyName, FTransform& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6704E4(relative to base address)
		void SetTextPropertyByName(UObject* Object, FName PropertyName, FText& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C67037C(relative to base address)
		void SetSuppressViewportTransitionMessage(UObject* WorldContextObject, bool bState); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C670284(relative to base address)
		void SetStructurePropertyByName(UObject* Object, FName PropertyName, FGenericStruct& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF748D1C394(relative to base address)
		void SetStringPropertyByName(UObject* Object, FName PropertyName, FString Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C670124(relative to base address)
		void SetSoftObjectPropertyByName(UObject* Object, FName PropertyName, TWeakObjectPtr<UObject*>& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66FF9C(relative to base address)
		void SetSoftClassPropertyByName(UObject* Object, FName PropertyName, TWeakObjectPtr<UClass*>& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66FE14(relative to base address)
		void SetRotatorPropertyByName(UObject* Object, FName PropertyName, FRotator& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66FC90(relative to base address)
		void SetObjectPropertyByName(UObject* Object, FName PropertyName, UObject* Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748D9BE08(relative to base address)
		void SetNamePropertyByName(UObject* Object, FName PropertyName, FName& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66F814(relative to base address)
		void SetLinearColorPropertyByName(UObject* Object, FName PropertyName, FLinearColor& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66F664(relative to base address)
		void SetIntPropertyByName(UObject* Object, FName PropertyName, int32_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748B46F4C(relative to base address)
		void SetInterfacePropertyByName(UObject* Object, FName PropertyName, TScriptInterface<Class>& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66F4E4(relative to base address)
		void SetInt64PropertyByName(UObject* Object, FName PropertyName, int64_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66F3C0(relative to base address)
		void SetGamepadsBlockDeviceFeedback(bool bBlock); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		void SetFieldPathPropertyByName(UObject* Object, FName PropertyName, Value& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66F0E0(relative to base address)
		void SetDoublePropertyByName(UObject* Object, FName PropertyName, double Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748854BDC(relative to base address)
		void SetColorPropertyByName(UObject* Object, FName PropertyName, FColor& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66E908(relative to base address)
		void SetCollisionProfileNameProperty(UObject* Object, FName PropertyName, FCollisionProfileName& Value); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66E6DC(relative to base address)
		void SetClassPropertyByName(UObject* Object, FName PropertyName, UClass* Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748A5DFE0(relative to base address)
		void SetBytePropertyByName(UObject* Object, FName PropertyName, char Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7488AB0E4(relative to base address)
		void SetBoolPropertyByName(UObject* Object, FName PropertyName, bool Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748805B28(relative to base address)
		void RetriggerableDelay(UObject* WorldContextObject, float duration, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747ED7278(relative to base address)
		void ResetGamepadAssignmentToController(int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6284F8(relative to base address)
		void ResetGamepadAssignments(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74921B8F8(relative to base address)
		void RegisterForRemoteNotifications(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74921B8F8(relative to base address)
		void QuitGame(UObject* WorldContextObject, APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C667D70(relative to base address)
		void PrintWarning(FString InString); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C664374(relative to base address)
		void PrintText(UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float duration, FName Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C663FD4(relative to base address)
		void PrintString(UObject* WorldContextObject, FString InString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float duration, FName Key); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C663C40(relative to base address)
		bool ParseParamValue(FString InString, FString InParam, FString& OutValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662B6C(relative to base address)
		bool ParseParam(FString InString, FString InParam); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C662A6C(relative to base address)
		void ParseCommandLine(FString InCmdLine, TArray<FString>& OutTokens, TArray<FString>& OutSwitches, TMap<FString, FString>& OutParams); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C662690(relative to base address)
		void OnAssetLoaded__DelegateSignature(UObject* Loaded); // Flags: Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void OnAssetClassLoaded__DelegateSignature(UClass* Loaded); // Flags: Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		bool NotEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C661F88(relative to base address)
		bool NotEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C661F88(relative to base address)
		bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C3064DC(relative to base address)
		bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6617C8(relative to base address)
		FString NormalizeFilename(FString InFilename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6606AC(relative to base address)
		void MoveComponentTo(USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C65DB1C(relative to base address)
		FTopLevelAssetPath MakeTopLevelAssetPath(FString PackageName, FString AssetName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6582C4(relative to base address)
		FSoftObjectPath MakeSoftObjectPath(FString PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657D14(relative to base address)
		FSoftClassPath MakeSoftClassPath(FString PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657BA4(relative to base address)
		FText MakeLiteralText(FText Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7490F76A8(relative to base address)
		FString MakeLiteralString(FString Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6560E8(relative to base address)
		FName MakeLiteralName(FName Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748891C34(relative to base address)
		int64_t MakeLiteralInt64(int64_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65606C(relative to base address)
		int32_t MakeLiteralInt(int32_t Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B49D7C(relative to base address)
		double MakeLiteralDouble(double Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7487A4DC0(relative to base address)
		char MakeLiteralByte(char Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749198980(relative to base address)
		bool MakeLiteralBool(bool Value); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C655FF0(relative to base address)
		FARFilter MakeARFilter(TArray<FName>& PackageNames, TArray<FName>& PackagePaths, TArray<FSoftObjectPath>& SoftObjectPaths, TArray<FTopLevelAssetPath>& ClassPaths, TSet<FTopLevelAssetPath>& RecursiveClassPathsExclusionSet, TArray<FName>& ClassNames, TSet<FName>& RecursiveClassesExclusionSet, bool bRecursivePaths, bool bRecursiveClasses, bool bIncludeOnlyOnDiskAssets); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C654D78(relative to base address)
		void LogString(FString InString, bool bPrintToLog); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C654BE0(relative to base address)
		void LoadInterstitialAd(int32_t AdIdIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C654A8C(relative to base address)
		UClass LoadClassAsset_Blocking(TWeakObjectPtr<UClass*> AssetClass); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C654980(relative to base address)
		void LoadAssetClass(UObject* WorldContextObject, TWeakObjectPtr<UClass*> AssetClass, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747F771AC(relative to base address)
		UObject LoadAsset_Blocking(TWeakObjectPtr<UObject*> Asset); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C654874(relative to base address)
		void LoadAsset(UObject* WorldContextObject, TWeakObjectPtr<UObject*> Asset, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747ED49B8(relative to base address)
		bool LineTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C652480(relative to base address)
		bool LineTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C651BC0(relative to base address)
		bool LineTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C651300(relative to base address)
		bool LineTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C650B10(relative to base address)
		bool LineTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6502D4(relative to base address)
		bool LineTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C64FA98(relative to base address)
		void LaunchURL(FString URL); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64E880(relative to base address)
		void LaunchExternalUrl(TArray<FString>& InDomainStrings, FString URL); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C64E6D4(relative to base address)
		void K2_UnPauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74976C900(relative to base address)
		void K2_UnPauseTimerDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64D3F4(relative to base address)
		void K2_UnPauseTimer(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64D320(relative to base address)
		bool K2_TimerExistsHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D1A8(relative to base address)
		bool K2_TimerExistsDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D114(relative to base address)
		bool K2_TimerExists(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64D030(relative to base address)
		FTimerHandle K2_SetTimerForNextTickDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748C16FE8(relative to base address)
		FTimerHandle K2_SetTimerForNextTick(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64CE98(relative to base address)
		FTimerHandle K2_SetTimerDelegate(FDelegateProperty Delegate, float Time, bool bLooping, bool bMaxOncePerFrame, float InitialStartDelay, float InitialStartDelayVariance); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747ED4BAC(relative to base address)
		FTimerHandle K2_SetTimer(UObject* Object, FString FunctionName, float Time, bool bLooping, bool bMaxOncePerFrame, float InitialStartDelay, float InitialStartDelayVariance); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748941F0C(relative to base address)
		void K2_PauseTimerHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF749550AC0(relative to base address)
		void K2_PauseTimerDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64CE14(relative to base address)
		void K2_PauseTimer(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64CD40(relative to base address)
		bool K2_IsValidTimerHandle(FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7491499F0(relative to base address)
		bool K2_IsTimerPausedHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64CBC0(relative to base address)
		bool K2_IsTimerPausedDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64CB2C(relative to base address)
		bool K2_IsTimerPaused(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64CA48(relative to base address)
		bool K2_IsTimerActiveHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C14AD8(relative to base address)
		bool K2_IsTimerActiveDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C9B4(relative to base address)
		bool K2_IsTimerActive(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C8D0(relative to base address)
		FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C64C848(relative to base address)
		float K2_GetTimerRemainingTimeHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7493069A8(relative to base address)
		float K2_GetTimerRemainingTimeDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C7B0(relative to base address)
		void K2_GetTimerRemainingTime(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C6CC(relative to base address)
		float K2_GetTimerElapsedTimeHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C54C(relative to base address)
		float K2_GetTimerElapsedTimeDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C4B4(relative to base address)
		float K2_GetTimerElapsedTime(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64C3D0(relative to base address)
		void K2_ClearTimerHandle(UObject* WorldContextObject, FTimerHandle Handle); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64C214(relative to base address)
		void K2_ClearTimerDelegate(FDelegateProperty Delegate); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64C190(relative to base address)
		void K2_ClearTimer(UObject* Object, FString FunctionName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748941DAC(relative to base address)
		void K2_ClearAndInvalidateTimerHandle(UObject* WorldContextObject, FTimerHandle& Handle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74896F3C8(relative to base address)
		bool IsValidSoftObjectReference(TWeakObjectPtr<UObject*>& SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A4F924(relative to base address)
		bool IsValidSoftClassReference(TWeakObjectPtr<UClass*>& SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A4F924(relative to base address)
		bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BE14(relative to base address)
		bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BCFC(relative to base address)
		bool IsValidInterface(TScriptInterface<Class>& Interface); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7484918E8(relative to base address)
		bool IsValidClass(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7484919E4(relative to base address)
		bool IsValid(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7484919E4(relative to base address)
		bool IsUnattended(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BCD8(relative to base address)
		bool IsStandalone(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BC58(relative to base address)
		bool IsSplitScreen(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BBD8(relative to base address)
		bool IsServer(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B204E0(relative to base address)
		bool IsScreensaverEnabled(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsPackagedForDistribution(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749859FE0(relative to base address)
		bool IsObjectOfSoftClass(UObject* Object, TWeakObjectPtr<UClass*> SoftClass); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747F76DB4(relative to base address)
		bool IsLoggedIn(APlayerController* SpecificPlayer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A958(relative to base address)
		bool IsInterstitialAdRequested(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64A894(relative to base address)
		bool IsInterstitialAdAvailable(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C64A84C(relative to base address)
		bool IsDedicatedServer(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7477D2C28(relative to base address)
		bool IsControllerAssignedToGamepad(int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A680(relative to base address)
		void HideAdBanner(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C649208(relative to base address)
		bool HasMultipleLocalPlayers(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749493B4C(relative to base address)
		bool GetVolumeButtonsHandledBySystem(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749859FE0(relative to base address)
		FString GetUniqueDeviceId(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642A74(relative to base address)
		FString GetSystemPath(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646D04(relative to base address)
		bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C646C68(relative to base address)
		FTopLevelAssetPath GetStructTopLevelAssetPath(UScriptStruct* Struct); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641DDC(relative to base address)
		TWeakObjectPtr GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646708(relative to base address)
		FSoftObjectPath GetSoftObjectPath(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646430(relative to base address)
		FTopLevelAssetPath GetSoftClassTopLevelAssetPath(TWeakObjectPtr<UClass*> SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6465F4(relative to base address)
		TWeakObjectPtr GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6464C4(relative to base address)
		FSoftClassPath GetSoftClassPath(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C646430(relative to base address)
		int32_t GetRenderingMaterialQualityLevel(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7477D26D0(relative to base address)
		int32_t GetRenderingDetailMode(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BC8624(relative to base address)
		FString GetProjectSavedDirectory(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645794(relative to base address)
		FString GetProjectDirectory(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6456F0(relative to base address)
		FString GetProjectContentDirectory(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645690(relative to base address)
		void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6453A8(relative to base address)
		void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C645228(relative to base address)
		FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TWeakObjectPtr<UObject*> SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64510C(relative to base address)
		FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TWeakObjectPtr<UClass*> SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644FF0(relative to base address)
		FPrimaryAssetId GetPrimaryAssetIdFromObject(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644F4C(relative to base address)
		FPrimaryAssetId GetPrimaryAssetIdFromClass(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644E60(relative to base address)
		TArray GetPreferredLanguages(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C644DF4(relative to base address)
		FString GetPlatformUserName(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644808(relative to base address)
		FString GetPlatformUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6447BC(relative to base address)
		FString GetPathName(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6445D0(relative to base address)
		UObject GetOuterObject(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644480(relative to base address)
		FString GetObjectName(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C6DA28(relative to base address)
		UObject GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644370(relative to base address)
		int32_t GetMinYResolutionForUI(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643FD4(relative to base address)
		int32_t GetMinYResolutionFor3DView(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643FB4(relative to base address)
		FString GetLocalCurrencySymbol(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C642A74(relative to base address)
		FString GetLocalCurrencyCode(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C642A74(relative to base address)
		double GetGameTimeInSeconds(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747948C10(relative to base address)
		FString GetGamepadControllerName(int32_t ControllerId); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643110(relative to base address)
		UTexture2D GetGamepadButtonGlyph(FString ButtonKey, int32_t ControllerIndex); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643024(relative to base address)
		FString GetGameName(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642FD8(relative to base address)
		FString GetGameBundleId(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642F44(relative to base address)
		int64_t GetFrameCount(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF7492FCAF8(relative to base address)
		FTopLevelAssetPath GetEnumTopLevelAssetPath(UEnum* Enum); // Flags: Final|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641DDC(relative to base address)
		FString GetEngineVersion(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642C3C(relative to base address)
		FString GetDisplayName(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74888BA28(relative to base address)
		FString GetDeviceId(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642A74(relative to base address)
		FString GetDefaultLocale(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642A30(relative to base address)
		FString GetDefaultLanguage(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6429EC(relative to base address)
		bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6422D4(relative to base address)
		bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C642034(relative to base address)
		FString GetConsoleVariableStringValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C641F88(relative to base address)
		int32_t GetConsoleVariableIntValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747B0CB84(relative to base address)
		float GetConsoleVariableFloatValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF749202E28(relative to base address)
		bool GetConsoleVariableBoolValue(FString VariableName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748E77960(relative to base address)
		void GetComponentBounds(USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74883BF98(relative to base address)
		FString GetCommandLine(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C641F3C(relative to base address)
		FTopLevelAssetPath GetClassTopLevelAssetPath(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641DDC(relative to base address)
		UClass GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641CC0(relative to base address)
		FString GetClassDisplayName(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748CD816C(relative to base address)
		FString GetBuildVersion(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641A18(relative to base address)
		FString GetBuildConfiguration(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6419CC(relative to base address)
		int32_t GetAdIDCount(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640F04(relative to base address)
		void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, UClass* ActorClassFilter, TArray<AActor*>& OutActorList); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C640D5C(relative to base address)
		void GetActorBounds(AActor* Actor, FVector& Origin, FVector& BoxExtent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640AFC(relative to base address)
		void ForceCloseAdBanner(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C640458(relative to base address)
		void FlushPersistentDebugLines(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C088608(relative to base address)
		void FlushDebugStrings(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C088608(relative to base address)
		void ExecuteConsoleCommand(UObject* WorldContextObject, FString Command, APlayerController* SpecificPlayer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF7494C5D84(relative to base address)
		bool EqualEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63D268(relative to base address)
		bool EqualEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63D268(relative to base address)
		bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63CAC4(relative to base address)
		bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63C8D8(relative to base address)
		int32_t EndTransaction(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C5F0A74(relative to base address)
		void DrawDebugString(UObject* WorldContextObject, FVector TextLocation, FString Text, AActor* TestBaseActor, FLinearColor TextColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C63A924(relative to base address)
		void DrawDebugSphere(UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C63A480(relative to base address)
		void DrawDebugPoint(UObject* WorldContextObject, FVector Position, float Size, FLinearColor PointColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C63A13C(relative to base address)
		void DrawDebugPlane(UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C639DC8(relative to base address)
		void DrawDebugLine(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6399D8(relative to base address)
		void DrawDebugFrustum(UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C63969C(relative to base address)
		void DrawDebugFloatHistoryTransform(UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6392B0(relative to base address)
		void DrawDebugFloatHistoryLocation(UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C638F04(relative to base address)
		void DrawDebugCylinder(UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6389AC(relative to base address)
		void DrawDebugCoordinateSystem(UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6385B8(relative to base address)
		void DrawDebugConeInDegrees(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C637EFC(relative to base address)
		void DrawDebugCone(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C637EFC(relative to base address)
		void DrawDebugCircle(UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C637844(relative to base address)
		void DrawDebugCapsule(UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6372EC(relative to base address)
		void DrawDebugCamera(ACameraActor* CameraActor, FLinearColor CameraColor, float duration); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C63710C(relative to base address)
		void DrawDebugBox(UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C636C68(relative to base address)
		void DrawDebugArrow(UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float duration, float Thickness); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6367C8(relative to base address)
		bool DoesImplementInterface(UObject* TestObject, UClass* Interface); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF747F77460(relative to base address)
		bool DoesClassImplementInterface(UClass* TestClass, UClass* Interface); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63644C(relative to base address)
		void DelayUntilNextTick(UObject* WorldContextObject, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747ED5A48(relative to base address)
		void Delay(UObject* WorldContextObject, float duration, FLatentActionInfo LatentInfo); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF747ED57FC(relative to base address)
		void CreateCopyForUndoBuffer(UObject* ObjectToModify); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C088608(relative to base address)
		FString ConvertToRelativePath(FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C632C74(relative to base address)
		FString ConvertToAbsolutePath(FString Filename); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C632BC8(relative to base address)
		FSoftObjectPath Conv_SoftObjRefToSoftObjPath(TWeakObjectPtr<UObject*> SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62FAD4(relative to base address)
		FSoftClassPath Conv_SoftObjRefToSoftClassPath(TWeakObjectPtr<UClass*> SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F960(relative to base address)
		TWeakObjectPtr Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F898(relative to base address)
		FString Conv_SoftObjectReferenceToString(TWeakObjectPtr<UObject*>& SoftObjectReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F7C8(relative to base address)
		UObject Conv_SoftObjectReferenceToObject(TWeakObjectPtr<UObject*>& SoftObject); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748A4F894(relative to base address)
		FString Conv_SoftClassReferenceToString(TWeakObjectPtr<UClass*>& SoftClassReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F7C8(relative to base address)
		UClass Conv_SoftClassReferenceToClass(TWeakObjectPtr<UClass*>& SoftClass); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74930E150(relative to base address)
		TWeakObjectPtr Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F6B4(relative to base address)
		FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C305804(relative to base address)
		FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F100(relative to base address)
		TWeakObjectPtr Conv_ObjectToSoftObjectReference(UObject* Object); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748BAB9FC(relative to base address)
		UClass Conv_ObjectToClass(UObject* Object, UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62F01C(relative to base address)
		UObject Conv_InterfaceToObject(TScriptInterface<Class>& Interface); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748491970(relative to base address)
		FSoftComponentReference Conv_ComponentReferenceToSoftComponentReference(FComponentReference& ComponentReference); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DD50(relative to base address)
		TWeakObjectPtr Conv_ClassToSoftClassReference(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62DB78(relative to base address)
		void ControlScreensaver(bool bAllowScreenSaver); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
		bool ComponentOverlapComponents(UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C62D3A8(relative to base address)
		bool ComponentOverlapActors(UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C62D0FC(relative to base address)
		void CollectGarbage(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C62D000(relative to base address)
		bool CapsuleTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C62B1E0(relative to base address)
		bool CapsuleTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C62A7B0(relative to base address)
		bool CapsuleTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C629D80(relative to base address)
		bool CapsuleTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF747CA9C50(relative to base address)
		bool CapsuleTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6293C8(relative to base address)
		bool CapsuleTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C628A10(relative to base address)
		bool CapsuleOverlapComponents(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C62855C(relative to base address)
		bool CapsuleOverlapActors(UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748646F18(relative to base address)
		bool CanLaunchURL(FString URL); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6282BC(relative to base address)
		void CancelTransaction(int32_t Index); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6284F8(relative to base address)
		void BreakTopLevelAssetPath(FTopLevelAssetPath& TopLevelAssetPath, FString& PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C626428(relative to base address)
		void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C625B3C(relative to base address)
		void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6259A8(relative to base address)
		void BreakARFilter(FARFilter InARFilter, TArray<FName>& PackageNames, TArray<FName>& PackagePaths, TArray<FSoftObjectPath>& SoftObjectPaths, TArray<FTopLevelAssetPath>& ClassPaths, TSet<FTopLevelAssetPath>& RecursiveClassPathsExclusionSet, TArray<FName>& ClassNames, TSet<FName>& RecursiveClassesExclusionSet, bool& bRecursivePaths, bool& bRecursiveClasses, bool& bIncludeOnlyOnDiskAssets); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C623B80(relative to base address)
		bool BoxTraceSingleForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C622700(relative to base address)
		bool BoxTraceSingleByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C621CA0(relative to base address)
		bool BoxTraceSingle(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C621240(relative to base address)
		bool BoxTraceMultiForObjects(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TArray<TEnumAsByte>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6208B4(relative to base address)
		bool BoxTraceMultiByProfile(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C61FED4(relative to base address)
		bool BoxTraceMulti(UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C61F4F4(relative to base address)
		bool BoxOverlapComponents(UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<TEnumAsByte>& ObjectTypes, UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C61F0F0(relative to base address)
		bool BoxOverlapActors(UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<TEnumAsByte>& ObjectTypes, UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C61ECEC(relative to base address)
		int32_t BeginTransaction(FString Context, FText Description, UObject* PrimaryObject); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C61E974(relative to base address)
		FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C61C144(relative to base address)
	};


	// Class Engine.BlueprintPathsLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintPathsLibrary");
			return ret;
		}

		FString VideoCaptureDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6803C0(relative to base address)
		void ValidatePath(FString InPath, bool& bDidSucceed, FText& OutReason); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C679384(relative to base address)
		void Split(FString InPath, FString& PathPart, FString& FilenamePart, FString& ExtensionPart); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C674E24(relative to base address)
		FString SourceConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66446C(relative to base address)
		bool ShouldSaveToUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C670D84(relative to base address)
		FString ShaderWorkingDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C670D40(relative to base address)
		void SetProjectFilePath(FString NewGameProjectFilePath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66F970(relative to base address)
		FString SetExtension(FString InPath, FString InNewExtension); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66EFD8(relative to base address)
		FString ScreenShotDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66DF90(relative to base address)
		FString SandboxesDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D648(relative to base address)
		FString RootDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66D370(relative to base address)
		void RemoveDuplicateSlashes(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66C288(relative to base address)
		FString ProjectUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6649C0(relative to base address)
		FString ProjectSavedDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664974(relative to base address)
		FString ProjectPluginsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664648(relative to base address)
		FString ProjectPersistentDownloadDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664604(relative to base address)
		FString ProjectModsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6645C0(relative to base address)
		FString ProjectLogDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66457C(relative to base address)
		FString ProjectIntermediateDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664538(relative to base address)
		FString ProjectDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6644F4(relative to base address)
		FString ProjectContentDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6644B0(relative to base address)
		FString ProjectConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C66446C(relative to base address)
		FString ProfilingDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C664428(relative to base address)
		void NormalizeFilename(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6605AC(relative to base address)
		void NormalizeDirectoryName(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6604AC(relative to base address)
		FString MakeValidFileName(FString InString, FString InReplacementChar); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6583B8(relative to base address)
		void MakeStandardFilename(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C657E64(relative to base address)
		void MakePlatformFilename(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C65653C(relative to base address)
		bool MakePathRelativeTo(FString InPath, FString InRelativeTo, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6561B8(relative to base address)
		FString LaunchDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64E690(relative to base address)
		bool IsSamePath(FString PathA, FString PathB); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BAEC(relative to base address)
		bool IsRestrictedPath(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64BA5C(relative to base address)
		bool IsRelative(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B9CC(relative to base address)
		bool IsProjectFilePathSet(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64B83C(relative to base address)
		bool IsDrive(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64A7BC(relative to base address)
		bool HasProjectPersistentDownloadDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF749859FE0(relative to base address)
		TArray GetToolTipLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6475D4(relative to base address)
		TArray GetRestrictedFolderNames(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645BC4(relative to base address)
		FString GetRelativePathToRoot(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645B98(relative to base address)
		TArray GetPropertyNameLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6457E0(relative to base address)
		FString GetProjectFilePath(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C645750(relative to base address)
		FString GetPath(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C644524(relative to base address)
		FString GetInvalidFileSystemChars(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C643418(relative to base address)
		TArray GetGameLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642FAC(relative to base address)
		FString GetExtension(FString InPath, bool bIncludeDot); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642D58(relative to base address)
		TArray GetEngineLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642C10(relative to base address)
		TArray GetEditorLocalizationPaths(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642BE4(relative to base address)
		FString GetCleanFilename(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C641E90(relative to base address)
		FString GetBaseFilename(FString InPath, bool bRemovePath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6416A4(relative to base address)
		FString GeneratedConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C64088C(relative to base address)
		FString GameUserDeveloperDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640848(relative to base address)
		FString GameSourceDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640804(relative to base address)
		FString GameDevelopersDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6407C0(relative to base address)
		FString GameAgnosticSavedDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BBC8(relative to base address)
		bool FileExists(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63EB38(relative to base address)
		FString FeaturePackDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63EAF4(relative to base address)
		FString EnterprisePluginsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BD60(relative to base address)
		FString EnterpriseFeaturePackDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BD1C(relative to base address)
		FString EnterpriseDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BCD8(relative to base address)
		FString EngineVersionAgnosticUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BC94(relative to base address)
		FString EngineUserDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BC50(relative to base address)
		FString EngineSourceDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BC0C(relative to base address)
		FString EngineSavedDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BBC8(relative to base address)
		FString EnginePluginsDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BB84(relative to base address)
		FString EngineIntermediateDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BB40(relative to base address)
		FString EngineDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BAFC(relative to base address)
		FString EngineContentDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BAB8(relative to base address)
		FString EngineConfigDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C63BA74(relative to base address)
		bool DirectoryExists(FString InPath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634C08(relative to base address)
		FString DiffDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C634BC4(relative to base address)
		FString CreateTempFilename(FString Path, FString Prefix, FString Extension); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C633BDC(relative to base address)
		FString ConvertToSandboxPath(FString InPath, FString InSandboxName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C632D40(relative to base address)
		FString ConvertRelativePathToFull(FString InPath, FString InBasePath); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6327A8(relative to base address)
		FString ConvertFromSandboxPath(FString InPath, FString InSandboxName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6322F0(relative to base address)
		FString Combine(TArray<FString>& InPaths); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62D01C(relative to base address)
		bool CollapseRelativeDirectories(FString InPath, FString& OutPath); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62CEF0(relative to base address)
		FString CloudDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62CEAC(relative to base address)
		FString ChangeExtension(FString InPath, FString InNewExtension); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C62BBB8(relative to base address)
		FString BugItDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C6267E4(relative to base address)
		FString AutomationTransientDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E4A4(relative to base address)
		FString AutomationLogDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E460(relative to base address)
		FString AutomationDir(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C61E41C(relative to base address)
	};


	// Class Engine.PlatformGameInstance
	// Inherited from UGameInstance -> UObject
	// Size: 0xD0 (0x290 - 0x1C0)
	class UPlatformGameInstance : public UGameInstance	
	{
	public:
		FMulticastInlineDelegate ApplicationWillDeactivateDelegate; // 0x1C0(0x10)
		FMulticastInlineDelegate ApplicationHasReactivatedDelegate; // 0x1D0(0x10)
		FMulticastInlineDelegate ApplicationWillEnterBackgroundDelegate; // 0x1E0(0x10)
		FMulticastInlineDelegate ApplicationHasEnteredForegroundDelegate; // 0x1F0(0x10)
		FMulticastInlineDelegate ApplicationWillTerminateDelegate; // 0x200(0x10)
		FMulticastInlineDelegate ApplicationShouldUnloadResourcesDelegate; // 0x210(0x10)
		FMulticastInlineDelegate ApplicationReceivedStartupArgumentsDelegate; // 0x220(0x10)
		FMulticastInlineDelegate ApplicationRegisteredForRemoteNotificationsDelegate; // 0x230(0x10)
		FMulticastInlineDelegate ApplicationRegisteredForUserNotificationsDelegate; // 0x240(0x10)
		FMulticastInlineDelegate ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x250(0x10)
		FMulticastInlineDelegate ApplicationReceivedRemoteNotificationDelegate; // 0x260(0x10)
		FMulticastInlineDelegate ApplicationReceivedLocalNotificationDelegate; // 0x270(0x10)
		FMulticastInlineDelegate ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x280(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlatformGameInstance");
			return ret;
		}

		void PlatformStartupArgumentsDelegate__DelegateSignature(TArray<FString>& StartupArguments); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformScreenOrientationChangedDelegate__DelegateSignature(TEnumAsByte<EScreenOrientation> inScreenOrientation); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformRegisteredForUserNotificationsDelegate__DelegateSignature(int32_t inInt); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(TArray<char>& inArray); // Flags: MulticastDelegate|Public|Delegate|HasOutParms, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformReceivedRemoteNotificationDelegate__DelegateSignature(FString InString, TEnumAsByte<EApplicationState> inAppState); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformReceivedLocalNotificationDelegate__DelegateSignature(FString InString, int32_t inInt, TEnumAsByte<EApplicationState> inAppState); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(FString InString); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void PlatformDelegate__DelegateSignature(); // Flags: MulticastDelegate|Public|Delegate, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.BlueprintPlatformLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintPlatformLibrary");
			return ret;
		}

		void SetAllowedDeviceOrientation(TEnumAsByte<EScreenOrientation> NewAllowedDeviceOrientation); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66E3D4(relative to base address)
		int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C66DD18(relative to base address)
		void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C66DC1C(relative to base address)
		int32_t ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66D9E0(relative to base address)
		int32_t ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C66D68C(relative to base address)
		void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6435E0(relative to base address)
		TEnumAsByte GetDeviceOrientation(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C642AB8(relative to base address)
		TEnumAsByte GetAllowedDeviceOrientation(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C640F4C(relative to base address)
		void ClearAllLocalNotifications(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C62C82C(relative to base address)
		void CancelLocalNotificationById(int32_t NotificationID); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C628440(relative to base address)
		void CancelLocalNotification(FString ActivationEvent); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C628360(relative to base address)
	};


	// Class Engine.BlueprintTypeConversions
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UBlueprintTypeConversions : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BlueprintTypeConversions");
			return ret;
		}

		TSet ConvertSetType(TSet<int32_t>& Inset); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms, Memory Exec: 0x7FF74C6329C0(relative to base address)
		TMap ConvertMapType(TMap<int32_t, int32_t>& InMap); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms, Memory Exec: 0x7FF74C632404(relative to base address)
		int32_t ConvertFVector4fToFVector4d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631CEC(relative to base address)
		int32_t ConvertFVector4dToFVector4f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631BBC(relative to base address)
		int32_t ConvertFVector3fToFVector3d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF7499D9D08(relative to base address)
		int32_t ConvertFVector3dToFVector3f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631E18(relative to base address)
		int32_t ConvertFVector2fToFVector2d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF7494DF0E0(relative to base address)
		int32_t ConvertFVector2dToFVector2f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF748CD75C4(relative to base address)
		int32_t ConvertFTransform3fToFTransform3d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C632194(relative to base address)
		int32_t ConvertFTransform3dToFTransform3f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C63205C(relative to base address)
		int32_t ConvertFRotator3fToFRotator3d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631F3C(relative to base address)
		int32_t ConvertFRotator3dToFRotator3f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631E18(relative to base address)
		int32_t ConvertFQuat4fToFQuat4d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631CEC(relative to base address)
		int32_t ConvertFQuat4dToFQuat4f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631BBC(relative to base address)
		int32_t ConvertFPlane4fToFPlane4d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631CEC(relative to base address)
		int32_t ConvertFPlane4dToFPlane4f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631BBC(relative to base address)
		int32_t ConvertFMatrix44fToFMatrix44d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631A50(relative to base address)
		int32_t ConvertFMatrix44dToFMatrix44f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631910(relative to base address)
		int32_t ConvertFBox2fToFBox2d(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C6317D4(relative to base address)
		int32_t ConvertFBox2dToFBox2f(int32_t InFromData); // Flags: Final|RequiredAPI|Native|Static|Public, Memory Exec: 0x7FF74C631688(relative to base address)
		TArray ConvertArrayType(TArray<int32_t>& inArray); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms, Memory Exec: 0x7FF747166384(relative to base address)
	};


	// Class Engine.ImportanceSamplingLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ImportanceSamplingLibrary");
			return ret;
		}

		float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68E8D4(relative to base address)
		FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68E654(relative to base address)
		FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68E3F0(relative to base address)
		float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68E234(relative to base address)
		FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68E090(relative to base address)
		FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68DF04(relative to base address)
		FImportanceTexture MakeImportanceTexture(UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68DDBC(relative to base address)
		void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68D8B0(relative to base address)
		void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, UTexture2D* Texture, TEnumAsByte<EImportanceWeight>& WeightingFunc); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C68D5B0(relative to base address)
	};


	// Class Engine.Layer
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class ULayer : public UObject	
	{
	public:
		FName LayerName; // 0x28(0x4)
		bool bIsVisible : 1; // 0x2C:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		TArray<FLayerActorStats> ActorStats; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Layer");
			return ret;
		}
	};


	// Class Engine.ActorContainer
	// Inherited from UObject
	// Size: 0x50 (0x78 - 0x28)
	class UActorContainer : public UObject	
	{
	public:
		TMap<FName, AActor*> Actors; // 0x28(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorContainer");
			return ret;
		}
	};


	// Class Engine.LevelActorContainer
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class ULevelActorContainer : public UObject	
	{
	public:
		TArray<AActor*> Actors; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelActorContainer");
			return ret;
		}
	};


	// Class Engine.LevelBounds
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class ALevelBounds : public AActor	
	{
	public:
		UBoxComponent* BoxComponent; // 0x290(0x8)
		bool bAutoUpdateBounds; // 0x298(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x299(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelBounds");
			return ret;
		}
	};


	// Class Engine.LevelInstance
	// Inherited from AActor -> UObject
	// Size: 0x98 (0x328 - 0x290)
	class ALevelInstance : public AActor	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x290(0x8) UNKNOWN PROPERTY
		ULevelInstanceComponent* LevelInstanceComponent; // 0x298(0x8)
		TWeakObjectPtr<UWorld*> CookedWorldAsset; // 0x2A0(0x20)
		FGuid LevelInstanceSpawnGuid; // 0x2C0(0x10)
		unsigned char UnknownData01_7[0x58]; // 0x2D0(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstance");
			return ret;
		}

		void OnRep_LevelInstanceSpawnGuid(); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C68E398(relative to base address)
	};


	// Class Engine.LevelInstanceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x0 (0x220 - 0x220)
	class ULevelInstanceComponent : public USceneComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceComponent");
			return ret;
		}
	};


	// Class Engine.LevelInstanceEditorInstanceActor
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ALevelInstanceEditorInstanceActor : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceEditorInstanceActor");
			return ret;
		}
	};


	// Class Engine.LevelStreamingLevelInstanceEditor
	// Inherited from ULevelStreamingAlwaysLoaded -> ULevelStreaming -> UObject
	// Size: 0x0 (0x1A0 - 0x1A0)
	class ULevelStreamingLevelInstanceEditor : public ULevelStreamingAlwaysLoaded	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingLevelInstanceEditor");
			return ret;
		}
	};


	// Class Engine.LevelInstanceEditorObject
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceEditorObject : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceEditorObject");
			return ret;
		}
	};


	// Class Engine.LevelInstancePivot
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALevelInstancePivot : public AActor	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x290(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstancePivot");
			return ret;
		}
	};


	// Class Engine.LevelStreamingLevelInstanceEditorPropertyOverride
	// Inherited from ULevelStreamingDynamic -> ULevelStreaming -> UObject
	// Size: 0x0 (0x1A0 - 0x1A0)
	class ULevelStreamingLevelInstanceEditorPropertyOverride : public ULevelStreamingDynamic	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingLevelInstanceEditorPropertyOverride");
			return ret;
		}
	};


	// Class Engine.LevelInstanceInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULevelInstanceInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceInterface");
			return ret;
		}

		void UnloadLevelInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68EFE4(relative to base address)
		bool SetWorldAsset(TWeakObjectPtr<UWorld*> WorldAsset); // Flags: Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68EEAC(relative to base address)
		void LoadLevelInstance(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748D7CED0(relative to base address)
		bool IsLoaded(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68DD74(relative to base address)
		TWeakObjectPtr GetWorldAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68D84C(relative to base address)
		ULevel GetLoadedLevel(); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C68D824(relative to base address)
	};


	// Class Engine.LevelStreamingLevelInstance
	// Inherited from ULevelStreamingDynamic -> ULevelStreaming -> UObject
	// Size: 0x30 (0x1D0 - 0x1A0)
	class ULevelStreamingLevelInstance : public ULevelStreamingDynamic	
	{
	public:
		unsigned char UnknownData00_1[0x30]; // 0x1A0(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingLevelInstance");
			return ret;
		}
	};


	// Class Engine.LevelInstanceSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x198 (0x1C8 - 0x30)
	class ULevelInstanceSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x198]; // 0x30(0x198) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelInstanceSubsystem");
			return ret;
		}
	};


	// Class Engine.LevelScriptActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ALevelScriptActor : public AActor	
	{
	public:
		bool bInputEnabled : 1; // 0x290:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x291(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelScriptActor");
			return ret;
		}

		void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation); // Flags: RequiredAPI|Event|Public|HasDefaults|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
		void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68EA7C(relative to base address)
		bool RemoteEvent(FName EventName); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C68E9E8(relative to base address)
		void LevelReset(); // Flags: RequiredAPI|BlueprintAuthorityOnly|Event|Public|BlueprintEvent, Memory Exec: 0x7FF7471BBE78(relative to base address)
	};


	// Class Engine.LevelScriptBlueprint
	// Inherited from UBlueprint -> UBlueprintCore -> UObject
	// Size: 0x0 (0xA8 - 0xA8)
	class ULevelScriptBlueprint : public UBlueprint	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelScriptBlueprint");
			return ret;
		}
	};


	// Class Engine.LightmappedSurfaceCollection
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class ULightmappedSurfaceCollection : public UObject	
	{
	public:
		UModel* SourceModel; // 0x28(0x8)
		TArray<int32_t> Surfaces; // 0x30(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmappedSurfaceCollection");
			return ret;
		}
	};


	// Class Engine.LightmassCharacterIndirectDetailVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ALightmassCharacterIndirectDetailVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassCharacterIndirectDetailVolume");
			return ret;
		}
	};


	// Class Engine.LightmassImportanceVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ALightmassImportanceVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassImportanceVolume");
			return ret;
		}
	};


	// Class Engine.LightmassPrimitiveSettingsObject
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class ULightmassPrimitiveSettingsObject : public UObject	
	{
	public:
		FLightmassPrimitiveSettings LightmassSettings; // 0x28(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightmassPrimitiveSettingsObject");
			return ret;
		}
	};


	// Class Engine.LightWeightInstanceBlueprintFunctionLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULightWeightInstanceBlueprintFunctionLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightWeightInstanceBlueprintFunctionLibrary");
			return ret;
		}

		FActorInstanceHandle CreateNewLightWeightInstance(UClass* ActorClass, FTransform Transform, UDataLayerInstance* Layer, UWorld* World); // Flags: Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C69F55C(relative to base address)
		FActorInstanceHandle ConvertActorToLightWeightInstance(AActor* Actor); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C69F2C0(relative to base address)
	};


	// Class Engine.LightWeightInstanceManager
	// Inherited from AActor -> UObject
	// Size: 0xB8 (0x348 - 0x290)
	class ALightWeightInstanceManager : public AActor	
	{
	public:
		unsigned char UnknownData00_3[0x18]; // 0x290(0x18) UNKNOWN PROPERTY
		UClass* RepresentedClass; // 0x2A8(0x8)
		UClass* AcceptedClass; // 0x2B0(0x8)
		TArray<FTransform> InstanceTransforms; // 0x2B8(0x10)
		TMap<int32_t, AActor*> Actors; // 0x2C8(0x50)
		unsigned char UnknownData01_6[0x10]; // 0x318(0x10) UNKNOWN PROPERTY
		TArray<int32_t> FreeIndices; // 0x328(0x10)
		TArray<bool> ValidIndices; // 0x338(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightWeightInstanceManager");
			return ret;
		}

		void OnSpawnedActorDestroyed(AActor* DestroyedActor); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74C69F97C(relative to base address)
		void OnRep_Transforms(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF7475A8C1C(relative to base address)
	};


	// Class Engine.LightWeightInstanceStaticMeshManager
	// Inherited from ALightWeightInstanceManager -> AActor -> UObject
	// Size: 0x60 (0x3A8 - 0x348)
	class ALightWeightInstanceStaticMeshManager : public ALightWeightInstanceManager	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x348(0x8) UNKNOWN PROPERTY
		TWeakObjectPtr<UStaticMesh*> StaticMesh; // 0x350(0x20)
		UInstancedStaticMeshComponent* ISMComponent; // 0x370(0x8)
		TArray<int32_t> RenderingIndicesToDataIndices; // 0x378(0x10)
		TArray<int32_t> DataIndicesToRenderingIndices; // 0x388(0x10)
		unsigned char UnknownData01_7[0x10]; // 0x398(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightWeightInstanceStaticMeshManager");
			return ret;
		}

		void OnRep_StaticMesh(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C69F968(relative to base address)
	};


	// Class Engine.LocalPlayer
	// Inherited from UPlayer -> UObject
	// Size: 0x268 (0x2B0 - 0x48)
	class ULocalPlayer : public UPlayer	
	{
	public:
		unsigned char UnknownData00_3[0x30]; // 0x48(0x30) UNKNOWN PROPERTY
		UGameViewportClient* ViewportClient; // 0x78(0x8)
		unsigned char UnknownData01_6[0x38]; // 0x80(0x38) UNKNOWN PROPERTY
		TEnumAsByte<EAspectRatioAxisConstraint> AspectRatioAxisConstraint; // 0xB8(0x1)
		unsigned char UnknownData02_6[0x7]; // 0xB9(0x7) UNKNOWN PROPERTY
		UClass* PendingLevelPlayerControllerClass; // 0xC0(0x8)
		bool bSentSplitJoin : 1; // 0xC8:0(0x1)
		unsigned char UnknownData03_5[0x17]; // 0xC9(0x17) UNKNOWN PROPERTY
		int32_t ControllerId; // 0xE0(0x4)
		unsigned char UnknownData04_7[0x1CC]; // 0xE4(0x1CC) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalPlayer");
			return ret;
		}
	};


	// Class Engine.LocationVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x10 (0x2D8 - 0x2C8)
	class ALocationVolume : public AVolume	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x2C8(0x8) UNKNOWN PROPERTY
		FColor DebugColor; // 0x2D0(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x2D4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocationVolume");
			return ret;
		}

		void Unload(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74921B8F8(relative to base address)
		void Load(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74921B8F8(relative to base address)
		bool IsLoaded(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
	};


	// Class Engine.LODActor
	// Inherited from AActor -> UObject
	// Size: 0x88 (0x318 - 0x290)
	class ALODActor : public AActor	
	{
	public:
		UStaticMeshComponent* StaticMeshComponent; // 0x290(0x8)
		TMap<FHLODInstancingKey, UInstancedStaticMeshComponent*> InstancedStaticMeshComponents; // 0x298(0x50)
		UHLODProxy* Proxy; // 0x2E8(0x8)
		FName Key; // 0x2F0(0x4)
		float LODDrawDistance; // 0x2F4(0x4)
		int32_t LODLevel; // 0x2F8(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x2FC(0x4) UNKNOWN PROPERTY
		TArray<AActor*> SubActors; // 0x300(0x10)
		char CachedNumHLODLevels; // 0x310(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x311(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LODActor");
			return ret;
		}

		void OnSubActorEndPlay(AActor* Actor, TEnumAsByte<EEndPlayReason> Reason); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74C69F9FC(relative to base address)
	};


	// Class Engine.MaterialInstanceActor
	// Inherited from AActor -> UObject
	// Size: 0x10 (0x2A0 - 0x290)
	class AMaterialInstanceActor : public AActor	
	{
	public:
		TArray<AActor*> TargetActors; // 0x290(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceActor");
			return ret;
		}
	};


	// Class Engine.MaterialEditorOnlyData
	// Inherited from UMaterialInterfaceEditorOnlyData -> UObject
	// Size: 0x638 (0x678 - 0x40)
	class UMaterialEditorOnlyData : public UMaterialInterfaceEditorOnlyData	
	{
	public:
		FColorMaterialInput BaseColor; // 0x40(0x30)
		FScalarMaterialInput Metallic; // 0x70(0x30)
		FScalarMaterialInput Specular; // 0xA0(0x30)
		FScalarMaterialInput Roughness; // 0xD0(0x30)
		FScalarMaterialInput Anisotropy; // 0x100(0x30)
		FVectorMaterialInput Normal; // 0x130(0x38)
		FVectorMaterialInput Tangent; // 0x168(0x38)
		FColorMaterialInput EmissiveColor; // 0x1A0(0x30)
		FScalarMaterialInput Opacity; // 0x1D0(0x30)
		FScalarMaterialInput OpacityMask; // 0x200(0x30)
		FVectorMaterialInput WorldPositionOffset; // 0x230(0x38)
		FScalarMaterialInput Displacement; // 0x268(0x30)
		FColorMaterialInput SubsurfaceColor; // 0x298(0x30)
		FScalarMaterialInput ClearCoat; // 0x2C8(0x30)
		FScalarMaterialInput ClearCoatRoughness; // 0x2F8(0x30)
		FScalarMaterialInput AmbientOcclusion; // 0x328(0x30)
		FScalarMaterialInput Refraction; // 0x358(0x30)
		FVector2MaterialInput CustomizedUVs; // 0x388(0x1C0)
		FMaterialAttributesInput MaterialAttributes; // 0x548(0x30)
		FScalarMaterialInput PixelDepthOffset; // 0x578(0x30)
		FShadingModelMaterialInput ShadingModelFromMaterialExpression; // 0x5A8(0x28)
		unsigned char UnknownData00_6[0x8]; // 0x5D0(0x8) UNKNOWN PROPERTY
		FScalarMaterialInput SurfaceThickness; // 0x5D8(0x30)
		FSubstrateMaterialInput FrontMaterial; // 0x608(0x28)
		unsigned char UnknownData01_6[0x8]; // 0x630(0x8) UNKNOWN PROPERTY
		FMaterialExpressionCollection ExpressionCollection; // 0x638(0x30)
		TArray<FParameterGroupData> ParameterGroupData; // 0x668(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.Material
	// Inherited from UMaterialInterface -> UObject
	// Size: 0x178 (0x230 - 0xB8)
	class UMaterial : public UMaterialInterface	
	{
	public:
		UPhysicalMaterial* PhysMaterial; // 0xB8(0x8)
		UPhysicalMaterialMask* PhysMaterialMask; // 0xC0(0x8)
		UPhysicalMaterial* PhysicalMaterialMap; // 0xC8(0x40)
		TArray<UPhysicalMaterial*> RenderTracePhysicalMaterialOutputs; // 0x108(0x10)
		TEnumAsByte<EMaterialDomain> MaterialDomain; // 0x118(0x1)
		TEnumAsByte<EBlendMode> BlendMode; // 0x119(0x1)
		TEnumAsByte<EDecalBlendMode> DecalBlendMode; // 0x11A(0x1)
		TEnumAsByte<EMaterialDecalResponse> MaterialDecalResponse; // 0x11B(0x1)
		unsigned char UnknownData00_6[0x4]; // 0x11C(0x4) UNKNOWN PROPERTY
		FMaterialOverrideNanite NaniteOverrideMaterial; // 0x120(0x30)
		FDisplacementScaling DisplacementScaling; // 0x150(0x8)
		FDisplacementFadeRange DisplacementFadeRange; // 0x158(0x8)
		TEnumAsByte<EMaterialShadingModel> ShadingModel; // 0x160(0x1)
		bool bCastDynamicShadowAsMasked : 1; // 0x161:0(0x1)
		FMaterialShadingModelField ShadingModels; // 0x162(0x2)
		float OpacityMaskClipValue; // 0x164(0x4)
		bool bEnableSeparateTranslucency : 1; // 0x168:0(0x1)
		bool bEnableResponsiveAA : 1; // 0x168:1(0x1)
		bool bScreenSpaceReflections : 1; // 0x168:2(0x1)
		bool bContactShadows : 1; // 0x168:3(0x1)
		bool TwoSided : 1; // 0x168:4(0x1)
		bool bIsThinSurface : 1; // 0x168:5(0x1)
		bool DitheredLODTransition : 1; // 0x168:6(0x1)
		bool DitherOpacityMask : 1; // 0x168:7(0x1)
		bool bAllowNegativeEmissiveColor : 1; // 0x169:0(0x1)
		bool bHasPixelAnimation : 1; // 0x169:1(0x1)
		bool bEnableTessellation : 1; // 0x169:2(0x1)
		bool bEnableDisplacementFade : 1; // 0x169:3(0x1)
		TEnumAsByte<EMaterialTranslucencyPass> TranslucencyPass; // 0x16A(0x1)
		TEnumAsByte<ETranslucencyLightingMode> TranslucencyLightingMode; // 0x16B(0x1)
		bool bEnableMobileSeparateTranslucency : 1; // 0x16C:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x16D(0x3) UNKNOWN PROPERTY
		int32_t NumCustomizedUVs; // 0x170(0x4)
		float TranslucencyDirectionalLightingIntensity; // 0x174(0x4)
		float TranslucentShadowDensityScale; // 0x178(0x4)
		float TranslucentSelfShadowDensityScale; // 0x17C(0x4)
		float TranslucentSelfShadowSecondDensityScale; // 0x180(0x4)
		float TranslucentSelfShadowSecondOpacity; // 0x184(0x4)
		float TranslucentBackscatteringExponent; // 0x188(0x4)
		FLinearColor TranslucentMultipleScatteringExtinction; // 0x18C(0x10)
		float TranslucentShadowStartOffset; // 0x19C(0x4)
		bool bDisableDepthTest : 1; // 0x1A0:0(0x1)
		bool bWriteOnlyAlpha : 1; // 0x1A0:1(0x1)
		bool bGenerateSphericalParticleNormals : 1; // 0x1A0:2(0x1)
		bool bTangentSpaceNormal : 1; // 0x1A0:3(0x1)
		bool bUseEmissiveForDynamicAreaLighting : 1; // 0x1A0:4(0x1)
		bool bUsedAsSpecialEngineMaterial : 1; // 0x1A0:5(0x1)
		bool bUsedWithSkeletalMesh : 1; // 0x1A0:6(0x1)
		bool bUsedWithEditorCompositing : 1; // 0x1A0:7(0x1)
		bool bUsedWithParticleSprites : 1; // 0x1A1:0(0x1)
		bool bUsedWithBeamTrails : 1; // 0x1A1:1(0x1)
		bool bUsedWithMeshParticles : 1; // 0x1A1:2(0x1)
		bool bUsedWithNiagaraSprites : 1; // 0x1A1:3(0x1)
		bool bUsedWithNiagaraRibbons : 1; // 0x1A1:4(0x1)
		bool bUsedWithNiagaraMeshParticles : 1; // 0x1A1:5(0x1)
		bool bUsedWithGeometryCache : 1; // 0x1A1:6(0x1)
		bool bUsedWithStaticLighting : 1; // 0x1A1:7(0x1)
		bool bUsedWithMorphTargets : 1; // 0x1A2:0(0x1)
		bool bUsedWithSplineMeshes : 1; // 0x1A2:1(0x1)
		bool bUsedWithInstancedStaticMeshes : 1; // 0x1A2:2(0x1)
		bool bUsedWithGeometryCollections : 1; // 0x1A2:3(0x1)
		bool bUsesDistortion : 1; // 0x1A2:4(0x1)
		bool bRootNodeOverridesDefaultDistortion : 1; // 0x1A2:5(0x1)
		bool bUsedWithClothing : 1; // 0x1A2:6(0x1)
		unsigned char UnknownData02_3[0x1]; // 0x1A3(0x1) UNKNOWN PROPERTY
		bool bUsedWithWater : 1; // 0x1A4:0(0x1)
		bool bUsedWithHairStrands : 1; // 0x1A4:1(0x1)
		bool bUsedWithLidarPointCloud : 1; // 0x1A4:2(0x1)
		bool bUsedWithVirtualHeightfieldMesh : 1; // 0x1A4:3(0x1)
		bool bUsedWithNanite : 1; // 0x1A4:4(0x1)
		bool bUsedWithVolumetricCloud : 1; // 0x1A4:5(0x1)
		bool bUsedWithHeterogeneousVolumes : 1; // 0x1A4:6(0x1)
		unsigned char UnknownData03_3[0x3]; // 0x1A5(0x3) UNKNOWN PROPERTY
		bool bUsedWithUI : 1; // 0x1A8:0(0x1)
		bool bForceCompatibleWithLightFunctionAtlas : 1; // 0x1A8:1(0x1)
		bool bAutomaticallySetUsageInEditor : 1; // 0x1A8:2(0x1)
		bool bFullyRough : 1; // 0x1A8:3(0x1)
		bool bUseFullPrecision : 1; // 0x1A8:4(0x1)
		TEnumAsByte<EMaterialFloatPrecisionMode> FloatPrecisionMode; // 0x1A9(0x1)
		bool bUseLightmapDirectionality : 1; // 0x1AA:0(0x1)
		bool bMobileEnableHighQualityBRDF : 1; // 0x1AA:1(0x1)
		bool bUseAlphaToCoverage : 1; // 0x1AA:2(0x1)
		unsigned char UnknownData04_3[0x1]; // 0x1AB(0x1) UNKNOWN PROPERTY
		bool bForwardRenderUsePreintegratedGFForSimpleIBL : 1; // 0x1AC:0(0x1)
		unsigned char UnknownData05_3[0x3]; // 0x1AD(0x3) UNKNOWN PROPERTY
		bool bUseHQForwardReflections : 1; // 0x1B0:0(0x1)
		bool bForwardBlendsSkyLightCubemaps : 1; // 0x1B0:1(0x1)
		bool bUsePlanarForwardReflections : 1; // 0x1B0:2(0x1)
		bool bNormalCurvatureToRoughness : 1; // 0x1B0:3(0x1)
		bool AllowTranslucentCustomDepthWrites : 1; // 0x1B0:4(0x1)
		bool bAllowFrontLayerTranslucency : 1; // 0x1B0:5(0x1)
		bool Wireframe : 1; // 0x1B0:6(0x1)
		TEnumAsByte<EMaterialShadingRate> ShadingRate; // 0x1B1(0x1)
		bool bAllowVariableRateShading : 1; // 0x1B2:0(0x1)
		bool bCanMaskedBeAssumedOpaque : 1; // 0x1B2:1(0x1)
		bool bIsMasked : 1; // 0x1B2:2(0x1)
		bool bIsPreviewMaterial : 1; // 0x1B2:3(0x1)
		bool bIsFunctionPreviewMaterial : 1; // 0x1B2:4(0x1)
		bool bUseMaterialAttributes : 1; // 0x1B2:5(0x1)
		bool bEnableExecWire : 1; // 0x1B2:6(0x1)
		bool bEnableNewHLSLGenerator : 1; // 0x1B2:7(0x1)
		bool bCastRayTracedShadows : 1; // 0x1B3:0(0x1)
		bool bUseTranslucencyVertexFog : 1; // 0x1B3:1(0x1)
		bool bApplyCloudFogging : 1; // 0x1B3:2(0x1)
		bool bIsSky : 1; // 0x1B3:3(0x1)
		bool bComputeFogPerPixel : 1; // 0x1B3:4(0x1)
		bool bOutputTranslucentVelocity : 1; // 0x1B3:5(0x1)
		bool bAllowDevelopmentShaderCompile : 1; // 0x1B3:6(0x1)
		bool bIsMaterialEditorStatsMaterial : 1; // 0x1B3:7(0x1)
		TEnumAsByte<EBlendableLocation> BlendableLocation; // 0x1B4(0x1)
		bool BlendableOutputAlpha : 1; // 0x1B5:0(0x1)
		unsigned char UnknownData06_5[0x2]; // 0x1B6(0x2) UNKNOWN PROPERTY
		FName UserSceneTexture; // 0x1B8(0x4)
		FIntPoint UserTextureDivisor; // 0x1BC(0x8)
		FName ResolutionRelativeToInput; // 0x1C4(0x4)
		bool bDisablePreExposureScale : 1; // 0x1C8:0(0x1)
		bool bUsedWithNeuralNetworks : 1; // 0x1C8:1(0x1)
		bool bEnableStencilTest : 1; // 0x1C8:2(0x1)
		TEnumAsByte<EMaterialStencilCompare> StencilCompare; // 0x1C9(0x1)
		char StencilRefValue; // 0x1CA(0x1)
		int8_t NeuralProfileId; // 0x1CB(0x1)
		TEnumAsByte<ERefractionMode> RefractionMode; // 0x1CC(0x1)
		TEnumAsByte<ERefractionMode> RefractionMethod; // 0x1CD(0x1)
		TEnumAsByte<ERefractionCoverageMode> RefractionCoverageMode; // 0x1CE(0x1)
		TEnumAsByte<EPixelDepthOffsetMode> PixelDepthOffsetMode; // 0x1CF(0x1)
		int32_t BlendablePriority; // 0x1D0(0x4)
		bool bIsBlendable : 1; // 0x1D4:0(0x1)
		unsigned char UnknownData07_5[0x1]; // 0x1D5(0x1) UNKNOWN PROPERTY
		uint16_t PreshaderGap; // 0x1D6(0x2)
		uint32_t UsageFlagWarnings; // 0x1D8(0x4)
		unsigned char UnknownData08_6[0x4]; // 0x1DC(0x4) UNKNOWN PROPERTY
		float RefractionDepthBias; // 0x1E0(0x4)
		float MaxWorldPositionOffsetDisplacement; // 0x1E4(0x4)
		bool bAlwaysEvaluateWorldPositionOffset; // 0x1E8(0x1)
		unsigned char UnknownData09_6[0x7]; // 0x1E9(0x7) UNKNOWN PROPERTY
		FGuid StateId; // 0x1F0(0x10)
		unsigned char UnknownData10_7[0x30]; // 0x200(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Material");
			return ret;
		}
	};


	// Class Engine.MaterialInstanceEditorOnlyData
	// Inherited from UMaterialInterfaceEditorOnlyData -> UObject
	// Size: 0xA0 (0xE0 - 0x40)
	class UMaterialInstanceEditorOnlyData : public UMaterialInterfaceEditorOnlyData	
	{
	public:
		FStaticParameterSetEditorOnlyData StaticParameters; // 0x40(0xA0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceEditorOnlyData");
			return ret;
		}
	};


	// Class Engine.MaterialInstanceDynamic
	// Inherited from UMaterialInstance -> UMaterialInterface -> UObject
	// Size: 0x50 (0x2F8 - 0x2A8)
	class UMaterialInstanceDynamic : public UMaterialInstance	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x2A8(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialInstanceDynamic");
			return ret;
		}

		void SetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6AEF00(relative to base address)
		void SetVectorParameterValue(FName ParameterName, FLinearColor Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74885FCE4(relative to base address)
		void SetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, UTexture* Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6AED98(relative to base address)
		void SetTextureParameterValue(FName ParameterName, UTexture* Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748B50B18(relative to base address)
		void SetSparseVolumeTextureParameterValue(FName ParameterName, USparseVolumeTexture* Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AECD4(relative to base address)
		void SetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, float Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6AEB6C(relative to base address)
		void SetScalarParameterValue(FName ParameterName, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74771C9A4(relative to base address)
		bool SetScalarParameterByIndex(int32_t ParameterIndex, float Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AEAAC(relative to base address)
		void SetRuntimeVirtualTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, URuntimeVirtualTexture* Value); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6AE944(relative to base address)
		void SetRuntimeVirtualTextureParameterValue(FName ParameterName, URuntimeVirtualTexture* Value); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AE880(relative to base address)
		void SetDoubleVectorParameterValue(FName ParameterName, FVector4 Value); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6AE70C(relative to base address)
		void K2_InterpolateMaterialInstanceParams(UMaterialInstance* SourceA, UMaterialInstance* SourceB, float Alpha); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AE614(relative to base address)
		FLinearColor K2_GetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6AE538(relative to base address)
		FLinearColor K2_GetVectorParameterValue(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF748FDDF64(relative to base address)
		UTexture K2_GetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6AE3A8(relative to base address)
		UTexture K2_GetTextureParameterValue(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C6AE304(relative to base address)
		float K2_GetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6AE260(relative to base address)
		float K2_GetScalarParameterValue(FName ParameterName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF748972320(relative to base address)
		void K2_CopyMaterialInstanceParameters(UMaterialInterface* Source, bool bQuickParametersOnly); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF7493F0C98(relative to base address)
		bool InitializeScalarParameterAndGetIndex(FName& ParameterName, float Value, int32_t& OutParameterIndex); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C6AE058(relative to base address)
		void CopyParameterOverrides(UMaterialInstance* MaterialInstance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF747BE5000(relative to base address)
		void CopyInterpParameters(UMaterialInstance* Source); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C6ADE94(relative to base address)
	};


	// Class Engine.MaterialParameterCollection
	// Inherited from UObject
	// Size: 0x48 (0x70 - 0x28)
	class UMaterialParameterCollection : public UObject	
	{
	public:
		FGuid StateId; // 0x28(0x10)
		TArray<FCollectionScalarParameter> ScalarParameters; // 0x38(0x10)
		TArray<FCollectionVectorParameter> VectorParameters; // 0x48(0x10)
		unsigned char UnknownData00_7[0x18]; // 0x58(0x18) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MaterialParameterCollection");
			return ret;
		}

		TArray GetVectorParameterNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C6B78D8(relative to base address)
		FLinearColor GetVectorParameterDefaultValue(FName ParameterName, bool& bParameterFound); // Flags: Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C6B77B8(relative to base address)
		TArray GetScalarParameterNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C6B7760(relative to base address)
		float GetScalarParameterDefaultValue(FName ParameterName, bool& bParameterFound); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C6B7690(relative to base address)
	};


	// Class Engine.MeshMergeCullingVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AMeshMergeCullingVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshMergeCullingVolume");
			return ret;
		}
	};


	// Class Engine.MeshSimplificationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UMeshSimplificationSettings : public UDeveloperSettings	
	{
	public:
		FName MeshReductionModuleName; // 0x30(0x4)
		bool bMeshReductionBackwardCompatible; // 0x34(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x35(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshSimplificationSettings");
			return ret;
		}
	};


	// Class Engine.MeshVertexPainterKismetLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.MeshVertexPainterKismetLibrary");
			return ret;
		}

		void RemovePaintedVertices(UStaticMeshComponent* StaticMeshComponent); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6D8F9C(relative to base address)
		void PaintVerticesSingleColor(UStaticMeshComponent* StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6D8C54(relative to base address)
		void PaintVerticesLerpAlongAxis(UStaticMeshComponent* StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C6D85B8(relative to base address)
	};


	// Class Engine.Model
	// Inherited from UObject
	// Size: 0x240 (0x268 - 0x28)
	class UModel : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x240]; // 0x28(0x240) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Model");
			return ret;
		}
	};


	// Class Engine.SimulatedClientNetConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0x0 (0x1E10 - 0x1E10)
	class USimulatedClientNetConnection : public UNetConnection	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SimulatedClientNetConnection");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsBaseListener
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UNetworkMetricsBaseListener : public UObject	
	{
	public:
		double IntervalSeconds; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsBaseListener");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsCSV
	// Inherited from UNetworkMetricsBaseListener -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UNetworkMetricsCSV : public UNetworkMetricsBaseListener	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x30(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsCSV");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsCSV_Replication
	// Inherited from UNetworkMetricsCSV -> UNetworkMetricsBaseListener -> UObject
	// Size: 0x0 (0x38 - 0x38)
	class UNetworkMetricsCSV_Replication : public UNetworkMetricsCSV	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsCSV_Replication");
			return ret;
		}
	};


	// Class Engine.NetworkSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x18 (0x48 - 0x30)
	class UNetworkSettings : public UDeveloperSettings	
	{
	public:
		bool bVerifyPeer : 1; // 0x30:0(0x1)
		bool bEnableMultiplayerWorldOriginRebasing : 1; // 0x30:1(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TArray<FNetworkEmulationProfileDescription> NetworkEmulationProfiles; // 0x38(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkSettings");
			return ret;
		}
	};


	// Class Engine.BandwidthTestActor
	// Inherited from AActor -> UObject
	// Size: 0x20 (0x2B0 - 0x290)
	class ABandwidthTestActor : public AActor	
	{
	public:
		FBandwidthTestGenerator BandwidthGenerator; // 0x290(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.BandwidthTestActor");
			return ret;
		}
	};


	// Class Engine.DataStreamChannel
	// Inherited from UChannel -> UObject
	// Size: 0x2030 (0x2098 - 0x68)
	class UDataStreamChannel : public UChannel	
	{
	public:
		unsigned char UnknownData00_1[0x2030]; // 0x68(0x2030) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataStreamChannel");
			return ret;
		}
	};


	// Class Engine.ActorReplicationBridge
	// Inherited from UObjectReplicationBridge -> UReplicationBridge -> UObject
	// Size: 0x20 (0x5B0 - 0x590)
	class UActorReplicationBridge : public UObjectReplicationBridge	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x590(0x10) UNKNOWN PROPERTY
		UIrisObjectReferencePackageMap* ObjectReferencePackageMap; // 0x5A0(0x8)
		unsigned char UnknownData01_7[0x8]; // 0x5A8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorReplicationBridge");
			return ret;
		}
	};


	// Class Engine.NetFaultConfig
	// Inherited from UEscalationManagerConfig -> UStatePerObjectConfig -> UObject
	// Size: 0x0 (0x88 - 0x88)
	class UNetFaultConfig : public UEscalationManagerConfig	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetFaultConfig");
			return ret;
		}
	};


	// Class Engine.NetPushModelHelpers
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNetPushModelHelpers : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetPushModelHelpers");
			return ret;
		}

		void MarkPropertyDirtyFromRepIndex(UObject* Object, int32_t RepIndex, FName PropertyName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF748AC2E54(relative to base address)
		void MarkPropertyDirty(UObject* Object, FName PropertyName); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C6F64AC(relative to base address)
	};


	// Class Engine.NetworkMetricsConfig
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UNetworkMetricsConfig : public UObject	
	{
	public:
		TArray<FNetworkMetricConfig> Listeners; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsConfig");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsDatabase
	// Inherited from UObject
	// Size: 0x190 (0x1B8 - 0x28)
	class UNetworkMetricsDatabase : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x190]; // 0x28(0x190) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsDatabase");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsPerfCounters
	// Inherited from UNetworkMetricsBaseListener -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UNetworkMetricsPerfCounters : public UNetworkMetricsBaseListener	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsPerfCounters");
			return ret;
		}
	};


	// Class Engine.NetworkMetricsStats
	// Inherited from UNetworkMetricsBaseListener -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UNetworkMetricsStats : public UNetworkMetricsBaseListener	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x30(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkMetricsStats");
			return ret;
		}
	};


	// Class Engine.RPCDoSDetectionConfig
	// Inherited from UObject
	// Size: 0x60 (0x88 - 0x28)
	class URPCDoSDetectionConfig : public UObject	
	{
	public:
		bool bRPCDoSDetection; // 0x28(0x1)
		bool bRPCDoSAnalytics; // 0x29(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x2A(0x2) UNKNOWN PROPERTY
		int32_t HitchTimeQuotaMS; // 0x2C(0x4)
		int32_t HitchSuspendDetectionTimeMS; // 0x30(0x4)
		unsigned char UnknownData01_6[0x4]; // 0x34(0x4) UNKNOWN PROPERTY
		TArray<FString> DetectionSeverity; // 0x38(0x10)
		int32_t InitialConnectToleranceMS; // 0x48(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY
		TArray<FName> RPCBlockWhitelist; // 0x50(0x10)
		TArray<FName> RPCBlockAllowlist; // 0x60(0x10)
		TArray<FRPCAnalyticsThreshold> RPCAnalyticsThresholds; // 0x70(0x10)
		double RPCAnalyticsOverrideChance; // 0x80(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RPCDoSDetectionConfig");
			return ret;
		}
	};


	// Class Engine.NetworkSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x50 (0x80 - 0x30)
	class UNetworkSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x30(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkSubsystem");
			return ret;
		}
	};


	// Class Engine.Note
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ANote : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Note");
			return ret;
		}
	};


	// Class Engine.ObjectLibrary
	// Inherited from UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UObjectLibrary : public UObject	
	{
	public:
		UClass* ObjectBaseClass; // 0x28(0x8)
		bool bHasBlueprintClasses; // 0x30(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TArray<UObject*> Objects; // 0x38(0x10)
		TArray<TWeakObjectPtr> WeakObjects; // 0x48(0x10)
		bool bUseWeakReferences; // 0x58(0x1)
		bool bIsFullyLoaded; // 0x59(0x1)
		unsigned char UnknownData01_7[0x4E]; // 0x5A(0x4E) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectLibrary");
			return ret;
		}
	};


	// Class Engine.ObjectReferencer
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UObjectReferencer : public UObject	
	{
	public:
		TArray<UObject*> ReferencedObjects; // 0x28(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectReferencer");
			return ret;
		}
	};


	// Class Engine.ObjectTraceWorldSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UObjectTraceWorldSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x30(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ObjectTraceWorldSubsystem");
			return ret;
		}
	};


	// Class Engine.OnlineBlueprintCallProxyBase
	// Inherited from UBlueprintAsyncActionBase -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.OnlineBlueprintCallProxyBase");
			return ret;
		}
	};


	// Class Engine.OnlineEngineInterface
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UOnlineEngineInterface : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.OnlineEngineInterface");
			return ret;
		}
	};


	// Class Engine.OnlineSession
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UOnlineSession : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.OnlineSession");
			return ret;
		}
	};


	// Class Engine.PackageMapClient
	// Inherited from UPackageMap -> UObject
	// Size: 0x328 (0x408 - 0xE0)
	class UPackageMapClient : public UPackageMap	
	{
	public:
		unsigned char UnknownData00_1[0x328]; // 0xE0(0x328) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PackageMapClient");
			return ret;
		}
	};


	// Class Engine.PackedLevelActor
	// Inherited from ALevelInstance -> AActor -> UObject
	// Size: 0x0 (0x328 - 0x328)
	class APackedLevelActor : public ALevelInstance	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PackedLevelActor");
			return ret;
		}
	};


	// Class Engine.EngineHandlerComponentFactory
	// Inherited from UHandlerComponentFactory -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UEngineHandlerComponentFactory : public UHandlerComponentFactory	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EngineHandlerComponentFactory");
			return ret;
		}
	};


	// Class Engine.PainCausingVolume
	// Inherited from APhysicsVolume -> AVolume -> ABrush -> AActor -> UObject
	// Size: 0x28 (0x300 - 0x2D8)
	class APainCausingVolume : public APhysicsVolume	
	{
	public:
		bool bPainCausing : 1; // 0x2D8:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2D9(0x3) UNKNOWN PROPERTY
		float DamagePerSec; // 0x2DC(0x4)
		UClass* DamageType; // 0x2E0(0x8)
		float PainInterval; // 0x2E8(0x4)
		bool bEntryPain : 1; // 0x2EC:0(0x1)
		bool BACKUP_bPainCausing : 1; // 0x2EC:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x2ED(0x3) UNKNOWN PROPERTY
		AController* DamageInstigator; // 0x2F0(0x8)
		unsigned char UnknownData02_7[0x8]; // 0x2F8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PainCausingVolume");
			return ret;
		}
	};


	// Class Engine.ParticleEventManager
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class AParticleEventManager : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ParticleEventManager");
			return ret;
		}
	};


	// Class Engine.AsyncPhysicsInputComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x28 (0xC8 - 0xA0)
	class UAsyncPhysicsInputComponent : public UActorComponent	
	{
	public:
		UClass* DataClass; // 0xA0(0x8)
		TArray<UAsyncPhysicsData*> BufferedData; // 0xA8(0x10)
		UAsyncPhysicsData* DataToConsume; // 0xB8(0x8)
		UAsyncPhysicsData* DataToWrite; // 0xC0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncPhysicsInputComponent");
			return ret;
		}

		void ServerRPCBufferInput(UAsyncPhysicsData* AsyncPhysicsData); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer, Memory Exec: 0x7FF74C75FA60(relative to base address)
		UAsyncPhysicsData GetDataToWrite(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75D448(relative to base address)
		UAsyncPhysicsData GetDataToConsume(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C75D3B8(relative to base address)
	};


	// Class Engine.ClusterUnionActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AClusterUnionActor : public AActor	
	{
	public:
		UClusterUnionComponent* ClusterUnion; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ClusterUnionActor");
			return ret;
		}

		UClusterUnionComponent GetClusterUnionComponent(); // Flags: Final|Native|Public|Const, Memory Exec: 0x7FF74C0DFEA8(relative to base address)
	};


	// Class Engine.ClusterUnionComponent
	// Inherited from UPrimitiveComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x248 (0x710 - 0x4C8)
	class UClusterUnionComponent : public UPrimitiveComponent	
	{
	public:
		bool bEnableDamageFromCollision; // 0x4C8(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x4C9(0x7) UNKNOWN PROPERTY
		FMulticastInlineDelegate OnComponentAddedEvent; // 0x4D0(0x10)
		FMulticastInlineDelegate OnComponentRemovedEvent; // 0x4E0(0x10)
		FMulticastInlineDelegate OnComponentBoundsChangedEvent; // 0x4F0(0x10)
		unsigned char UnknownData01_6[0x98]; // 0x500(0x98) UNKNOWN PROPERTY
		TArray<FComponentReference> ClusteredComponentsReferences; // 0x598(0x10)
		int32_t GravityGroupIndexOverride; // 0x5A8(0x4)
		unsigned char UnknownData02_6[0x104]; // 0x5AC(0x104) UNKNOWN PROPERTY
		FClusterUnionReplicatedData ReplicatedRigidState; // 0x6B0(0x2)
		unsigned char UnknownData03_7[0x5E]; // 0x6B2(0x5E) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ClusterUnionComponent");
			return ret;
		}

		void SetIsAnchored(bool bIsAnchored); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C761C3C(relative to base address)
		void SetEnableDamageFromCollision(bool bValue); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C761B94(relative to base address)
		void RemoveComponentFromCluster(UPrimitiveComponent* InComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C75F9E0(relative to base address)
		void RemoveComponentBonesFromCluster(UPrimitiveComponent* InComponent, TArray<int32_t>& BoneIds); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75F8FC(relative to base address)
		void OnRep_RigidState(); // Flags: RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C75F600(relative to base address)
		bool IsComponentAdded(UPrimitiveComponent* Component); // Flags: Final|Native|Public, Memory Exec: 0x7FF74C75F420(relative to base address)
		bool IsAuthority(); // Flags: Final|RequiredAPI|Native|Protected|Const, Memory Exec: 0x7FF74C75F3D4(relative to base address)
		void HandleComponentPhysicsStateChangePostAddIntoClusterUnion(UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74C75F2C0(relative to base address)
		void HandleComponentPhysicsStateChange(UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74C75F0B0(relative to base address)
		TArray GetPrimitiveComponents(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C75EE20(relative to base address)
		TArray GetActors(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C75B9F8(relative to base address)
		void ForceSetChildToParent(UPrimitiveComponent* InComponent, TArray<int32_t>& BoneIds, TArray<FTransform>& ChildToParent); // Flags: Final|RequiredAPI|Native|Public|HasOutParms, Memory Exec: 0x7FF74C75B7F4(relative to base address)
		void AddComponentToCluster(UPrimitiveComponent* InComponent, TArray<int32_t>& BoneIds, bool bRebuildGeometry); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75AF6C(relative to base address)
	};


	// Class Engine.ClusterUnionReplicatedProxyComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x90 (0x130 - 0xA0)
	class UClusterUnionReplicatedProxyComponent : public UActorComponent	
	{
	public:
		TWeakObjectPtr<UClusterUnionComponent*> ParentClusterUnion; // 0xA0(0x8)
		TWeakObjectPtr<UPrimitiveComponent*> ChildClusteredComponent; // 0xA8(0x8)
		TArray<int32_t> ParticleBoneIds; // 0xB0(0x10)
		unsigned char UnknownData00_6[0x50]; // 0xC0(0x50) UNKNOWN PROPERTY
		TArray<FTransform> ParticleChildToParents; // 0x110(0x10)
		bool bNetUpdateParentClusterUnion; // 0x120(0x1)
		bool bNetUpdateChildClusteredComponent; // 0x121(0x1)
		bool bNetUpdateParticleBoneIds; // 0x122(0x1)
		bool bNetUpdateParticleChildToParents; // 0x123(0x1)
		bool bIsPendingDeletion; // 0x124(0x1)
		unsigned char UnknownData01_7[0xB]; // 0x125(0xB) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ClusterUnionReplicatedProxyComponent");
			return ret;
		}

		void SetParticleChildToParent(int32_t BoneID, FTransform& ChildToParent); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults, Memory Exec: 0x7FF74C763C90(relative to base address)
		void SetParticleBoneIds(TArray<int32_t>& InIds); // Flags: Final|RequiredAPI|Native|Public|HasOutParms, Memory Exec: 0x7FF74C763BF4(relative to base address)
		void SetParentClusterUnion(UClusterUnionComponent* InComponent); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C763A10(relative to base address)
		void SetChildClusteredComponent(UPrimitiveComponent* InComponent); // Flags: Final|RequiredAPI|Native|Public, Memory Exec: 0x7FF74C76184C(relative to base address)
		void OnRep_ParticleChildToParents(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C75F5E8(relative to base address)
		void OnRep_ParticleBoneIds(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C75F5D0(relative to base address)
		void OnRep_ParentClusterUnion(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C75F5B8(relative to base address)
		void OnRep_ChildClusteredComponent(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C75F588(relative to base address)
		void MarkPendingDeletion(); // Flags: Final|Native|Public, Memory Exec: 0x7FF74C75F570(relative to base address)
		bool IsPendingDeletion(); // Flags: Final|Native|Public, Memory Exec: 0x7FF74C75F558(relative to base address)
		TArray GetParticleBoneIds(); // Flags: Final|RequiredAPI|Native|Public|Const, Memory Exec: 0x7FF74C75ED78(relative to base address)
		UClusterUnionComponent GetParentClusterUnionComponent(); // Flags: Final|RequiredAPI|Native|Public|Const, Memory Exec: 0x7FF74C75ECB0(relative to base address)
		UPrimitiveComponent GetChildClusteredComponent(); // Flags: Final|RequiredAPI|Native|Public|Const, Memory Exec: 0x7FF74C75D20C(relative to base address)
	};


	// Class Engine.ConstraintInstanceBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UConstraintInstanceBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ConstraintInstanceBlueprintLibrary");
			return ret;
		}

		void SetProjectionParams(FConstraintInstanceAccessor& Accessor, bool bEnableProjection, float ProjectionLinearAlpha, float ProjectionAngularAlpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C763DBC(relative to base address)
		void SetParentDominates(FConstraintInstanceAccessor& Accessor, bool bParentDominates); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C763A90(relative to base address)
		void SetOrientationDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C7637F4(relative to base address)
		void SetOrientationDriveSLERP(FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C763690(relative to base address)
		void SetMassConditioningEnabled(FConstraintInstanceAccessor& Accessor, bool bEnableMassConditioning); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C76352C(relative to base address)
		void SetLinearVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7633C0(relative to base address)
		void SetLinearVelocityDrive(FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C7630D8(relative to base address)
		void SetLinearSoftLimitParams(FConstraintInstanceAccessor& Accessor, bool bSoftLinearLimit, float LinearLimitStiffness, float LinearLimitDamping, float LinearLimitRestitution, float LinearLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C762C78(relative to base address)
		void SetLinearPositionTarget(FConstraintInstanceAccessor& Accessor, FVector& InPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C762B0C(relative to base address)
		void SetLinearPositionDrive(FConstraintInstanceAccessor& Accessor, bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C762824(relative to base address)
		void SetLinearPlasticity(FConstraintInstanceAccessor& Accessor, bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType> PlasticityType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C762548(relative to base address)
		void SetLinearLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte<ELinearConstraintMotion> XMotion, TEnumAsByte<ELinearConstraintMotion> YMotion, TEnumAsByte<ELinearConstraintMotion> ZMotion, float Limit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C7621B0(relative to base address)
		void SetLinearDriveParams(FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C761EDC(relative to base address)
		void SetLinearBreakable(FConstraintInstanceAccessor& Accessor, bool bLinearBreakable, float LinearBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C761CC0(relative to base address)
		void SetDisableCollision(FConstraintInstanceAccessor& Accessor, bool bDisableCollision); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C761A30(relative to base address)
		void SetContactTransferScale(FConstraintInstanceAccessor& Accessor, float ContactTransferScale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C7618CC(relative to base address)
		void SetAngularVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7615E0(relative to base address)
		void SetAngularVelocityDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C7613C4(relative to base address)
		void SetAngularVelocityDriveSLERP(FConstraintInstanceAccessor& Accessor, bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C761260(relative to base address)
		void SetAngularSoftTwistLimitParams(FConstraintInstanceAccessor& Accessor, bool bSoftTwistLimit, float TwistLimitStiffness, float TwistLimitDamping, float TwistLimitRestitution, float TwistLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C760E00(relative to base address)
		void SetAngularSoftSwingLimitParams(FConstraintInstanceAccessor& Accessor, bool bSoftSwingLimit, float SwingLimitStiffness, float SwingLimitDamping, float SwingLimitRestitution, float SwingLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C7609A0(relative to base address)
		void SetAngularPlasticity(FConstraintInstanceAccessor& Accessor, bool bAngularPlasticity, float AngularPlasticityThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C760784(relative to base address)
		void SetAngularOrientationTarget(FConstraintInstanceAccessor& Accessor, FRotator& InPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C760650(relative to base address)
		void SetAngularLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte<EAngularConstraintMotion> Swing1MotionType, float Swing1LimitAngle, TEnumAsByte<EAngularConstraintMotion> Swing2MotionType, float Swing2LimitAngle, TEnumAsByte<EAngularConstraintMotion> TwistMotionType, float TwistLimitAngle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C760138(relative to base address)
		void SetAngularDriveParams(FConstraintInstanceAccessor& Accessor, float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75FE64(relative to base address)
		void SetAngularDriveMode(FConstraintInstanceAccessor& Accessor, TEnumAsByte<EAngularDriveMode> DriveMode); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75FD00(relative to base address)
		void SetAngularBreakable(FConstraintInstanceAccessor& Accessor, bool bAngularBreakable, float AngularBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75FAE4(relative to base address)
		void GetProjectionParams(FConstraintInstanceAccessor& Accessor, bool& bEnableProjection, float& ProjectionLinearAlpha, float& ProjectionAngularAlpha); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75EE60(relative to base address)
		bool GetParentDominates(FConstraintInstanceAccessor& Accessor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75ECD8(relative to base address)
		void GetOrientationDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75EAC0(relative to base address)
		void GetOrientationDriveSLERP(FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75E980(relative to base address)
		bool GetMassConditioningEnabled(FConstraintInstanceAccessor& Accessor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75E820(relative to base address)
		void GetLinearVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& OutVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75E6B4(relative to base address)
		void GetLinearVelocityDrive(FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75E460(relative to base address)
		void GetLinearSoftLimitParams(FConstraintInstanceAccessor& Accessor, bool& bSoftLinearLimit, float& LinearLimitStiffness, float& LinearLimitDamping, float& LinearLimitRestitution, float& LinearLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75E0EC(relative to base address)
		void GetLinearPositionTarget(FConstraintInstanceAccessor& Accessor, FVector& OutPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75DF80(relative to base address)
		void GetLinearPositionDrive(FConstraintInstanceAccessor& Accessor, bool& bOutEnableDriveX, bool& bOutEnableDriveY, bool& bOutEnableDriveZ); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75DD2C(relative to base address)
		void GetLinearPlasticity(FConstraintInstanceAccessor& Accessor, bool& bLinearPlasticity, float& LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType>& PlasticityType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75DB30(relative to base address)
		void GetLinearLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte<ELinearConstraintMotion>& XMotion, TEnumAsByte<ELinearConstraintMotion>& YMotion, TEnumAsByte<ELinearConstraintMotion>& ZMotion, float& Limit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75D928(relative to base address)
		void GetLinearDriveParams(FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75D6D8(relative to base address)
		void GetLinearBreakable(FConstraintInstanceAccessor& Accessor, bool& bLinearBreakable, float& LinearBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75D524(relative to base address)
		bool GetDisableCollsion(FConstraintInstanceAccessor& Accessor); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75D460(relative to base address)
		void GetContactTransferScale(FConstraintInstanceAccessor& Accessor, float& ContactTransferScale); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75D234(relative to base address)
		void GetAttachedBodyNames(FConstraintInstanceAccessor& Accessor, FName& ParentBody, FName& ChildBody); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75D098(relative to base address)
		void GetAngularVelocityTarget(FConstraintInstanceAccessor& Accessor, FVector& OutVelTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75CF2C(relative to base address)
		void GetAngularVelocityDriveTwistAndSwing(FConstraintInstanceAccessor& Accessor, bool& bOutEnableTwistDrive, bool& bOutEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75CD78(relative to base address)
		void GetAngularVelocityDriveSLERP(FConstraintInstanceAccessor& Accessor, bool& bOutEnableSLERP); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75CC34(relative to base address)
		void GetAngularSoftTwistLimitParams(FConstraintInstanceAccessor& Accessor, bool& bSoftTwistLimit, float& TwistLimitStiffness, float& TwistLimitDamping, float& TwistLimitRestitution, float& TwistLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75C8C0(relative to base address)
		void GetAngularSoftSwingLimitParams(FConstraintInstanceAccessor& Accessor, bool& bSoftSwingLimit, float& SwingLimitStiffness, float& SwingLimitDamping, float& SwingLimitRestitution, float& SwingLimitContactDistance); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75C54C(relative to base address)
		void GetAngularPlasticity(FConstraintInstanceAccessor& Accessor, bool& bAngularPlasticity, float& AngularPlasticityThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75C398(relative to base address)
		void GetAngularOrientationTarget(FConstraintInstanceAccessor& Accessor, FRotator& OutPosTarget); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C75C264(relative to base address)
		void GetAngularLimits(FConstraintInstanceAccessor& Accessor, TEnumAsByte<EAngularConstraintMotion>& Swing1MotionType, float& Swing1LimitAngle, TEnumAsByte<EAngularConstraintMotion>& Swing2MotionType, float& Swing2LimitAngle, TEnumAsByte<EAngularConstraintMotion>& TwistMotionType, float& TwistLimitAngle); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75BF30(relative to base address)
		void GetAngularDriveParams(FConstraintInstanceAccessor& Accessor, float& OutPositionStrength, float& OutVelocityStrength, float& OutForceLimit); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75BCE0(relative to base address)
		void GetAngularDriveMode(FConstraintInstanceAccessor& Accessor, TEnumAsByte<EAngularDriveMode>& OutDriveMode); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75BBEC(relative to base address)
		void GetAngularBreakable(FConstraintInstanceAccessor& Accessor, bool& bAngularBreakable, float& AngularBreakThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75BA38(relative to base address)
		void CopyParams(FConstraintInstanceAccessor& Accessor, FConstraintInstanceAccessor& SourceAccessor, bool bKeepPosition, bool bKeepRotation); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C75B584(relative to base address)
	};


	// Class Engine.NetworkPhysicsSystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UNetworkPhysicsSystem : public UWorldSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPhysicsSystem");
			return ret;
		}
	};


	// Class Engine.NetworkPhysicsComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x98 (0x138 - 0xA0)
	class UNetworkPhysicsComponent : public UActorComponent	
	{
	public:
		FNetworkPhysicsRewindDataImportantInputProxy ReplicatedImportantInput; // 0xA0(0x10)
		FNetworkPhysicsRewindDataImportantStateProxy ReplicatedImportantState; // 0xB0(0x10)
		FNetworkPhysicsRewindDataInputProxy ReplicatedInputs; // 0xC0(0x10)
		FNetworkPhysicsRewindDataStateProxy ReplicatedStates; // 0xD0(0x10)
		unsigned char UnknownData00_7[0x58]; // 0xE0(0x58) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NetworkPhysicsComponent");
			return ret;
		}

		void ServerReceiveInputsDatas(FNetworkPhysicsRewindDataInputProxy ClientInputs); // Flags: RequiredAPI|Net|Native|Event|Public|NetServer, Memory Exec: 0x7FF74C787FAC(relative to base address)
		void ServerReceiveInputData(FNetworkPhysicsRewindDataInputProxy ClientInputs); // Flags: RequiredAPI|Net|Native|Event|Protected|NetServer, Memory Exec: 0x7FF74C787E88(relative to base address)
		void ServerReceiveImportantInputData(FNetworkPhysicsRewindDataImportantInputProxy ClientInputs); // Flags: RequiredAPI|Net|NetReliableNative|Event|Protected|NetServer, Memory Exec: 0x7FF74C787D64(relative to base address)
		void OnRep_SetReplicatedStates(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C787D50(relative to base address)
		void OnRep_SetReplicatedInputs(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF74C787D3C(relative to base address)
		void MulticastReceiveImportantStateData(FNetworkPhysicsRewindDataImportantStateProxy ServerStates); // Flags: RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Protected, Memory Exec: 0x7FF74C787C18(relative to base address)
		void MulticastReceiveImportantInputData(FNetworkPhysicsRewindDataImportantInputProxy ServerInputs); // Flags: RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Protected, Memory Exec: 0x7FF74C787AF4(relative to base address)
	};


	// Class Engine.PhysicalAnimationComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x40 (0xE0 - 0xA0)
	class UPhysicalAnimationComponent : public UActorComponent	
	{
	public:
		float StrengthMultiplyer; // 0xA0(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xA4(0x4) UNKNOWN PROPERTY
		USkeletalMeshComponent* SkeletalMeshComponent; // 0xA8(0x8)
		unsigned char UnknownData01_7[0x30]; // 0xB0(0x30) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicalAnimationComponent");
			return ret;
		}

		void SetStrengthMultiplyer(float InStrengthMultiplyer); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78A2DC(relative to base address)
		void SetSkeletalMeshComponent(USkeletalMeshComponent* InSkeletalMeshComponent); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78A20C(relative to base address)
		FTransform GetBodyTargetTransform(FName BodyName); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C786DD8(relative to base address)
		void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C786C10(relative to base address)
		void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C786B2C(relative to base address)
		void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7869E0(relative to base address)
	};


	// Class Engine.PhysicalMaterialMask
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UPhysicalMaterialMask : public UObject	
	{
	public:
		int32_t UVChannelIndex; // 0x28(0x4)
		TEnumAsByte<TextureAddress> AddressX; // 0x2C(0x1)
		TEnumAsByte<TextureAddress> AddressY; // 0x2D(0x1)
		unsigned char UnknownData00_7[0xA]; // 0x2E(0xA) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicalMaterialMask");
			return ret;
		}
	};


	// Class Engine.PhysicsAsset
	// Inherited from UObject
	// Size: 0x128 (0x150 - 0x28)
	class UPhysicsAsset : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		TArray<int32_t> BoundsBodies; // 0x30(0x10)
		TArray<USkeletalBodySetup*> SkeletalBodySetups; // 0x40(0x10)
		TArray<UPhysicsConstraintTemplate*> ConstraintSetup; // 0x50(0x10)
		FPhysicsAssetSolverSettings SolverSettings; // 0x60(0x1C)
		FSolverIterations SolverIterations; // 0x7C(0x18)
		EPhysicsAssetSolverType SolverType; // 0x94(0x1)
		bool bNotForDedicatedServer : 1; // 0x95:0(0x1)
		unsigned char UnknownData01_5[0xA2]; // 0x96(0xA2) UNKNOWN PROPERTY
		UThumbnailInfo* ThumbnailInfo; // 0x138(0x8)
		TArray<UBodySetup*> BodySetup; // 0x140(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsAsset");
			return ret;
		}
	};


	// Class Engine.PhysicsCollisionHandler
	// Inherited from UObject
	// Size: 0x18 (0x40 - 0x28)
	class UPhysicsCollisionHandler : public UObject	
	{
	public:
		float ImpactThreshold; // 0x28(0x4)
		float ImpactReFireDelay; // 0x2C(0x4)
		USoundBase* DefaultImpactSound; // 0x30(0x8)
		float LastImpactSoundTime; // 0x38(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsCollisionHandler");
			return ret;
		}
	};


	// Class Engine.PhysicsConstraintActor
	// Inherited from ARigidBodyBase -> AActor -> UObject
	// Size: 0x20 (0x2B0 - 0x290)
	class APhysicsConstraintActor : public ARigidBodyBase	
	{
	public:
		UPhysicsConstraintComponent* ConstraintComp; // 0x290(0x8)
		AActor* ConstraintActor1; // 0x298(0x8)
		AActor* ConstraintActor2; // 0x2A0(0x8)
		bool bDisableCollision : 1; // 0x2A8:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x2A9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsConstraintActor");
			return ret;
		}
	};


	// Class Engine.PhysicsConstraintComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x2C0 (0x4E0 - 0x220)
	class UPhysicsConstraintComponent : public USceneComponent	
	{
	public:
		AActor* ConstraintActor1; // 0x220(0x8)
		FConstrainComponentPropName ComponentName1; // 0x228(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x22C(0x4) UNKNOWN PROPERTY
		AActor* ConstraintActor2; // 0x230(0x8)
		FConstrainComponentPropName ComponentName2; // 0x238(0x4)
		unsigned char UnknownData01_6[0x14]; // 0x23C(0x14) UNKNOWN PROPERTY
		UPhysicsConstraintTemplate* ConstraintSetup; // 0x250(0x8)
		FMulticastInlineDelegate OnConstraintBroken; // 0x258(0x10)
		FMulticastInlineDelegate OnPlasticDeformation; // 0x268(0x10)
		FConstraintInstance ConstraintInstance; // 0x278(0x268)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsConstraintComponent");
			return ret;
		}

		void SetProjectionParams(float ProjectionLinearAlpha, float ProjectionAngularAlpha, float ProjectionLinearTolerance, float ProjectionAngularTolerance); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78A0B4(relative to base address)
		void SetProjectionEnabled(bool bProjectionEnabled); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78A034(relative to base address)
		void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789F6C(relative to base address)
		void SetOrientationDriveSLERP(bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789EE8(relative to base address)
		void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789E08(relative to base address)
		void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789D28(relative to base address)
		void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789C48(relative to base address)
		void SetLinearVelocityTarget(FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C789B80(relative to base address)
		void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789A70(relative to base address)
		void SetLinearPositionTarget(FVector& InPosTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C78991C(relative to base address)
		void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78980C(relative to base address)
		void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold, TEnumAsByte<EConstraintPlasticityType> PlasticityType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7896F0(relative to base address)
		void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7895F0(relative to base address)
		void SetLinearDriveAccelerationMode(bool bAccelerationMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C789540(relative to base address)
		void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7893EC(relative to base address)
		void SetDisableCollision(bool bDisableCollision); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7892E8(relative to base address)
		void SetContactTransferScale(float ContactTransferScale); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78925C(relative to base address)
		void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C789150(relative to base address)
		void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C788FB0(relative to base address)
		void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C788E7C(relative to base address)
		void SetConstrainedComponents(UPrimitiveComponent* Component1, FName BoneName1, UPrimitiveComponent* Component2, FName BoneName2); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788C04(relative to base address)
		void SetAngularVelocityTarget(FVector& InVelTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C788B3C(relative to base address)
		void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788A74(relative to base address)
		void SetAngularVelocityDriveSLERP(bool bEnableSLERP); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7889F0(relative to base address)
		void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788928(relative to base address)
		void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788864(relative to base address)
		void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7887A0(relative to base address)
		void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7886DC(relative to base address)
		void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788588(relative to base address)
		void SetAngularOrientationTarget(FRotator& InPosTarget); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7884F0(relative to base address)
		void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788428(relative to base address)
		void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788328(relative to base address)
		void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7882A4(relative to base address)
		void SetAngularDriveAccelerationMode(bool bAccelerationMode); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788224(relative to base address)
		void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7880D0(relative to base address)
		bool IsProjectionEnabled(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C787AD8(relative to base address)
		bool IsBroken(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C787AB0(relative to base address)
		float GetCurrentTwist(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7872A4(relative to base address)
		float GetCurrentSwing2(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C787270(relative to base address)
		float GetCurrentSwing1(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C78723C(relative to base address)
		void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7870A4(relative to base address)
		FConstraintInstanceAccessor GetConstraint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C787070(relative to base address)
		void GetConstrainedComponents(UPrimitiveComponent* OutComponent1, FName& OutBoneName1, UPrimitiveComponent* OutComponent2, FName& OutBoneName2); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C786EB4(relative to base address)
		void BreakConstraint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C786DBC(relative to base address)
	};


	// Class Engine.PhysicsConstraintTemplate
	// Inherited from UObject
	// Size: 0x3D8 (0x400 - 0x28)
	class UPhysicsConstraintTemplate : public UObject	
	{
	public:
		FConstraintInstance DefaultInstance; // 0x28(0x268)
		TArray<FPhysicsConstraintProfileHandle> ProfileHandles; // 0x290(0x10)
		FConstraintProfileProperties DefaultProfile; // 0x2A0(0x160)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsConstraintTemplate");
			return ret;
		}
	};


	// Class Engine.PhysicsHandleComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x420 (0x4C0 - 0xA0)
	class UPhysicsHandleComponent : public UActorComponent	
	{
	public:
		UPrimitiveComponent* GrabbedComponent; // 0xA0(0x8)
		unsigned char UnknownData00_6[0x4]; // 0xA8(0x4) UNKNOWN PROPERTY
		unsigned char UnknownBit01 : 1; // 0xAC:0(0x1) UNKNOWN PROPERTY
		bool bSoftAngularConstraint : 1; // 0xAC:1(0x1)
		bool bSoftLinearConstraint : 1; // 0xAC:2(0x1)
		bool bInterpolateTarget : 1; // 0xAC:3(0x1)
		unsigned char UnknownData02_5[0x3]; // 0xAD(0x3) UNKNOWN PROPERTY
		float LinearDamping; // 0xB0(0x4)
		float LinearStiffness; // 0xB4(0x4)
		float AngularDamping; // 0xB8(0x4)
		float AngularStiffness; // 0xBC(0x4)
		unsigned char UnknownData03_6[0xC0]; // 0xC0(0xC0) UNKNOWN PROPERTY
		float InterpolationSpeed; // 0x180(0x4)
		unsigned char UnknownData04_7[0x33C]; // 0x184(0x33C) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsHandleComponent");
			return ret;
		}

		void SetTargetRotation(FRotator NewRotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C78A67C(relative to base address)
		void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C78A474(relative to base address)
		void SetTargetLocation(FVector NewLocation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C78A35C(relative to base address)
		void SetLinearStiffness(float NewLinearStiffness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7899E4(relative to base address)
		void SetLinearDamping(float NewLinearDamping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7894B4(relative to base address)
		void SetInterpolationSpeed(float NewInterpolationSpeed); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C78936C(relative to base address)
		void SetAngularStiffness(float NewAngularStiffness); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788650(relative to base address)
		void SetAngularDamping(float NewAngularDamping); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C788198(relative to base address)
		void ReleaseComponent(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74847EE18(relative to base address)
		void GrabComponentAtLocationWithRotation(UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C787838(relative to base address)
		void GrabComponentAtLocation(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C787690(relative to base address)
		void GrabComponent(UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C787444(relative to base address)
		void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7872D8(relative to base address)
		UPrimitiveComponent GetGrabbedComponent(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74920FD38(relative to base address)
	};


	// Class Engine.PhysicsSettings
	// Inherited from UPhysicsSettingsCore -> UDeveloperSettings -> UObject
	// Size: 0x110 (0x1F0 - 0xE0)
	class UPhysicsSettings : public UPhysicsSettingsCore	
	{
	public:
		FPhysicsPredictionSettings PhysicsPrediction; // 0xE0(0xC)
		FRigidBodyErrorCorrection PhysicErrorCorrection; // 0xEC(0x34)
		TEnumAsByte<ESettingsLockedAxis> LockedAxis; // 0x120(0x1)
		TEnumAsByte<ESettingsDOF> DefaultDegreesOfFreedom; // 0x121(0x1)
		bool bSuppressFaceRemapTable; // 0x122(0x1)
		bool bSupportUVFromHitResults; // 0x123(0x1)
		bool bDisableActiveActors; // 0x124(0x1)
		bool bDisableKinematicStaticPairs; // 0x125(0x1)
		bool bDisableKinematicKinematicPairs; // 0x126(0x1)
		bool bDisableCCD; // 0x127(0x1)
		float AnimPhysicsMinDeltaTime; // 0x128(0x4)
		bool bSimulateAnimPhysicsAfterReset; // 0x12C(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x12D(0x3) UNKNOWN PROPERTY
		float MinPhysicsDeltaTime; // 0x130(0x4)
		float MaxPhysicsDeltaTime; // 0x134(0x4)
		bool bSubstepping; // 0x138(0x1)
		bool bSubsteppingAsync; // 0x139(0x1)
		bool bTickPhysicsAsync; // 0x13A(0x1)
		unsigned char UnknownData01_6[0x1]; // 0x13B(0x1) UNKNOWN PROPERTY
		float AsyncFixedTimeStepSize; // 0x13C(0x4)
		float MaxSubstepDeltaTime; // 0x140(0x4)
		int32_t MaxSubsteps; // 0x144(0x4)
		float SyncSceneSmoothingFactor; // 0x148(0x4)
		float InitialAverageFrameRate; // 0x14C(0x4)
		int32_t PhysXTreeRebuildRate; // 0x150(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x154(0x4) UNKNOWN PROPERTY
		TArray<FPhysicalSurfaceName> PhysicalSurfaces; // 0x158(0x10)
		FBroadphaseSettings DefaultBroadphaseSettings; // 0x168(0x80)
		float MinDeltaVelocityForHitEvents; // 0x1E8(0x4)
		FChaosPhysicsSettings ChaosSettings; // 0x1EC(0x3)
		unsigned char UnknownData03_7[0x1]; // 0x1EF(0x1) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsSettings");
			return ret;
		}

		int32_t GetPhysicsHistoryCount(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C7B1C44(relative to base address)
	};


	// Class Engine.PhysicsThruster
	// Inherited from ARigidBodyBase -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class APhysicsThruster : public ARigidBodyBase	
	{
	public:
		UPhysicsThrusterComponent* ThrusterComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsThruster");
			return ret;
		}
	};


	// Class Engine.RadialForceComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x30 (0x250 - 0x220)
	class URadialForceComponent : public USceneComponent	
	{
	public:
		float Radius; // 0x220(0x4)
		TEnumAsByte<ERadialImpulseFalloff> Falloff; // 0x224(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x225(0x3) UNKNOWN PROPERTY
		float ImpulseStrength; // 0x228(0x4)
		bool bImpulseVelChange : 1; // 0x22C:0(0x1)
		bool bIgnoreOwningActor : 1; // 0x22C:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x22D(0x3) UNKNOWN PROPERTY
		float ForceStrength; // 0x230(0x4)
		float DestructibleDamage; // 0x234(0x4)
		TArray<TEnumAsByte> ObjectTypesToAffect; // 0x238(0x10)
		unsigned char UnknownData02_7[0x8]; // 0x248(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RadialForceComponent");
			return ret;
		}

		void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B2BE0(relative to base address)
		void FireImpulse(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7B051C(relative to base address)
		void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7AC61C(relative to base address)
	};


	// Class Engine.PhysicsFieldComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0xE0 (0x300 - 0x220)
	class UPhysicsFieldComponent : public USceneComponent	
	{
	public:
		unsigned char UnknownData00_1[0xE0]; // 0x220(0xE0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsFieldComponent");
			return ret;
		}
	};


	// Class Engine.PhysicsFieldStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UPhysicsFieldStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PhysicsFieldStatics");
			return ret;
		}

		FVector EvalPhysicsVectorField(UObject* WorldContextObject, FVector& WorldPosition, TEnumAsByte<EFieldVectorType> VectorType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7B02F4(relative to base address)
		float EvalPhysicsScalarField(UObject* WorldContextObject, FVector& WorldPosition, TEnumAsByte<EFieldScalarType> ScalarType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7B0168(relative to base address)
		int32_t EvalPhysicsIntegerField(UObject* WorldContextObject, FVector& WorldPosition, TEnumAsByte<EFieldIntegerType> IntegerType); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C7AFFDC(relative to base address)
	};


	// Class Engine.PlayerStartPIE
	// Inherited from APlayerStart -> ANavigationObjectBase -> AActor -> UObject
	// Size: 0x0 (0x2C0 - 0x2C0)
	class APlayerStartPIE : public APlayerStart	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerStartPIE");
			return ret;
		}
	};


	// Class Engine.PostProcessVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x708 (0x9D0 - 0x2C8)
	class APostProcessVolume : public AVolume	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x2C8(0x8) UNKNOWN PROPERTY
		FPostProcessSettings Settings; // 0x2D0(0x6F0)
		float Priority; // 0x9C0(0x4)
		float BlendRadius; // 0x9C4(0x4)
		float BlendWeight; // 0x9C8(0x4)
		bool bEnabled : 1; // 0x9CC:0(0x1)
		bool bUnbound : 1; // 0x9CC:1(0x1)
		unsigned char UnknownData01_7[0x3]; // 0x9CD(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PostProcessVolume");
			return ret;
		}

		void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C7D7808(relative to base address)
	};


	// Class Engine.PrecomputedVisibilityVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class APrecomputedVisibilityVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrecomputedVisibilityVolume");
			return ret;
		}
	};


	// Class Engine.PrimaryAssetLabel
	// Inherited from UPrimaryDataAsset -> UDataAsset -> UObject
	// Size: 0x38 (0x68 - 0x30)
	class UPrimaryAssetLabel : public UPrimaryDataAsset	
	{
	public:
		FPrimaryAssetRules Rules; // 0x30(0xC)
		bool bLabelAssetsInMyDirectory : 1; // 0x3C:0(0x1)
		bool bIsRuntimeLabel : 1; // 0x3C:1(0x1)
		bool bIncludeRedirectors : 1; // 0x3C:2(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x3D(0x3) UNKNOWN PROPERTY
		TArray<TWeakObjectPtr> ExplicitAssets; // 0x40(0x10)
		TArray<TWeakObjectPtr> ExplicitBlueprints; // 0x50(0x10)
		FCollectionReference AssetCollection; // 0x60(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x64(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PrimaryAssetLabel");
			return ret;
		}
	};


	// Class Engine.HealthSnapshotBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HealthSnapshotBlueprintLibrary");
			return ret;
		}

		void StopPerformanceSnapshots(); // Flags: Final|RequiredAPI|Exec|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C7D7B08(relative to base address)
		void StartPerformanceSnapshots(); // Flags: Final|RequiredAPI|Exec|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C7D7AF4(relative to base address)
		void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats); // Flags: Final|RequiredAPI|Exec|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C7D7A10(relative to base address)
	};


	// Class Engine.LevelStreamingProfilingSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x90 (0xC0 - 0x30)
	class ULevelStreamingProfilingSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x90]; // 0x30(0x90) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LevelStreamingProfilingSubsystem");
			return ret;
		}
	};


	// Class Engine.ProxyLODMeshSimplificationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UProxyLODMeshSimplificationSettings : public UDeveloperSettings	
	{
	public:
		FName ProxyLODMeshReductionModuleName; // 0x30(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ProxyLODMeshSimplificationSettings");
			return ret;
		}
	};


	// Class Engine.RectLight
	// Inherited from ALight -> AActor -> UObject
	// Size: 0x8 (0x2A8 - 0x2A0)
	class ARectLight : public ALight	
	{
	public:
		URectLightComponent* RectLightComponent; // 0x2A0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RectLight");
			return ret;
		}
	};


	// Class Engine.RendererSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x1D8 (0x208 - 0x30)
	class URendererSettings : public UDeveloperSettings	
	{
	public:
		TEnumAsByte<EMobileShadingPath> MobileShadingPath; // 0x30(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		bool bMobileSupportDeferredOnOpenGL : 1; // 0x34:0(0x1)
		bool bMobileSupportGPUScene : 1; // 0x34:1(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EMobileAntiAliasingMethod> MobileAntiAliasing; // 0x38(0x1)
		TEnumAsByte<EMobileFloatPrecisionMode> MobileFloatPrecisionMode; // 0x39(0x1)
		unsigned char UnknownData02_6[0x2]; // 0x3A(0x2) UNKNOWN PROPERTY
		bool bMobileAllowDitheredLODTransition : 1; // 0x3C:0(0x1)
		bool bMobileVirtualTextures : 1; // 0x3C:1(0x1)
		bool bDiscardUnusedQualityLevels : 1; // 0x3C:2(0x1)
		unsigned char UnknownData03_5[0x3]; // 0x3D(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EShaderCompressionFormat> ShaderCompressionFormat; // 0x40(0x1)
		unsigned char UnknownData04_6[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		bool bOcclusionCulling : 1; // 0x44:0(0x1)
		unsigned char UnknownData05_5[0x3]; // 0x45(0x3) UNKNOWN PROPERTY
		float MinScreenRadiusForLights; // 0x48(0x4)
		float MinScreenRadiusForEarlyZPass; // 0x4C(0x4)
		float MinScreenRadiusForCSMdepth; // 0x50(0x4)
		bool bPrecomputedVisibilityWarning : 1; // 0x54:0(0x1)
		bool bTextureStreaming : 1; // 0x54:1(0x1)
		bool bUseDXT5NormalMaps : 1; // 0x54:2(0x1)
		bool bVirtualTextures : 1; // 0x54:3(0x1)
		bool bVirtualTextureEnableAutoImport : 1; // 0x54:4(0x1)
		bool bVirtualTexturedLightmaps : 1; // 0x54:5(0x1)
		bool bVirtualTextureAnisotropicFiltering : 1; // 0x54:6(0x1)
		bool bEnableVirtualTextureOpacityMask : 1; // 0x54:7(0x1)
		unsigned char UnknownData06_5[0x3]; // 0x55(0x3) UNKNOWN PROPERTY
		uint32_t VirtualTextureTileSize; // 0x58(0x4)
		uint32_t VirtualTextureTileBorderSize; // 0x5C(0x4)
		uint32_t VirtualTextureFeedbackFactor; // 0x60(0x4)
		uint32_t MeshPaintVirtualTextureTileSize; // 0x64(0x4)
		uint32_t MeshPaintVirtualTextureTileBorderSize; // 0x68(0x4)
		bool bEnableRVTBaseColor; // 0x6C(0x1)
		bool bEnableRVTBaseColorRoughness; // 0x6D(0x1)
		bool bEnableRVTBaseColorSpecular; // 0x6E(0x1)
		bool bEnableRVTMask4; // 0x6F(0x1)
		bool bEnableRVTWorldHeight; // 0x70(0x1)
		bool bEnableRVTDisplacement; // 0x71(0x1)
		bool bUseHighQualityRVTHeightSampling; // 0x72(0x1)
		TEnumAsByte<EWorkingColorSpace> WorkingColorSpaceChoice; // 0x73(0x1)
		unsigned char UnknownData07_6[0x4]; // 0x74(0x4) UNKNOWN PROPERTY
		FVector2D RedChromaticityCoordinate; // 0x78(0x10)
		FVector2D GreenChromaticityCoordinate; // 0x88(0x10)
		FVector2D BlueChromaticityCoordinate; // 0x98(0x10)
		FVector2D WhiteChromaticityCoordinate; // 0xA8(0x10)
		bool bUseLegacyLuminanceFactors : 1; // 0xB8:0(0x1)
		bool bClearCoatEnableSecondNormal : 1; // 0xB8:1(0x1)
		unsigned char UnknownData08_5[0x3]; // 0xB9(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EDynamicGlobalIlluminationMethod> DynamicGlobalIllumination; // 0xBC(0x1)
		TEnumAsByte<EReflectionMethod> Reflections; // 0xBD(0x1)
		unsigned char UnknownData09_6[0x2]; // 0xBE(0x2) UNKNOWN PROPERTY
		int32_t ReflectionCaptureResolution; // 0xC0(0x4)
		bool ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // 0xC4:0(0x1)
		bool bUseHardwareRayTracingForLumen : 1; // 0xC4:1(0x1)
		unsigned char UnknownData10_5[0x3]; // 0xC5(0x3) UNKNOWN PROPERTY
		ELumenRayLightingMode LumenRayLightingMode; // 0xC8(0x1)
		unsigned char UnknownData11_6[0x3]; // 0xC9(0x3) UNKNOWN PROPERTY
		bool LumenFrontLayerTranslucencyReflections : 1; // 0xCC:0(0x1)
		unsigned char UnknownData12_5[0x3]; // 0xCD(0x3) UNKNOWN PROPERTY
		TEnumAsByte<ELumenSoftwareTracingMode> LumenSoftwareTracingMode; // 0xD0(0x1)
		unsigned char UnknownData13_6[0x3]; // 0xD1(0x3) UNKNOWN PROPERTY
		bool LumenRayTracedTranslucentRefractions : 1; // 0xD4:0(0x1)
		unsigned char UnknownData14_5[0x3]; // 0xD5(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EShadowMapMethod> ShadowMapMethod; // 0xD8(0x1)
		unsigned char UnknownData15_6[0x3]; // 0xD9(0x3) UNKNOWN PROPERTY
		bool bEnableRayTracing : 1; // 0xDC:0(0x1)
		bool bEnableRayTracingShadows : 1; // 0xDC:1(0x1)
		bool bEnableRayTracingSkylight : 1; // 0xDC:2(0x1)
		bool bEnableRayTracingTextureLOD : 1; // 0xDC:3(0x1)
		bool bEnablePathTracing : 1; // 0xDC:4(0x1)
		bool bGenerateMeshDistanceFields : 1; // 0xDC:5(0x1)
		unsigned char UnknownData16_5[0x3]; // 0xDD(0x3) UNKNOWN PROPERTY
		float DistanceFieldVoxelDensity; // 0xE0(0x4)
		bool bNanite : 1; // 0xE4:0(0x1)
		bool bAllowStaticLighting : 1; // 0xE4:1(0x1)
		bool bUseNormalMapsForStaticLighting : 1; // 0xE4:2(0x1)
		bool bForwardShading : 1; // 0xE4:3(0x1)
		bool bVertexFoggingForOpaque : 1; // 0xE4:4(0x1)
		bool bSeparateTranslucency : 1; // 0xE4:5(0x1)
		unsigned char UnknownData17_5[0x3]; // 0xE5(0x3) UNKNOWN PROPERTY
		TEnumAsByte<ETranslucentSortPolicy> TranslucentSortPolicy; // 0xE8(0x1)
		unsigned char UnknownData18_6[0x7]; // 0xE9(0x7) UNKNOWN PROPERTY
		FVector TranslucentSortAxis; // 0xF0(0x18)
		bool bLocalFogVolumeApplyOnTranslucent : 1; // 0x108:0(0x1)
		unsigned char UnknownData19_5[0x3]; // 0x109(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EFixedFoveationLevels> FoveationLevel; // 0x10C(0x1)
		unsigned char UnknownData20_6[0x3]; // 0x10D(0x3) UNKNOWN PROPERTY
		bool bDynamicFoveation : 1; // 0x110:0(0x1)
		unsigned char UnknownData21_5[0x3]; // 0x111(0x3) UNKNOWN PROPERTY
		TEnumAsByte<ECustomDepthStencil> CustomDepthStencil; // 0x114(0x1)
		unsigned char UnknownData22_6[0x3]; // 0x115(0x3) UNKNOWN PROPERTY
		bool bCustomDepthTaaJitter : 1; // 0x118:0(0x1)
		unsigned char UnknownData23_5[0x3]; // 0x119(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EAlphaChannelMode> bEnableAlphaChannelInPostProcessing; // 0x11C(0x1)
		unsigned char UnknownData24_6[0x3]; // 0x11D(0x3) UNKNOWN PROPERTY
		bool bDefaultFeatureBloom : 1; // 0x120:0(0x1)
		bool bDefaultFeatureAmbientOcclusion : 1; // 0x120:1(0x1)
		bool bDefaultFeatureAmbientOcclusionStaticFraction : 1; // 0x120:2(0x1)
		bool bDefaultFeatureAutoExposure : 1; // 0x120:3(0x1)
		unsigned char UnknownData25_5[0x3]; // 0x121(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EAutoExposureMethodUI> DefaultFeatureAutoExposure; // 0x124(0x1)
		unsigned char UnknownData26_6[0x3]; // 0x125(0x3) UNKNOWN PROPERTY
		float DefaultFeatureAutoExposureBias; // 0x128(0x4)
		bool bExtendDefaultLuminanceRangeInAutoExposureSettings : 1; // 0x12C:0(0x1)
		unsigned char UnknownData27_5[0x3]; // 0x12D(0x3) UNKNOWN PROPERTY
		float DefaultFeatureLocalExposureHighlightContrast; // 0x130(0x4)
		float DefaultFeatureLocalExposureShadowContrast; // 0x134(0x4)
		bool bDefaultFeatureMotionBlur : 1; // 0x138:0(0x1)
		bool bDefaultFeatureLensFlare : 1; // 0x138:1(0x1)
		bool bTemporalUpsampling : 1; // 0x138:2(0x1)
		unsigned char UnknownData28_5[0x3]; // 0x139(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EAntiAliasingMethod> DefaultFeatureAntiAliasing; // 0x13C(0x1)
		TEnumAsByte<ECompositingSampleCount> MSAASampleCount; // 0x13D(0x1)
		ELightUnits DefaultLightUnits; // 0x13E(0x1)
		TEnumAsByte<EDefaultBackBufferPixelFormat> DefaultBackBufferPixelFormat; // 0x13F(0x1)
		float DefaultManualScreenPercentage; // 0x140(0x4)
		EScreenPercentageMode DefaultScreenPercentageDesktopMode; // 0x144(0x4)
		EScreenPercentageMode DefaultScreenPercentageMobileMode; // 0x148(0x4)
		EScreenPercentageMode DefaultScreenPercentageVRMode; // 0x14C(0x4)
		EScreenPercentageMode DefaultScreenPercentagePathTracerMode; // 0x150(0x4)
		bool bRenderUnbuiltPreviewShadowsInGame : 1; // 0x154:0(0x1)
		bool bStencilForLODDither : 1; // 0x154:1(0x1)
		unsigned char UnknownData29_5[0x3]; // 0x155(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EEarlyZPass> EarlyZPass; // 0x158(0x1)
		unsigned char UnknownData30_6[0x3]; // 0x159(0x3) UNKNOWN PROPERTY
		bool bEarlyZPassOnlyMaterialMasking : 1; // 0x15C:0(0x1)
		bool bEnableCSMCaching : 1; // 0x15C:1(0x1)
		bool bDBuffer : 1; // 0x15C:2(0x1)
		unsigned char UnknownData31_5[0x3]; // 0x15D(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EClearSceneOptions> ClearSceneMethod; // 0x160(0x1)
		TEnumAsByte<EVelocityOutputPass> VelocityPass; // 0x161(0x1)
		TEnumAsByte<EVertexDeformationOutputsVelocity> VertexDeformationOutputsVelocity; // 0x162(0x1)
		unsigned char UnknownData32_6[0x1]; // 0x163(0x1) UNKNOWN PROPERTY
		bool bSelectiveBasePassOutputs : 1; // 0x164:0(0x1)
		bool bDefaultParticleCutouts : 1; // 0x164:1(0x1)
		unsigned char UnknownData33_5[0x3]; // 0x165(0x3) UNKNOWN PROPERTY
		int32_t GPUSimulationTextureSizeX; // 0x168(0x4)
		int32_t GPUSimulationTextureSizeY; // 0x16C(0x4)
		bool bGlobalClipPlane : 1; // 0x170:0(0x1)
		unsigned char UnknownData34_5[0x3]; // 0x171(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EGBufferFormat> GBufferFormat; // 0x174(0x1)
		unsigned char UnknownData35_6[0x3]; // 0x175(0x3) UNKNOWN PROPERTY
		bool bUseGPUMorphTargets : 1; // 0x178:0(0x1)
		unsigned char UnknownData36_5[0x3]; // 0x179(0x3) UNKNOWN PROPERTY
		float MorphTargetMaxBlendWeight; // 0x17C(0x4)
		bool bSupportSkyAtmosphere : 1; // 0x180:0(0x1)
		bool bSupportSkyAtmosphereAffectsHeightFog : 1; // 0x180:1(0x1)
		bool bSupportExpFogMatchesVolumetricFog : 1; // 0x180:2(0x1)
		bool bSupportLocalFogVolumes : 1; // 0x180:3(0x1)
		bool bSupportCloudShadowOnForwardLitTranslucent : 1; // 0x180:4(0x1)
		unsigned char UnknownData37_5[0x3]; // 0x181(0x3) UNKNOWN PROPERTY
		TEnumAsByte<ELightFunctionAtlasPixelFormat> LightFunctionAtlasPixelFormat; // 0x184(0x1)
		unsigned char UnknownData38_6[0x3]; // 0x185(0x3) UNKNOWN PROPERTY
		bool bVolumetricFogUsesLightFunctionAtlas : 1; // 0x188:0(0x1)
		bool bDeferredLightingUsesLightFunctionAtlas : 1; // 0x188:1(0x1)
		bool bSingleLayerWaterUsesLightFunctionAtlas : 1; // 0x188:2(0x1)
		bool bTranslucentUsesLightFunctionAtlas : 1; // 0x188:3(0x1)
		bool bSupportIESProfileOnTranslucent : 1; // 0x188:4(0x1)
		bool bSupportRectLightOnTranslucent : 1; // 0x188:5(0x1)
		bool bGpuCrashDebugging : 1; // 0x188:6(0x1)
		bool bMultiView : 1; // 0x188:7(0x1)
		bool bMobilePostProcessing : 1; // 0x189:0(0x1)
		bool bMobileMultiView : 1; // 0x189:1(0x1)
		bool bMobileUseHWsRGBEncoding : 1; // 0x189:2(0x1)
		bool bRoundRobinOcclusion : 1; // 0x189:3(0x1)
		bool bMeshStreaming : 1; // 0x189:4(0x1)
		bool bEnableHeterogeneousVolumes : 1; // 0x189:5(0x1)
		bool bShouldHeterogeneousVolumesCastShadows : 1; // 0x189:6(0x1)
		bool bCompositeHeterogeneousVolumesWithTranslucency : 1; // 0x189:7(0x1)
		unsigned char UnknownData39_5[0x2]; // 0x18A(0x2) UNKNOWN PROPERTY
		float WireframeCullThreshold; // 0x18C(0x4)
		bool bSupportStationarySkylight : 1; // 0x190:0(0x1)
		bool bSupportLowQualityLightmaps : 1; // 0x190:1(0x1)
		bool bSupportPointLightWholeSceneShadows : 1; // 0x190:2(0x1)
		bool bSupportTranslucentPerObjectShadow : 1; // 0x190:3(0x1)
		bool bSupportCloudShadowOnSingleLayerWater : 1; // 0x190:4(0x1)
		bool bEnableSubstrate : 1; // 0x190:5(0x1)
		bool SubstrateOpaqueMaterialRoughRefraction : 1; // 0x190:6(0x1)
		bool SubstrateDebugAdvancedVisualizationShaders : 1; // 0x190:7(0x1)
		bool bMaterialRoughDiffuse : 1; // 0x191:0(0x1)
		bool bMaterialEnergyConservation : 1; // 0x191:1(0x1)
		bool bAutomaticallySetMaterialUsageInEditorDefault : 1; // 0x191:2(0x1)
		bool bOrderedIndependentTransparencyEnable : 1; // 0x191:3(0x1)
		bool bUseHairStrandsAutoLODMode : 1; // 0x191:4(0x1)
		bool bSupportSkinCacheShaders : 1; // 0x191:5(0x1)
		bool bSupportHardwareVariableRateShading : 1; // 0x191:6(0x1)
		bool bSkipCompilingGPUSkinVF : 1; // 0x191:7(0x1)
		unsigned char UnknownData40_5[0x2]; // 0x192(0x2) UNKNOWN PROPERTY
		ESkinCacheDefaultBehavior DefaultSkinCacheBehavior; // 0x194(0x1)
		unsigned char UnknownData41_6[0x3]; // 0x195(0x3) UNKNOWN PROPERTY
		float SkinCacheSceneMemoryLimitInMB; // 0x198(0x4)
		bool bMobileEnableStaticAndCSMShadowReceivers : 1; // 0x19C:0(0x1)
		bool bMobileEnableMovableLightCSMShaderCulling : 1; // 0x19C:1(0x1)
		unsigned char UnknownData42_5[0x3]; // 0x19D(0x3) UNKNOWN PROPERTY
		TEnumAsByte<EMobileLocalLightSetting> MobileLocalLightSetting; // 0x1A0(0x1)
		unsigned char UnknownData43_6[0x3]; // 0x1A1(0x3) UNKNOWN PROPERTY
		bool bMobileForwardEnableClusteredReflections : 1; // 0x1A4:0(0x1)
		bool bMobileEnableNoPrecomputedLightingCSMShader : 1; // 0x1A4:1(0x1)
		bool bMobileAllowDistanceFieldShadows : 1; // 0x1A4:2(0x1)
		bool bMobileAllowMovableDirectionalLights : 1; // 0x1A4:3(0x1)
		bool bMobileAllowMovableSpotlightShadows : 1; // 0x1A4:4(0x1)
		bool bSupport16BitBoneIndex : 1; // 0x1A4:5(0x1)
		bool bGPUSkinLimit2BoneInfluences : 1; // 0x1A4:6(0x1)
		bool bSupportDepthOnlyIndexBuffers : 1; // 0x1A4:7(0x1)
		bool bSupportReversedIndexBuffers : 1; // 0x1A5:0(0x1)
		bool bMobileAmbientOcclusion : 1; // 0x1A5:1(0x1)
		bool bMobileDBuffer : 1; // 0x1A5:2(0x1)
		bool bUseUnlimitedBoneInfluences : 1; // 0x1A5:3(0x1)
		bool bAlwaysUseDeformerForUnlimitedBoneInfluences : 1; // 0x1A5:4(0x1)
		unsigned char UnknownData44_5[0x2]; // 0x1A6(0x2) UNKNOWN PROPERTY
		int32_t UnlimitedBonInfluencesThreshold; // 0x1A8(0x4)
		FPerPlatformInt DefaultBoneInfluenceLimit; // 0x1AC(0x4)
		FPerPlatformInt MaxSkinBones; // 0x1B0(0x4)
		TEnumAsByte<EMobilePlanarReflectionMode> MobilePlanarReflectionMode; // 0x1B4(0x1)
		unsigned char UnknownData45_6[0x3]; // 0x1B5(0x3) UNKNOWN PROPERTY
		bool bMobileScreenSpaceReflections : 1; // 0x1B8:0(0x1)
		bool bMobileSupportsGen4TAA : 1; // 0x1B8:1(0x1)
		unsigned char UnknownData46_5[0x3]; // 0x1B9(0x3) UNKNOWN PROPERTY
		FPerPlatformBool bStreamSkeletalMeshLODs; // 0x1BC(0x1)
		FPerPlatformBool bDiscardSkeletalMeshOptionalLODs; // 0x1BD(0x1)
		unsigned char UnknownData47_6[0x2]; // 0x1BE(0x2) UNKNOWN PROPERTY
		FSoftObjectPath VisualizeCalibrationColorMaterialPath; // 0x1C0(0x18)
		FSoftObjectPath VisualizeCalibrationCustomMaterialPath; // 0x1D8(0x18)
		FSoftObjectPath VisualizeCalibrationGrayscaleMaterialPath; // 0x1F0(0x18)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RendererSettings");
			return ret;
		}
	};


	// Class Engine.RendererOverrideSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class URendererOverrideSettings : public UDeveloperSettings	
	{
	public:
		bool bSupportAllShaderPermutations : 1; // 0x30:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x31(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RendererOverrideSettings");
			return ret;
		}
	};


	// Class Engine.NeuralProfile
	// Inherited from UObject
	// Size: 0x58 (0x80 - 0x28)
	class UNeuralProfile : public UObject	
	{
	public:
		FNeuralProfileStruct Settings; // 0x28(0x48)
		FGuid Guid; // 0x70(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NeuralProfile");
			return ret;
		}
	};


	// Class Engine.SpecularProfile
	// Inherited from UObject
	// Size: 0x430 (0x458 - 0x28)
	class USpecularProfile : public UObject	
	{
	public:
		FSpecularProfileStruct Settings; // 0x28(0x420)
		FGuid Guid; // 0x448(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpecularProfile");
			return ret;
		}
	};


	// Class Engine.SubsurfaceProfile
	// Inherited from UObject
	// Size: 0xA0 (0xC8 - 0x28)
	class USubsurfaceProfile : public UObject	
	{
	public:
		FSubsurfaceProfileStruct Settings; // 0x28(0x9C)
		unsigned char UnknownData00_7[0x4]; // 0xC4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SubsurfaceProfile");
			return ret;
		}
	};


	// Class Engine.ReplayNetConnection
	// Inherited from UNetConnection -> UPlayer -> UObject
	// Size: 0xA80 (0x2890 - 0x1E10)
	class UReplayNetConnection : public UNetConnection	
	{
	public:
		unsigned char UnknownData00_1[0xA80]; // 0x1E10(0xA80) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplayNetConnection");
			return ret;
		}
	};


	// Class Engine.GameInstanceSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UGameInstanceSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.GameInstanceSubsystem");
			return ret;
		}
	};


	// Class Engine.ReplaySubsystem
	// Inherited from UGameInstanceSubsystem -> USubsystem -> UObject
	// Size: 0x10 (0x40 - 0x30)
	class UReplaySubsystem : public UGameInstanceSubsystem	
	{
	public:
		bool bLoadDefaultMapOnStop; // 0x30(0x1)
		unsigned char UnknownData00_7[0xF]; // 0x31(0xF) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReplaySubsystem");
			return ret;
		}

		void RequestCheckpoint(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8055B8(relative to base address)
		bool IsRecording(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C805594(relative to base address)
		bool IsPlaying(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C805570(relative to base address)
		float GetReplayCurrentTime(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C805548(relative to base address)
		FString GetActiveReplayName(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C805508(relative to base address)
	};


	// Class Engine.ReverbEffect
	// Inherited from UObject
	// Size: 0x38 (0x60 - 0x28)
	class UReverbEffect : public UObject	
	{
	public:
		bool bBypassEarlyReflections; // 0x28(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float ReflectionsDelay; // 0x2C(0x4)
		float GainHF; // 0x30(0x4)
		float ReflectionsGain; // 0x34(0x4)
		bool bBypassLateReflections; // 0x38(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x39(0x3) UNKNOWN PROPERTY
		float LateDelay; // 0x3C(0x4)
		float DecayTime; // 0x40(0x4)
		float Density; // 0x44(0x4)
		float Diffusion; // 0x48(0x4)
		float AirAbsorptionGainHF; // 0x4C(0x4)
		float DecayHFRatio; // 0x50(0x4)
		float LateGain; // 0x54(0x4)
		float Gain; // 0x58(0x4)
		float RoomRolloffFactor; // 0x5C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ReverbEffect");
			return ret;
		}
	};


	// Class Engine.RuntimeOptionsBase
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class URuntimeOptionsBase : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeOptionsBase");
			return ret;
		}
	};


	// Class Engine.SCS_Node
	// Inherited from UObject
	// Size: 0x98 (0xC0 - 0x28)
	class USCS_Node : public UObject	
	{
	public:
		UClass* ComponentClass; // 0x28(0x8)
		UActorComponent* ComponentTemplate; // 0x30(0x8)
		FBlueprintCookedComponentInstancingData CookedComponentInstancingData; // 0x38(0x40)
		FName AttachToName; // 0x78(0x4)
		FName ParentComponentOrVariableName; // 0x7C(0x4)
		FName ParentComponentOwnerClassName; // 0x80(0x4)
		bool bIsParentComponentNative; // 0x84(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x85(0x3) UNKNOWN PROPERTY
		TArray<USCS_Node*> ChildNodes; // 0x88(0x10)
		TArray<FBPVariableMetaDataEntry> MetaDataArray; // 0x98(0x10)
		FGuid VariableGuid; // 0xA8(0x10)
		FName InternalVariableName; // 0xB8(0x4)
		unsigned char UnknownData01_7[0x4]; // 0xBC(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SCS_Node");
			return ret;
		}
	};


	// Class Engine.SimpleConstructionScript
	// Inherited from UObject
	// Size: 0x88 (0xB0 - 0x28)
	class USimpleConstructionScript : public UObject	
	{
	public:
		TArray<USCS_Node*> RootNodes; // 0x28(0x10)
		TArray<USCS_Node*> AllNodes; // 0x38(0x10)
		USCS_Node* DefaultSceneRootNode; // 0x48(0x8)
		unsigned char UnknownData00_7[0x60]; // 0x50(0x60) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SimpleConstructionScript");
			return ret;
		}
	};


	// Class Engine.SkinnedAsset
	// Inherited from UStreamableRenderAsset -> UObject
	// Size: 0x8 (0xD0 - 0xC8)
	class USkinnedAsset : public UStreamableRenderAsset	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0xC8(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkinnedAsset");
			return ret;
		}

		USkeletalMeshSocket FindSocketInfo(FName InSocketName, FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // Flags: RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C870304(relative to base address)
		USkeletalMeshSocket FindSocket(FName InSocketName); // Flags: RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C870270(relative to base address)
	};


	// Class Engine.SkeletalMesh
	// Inherited from USkinnedAsset -> UStreamableRenderAsset -> UObject
	// Size: 0x458 (0x528 - 0xD0)
	class USkeletalMesh : public USkinnedAsset	
	{
	public:
		unsigned char UnknownData00_3[0x20]; // 0xD0(0x20) UNKNOWN PROPERTY
		USkeleton* Skeleton; // 0xF0(0x8)
		FBoxSphereBounds ImportedBounds; // 0xF8(0x38)
		FBoxSphereBounds ExtendedBounds; // 0x130(0x38)
		FVector PositiveBoundsExtension; // 0x168(0x18)
		FVector NegativeBoundsExtension; // 0x180(0x18)
		TArray<FSkeletalMaterial> Materials; // 0x198(0x10)
		FMeshNaniteSettings NaniteSettings; // 0x1A8(0x40)
		TArray<FSkeletalMeshLODInfo> LODInfo; // 0x1E8(0x10)
		unsigned char UnknownData01_6[0x50]; // 0x1F8(0x50) UNKNOWN PROPERTY
		FPerQualityLevelInt MinQualityLevelLOD; // 0x248(0x68)
		FPerPlatformInt MinLOD; // 0x2B0(0x4)
		FPerPlatformBool DisableBelowMinLodStripping; // 0x2B4(0x1)
		bool bUseFullPrecisionUVs : 1; // 0x2B5:0(0x1)
		bool bUseHighPrecisionTangentBasis : 1; // 0x2B5:1(0x1)
		bool bHasVertexColors : 1; // 0x2B5:2(0x1)
		unsigned char UnknownBit02 : 1; // 0x2B5:3(0x1) UNKNOWN PROPERTY
		bool bEnablePerPolyCollision : 1; // 0x2B5:4(0x1)
		unsigned char UnknownData03_5[0x2]; // 0x2B6(0x2) UNKNOWN PROPERTY
		UBodySetup* BodySetup; // 0x2B8(0x8)
		UPhysicsAsset* PhysicsAsset; // 0x2C0(0x8)
		UPhysicsAsset* ShadowPhysicsAsset; // 0x2C8(0x8)
		TArray<UNodeMappingContainer*> NodeMappingData; // 0x2D0(0x10)
		bool bSupportRayTracing : 1; // 0x2E0:0(0x1)
		unsigned char UnknownData04_5[0x3]; // 0x2E1(0x3) UNKNOWN PROPERTY
		int32_t RayTracingMinLOD; // 0x2E4(0x4)
		EClothLODBiasMode ClothLODBiasMode; // 0x2E8(0x1)
		unsigned char UnknownData05_6[0x7]; // 0x2E9(0x7) UNKNOWN PROPERTY
		TArray<UMorphTarget*> MorphTargets; // 0x2F0(0x10)
		unsigned char UnknownData06_6[0x180]; // 0x300(0x180) UNKNOWN PROPERTY
		UClass* PostProcessAnimBlueprint; // 0x480(0x8)
		int32_t PostProcessAnimBPLODThreshold; // 0x488(0x4)
		unsigned char UnknownData07_6[0x4]; // 0x48C(0x4) UNKNOWN PROPERTY
		TArray<UClothingAssetBase*> MeshClothingAssets; // 0x490(0x10)
		FSkeletalMeshSamplingInfo SamplingInfo; // 0x4A0(0x30)
		TArray<UAssetUserData*> AssetUserData; // 0x4D0(0x10)
		TArray<USkeletalMeshSocket*> Sockets; // 0x4E0(0x10)
		unsigned char UnknownData08_6[0x10]; // 0x4F0(0x10) UNKNOWN PROPERTY
		TArray<FSkinWeightProfileInfo> SkinWeightProfiles; // 0x500(0x10)
		UMeshDeformer* DefaultMeshDeformer; // 0x510(0x8)
		UMaterialInterface* OverlayMaterial; // 0x518(0x8)
		float OverlayMaterialMaxDrawDistance; // 0x520(0x4)
		unsigned char UnknownData09_7[0x4]; // 0x524(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMesh");
			return ret;
		}

		void SetSkeleton(USkeleton* InSkeleton); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C817FF8(relative to base address)
		void SetOverlayMaterialMaxDrawDistance(float InMaxDrawDistance); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C817F78(relative to base address)
		void SetOverlayMaterial(UMaterialInterface* NewOverlayMaterial); // Flags: Final|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C817EEC(relative to base address)
		void SetMorphTargets(TArray<UMorphTarget*>& InMorphTargets); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C817DF4(relative to base address)
		void SetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C817C6C(relative to base address)
		void SetMeshClothingAssets(TArray<UClothingAssetBase*>& InMeshClothingAssets); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C817B88(relative to base address)
		void SetMaterials(TArray<FSkeletalMaterial>& InMaterials); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C817AE8(relative to base address)
		void SetLODSettings(USkeletalMeshLODSettings* InLODSettings); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C088608(relative to base address)
		void SetDefaultAnimatingRig(TWeakObjectPtr<UObject*> InAnimatingRig); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8179F0(relative to base address)
		int32_t NumSockets(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8179CC(relative to base address)
		TArray K2_GetAllMorphTargetNames(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817990(relative to base address)
		bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817888(relative to base address)
		USkeletalMeshSocket GetSocketByIndex(int32_t Index); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8177FC(relative to base address)
		USkeleton GetSkeleton(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8177D4(relative to base address)
		UPhysicsAsset GetShadowPhysicsAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8177AC(relative to base address)
		UPhysicsAsset GetPhysicsAsset(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817784(relative to base address)
		float GetOverlayMaterialMaxDrawDistance(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817758(relative to base address)
		UMaterialInterface GetOverlayMaterial(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817730(relative to base address)
		TArray GetNodeMappingData(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8176B8(relative to base address)
		UNodeMappingContainer GetNodeMappingContainer(UBlueprint* SourceAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817628(relative to base address)
		TArray GetMorphTargetsPtrConv(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817574(relative to base address)
		void GetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t& Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817438(relative to base address)
		TArray GetMeshClothingAssets(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8173C0(relative to base address)
		TArray GetMaterials(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817390(relative to base address)
		USkeletalMeshLODSettings GetLODSettings(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C6345FC(relative to base address)
		FBoxSphereBounds GetImportedBounds(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817350(relative to base address)
		UMeshDeformer GetDefaultMeshDeformer(); // Flags: Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817328(relative to base address)
		TWeakObjectPtr GetDefaultAnimatingRig(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8172C8(relative to base address)
		FBoxSphereBounds GetBounds(); // Flags: RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C81727C(relative to base address)
		USkeletalMeshSocket FindSocketAndIndex(FName InSocketName, int32_t& OutIndex); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8170CC(relative to base address)
	};


	// Class Engine.SkeletalMeshEditorData
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class USkeletalMeshEditorData : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshEditorData");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshLODSettings
	// Inherited from UDataAsset -> UObject
	// Size: 0x88 (0xB8 - 0x30)
	class USkeletalMeshLODSettings : public UDataAsset	
	{
	public:
		FPerQualityLevelInt MinQualityLevelLOD; // 0x30(0x68)
		FPerPlatformInt MinLOD; // 0x98(0x4)
		FPerPlatformBool DisableBelowMinLodStripping; // 0x9C(0x1)
		bool bOverrideLODStreamingSettings; // 0x9D(0x1)
		FPerPlatformBool bSupportLODStreaming; // 0x9E(0x1)
		unsigned char UnknownData00_6[0x1]; // 0x9F(0x1) UNKNOWN PROPERTY
		FPerPlatformInt MaxNumStreamedLODs; // 0xA0(0x4)
		FPerPlatformInt MaxNumOptionalLODs; // 0xA4(0x4)
		TArray<FSkeletalMeshLODGroupSettings> LODGroups; // 0xA8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshLODSettings");
			return ret;
		}
	};


	// Class Engine.SkeletalMeshSimplificationSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class USkeletalMeshSimplificationSettings : public UDeveloperSettings	
	{
	public:
		FName SkeletalMeshReductionModuleName; // 0x30(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SkeletalMeshSimplificationSettings");
			return ret;
		}
	};


	// Class Engine.ButtonStyleAsset
	// Inherited from UObject
	// Size: 0x378 (0x3A0 - 0x28)
	class UButtonStyleAsset : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FButtonStyle ButtonStyle; // 0x30(0x370)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ButtonStyleAsset");
			return ret;
		}
	};


	// Class Engine.CheckBoxStyleAsset
	// Inherited from UObject
	// Size: 0x958 (0x980 - 0x28)
	class UCheckBoxStyleAsset : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FCheckBoxStyle CheckBoxStyle; // 0x30(0x950)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.CheckBoxStyleAsset");
			return ret;
		}
	};


	// Class Engine.SlateBrushAsset
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class USlateBrushAsset : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FSlateBrush Brush; // 0x30(0xB0)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SlateBrushAsset");
			return ret;
		}
	};


	// Class Engine.SlateTextureAtlasInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USlateTextureAtlasInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SlateTextureAtlasInterface");
			return ret;
		}
	};


	// Class Engine.SoundClass
	// Inherited from UObject
	// Size: 0x1C0 (0x1E8 - 0x28)
	class USoundClass : public UObject	
	{
	public:
		FSoundClassProperties Properties; // 0x28(0x198)
		TArray<USoundClass*> ChildClasses; // 0x1C0(0x10)
		TArray<FPassiveSoundMixModifier> PassiveSoundMixModifiers; // 0x1D0(0x10)
		USoundClass* ParentClass; // 0x1E0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundClass");
			return ret;
		}
	};


	// Class Engine.SoundConcurrency
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class USoundConcurrency : public UObject	
	{
	public:
		FSoundConcurrencySettings Concurrency; // 0x28(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundConcurrency");
			return ret;
		}
	};


	// Class Engine.SoundCue
	// Inherited from USoundBase -> UObject
	// Size: 0x3F8 (0x560 - 0x168)
	class USoundCue : public USoundBase	
	{
	public:
		USoundNode* FirstNode; // 0x168(0x8)
		float VolumeMultiplier; // 0x170(0x4)
		float PitchMultiplier; // 0x174(0x4)
		FSoundAttenuationSettings AttenuationOverrides; // 0x178(0x3D0)
		float SubtitlePriority; // 0x548(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x54C(0x4) UNKNOWN PROPERTY
		bool bPrimeOnLoad : 1; // 0x550:0(0x1)
		bool bOverrideAttenuation : 1; // 0x550:1(0x1)
		bool bExcludeFromRandomNodeBranchCulling : 1; // 0x550:2(0x1)
		bool bHasPlayWhenSilent : 1; // 0x550:3(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x551(0x3) UNKNOWN PROPERTY
		int32_t CookedQualityIndex; // 0x554(0x4)
		unsigned char UnknownData02_7[0x8]; // 0x558(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundCue");
			return ret;
		}
	};


	// Class Engine.SoundMix
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class USoundMix : public UObject	
	{
	public:
		bool bApplyEQ : 1; // 0x28:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float EQPriority; // 0x2C(0x4)
		FAudioEQEffect EQSettings; // 0x30(0x40)
		TArray<FSoundClassAdjuster> SoundClassEffects; // 0x70(0x10)
		float InitialDelay; // 0x80(0x4)
		float FadeInTime; // 0x84(0x4)
		float duration; // 0x88(0x4)
		float FadeOutTime; // 0x8C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundMix");
			return ret;
		}
	};


	// Class Engine.SoundNodeAssetReferencer
	// Inherited from USoundNode -> UObject
	// Size: 0x0 (0x48 - 0x48)
	class USoundNodeAssetReferencer : public USoundNode	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeAssetReferencer");
			return ret;
		}
	};


	// Class Engine.SoundNodeAttenuation
	// Inherited from USoundNode -> UObject
	// Size: 0x3E0 (0x428 - 0x48)
	class USoundNodeAttenuation : public USoundNode	
	{
	public:
		USoundAttenuation* AttenuationSettings; // 0x48(0x8)
		FSoundAttenuationSettings AttenuationOverrides; // 0x50(0x3D0)
		bool bOverrideAttenuation : 1; // 0x420:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x421(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeAttenuation");
			return ret;
		}
	};


	// Class Engine.SoundNodeBranch
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeBranch : public USoundNode	
	{
	public:
		FName BoolParameterName; // 0x48(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeBranch");
			return ret;
		}
	};


	// Class Engine.SoundNodeConcatenator
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeConcatenator : public USoundNode	
	{
	public:
		TArray<float> InputVolume; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeConcatenator");
			return ret;
		}
	};


	// Class Engine.SoundNodeDelay
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeDelay : public USoundNode	
	{
	public:
		float DelayMin; // 0x48(0x4)
		float DelayMax; // 0x4C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDelay");
			return ret;
		}
	};


	// Class Engine.SoundNodeDialoguePlayer
	// Inherited from USoundNode -> UObject
	// Size: 0x28 (0x70 - 0x48)
	class USoundNodeDialoguePlayer : public USoundNode	
	{
	public:
		FDialogueWaveParameter DialogueWaveParameter; // 0x48(0x20)
		bool bLooping : 1; // 0x68:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x69(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDialoguePlayer");
			return ret;
		}
	};


	// Class Engine.SoundNodeDistanceCrossFade
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeDistanceCrossFade : public USoundNode	
	{
	public:
		TArray<FDistanceDatum> CrossFadeInput; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDistanceCrossFade");
			return ret;
		}
	};


	// Class Engine.SoundNodeDoppler
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeDoppler : public USoundNode	
	{
	public:
		float DopplerIntensity; // 0x48(0x4)
		bool bUseSmoothing; // 0x4C(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY
		float SmoothingInterpSpeed; // 0x50(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x54(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeDoppler");
			return ret;
		}
	};


	// Class Engine.SoundNodeEnveloper
	// Inherited from USoundNode -> UObject
	// Size: 0x148 (0x190 - 0x48)
	class USoundNodeEnveloper : public USoundNode	
	{
	public:
		float LoopStart; // 0x48(0x4)
		float LoopEnd; // 0x4C(0x4)
		float DurationAfterLoop; // 0x50(0x4)
		int32_t LoopCount; // 0x54(0x4)
		bool bLoopIndefinitely : 1; // 0x58:0(0x1)
		bool bLoop : 1; // 0x58:1(0x1)
		unsigned char UnknownData00_5[0x7]; // 0x59(0x7) UNKNOWN PROPERTY
		UDistributionFloatConstantCurve* VolumeInterpCurve; // 0x60(0x8)
		UDistributionFloatConstantCurve* PitchInterpCurve; // 0x68(0x8)
		FRuntimeFloatCurve VolumeCurve; // 0x70(0x88)
		FRuntimeFloatCurve PitchCurve; // 0xF8(0x88)
		float PitchMin; // 0x180(0x4)
		float PitchMax; // 0x184(0x4)
		float VolumeMin; // 0x188(0x4)
		float VolumeMax; // 0x18C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeEnveloper");
			return ret;
		}
	};


	// Class Engine.SoundNodeGroupControl
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeGroupControl : public USoundNode	
	{
	public:
		TArray<int32_t> GroupSizes; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeGroupControl");
			return ret;
		}
	};


	// Class Engine.SoundNodeLooping
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeLooping : public USoundNode	
	{
	public:
		int32_t LoopCount; // 0x48(0x4)
		bool bLoopIndefinitely : 1; // 0x4C:0(0x1)
		unsigned char UnknownData00_7[0x3]; // 0x4D(0x3) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeLooping");
			return ret;
		}
	};


	// Class Engine.SoundNodeMature
	// Inherited from USoundNode -> UObject
	// Size: 0x0 (0x48 - 0x48)
	class USoundNodeMature : public USoundNode	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeMature");
			return ret;
		}
	};


	// Class Engine.SoundNodeMixer
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeMixer : public USoundNode	
	{
	public:
		TArray<float> InputVolume; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeMixer");
			return ret;
		}
	};


	// Class Engine.SoundNodeModulator
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeModulator : public USoundNode	
	{
	public:
		float PitchMin; // 0x48(0x4)
		float PitchMax; // 0x4C(0x4)
		float VolumeMin; // 0x50(0x4)
		float VolumeMax; // 0x54(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeModulator");
			return ret;
		}
	};


	// Class Engine.SoundNodeOscillator
	// Inherited from USoundNode -> UObject
	// Size: 0x28 (0x70 - 0x48)
	class USoundNodeOscillator : public USoundNode	
	{
	public:
		bool bModulateVolume : 1; // 0x48:0(0x1)
		bool bModulatePitch : 1; // 0x48:1(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x49(0x3) UNKNOWN PROPERTY
		float AmplitudeMin; // 0x4C(0x4)
		float AmplitudeMax; // 0x50(0x4)
		float FrequencyMin; // 0x54(0x4)
		float FrequencyMax; // 0x58(0x4)
		float OffsetMin; // 0x5C(0x4)
		float OffsetMax; // 0x60(0x4)
		float CenterMin; // 0x64(0x4)
		float CenterMax; // 0x68(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x6C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeOscillator");
			return ret;
		}
	};


	// Class Engine.SoundNodeParamCrossFade
	// Inherited from USoundNodeDistanceCrossFade -> USoundNode -> UObject
	// Size: 0x8 (0x60 - 0x58)
	class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade	
	{
	public:
		FName ParamName; // 0x58(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x5C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeParamCrossFade");
			return ret;
		}
	};


	// Class Engine.SoundNodeQualityLevel
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeQualityLevel : public USoundNode	
	{
	public:
		int32_t CookedQualityLevelIndex; // 0x48(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeQualityLevel");
			return ret;
		}
	};


	// Class Engine.SoundNodeRandom
	// Inherited from USoundNode -> UObject
	// Size: 0x30 (0x78 - 0x48)
	class USoundNodeRandom : public USoundNode	
	{
	public:
		TArray<float> Weights; // 0x48(0x10)
		TArray<bool> HasBeenUsed; // 0x58(0x10)
		int32_t NumRandomUsed; // 0x68(0x4)
		int32_t PreselectAtLevelLoad; // 0x6C(0x4)
		bool bShouldExcludeFromBranchCulling : 1; // 0x70:0(0x1)
		bool bSoundCueExcludedFromBranchCulling : 1; // 0x70:1(0x1)
		bool bRandomizeWithoutReplacement : 1; // 0x70:2(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeRandom");
			return ret;
		}
	};


	// Class Engine.SoundNodeSoundClass
	// Inherited from USoundNode -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class USoundNodeSoundClass : public USoundNode	
	{
	public:
		USoundClass* SoundClassOverride; // 0x48(0x8)
		unsigned char UnknownData00_7[0x8]; // 0x50(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeSoundClass");
			return ret;
		}
	};


	// Class Engine.SoundNodeSwitch
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeSwitch : public USoundNode	
	{
	public:
		FName IntParameterName; // 0x48(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeSwitch");
			return ret;
		}
	};


	// Class Engine.SoundNodeWaveParam
	// Inherited from USoundNode -> UObject
	// Size: 0x8 (0x50 - 0x48)
	class USoundNodeWaveParam : public USoundNode	
	{
	public:
		FName WaveParameterName; // 0x48(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeWaveParam");
			return ret;
		}
	};


	// Class Engine.SoundNodeWavePlayer
	// Inherited from USoundNodeAssetReferencer -> USoundNode -> UObject
	// Size: 0x30 (0x78 - 0x48)
	class USoundNodeWavePlayer : public USoundNodeAssetReferencer	
	{
	public:
		TWeakObjectPtr<USoundWave*> SoundWaveAssetPtr; // 0x48(0x20)
		USoundWave* SoundWave; // 0x68(0x8)
		unsigned char UnknownBit00 : 1; // 0x70:0(0x1) UNKNOWN PROPERTY
		bool bLooping : 1; // 0x70:1(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x71(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundNodeWavePlayer");
			return ret;
		}
	};


	// Class Engine.SoundSourceBus
	// Inherited from USoundWave -> USoundBase -> UObject
	// Size: 0x18 (0x408 - 0x3F0)
	class USoundSourceBus : public USoundWave	
	{
	public:
		ESourceBusChannels SourceBusChannels; // 0x3F0(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x3F1(0x3) UNKNOWN PROPERTY
		float SourceBusDuration; // 0x3F4(0x4)
		UAudioBus* AudioBus; // 0x3F8(0x8)
		bool bAutoDeactivateWhenSilent : 1; // 0x400:0(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x401(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSourceBus");
			return ret;
		}
	};


	// Class Engine.SoundSubmixBase
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class USoundSubmixBase : public UObject	
	{
	public:
		bool bAutoDisable; // 0x28(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x29(0x3) UNKNOWN PROPERTY
		float AutoDisableTime; // 0x2C(0x4)
		TArray<USoundSubmixBase*> ChildSubmixes; // 0x30(0x10)
		TMap<uint32_t, FDynamicChildSubmix> DynamicChildSubmixes; // 0x40(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmixBase");
			return ret;
		}

		USoundSubmixBase FindDynamicAncestor(); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C5A3348(relative to base address)
		bool DynamicDisconnect(UObject* WorldContextObject); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8701DC(relative to base address)
		bool DynamicConnect(UObject* WorldContextObject, USoundSubmixBase* InParent); // Flags: RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870110(relative to base address)
	};


	// Class Engine.SoundSubmixWithParentBase
	// Inherited from USoundSubmixBase -> UObject
	// Size: 0x60 (0xF0 - 0x90)
	class USoundSubmixWithParentBase : public USoundSubmixBase	
	{
	public:
		USoundSubmixBase* ParentSubmix; // 0x90(0x8)
		TMap<uint32_t, USoundSubmixBase*> DynamicParentSubmix; // 0x98(0x50)
		bool bIsDynamic : 1; // 0xE8:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0xE9(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmixWithParentBase");
			return ret;
		}
	};


	// Class Engine.SoundSubmix
	// Inherited from USoundSubmixWithParentBase -> USoundSubmixBase -> UObject
	// Size: 0x158 (0x248 - 0xF0)
	class USoundSubmix : public USoundSubmixWithParentBase	
	{
	public:
		bool bMuteWhenBackgrounded : 1; // 0xF0:0(0x1)
		unsigned char UnknownData00_5[0x7]; // 0xF1(0x7) UNKNOWN PROPERTY
		TArray<USoundEffectSubmixPreset*> SubmixEffectChain; // 0xF8(0x10)
		USoundfieldEncodingSettingsBase* AmbisonicsPluginSettings; // 0x108(0x8)
		int32_t EnvelopeFollowerAttackTime; // 0x110(0x4)
		int32_t EnvelopeFollowerReleaseTime; // 0x114(0x4)
		FSoundModulationDestinationSettings OutputVolumeModulation; // 0x118(0x58)
		FSoundModulationDestinationSettings WetLevelModulation; // 0x170(0x58)
		FSoundModulationDestinationSettings DryLevelModulation; // 0x1C8(0x58)
		bool bSendToAudioLink : 1; // 0x220:0(0x1)
		unsigned char UnknownData01_5[0x7]; // 0x221(0x7) UNKNOWN PROPERTY
		UAudioLinkSettingsAbstract* AudioLinkSettings; // 0x228(0x8)
		FMulticastInlineDelegate OnSubmixRecordedFileDone; // 0x230(0x10)
		unsigned char UnknownData02_7[0x8]; // 0x240(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundSubmix");
			return ret;
		}

		void StopSpectralAnalysis(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8711BC(relative to base address)
		void StopRecordingOutput(UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, USoundWave* ExistingSoundWaveToOverwrite); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870FD0(relative to base address)
		void StopEnvelopeFollowing(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870F50(relative to base address)
		void StartSpectralAnalysis(UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870D8C(relative to base address)
		void StartRecordingOutput(UObject* WorldContextObject, float ExpectedDuration); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870CC8(relative to base address)
		void StartEnvelopeFollowing(UObject* WorldContextObject); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870C48(relative to base address)
		void SetWetVolumeModulation(FSoundModulationDestinationSettings& InVolMod); // Flags: Final|Native|Protected|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C870B64(relative to base address)
		void SetSubmixWetLevel(UObject* WorldContextObject, float InWetLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870AA0(relative to base address)
		void SetSubmixOutputVolume(UObject* WorldContextObject, float InOutputVolume); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8709DC(relative to base address)
		void SetSubmixDryLevel(UObject* WorldContextObject, float InDryLevel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C870918(relative to base address)
		void SetOutputVolumeModulation(FSoundModulationDestinationSettings& InVolMod); // Flags: Final|Native|Protected|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C870834(relative to base address)
		void SetDryVolumeModulation(FSoundModulationDestinationSettings& InVolMod); // Flags: Final|Native|Protected|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C870750(relative to base address)
		void RemoveSpectralAnalysisDelegate(UObject* WorldContextObject, FDelegateProperty& OnSubmixSpectralAnalysisBP); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C870668(relative to base address)
		void RemoveEnvelopeFollowerDelegate(UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C870580(relative to base address)
		void AddSpectralAnalysisDelegate(UObject* WorldContextObject, TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, FDelegateProperty& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C86FB0C(relative to base address)
		void AddEnvelopeFollowerDelegate(UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C86FA24(relative to base address)
	};


	// Class Engine.SoundfieldSubmix
	// Inherited from USoundSubmixWithParentBase -> USoundSubmixBase -> UObject
	// Size: 0x28 (0x118 - 0xF0)
	class USoundfieldSubmix : public USoundSubmixWithParentBase	
	{
	public:
		FName SoundfieldEncodingFormat; // 0xF0(0x4)
		unsigned char UnknownData00_6[0x4]; // 0xF4(0x4) UNKNOWN PROPERTY
		USoundfieldEncodingSettingsBase* EncodingSettings; // 0xF8(0x8)
		TArray<USoundfieldEffectBase*> SoundfieldEffectChain; // 0x100(0x10)
		UClass* EncodingSettingsClass; // 0x110(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundfieldSubmix");
			return ret;
		}
	};


	// Class Engine.EndpointSubmix
	// Inherited from USoundSubmixBase -> UObject
	// Size: 0x18 (0xA8 - 0x90)
	class UEndpointSubmix : public USoundSubmixBase	
	{
	public:
		FName EndpointType; // 0x90(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x94(0x4) UNKNOWN PROPERTY
		UClass* EndpointSettingsClass; // 0x98(0x8)
		UAudioEndpointSettingsBase* EndpointSettings; // 0xA0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.EndpointSubmix");
			return ret;
		}
	};


	// Class Engine.SoundfieldEndpointSubmix
	// Inherited from USoundSubmixBase -> UObject
	// Size: 0x38 (0xC8 - 0x90)
	class USoundfieldEndpointSubmix : public USoundSubmixBase	
	{
	public:
		FName SoundfieldEndpointType; // 0x90(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x94(0x4) UNKNOWN PROPERTY
		UClass* EndpointSettingsClass; // 0x98(0x8)
		USoundfieldEndpointSettingsBase* EndpointSettings; // 0xA0(0x8)
		UClass* EncodingSettingsClass; // 0xA8(0x8)
		USoundfieldEncodingSettingsBase* EncodingSettings; // 0xB0(0x8)
		TArray<USoundfieldEffectBase*> SoundfieldEffectChain; // 0xB8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SoundfieldEndpointSubmix");
			return ret;
		}
	};


	// Class Engine.SpectatorPawn
	// Inherited from ADefaultPawn -> APawn -> AActor -> UObject
	// Size: 0x0 (0x338 - 0x338)
	class ASpectatorPawn : public ADefaultPawn	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpectatorPawn");
			return ret;
		}
	};


	// Class Engine.SpectatorPawnMovement
	// Inherited from UFloatingPawnMovement -> UPawnMovementComponent -> UNavMovementComponent -> UMovementComponent -> UActorComponent -> UObject
	// Size: 0x8 (0x188 - 0x180)
	class USpectatorPawnMovement : public UFloatingPawnMovement	
	{
	public:
		bool bIgnoreTimeDilation : 1; // 0x180:0(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x181(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpectatorPawnMovement");
			return ret;
		}
	};


	// Class Engine.SplineMeshActor
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ASplineMeshActor : public AActor	
	{
	public:
		USplineMeshComponent* SplineMeshComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SplineMeshActor");
			return ret;
		}
	};


	// Class Engine.StaticMesh
	// Inherited from UStreamableRenderAsset -> UObject
	// Size: 0x178 (0x240 - 0xC8)
	class UStaticMesh : public UStreamableRenderAsset	
	{
	public:
		unsigned char UnknownData00_3[0x20]; // 0xC8(0x20) UNKNOWN PROPERTY
		FPerQualityLevelInt MinQualityLevelLOD; // 0xE8(0x68)
		FPerPlatformInt MinLOD; // 0x150(0x4)
		int32_t ElementToIgnoreForTexFactor; // 0x154(0x4)
		TArray<FStaticMaterial> StaticMaterials; // 0x158(0x10)
		float LightmapUVDensity; // 0x168(0x4)
		int32_t LightMapResolution; // 0x16C(0x4)
		int32_t LightMapCoordinateIndex; // 0x170(0x4)
		float DistanceFieldSelfShadowBias; // 0x174(0x4)
		UBodySetup* BodySetup; // 0x178(0x8)
		int32_t LODForCollision; // 0x180(0x4)
		bool bGenerateMeshDistanceField : 1; // 0x184:0(0x1)
		bool bStripComplexCollisionForConsole : 1; // 0x184:1(0x1)
		bool bHasNavigationData : 1; // 0x184:2(0x1)
		bool bSupportUniformlyDistributedSampling : 1; // 0x184:3(0x1)
		bool bSupportPhysicalMaterialMasks : 1; // 0x184:4(0x1)
		bool bSupportRayTracing : 1; // 0x184:5(0x1)
		bool bDoFastBuild : 1; // 0x184:6(0x1)
		bool bIsBuiltAtRuntime : 1; // 0x184:7(0x1)
		unsigned char UnknownBit01 : 1; // 0x185:0(0x1) UNKNOWN PROPERTY
		bool bAllowCPUAccess : 1; // 0x185:1(0x1)
		bool bSupportGpuUniformlyDistributedSampling : 1; // 0x185:2(0x1)
		unsigned char UnknownData02_5[0x1A]; // 0x186(0x1A) UNKNOWN PROPERTY
		TArray<UStaticMeshSocket*> Sockets; // 0x1A0(0x10)
		unsigned char UnknownData03_6[0x10]; // 0x1B0(0x10) UNKNOWN PROPERTY
		FVector PositiveBoundsExtension; // 0x1C0(0x18)
		FVector NegativeBoundsExtension; // 0x1D8(0x18)
		FBoxSphereBounds ExtendedBounds; // 0x1F0(0x38)
		TArray<UAssetUserData*> AssetUserData; // 0x228(0x10)
		UNavCollisionBase* NavCollision; // 0x238(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMesh");
			return ret;
		}

		void SetStaticMaterials(TArray<FStaticMaterial>& InStaticMaterials); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C889780(relative to base address)
		void SetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C817C6C(relative to base address)
		void SetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C88917C(relative to base address)
		void SetMinimumLODForPlatform(FName& PlatformName, int32_t InMinLOD); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C889614(relative to base address)
		void RemoveSocket(UStaticMeshSocket* Socket); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8894EC(relative to base address)
		UStaticMeshDescription GetStaticMeshDescription(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C889480(relative to base address)
		TArray GetStaticMaterials(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7490CBCD4(relative to base address)
		TArray GetSocketsByTag(FString InSocketTag); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8893A4(relative to base address)
		int32_t GetNumTriangles(int32_t LODIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8892F8(relative to base address)
		int32_t GetNumSections(int32_t InLOD); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C88926C(relative to base address)
		int32_t GetNumLODs(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C88924C(relative to base address)
		void GetMinLODForQualityLevels(TMap<EPerQualityLevels, int32_t>& QualityLevelMinimumLODs, int32_t& Default); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C817438(relative to base address)
		void GetMinimumLODForQualityLevels(TMap<FName, int32_t>& QualityLevelMinimumLODs); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C88917C(relative to base address)
		int32_t GetMinimumLODForQualityLevel(FName& QualityLevel); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C889104(relative to base address)
		void GetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C88917C(relative to base address)
		int32_t GetMinimumLODForPlatform(FName& PlatformName); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C889104(relative to base address)
		int32_t GetMaterialIndex(FName MaterialSlotName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C889078(relative to base address)
		UMaterialInterface GetMaterial(int32_t MaterialIndex); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C888FEC(relative to base address)
		FBoxSphereBounds GetBounds(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C888FAC(relative to base address)
		FBox GetBoundingBox(); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C888F68(relative to base address)
		UStaticMeshSocket FindSocket(FName InSocketName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C888EA4(relative to base address)
		UStaticMeshDescription CreateStaticMeshDescription(UObject* Outer); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C888E10(relative to base address)
		void BuildFromStaticMeshDescriptions(TArray<UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision, bool bFastBuild); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C888BD0(relative to base address)
		void AddSocket(UStaticMeshSocket* Socket); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C888B50(relative to base address)
		FName AddMaterial(UMaterialInterface* Material); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C888978(relative to base address)
	};


	// Class Engine.StaticMeshDescriptionBulkData
	// Inherited from UMeshDescriptionBaseBulkData -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UStaticMeshDescriptionBulkData : public UMeshDescriptionBaseBulkData	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.StaticMeshDescriptionBulkData");
			return ret;
		}
	};


	// Class Engine.ActorTextureStreamingBuildDataComponent
	// Inherited from UActorComponent -> UObject
	// Size: 0x0 (0xA0 - 0xA0)
	class UActorTextureStreamingBuildDataComponent : public UActorComponent	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorTextureStreamingBuildDataComponent");
			return ret;
		}
	};


	// Class Engine.ServerStreamingLevelsVisibility
	// Inherited from AActor -> UObject
	// Size: 0x50 (0x2E0 - 0x290)
	class AServerStreamingLevelsVisibility : public AActor	
	{
	public:
		unsigned char UnknownData00_1[0x50]; // 0x290(0x50) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ServerStreamingLevelsVisibility");
			return ret;
		}
	};


	// Class Engine.AudioSubsystemCollectionRoot
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAudioSubsystemCollectionRoot : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x28(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AudioSubsystemCollectionRoot");
			return ret;
		}
	};


	// Class Engine.LocalPlayerSubsystem
	// Inherited from USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class ULocalPlayerSubsystem : public USubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LocalPlayerSubsystem");
			return ret;
		}
	};


	// Class Engine.SubsystemBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SubsystemBlueprintLibrary");
			return ret;
		}

		UWorldSubsystem GetWorldSubsystem(UObject* ContextObject, UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74860C5E4(relative to base address)
		ULocalPlayerSubsystem GetLocalPlayerSubSystemFromPlayerController(APlayerController* PlayerController, UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C53228(relative to base address)
		ULocalPlayerSubsystem GetLocalPlayerSubsystem(UObject* ContextObject, UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748C53360(relative to base address)
		UGameInstanceSubsystem GetGameInstanceSubsystem(UObject* ContextObject, UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74860C4D4(relative to base address)
		UEngineSubsystem GetEngineSubsystem(UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF748B82B78(relative to base address)
		UAudioEngineSubsystem GetAudioEngineSubsystem(UObject* ContextObject, UClass* Class); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C89A1F4(relative to base address)
	};


	// Class Engine.TargetPoint
	// Inherited from AActor -> UObject
	// Size: 0x0 (0x290 - 0x290)
	class ATargetPoint : public AActor	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TargetPoint");
			return ret;
		}
	};


	// Class Engine.AutomationTestSettings
	// Inherited from UObject
	// Size: 0x328 (0x350 - 0x28)
	class UAutomationTestSettings : public UObject	
	{
	public:
		TArray<FString> EngineTestModules; // 0x28(0x10)
		TArray<FString> EditorTestModules; // 0x38(0x10)
		FSoftObjectPath AutomationTestmap; // 0x48(0x18)
		TArray<FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps; // 0x60(0x10)
		TArray<FString> AssetsToOpen; // 0x70(0x10)
		TArray<FString> MapsToPIETest; // 0x80(0x10)
		bool bUseAllProjectMapsToPlayInPIE; // 0x90(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x91(0x7) UNKNOWN PROPERTY
		FBuildPromotionTestSettings BuildPromotionTest; // 0x98(0x1F0)
		FMaterialEditorPromotionSettings MaterialEditorPromotionTest; // 0x288(0x30)
		FParticleEditorPromotionSettings ParticleEditorPromotionTest; // 0x2B8(0x10)
		FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest; // 0x2C8(0x30)
		TArray<FString> TestLevelFolders; // 0x2F8(0x10)
		TArray<FExternalToolDefinition> ExternalTools; // 0x308(0x10)
		TArray<FEditorImportExportTestDefinition> ImportExportTestDefinitions; // 0x318(0x10)
		TArray<FLaunchOnTestSettings> LaunchOnSettings; // 0x328(0x10)
		FIntPoint DefaultScreenshotResolution; // 0x338(0x8)
		float PIETestDuration; // 0x340(0x4)
		float DefaultInteractiveFramerate; // 0x344(0x4)
		float DefaultInteractiveFramerateWaitTime; // 0x348(0x4)
		float DefaultInteractiveFramerateDuration; // 0x34C(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AutomationTestSettings");
			return ret;
		}
	};


	// Class Engine.AsyncLoadingTests_ConvertFromType_V1
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UAsyncLoadingTests_ConvertFromType_V1 : public UObject	
	{
	public:
		TWeakObjectPtr<UObject*> Reference; // 0x28(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncLoadingTests_ConvertFromType_V1");
			return ret;
		}
	};


	// Class Engine.AsyncLoadingTests_ConvertFromType_V2
	// Inherited from UObject
	// Size: 0x8 (0x30 - 0x28)
	class UAsyncLoadingTests_ConvertFromType_V2 : public UObject	
	{
	public:
		UObject* Reference; // 0x28(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.AsyncLoadingTests_ConvertFromType_V2");
			return ret;
		}
	};


	// Class Engine.TransactionDiffingTestObject
	// Inherited from UObject
	// Size: 0x68 (0x90 - 0x28)
	class UTransactionDiffingTestObject : public UObject	
	{
	public:
		TArray<FName> NamesArray; // 0x28(0x10)
		FName AdditionalName; // 0x38(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x3C(0x4) UNKNOWN PROPERTY
		TArray<UObject*> ObjectsArray; // 0x40(0x10)
		UObject* AdditionalObject; // 0x50(0x8)
		TArray<TWeakObjectPtr> SoftObjectsArray; // 0x58(0x10)
		TWeakObjectPtr<UObject*> AdditionalSoftObject; // 0x68(0x20)
		int32_t PropertyData; // 0x88(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x8C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TransactionDiffingTestObject");
			return ret;
		}
	};


	// Class Engine.Texture2DDynamic
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x18 (0x148 - 0x130)
	class UTexture2DDynamic : public UTexture	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x130(0x8) UNKNOWN PROPERTY
		TEnumAsByte<EPixelFormat> Format; // 0x138(0x1)
		unsigned char UnknownData01_7[0xF]; // 0x139(0xF) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Texture2DDynamic");
			return ret;
		}
	};


	// Class Engine.TextureCube
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x138 - 0x130)
	class UTextureCube : public UTexture	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x130(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureCube");
			return ret;
		}
	};


	// Class Engine.TextureCubeArray
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x138 - 0x130)
	class UTextureCubeArray : public UTexture	
	{
	public:
		unsigned char UnknownData00_1[0x8]; // 0x130(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureCubeArray");
			return ret;
		}
	};


	// Class Engine.TextureLightProfile
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x8 (0x158 - 0x150)
	class UTextureLightProfile : public UTexture2D	
	{
	public:
		float Brightness; // 0x150(0x4)
		float TextureMultiplier; // 0x154(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureLightProfile");
			return ret;
		}
	};


	// Class Engine.TextureRenderTarget2DArray
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x158 - 0x138)
	class UTextureRenderTarget2DArray : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		int32_t SizeY; // 0x13C(0x4)
		int32_t Slices; // 0x140(0x4)
		FLinearColor ClearColor; // 0x144(0x10)
		TEnumAsByte<EPixelFormat> OverrideFormat; // 0x154(0x1)
		bool bHDR : 1; // 0x155:0(0x1)
		bool bForceLinearGamma : 1; // 0x155:1(0x1)
		unsigned char UnknownData00_7[0x2]; // 0x156(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTarget2DArray");
			return ret;
		}
	};


	// Class Engine.TextureRenderTargetCube
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x158 - 0x138)
	class UTextureRenderTargetCube : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		FLinearColor ClearColor; // 0x13C(0x10)
		TEnumAsByte<EPixelFormat> OverrideFormat; // 0x14C(0x1)
		bool bHDR : 1; // 0x14D:0(0x1)
		bool bForceLinearGamma : 1; // 0x14D:1(0x1)
		bool bAutoGenerateMips : 1; // 0x14D:2(0x1)
		TEnumAsByte<TextureFilter> MipsSamplerFilter; // 0x14E(0x1)
		unsigned char UnknownData00_7[0x9]; // 0x14F(0x9) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTargetCube");
			return ret;
		}
	};


	// Class Engine.TextureRenderTargetVolume
	// Inherited from UTextureRenderTarget -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x20 (0x158 - 0x138)
	class UTextureRenderTargetVolume : public UTextureRenderTarget	
	{
	public:
		int32_t SizeX; // 0x138(0x4)
		int32_t SizeY; // 0x13C(0x4)
		int32_t SizeZ; // 0x140(0x4)
		FLinearColor ClearColor; // 0x144(0x10)
		TEnumAsByte<EPixelFormat> OverrideFormat; // 0x154(0x1)
		bool bHDR : 1; // 0x155:0(0x1)
		bool bForceLinearGamma : 1; // 0x155:1(0x1)
		unsigned char UnknownData00_7[0x2]; // 0x156(0x2) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TextureRenderTargetVolume");
			return ret;
		}
	};


	// Class Engine.TimelineTemplate
	// Inherited from UObject
	// Size: 0x80 (0xA8 - 0x28)
	class UTimelineTemplate : public UObject	
	{
	public:
		float TimelineLength; // 0x28(0x4)
		TEnumAsByte<ETimelineLengthMode> LengthMode; // 0x2C(0x1)
		bool bAutoPlay : 1; // 0x2D:0(0x1)
		bool bLoop : 1; // 0x2D:1(0x1)
		bool bReplicated : 1; // 0x2D:2(0x1)
		bool bIgnoreTimeDilation : 1; // 0x2D:3(0x1)
		unsigned char UnknownData00_5[0x2]; // 0x2E(0x2) UNKNOWN PROPERTY
		TArray<FTTEventTrack> EventTracks; // 0x30(0x10)
		TArray<FTTFloatTrack> FloatTracks; // 0x40(0x10)
		TArray<FTTVectorTrack> VectorTracks; // 0x50(0x10)
		TArray<FTTLinearColorTrack> LinearColorTracks; // 0x60(0x10)
		TArray<FBPVariableMetaDataEntry> MetaDataArray; // 0x70(0x10)
		FGuid TimelineGuid; // 0x80(0x10)
		TEnumAsByte<ETickingGroup> TimelineTickGroup; // 0x90(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x91(0x3) UNKNOWN PROPERTY
		FName VariableName; // 0x94(0x4)
		FName DirectionPropertyName; // 0x98(0x4)
		FName UpdateFunctionName; // 0x9C(0x4)
		FName FinishedFunctionName; // 0xA0(0x4)
		unsigned char UnknownData02_7[0x4]; // 0xA4(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TimelineTemplate");
			return ret;
		}
	};


	// Class Engine.TriggerVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class ATriggerVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TriggerVolume");
			return ret;
		}
	};


	// Class Engine.UserDefinedEnum
	// Inherited from UEnum -> UField -> UObject
	// Size: 0x50 (0xB0 - 0x60)
	class UUserDefinedEnum : public UEnum	
	{
	public:
		TMap<FName, FText> DisplayNameMap; // 0x60(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.UserDefinedEnum");
			return ret;
		}
	};


	// Class Engine.UserInterfaceSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x238 (0x268 - 0x30)
	class UUserInterfaceSettings : public UDeveloperSettings	
	{
	public:
		ERenderFocusRule RenderFocusRule; // 0x30(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x31(0x7) UNKNOWN PROPERTY
		TMap<TEnumAsByte, FHardwareCursorReference> HardwareCursors; // 0x38(0x50)
		TMap<TEnumAsByte, FSoftClassPath> SoftwareCursors; // 0x88(0x50)
		FSoftClassPath DefaultCursor; // 0xD8(0x18)
		FSoftClassPath TextEditBeamCursor; // 0xF0(0x18)
		FSoftClassPath CrosshairsCursor; // 0x108(0x18)
		FSoftClassPath HandCursor; // 0x120(0x18)
		FSoftClassPath GrabHandCursor; // 0x138(0x18)
		FSoftClassPath GrabHandClosedCursor; // 0x150(0x18)
		FSoftClassPath SlashedCircleCursor; // 0x168(0x18)
		float ApplicationScale; // 0x180(0x4)
		EUIScalingRule UIScaleRule; // 0x184(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x185(0x3) UNKNOWN PROPERTY
		FSoftClassPath CustomScalingRuleClass; // 0x188(0x18)
		FRuntimeFloatCurve UIScaleCurve; // 0x1A0(0x88)
		bool bAllowHighDPIInGameMode; // 0x228(0x1)
		unsigned char UnknownData02_6[0x3]; // 0x229(0x3) UNKNOWN PROPERTY
		FIntPoint DesignScreenSize; // 0x22C(0x8)
		bool bLoadWidgetsOnDedicatedServer; // 0x234(0x1)
		bool bAuthorizeAutomaticWidgetVariableCreation; // 0x235(0x1)
		unsigned char UnknownData03_6[0x2]; // 0x236(0x2) UNKNOWN PROPERTY
		TArray<UObject*> CursorClasses; // 0x238(0x10)
		UClass* CustomScalingRuleClassInstance; // 0x248(0x8)
		UDPICustomScalingRule* CustomScalingRule; // 0x250(0x8)
		unsigned char UnknownData04_7[0x10]; // 0x258(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.UserInterfaceSettings");
			return ret;
		}
	};


	// Class Engine.Canvas
	// Inherited from UObject
	// Size: 0x368 (0x390 - 0x28)
	class UCanvas : public UObject	
	{
	public:
		float OrgX; // 0x28(0x4)
		float OrgY; // 0x2C(0x4)
		float ClipX; // 0x30(0x4)
		float ClipY; // 0x34(0x4)
		FColor DrawColor; // 0x38(0x4)
		bool bCenterX : 1; // 0x3C:0(0x1)
		bool bCenterY : 1; // 0x3C:1(0x1)
		bool bNoSmooth : 1; // 0x3C:2(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x3D(0x3) UNKNOWN PROPERTY
		int32_t SizeX; // 0x40(0x4)
		int32_t SizeY; // 0x44(0x4)
		unsigned char UnknownData01_6[0x8]; // 0x48(0x8) UNKNOWN PROPERTY
		FPlane ColorModulate; // 0x50(0x20)
		UTexture2D* DefaultTexture; // 0x70(0x8)
		UTexture2D* GradientTexture0; // 0x78(0x8)
		UReporterGraph* ReporterGraph; // 0x80(0x8)
		unsigned char UnknownData02_7[0x308]; // 0x88(0x308) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Canvas");
			return ret;
		}

		FVector2D K2_TextSize(UFont* RenderFont, FString RenderText, FVector2D Scale); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E3410(relative to base address)
		FVector2D K2_StrLen(UFont* RenderFont, FString RenderText); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E32E0(relative to base address)
		FVector K2_Project(FVector WorldLocation); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E3194(relative to base address)
		void K2_DrawTriangle(UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E30A4(relative to base address)
		void K2_DrawTexture(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E29E0(relative to base address)
		void K2_DrawText(UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E2048(relative to base address)
		void K2_DrawPolygon(UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E1C54(relative to base address)
		void K2_DrawMaterialTriangle(UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E1AF0(relative to base address)
		void K2_DrawMaterial(UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E1338(relative to base address)
		void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E0FCC(relative to base address)
		void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E0C60(relative to base address)
		void K2_DrawBorder(UTexture* BorderTexture, UTexture* BackgroundTexture, UTexture* LeftBorderTexture, UTexture* RightBorderTexture, UTexture* TopBorderTexture, UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // Flags: Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E0128(relative to base address)
		void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8DFE68(relative to base address)
	};


	// Class Engine.Console
	// Inherited from UObject
	// Size: 0x140 (0x168 - 0x28)
	class UConsole : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x10]; // 0x28(0x10) UNKNOWN PROPERTY
		ULocalPlayer* ConsoleTargetPlayer; // 0x38(0x8)
		UTexture2D* DefaultTexture_Black; // 0x40(0x8)
		UTexture2D* DefaultTexture_White; // 0x48(0x8)
		unsigned char UnknownData01_6[0x18]; // 0x50(0x18) UNKNOWN PROPERTY
		TArray<FString> HistoryBuffer; // 0x68(0x10)
		unsigned char UnknownData02_7[0xF0]; // 0x78(0xF0) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.Console");
			return ret;
		}
	};


	// Class Engine.InputSettings
	// Inherited from UObject
	// Size: 0x100 (0x128 - 0x28)
	class UInputSettings : public UObject	
	{
	public:
		TArray<FInputAxisConfigEntry> AxisConfig; // 0x28(0x10)
		FPerPlatformSettings PlatformSettings; // 0x38(0x10)
		bool bAltEnterTogglesFullscreen : 1; // 0x48:0(0x1)
		bool bF11TogglesFullscreen : 1; // 0x48:1(0x1)
		bool bUseMouseForTouch : 1; // 0x48:2(0x1)
		bool bEnableMouseSmoothing : 1; // 0x48:3(0x1)
		bool bEnableFOVScaling : 1; // 0x48:4(0x1)
		bool bCaptureMouseOnLaunch : 1; // 0x48:5(0x1)
		bool bEnableLegacyInputScales : 1; // 0x48:6(0x1)
		bool bEnableMotionControls : 1; // 0x48:7(0x1)
		bool bFilterInputByPlatformUser : 1; // 0x49:0(0x1)
		bool bEnableInputDeviceSubsystem : 1; // 0x49:1(0x1)
		bool bShouldFlushPressedKeysOnViewportFocusLost : 1; // 0x49:2(0x1)
		bool bEnableDynamicComponentInputBinding : 1; // 0x49:3(0x1)
		bool bAlwaysShowTouchInterface : 1; // 0x49:4(0x1)
		bool bShowConsoleOnFourFingerTap : 1; // 0x49:5(0x1)
		bool bEnableGestureRecognizer : 1; // 0x49:6(0x1)
		bool bUseAutocorrect : 1; // 0x49:7(0x1)
		unsigned char UnknownData00_5[0x6]; // 0x4A(0x6) UNKNOWN PROPERTY
		TArray<FString> ExcludedAutocorrectOS; // 0x50(0x10)
		TArray<FString> ExcludedAutocorrectCultures; // 0x60(0x10)
		TArray<FString> ExcludedAutocorrectDeviceModels; // 0x70(0x10)
		EMouseCaptureMode DefaultViewportMouseCaptureMode; // 0x80(0x1)
		EMouseLockMode DefaultViewportMouseLockMode; // 0x81(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x82(0x2) UNKNOWN PROPERTY
		float FOVScale; // 0x84(0x4)
		float DoubleClickTime; // 0x88(0x4)
		unsigned char UnknownData02_6[0x4]; // 0x8C(0x4) UNKNOWN PROPERTY
		TArray<FInputActionKeyMapping> ActionMappings; // 0x90(0x10)
		TArray<FInputAxisKeyMapping> AxisMappings; // 0xA0(0x10)
		TArray<FInputActionSpeechMapping> SpeechMappings; // 0xB0(0x10)
		TWeakObjectPtr<UClass*> DefaultPlayerInputClass; // 0xC0(0x20)
		TWeakObjectPtr<UClass*> DefaultInputComponentClass; // 0xE0(0x20)
		FSoftObjectPath DefaultTouchInterface; // 0x100(0x18)
		TArray<FKey> ConsoleKeys; // 0x118(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputSettings");
			return ret;
		}

		void SaveKeyMappings(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E7900(relative to base address)
		void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C8E7770(relative to base address)
		void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C8E75E0(relative to base address)
		UInputSettings GetInputSettings(); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure, Memory Exec: 0x7FF74C8DFBDC(relative to base address)
		void GetAxisNames(TArray<FName>& AxisNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8DFB00(relative to base address)
		void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8DF9FC(relative to base address)
		void GetActionNames(TArray<FName>& ActionNames); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8DF920(relative to base address)
		void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8DF79C(relative to base address)
		void ForceRebuildKeymaps(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8DF788(relative to base address)
		void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C8DF498(relative to base address)
		void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C8DF308(relative to base address)
	};


	// Class Engine.InputPlatformSettings
	// Inherited from UPlatformSettings -> UObject
	// Size: 0x28 (0x68 - 0x40)
	class UInputPlatformSettings : public UPlatformSettings	
	{
	public:
		int32_t MaxTriggerFeedbackPosition; // 0x40(0x4)
		int32_t MaxTriggerFeedbackStrength; // 0x44(0x4)
		int32_t MaxTriggerVibrationTriggerPosition; // 0x48(0x4)
		int32_t MaxTriggerVibrationFrequency; // 0x4C(0x4)
		int32_t MaxTriggerVibrationAmplitude; // 0x50(0x4)
		unsigned char UnknownData00_6[0x4]; // 0x54(0x4) UNKNOWN PROPERTY
		TArray<FHardwareDeviceIdentifier> HardwareDevices; // 0x58(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.InputPlatformSettings");
			return ret;
		}
	};


	// Class Engine.PlayerInput
	// Inherited from UObject
	// Size: 0x470 (0x498 - 0x28)
	class UPlayerInput : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x178]; // 0x28(0x178) UNKNOWN PROPERTY
		TArray<FKeyBind> DebugExecBindings; // 0x1A0(0x10)
		unsigned char UnknownData01_6[0x30]; // 0x1B0(0x30) UNKNOWN PROPERTY
		TArray<FName> InvertedAxis; // 0x1E0(0x10)
		unsigned char UnknownData02_7[0x2A8]; // 0x1F0(0x2A8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.PlayerInput");
			return ret;
		}

		void SetMouseSensitivity(float Sensitivity); // Flags: Final|Exec|Native|Public, Memory Exec: 0x7FF74C8E7A3C(relative to base address)
		void SetBind(FName BindName, FString Command); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C8E7914(relative to base address)
		void InvertAxisKey(FKey AxisKey); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C8DFCBC(relative to base address)
		void InvertAxis(FName AxisName); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C8DFC3C(relative to base address)
		APlayerController GetOuterAPlayerController(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8DFC00(relative to base address)
		void ClearSmoothing(); // Flags: Final|RequiredAPI|Exec|Native|Public, Memory Exec: 0x7FF74C8DF6D8(relative to base address)
	};


	// Class Engine.VectorFieldVolume
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AVectorFieldVolume : public AActor	
	{
	public:
		UVectorFieldComponent* VectorFieldComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VectorFieldVolume");
			return ret;
		}
	};


	// Class Engine.TireType
	// Inherited from UDataAsset -> UObject
	// Size: 0x8 (0x38 - 0x30)
	class UTireType : public UDataAsset	
	{
	public:
		float FrictionScale; // 0x30(0x4)
		unsigned char UnknownData00_7[0x4]; // 0x34(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.TireType");
			return ret;
		}
	};


	// Class Engine.VisualLoggerAutomationTests
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVisualLoggerAutomationTests : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerAutomationTests");
			return ret;
		}
	};


	// Class Engine.VisualLoggerFilterVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AVisualLoggerFilterVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerFilterVolume");
			return ret;
		}
	};


	// Class Engine.VisualLoggerKismetLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VisualLoggerKismetLibrary");
			return ret;
		}

		void RedirectVislog(UObject* SourceOwner, UObject* DestinationOwner); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E74BC(relative to base address)
		void LogText(UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E7368(relative to base address)
		void LogSphere(UObject* WorldContextObject, FVector Center, float Radius, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E6DA4(relative to base address)
		void LogSegment(UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E67E8(relative to base address)
		void LogOrientedBox(UObject* WorldContextObject, FBox BoxShape, FTransform Transform, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E6134(relative to base address)
		void LogLocation(UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E5C28(relative to base address)
		void LogCylinder(UObject* WorldContextObject, FVector Start, FVector End, float Radius, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E5588(relative to base address)
		void LogCone(UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float Angle, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E4E2C(relative to base address)
		void LogCircle(UObject* WorldContextObject, FVector Center, FVector UpAxis, float Radius, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E478C(relative to base address)
		void LogCapsule(UObject* WorldContextObject, FVector base, float HalfHeight, float Radius, FQuat Rotation, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E4030(relative to base address)
		void LogBox(UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog, bool bWireframe); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E3B00(relative to base address)
		void LogArrow(UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, FName CategoryName, bool bAddToMessageLog); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C8E35F8(relative to base address)
		void EnableRecording(bool bEnabled); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C079284(relative to base address)
	};


	// Class Engine.VoiceChannel
	// Inherited from UChannel -> UObject
	// Size: 0x10 (0x78 - 0x68)
	class UVoiceChannel : public UChannel	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x68(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VoiceChannel");
			return ret;
		}
	};


	// Class Engine.VOIPTalker
	// Inherited from UActorComponent -> UObject
	// Size: 0x40 (0xE0 - 0xA0)
	class UVOIPTalker : public UActorComponent	
	{
	public:
		FVoiceSettings Settings; // 0xA0(0x18)
		unsigned char UnknownData00_7[0x28]; // 0xB8(0x28) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VOIPTalker");
			return ret;
		}

		void RegisterWithPlayerState(APlayerState* OwningState); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E7560(relative to base address)
		float GetVoiceLevel(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C8DFC24(relative to base address)
		UVOIPTalker CreateTalkerForPlayer(APlayerState* OwningState); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C8DF6EC(relative to base address)
		void BPOnTalkingEnd(); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF74C8DF6C0(relative to base address)
		void BPOnTalkingBegin(UAudioComponent* AudioComponent); // Flags: RequiredAPI|Native|Event|Protected|BlueprintEvent, Memory Exec: 0x7FF74C8DF63C(relative to base address)
	};


	// Class Engine.VOIPStatics
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVOIPStatics : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VOIPStatics");
			return ret;
		}

		void SetMicThreshold(float InThreshold); // Flags: Final|RequiredAPI|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF74C8E79CC(relative to base address)
	};


	// Class Engine.VolumeTexture
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x10 (0x140 - 0x130)
	class UVolumeTexture : public UTexture	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x130(0x8) UNKNOWN PROPERTY
		TEnumAsByte<TextureAddress> AddressMode; // 0x138(0x1)
		unsigned char UnknownData01_7[0x7]; // 0x139(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumeTexture");
			return ret;
		}
	};


	// Class Engine.VolumetricLightmapDensityVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x8 (0x2D0 - 0x2C8)
	class AVolumetricLightmapDensityVolume : public AVolume	
	{
	public:
		FInt32Interval AllowedMipLevelRange; // 0x2C8(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VolumetricLightmapDensityVolume");
			return ret;
		}
	};


	// Class Engine.LightMapVirtualTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x18 (0x168 - 0x150)
	class ULightMapVirtualTexture2D : public UTexture2D	
	{
	public:
		TArray<int8_t> TypeToLayer; // 0x150(0x10)
		unsigned char UnknownData00_7[0x8]; // 0x160(0x8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightMapVirtualTexture2D");
			return ret;
		}
	};


	// Class Engine.RuntimeVirtualTexture
	// Inherited from UObject
	// Size: 0xB8 (0xE0 - 0x28)
	class URuntimeVirtualTexture : public UObject	
	{
	public:
		int32_t TileCount; // 0x28(0x4)
		int32_t TileSize; // 0x2C(0x4)
		int32_t TileBorderSize; // 0x30(0x4)
		ERuntimeVirtualTextureMaterialType MaterialType; // 0x34(0x1)
		bool bCompressTextures; // 0x35(0x1)
		bool bUseLowQualityCompression; // 0x36(0x1)
		bool bClearTextures; // 0x37(0x1)
		bool bSinglePhysicalSpace; // 0x38(0x1)
		bool bPrivateSpace; // 0x39(0x1)
		bool bAdaptive; // 0x3A(0x1)
		bool bContinuousUpdate; // 0x3B(0x1)
		int32_t RemoveLowMips; // 0x3C(0x4)
		TEnumAsByte<TextureGroup> LODGroup; // 0x40(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		int32_t Size; // 0x44(0x4)
		URuntimeVirtualTextureStreamingProxy* StreamingTexture; // 0x48(0x8)
		unsigned char UnknownData01_7[0x90]; // 0x50(0x90) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTexture");
			return ret;
		}

		int32_t GetTileSize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8FB510(relative to base address)
		int32_t GetTileCount(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8FB4D8(relative to base address)
		int32_t GetTileBorderSize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8FB4B0(relative to base address)
		int32_t GetSize(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8FB46C(relative to base address)
		int32_t GetPageTableSize(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C8FB41C(relative to base address)
	};


	// Class Engine.RuntimeVirtualTextureVolume
	// Inherited from AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ARuntimeVirtualTextureVolume : public AActor	
	{
	public:
		URuntimeVirtualTextureComponent* VirtualTextureComponent; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTextureVolume");
			return ret;
		}
	};


	// Class Engine.VirtualTexture
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UVirtualTexture : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTexture");
			return ret;
		}
	};


	// Class Engine.LightMapVirtualTexture
	// Inherited from UVirtualTexture -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class ULightMapVirtualTexture : public UVirtualTexture	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.LightMapVirtualTexture");
			return ret;
		}
	};


	// Class Engine.RuntimeVirtualTextureStreamingProxy
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x0 (0x150 - 0x150)
	class URuntimeVirtualTextureStreamingProxy : public UTexture2D	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeVirtualTextureStreamingProxy");
			return ret;
		}
	};


	// Class Engine.VirtualTexture2D
	// Inherited from UTexture2D -> UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x10 (0x160 - 0x150)
	class UVirtualTexture2D : public UTexture2D	
	{
	public:
		FVirtualTextureBuildSettings Settings; // 0x150(0x8)
		bool bContinuousUpdate; // 0x158(0x1)
		bool bSinglePhysicalSpace; // 0x159(0x1)
		unsigned char UnknownData00_7[0x6]; // 0x15A(0x6) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTexture2D");
			return ret;
		}
	};


	// Class Engine.VirtualTextureAdapter
	// Inherited from UTexture -> UStreamableRenderAsset -> UObject
	// Size: 0x18 (0x148 - 0x130)
	class UVirtualTextureAdapter : public UTexture	
	{
	public:
		UTexture* Texture; // 0x130(0x8)
		bool bUseCompressedFormat; // 0x138(0x1)
		bool bUseDefaultTileSizes; // 0x139(0x1)
		unsigned char UnknownData00_6[0x2]; // 0x13A(0x2) UNKNOWN PROPERTY
		int32_t TileSize; // 0x13C(0x4)
		int32_t TileBorderSize; // 0x140(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x144(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTextureAdapter");
			return ret;
		}
	};


	// Class Engine.VirtualTextureBuilder
	// Inherited from UObject
	// Size: 0x20 (0x48 - 0x28)
	class UVirtualTextureBuilder : public UObject	
	{
	public:
		UVirtualTexture2D* Texture; // 0x28(0x8)
		UVirtualTexture2D* TextureMobile; // 0x30(0x8)
		uint64_t BuildHash; // 0x38(0x8)
		bool bSeparateTextureForMobile; // 0x40(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x41(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTextureBuilder");
			return ret;
		}
	};


	// Class Engine.VirtualTexturePoolConfig
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x28 (0x58 - 0x30)
	class UVirtualTexturePoolConfig : public UDeveloperSettings	
	{
	public:
		int32_t DefaultSizeInMegabyte; // 0x30(0x4)
		bool bPoolAutoGrowInEditor; // 0x34(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x35(0x3) UNKNOWN PROPERTY
		TArray<FVirtualTextureSpacePoolConfig> Pools; // 0x38(0x10)
		TArray<FVirtualTextureSpacePoolConfig> TransientPools; // 0x48(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.VirtualTexturePoolConfig");
			return ret;
		}
	};


	// Class Engine.WindDirectionalSource
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class AWindDirectionalSource : public AInfo	
	{
	public:
		UWindDirectionalSourceComponent* Component; // 0x290(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WindDirectionalSource");
			return ret;
		}
	};


	// Class Engine.WorldComposition
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UWorldComposition : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x20]; // 0x28(0x20) UNKNOWN PROPERTY
		TArray<ULevelStreaming*> TilesStreaming; // 0x48(0x10)
		double TilesStreamingTimeThreshold; // 0x58(0x8)
		bool bLoadAllTilesDuringCinematic; // 0x60(0x1)
		bool bRebaseOriginIn3DSpace; // 0x61(0x1)
		unsigned char UnknownData01_6[0x2]; // 0x62(0x2) UNKNOWN PROPERTY
		float RebaseOriginDistance; // 0x64(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldComposition");
			return ret;
		}
	};


	// Class Engine.WorldPartitionBlueprintLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionBlueprintLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionBlueprintLibrary");
			return ret;
		}

		void UnpinActors(TArray<FGuid>& InActorsToUnpin); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C9111C0(relative to base address)
		void UnloadActors(TArray<FGuid>& InActorsToUnload); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C9111C0(relative to base address)
		void PinActors(TArray<FGuid>& InActorsToPin); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C9111C0(relative to base address)
		void LoadActors(TArray<FGuid>& InActorsToLoad); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C9111C0(relative to base address)
		FBox GetRuntimeWorldBounds(); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C910F94(relative to base address)
		bool GetIntersectingActorDescs(FBox& InBox, TArray<FActorDesc>& OutActorDescs); // Flags: Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C911024(relative to base address)
		FBox GetEditorWorldBounds(); // Flags: Final|Native|Static|Public|HasDefaults|BlueprintCallable, Memory Exec: 0x7FF74C910F94(relative to base address)
		UDataLayerManager GetDataLayerManager(UObject* WorldContextObject); // Flags: Final|Native|Static|Public|BlueprintCallable, Memory Exec: 0x7FF749818D58(relative to base address)
		bool GetActorDescsForActors(TArray<AActor*>& InActors, TArray<FActorDesc>& OutActorDescs); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C9107B4(relative to base address)
		bool GetActorDescs(TArray<FActorDesc>& OutActorDescs); // Flags: Final|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C910730(relative to base address)
	};


	// Class Engine.ActorDescContainerSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UActorDescContainerSubsystem : public UEngineSubsystem	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ActorDescContainerSubsystem");
			return ret;
		}
	};


	// Class Engine.ContentBundleDescriptor
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UContentBundleDescriptor : public UObject	
	{
	public:
		FString DisplayName; // 0x28(0x10)
		FColor DebugColor; // 0x38(0x4)
		FGuid Guid; // 0x3C(0x10)
		unsigned char UnknownData00_7[0x4]; // 0x4C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleDescriptor");
			return ret;
		}
	};


	// Class Engine.ContentBundleUnsavedActorMonitor
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UContentBundleUnsavedActorMonitor : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleUnsavedActorMonitor");
			return ret;
		}
	};


	// Class Engine.ContentBundleEngineSubsystem
	// Inherited from UEngineSubsystem -> UDynamicSubsystem -> USubsystem -> UObject
	// Size: 0x98 (0xC8 - 0x30)
	class UContentBundleEngineSubsystem : public UEngineSubsystem	
	{
	public:
		unsigned char UnknownData00_3[0x70]; // 0x30(0x70) UNKNOWN PROPERTY
		TWeakObjectPtr<UClass*> ContentBundleTypeFactoryClass; // 0xA0(0x20)
		UContentBundleTypeFactory* ContentBundleTypeFactory; // 0xC0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleEngineSubsystem");
			return ret;
		}
	};


	// Class Engine.ContentBundleManager
	// Inherited from UObject
	// Size: 0x10 (0x38 - 0x28)
	class UContentBundleManager : public UObject	
	{
	public:
		unsigned char UnknownData00_1[0x10]; // 0x28(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleManager");
			return ret;
		}
	};


	// Class Engine.ContentBundleDuplicateForPIEHelper
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UContentBundleDuplicateForPIEHelper : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.ContentBundleDuplicateForPIEHelper");
			return ret;
		}
	};


	// Class Engine.WorldPartitionCookPackageObject
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionCookPackageObject : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionCookPackageObject");
			return ret;
		}
	};


	// Class Engine.WorldDataLayers
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x588 (0x818 - 0x290)
	class AWorldDataLayers : public AInfo	
	{
	public:
		unsigned char UnknownData00_3[0xA8]; // 0x290(0xA8) UNKNOWN PROPERTY
		UExternalDataLayerInstance* RootExternalDataLayerInstance; // 0x338(0x8)
		TSet<UDataLayerInstance*> DataLayerInstances; // 0x340(0x50)
		TSet<UDataLayerInstance*> ExternalPackageDataLayerInstances; // 0x390(0x50)
		TArray<UDataLayerInstance*> LoadedExternalPackageDataLayerInstances; // 0x3E0(0x10)
		TArray<UDataLayerInstance*> TransientDataLayerInstances; // 0x3F0(0x10)
		TMap<FName, TWeakObjectPtr> DeprecatedDataLayerNameToDataLayerInstance; // 0x400(0x50)
		TSet<UDataLayer*> WorldDataLayers; // 0x450(0x50)
		TArray<FName> RepActiveDataLayerNames; // 0x4A0(0x10)
		TArray<FName> RepLoadedDataLayerNames; // 0x4B0(0x10)
		unsigned char UnknownData01_6[0x140]; // 0x4C0(0x140) UNKNOWN PROPERTY
		TArray<FName> RepEffectiveActiveDataLayerNames; // 0x600(0x10)
		TArray<FName> RepEffectiveLoadedDataLayerNames; // 0x610(0x10)
		unsigned char UnknownData02_7[0x1F8]; // 0x620(0x1F8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldDataLayers");
			return ret;
		}

		void OnRep_LoadedDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF7496E56F0(relative to base address)
		void OnRep_EffectiveLoadedDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF7499FE090(relative to base address)
		void OnRep_EffectiveActiveDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF749B1F620(relative to base address)
		void OnRep_ActiveDataLayerNames(); // Flags: Final|RequiredAPI|Native|Protected, Memory Exec: 0x7FF7498A40DC(relative to base address)
		void OnDataLayerRuntimeStateChanged(UDataLayerInstance* InDataLayer, EDataLayerRuntimeState InState); // Flags: RequiredAPI|Net|NetReliableNative|Event|NetMulticast|Public, Memory Exec: 0x7FF7481C7EF4(relative to base address)
	};


	// Class Engine.DataLayer
	// Inherited from UObject
	// Size: 0x28 (0x50 - 0x28)
	class UDataLayer : public UObject	
	{
	public:
		FName DataLayerLabel; // 0x28(0x4)
		bool bIsRuntime : 1; // 0x2C:0(0x1)
		unsigned char UnknownData00_5[0x3]; // 0x2D(0x3) UNKNOWN PROPERTY
		EDataLayerRuntimeState InitialRuntimeState; // 0x30(0x1)
		unsigned char UnknownData01_6[0x3]; // 0x31(0x3) UNKNOWN PROPERTY
		FColor DebugColor; // 0x34(0x4)
		UDataLayer* Parent; // 0x38(0x8)
		TArray<UDataLayer*> Children; // 0x40(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayer");
			return ret;
		}

		bool IsVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsRuntime(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C911140(relative to base address)
		bool IsInitiallyVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsInitiallyActive(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C911158(relative to base address)
		bool IsEffectiveVisible(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748CDD424(relative to base address)
		bool IsDynamicallyLoaded(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C911140(relative to base address)
		EDataLayerState GetInitialState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910FE0(relative to base address)
		EDataLayerRuntimeState GetInitialRuntimeState(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910FE0(relative to base address)
		FColor GetDebugColor(); // Flags: Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF748BA07FC(relative to base address)
		FName GetDataLayerLabel(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910E0C(relative to base address)
		bool Equals(FActorDataLayer& ActorDataLayer); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C91066C(relative to base address)
	};


	// Class Engine.DataLayerInstancePrivate
	// Inherited from UDataLayerInstance -> UObject
	// Size: 0x18 (0x60 - 0x48)
	class UDataLayerInstancePrivate : public UDataLayerInstance	
	{
	public:
		FString ShortName; // 0x48(0x10)
		UDataLayerAsset* DataLayerAsset; // 0x58(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstancePrivate");
			return ret;
		}
	};


	// Class Engine.DataLayerInstanceProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDataLayerInstanceProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerInstanceProvider");
			return ret;
		}
	};


	// Class Engine.DataLayerLoadingPolicy
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UDataLayerLoadingPolicy : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerLoadingPolicy");
			return ret;
		}
	};


	// Class Engine.DataLayerSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x30 (0x60 - 0x30)
	class UDataLayerSubsystem : public UWorldSubsystem	
	{
	public:
		FMulticastInlineDelegate OnDataLayerRuntimeStateChanged; // 0x30(0x10)
		TWeakObjectPtr<UClass*> DataLayerLoadingPolicyClass; // 0x40(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DataLayerSubsystem");
			return ret;
		}

		void SetDataLayerStateByLabel(FName& InDataLayerLabel, EDataLayerState InState); // Flags: Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C911878(relative to base address)
		void SetDataLayerState(FActorDataLayer& InDataLayer, EDataLayerState InState); // Flags: Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C91171C(relative to base address)
		void SetDataLayerRuntimeStateByLabel(FName& InDataLayerLabel, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C911584(relative to base address)
		void SetDataLayerRuntimeState(FActorDataLayer& InDataLayer, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C911368(relative to base address)
		void SetDataLayerInstanceRuntimeState(UDataLayerAsset* InDataLayerAsset, EDataLayerRuntimeState InState, bool bInIsRecursive); // Flags: Final|RequiredAPI|BlueprintAuthorityOnly|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C91123C(relative to base address)
		TSet GetLoadedDataLayerNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C9110F0(relative to base address)
		EDataLayerState GetDataLayerStateByLabel(FName& InDataLayerLabel); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910EB8(relative to base address)
		EDataLayerState GetDataLayerState(FActorDataLayer& InDataLayer); // Flags: Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910E20(relative to base address)
		EDataLayerRuntimeState GetDataLayerRuntimeStateByLabel(FName& InDataLayerLabel); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910EB8(relative to base address)
		EDataLayerRuntimeState GetDataLayerRuntimeState(FActorDataLayer& InDataLayer); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910E20(relative to base address)
		EDataLayerRuntimeState GetDataLayerInstanceRuntimeState(UDataLayerAsset* InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910D40(relative to base address)
		UDataLayerInstance GetDataLayerInstanceFromAsset(UDataLayerAsset* InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910C9C(relative to base address)
		EDataLayerRuntimeState GetDataLayerInstanceEffectiveRuntimeState(UDataLayerAsset* InDataLayerAsset); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910BF0(relative to base address)
		UDataLayerInstance GetDataLayerFromName(FName InDataLayerName); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910B64(relative to base address)
		UDataLayerInstance GetDataLayerFromLabel(FName InDataLayerLabel); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910AD8(relative to base address)
		EDataLayerRuntimeState GetDataLayerEffectiveRuntimeStateByLabel(FName& InDataLayerLabel); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910A18(relative to base address)
		EDataLayerRuntimeState GetDataLayerEffectiveRuntimeState(FActorDataLayer& InDataLayer); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C91095C(relative to base address)
		UDataLayerInstance GetDataLayer(FActorDataLayer& InDataLayer); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C9108C0(relative to base address)
		TSet GetActiveDataLayerNames(); // Flags: Final|Native|Public|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF74C910704(relative to base address)
	};


	// Class Engine.DeprecatedDataLayerInstance
	// Inherited from UDataLayerInstance -> UObject
	// Size: 0x10 (0x58 - 0x48)
	class UDeprecatedDataLayerInstance : public UDataLayerInstance	
	{
	public:
		FName Label; // 0x48(0x4)
		FName DeprecatedDataLayerFName; // 0x4C(0x4)
		EDataLayerType DataLayerType; // 0x50(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x51(0x3) UNKNOWN PROPERTY
		FColor DebugColor; // 0x54(0x4)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.DeprecatedDataLayerInstance");
			return ret;
		}
	};


	// Class Engine.WorldPartitionDestructibleHLODComponent
	// Inherited from USceneComponent -> UActorComponent -> UObject
	// Size: 0x10 (0x230 - 0x220)
	class UWorldPartitionDestructibleHLODComponent : public USceneComponent	
	{
	public:
		TArray<FName> DestructibleActors; // 0x220(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleHLODComponent");
			return ret;
		}
	};


	// Class Engine.WorldPartitionDestructibleHLODMeshComponent
	// Inherited from UWorldPartitionDestructibleHLODComponent -> USceneComponent -> UActorComponent -> UObject
	// Size: 0x160 (0x390 - 0x230)
	class UWorldPartitionDestructibleHLODMeshComponent : public UWorldPartitionDestructibleHLODComponent	
	{
	public:
		UMaterialInterface* DestructibleHLODMaterial; // 0x230(0x8)
		FWorldPartitionDestructibleHLODState DestructibleHLODState; // 0x238(0x148)
		UMaterialInstanceDynamic* VisibilityMaterial; // 0x380(0x8)
		UTexture2DDynamic* VisibilityTexture; // 0x388(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleHLODMeshComponent");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLOD
	// Inherited from AActor -> UObject
	// Size: 0x18 (0x2A8 - 0x290)
	class AWorldPartitionHLOD : public AActor	
	{
	public:
		uint32_t LODLevel; // 0x290(0x4)
		bool bRequireWarmup; // 0x294(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x295(0x3) UNKNOWN PROPERTY
		FGuid SourceCellGuid; // 0x298(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLOD");
			return ret;
		}
	};


	// Class Engine.HLODBuilderSettings
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UHLODBuilderSettings : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODBuilderSettings");
			return ret;
		}
	};


	// Class Engine.NullHLODBuilder
	// Inherited from UHLODBuilder -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UNullHLODBuilder : public UHLODBuilder	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NullHLODBuilder");
			return ret;
		}
	};


	// Class Engine.WorldPartitionDestructibleInHLODInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionDestructibleInHLODInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleInHLODInterface");
			return ret;
		}

		void SetHLODDestructionTag(FWorldPartitionHLODDestructionTag& InDestructionTag); // Flags: RequiredAPI|Native|Event|Public|HasOutParms|BlueprintEvent, Memory Exec: 0x7FF7491BB2D8(relative to base address)
		FWorldPartitionHLODDestructionTag GetHLODDestructionTag(); // Flags: RequiredAPI|Native|Event|Public|BlueprintEvent|Const, Memory Exec: 0x7FF7491BB15C(relative to base address)
	};


	// Class Engine.WorldPartitionDestructibleInHLODSupportLibrary
	// Inherited from UBlueprintFunctionLibrary -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionDestructibleInHLODSupportLibrary : public UBlueprintFunctionLibrary	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionDestructibleInHLODSupportLibrary");
			return ret;
		}

		void DestroyInHLOD(TScriptInterface<Class>& DestructibleInHLOD); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C9105EC(relative to base address)
		void DamageInHLOD(TScriptInterface<Class>& DestructibleInHLOD, float DamagePercent); // Flags: Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable, Memory Exec: 0x7FF74C910490(relative to base address)
	};


	// Class Engine.HLODLayer
	// Inherited from UObject
	// Size: 0x40 (0x68 - 0x28)
	class UHLODLayer : public UObject	
	{
	public:
		EHLODLayerType LayerType; // 0x28(0x1)
		unsigned char UnknownData00_6[0x7]; // 0x29(0x7) UNKNOWN PROPERTY
		UClass* HLODBuilderClass; // 0x30(0x8)
		UHLODBuilderSettings* HLODBuilderSettings; // 0x38(0x8)
		bool bIsSpatiallyLoaded : 1; // 0x40:0(0x1)
		unsigned char UnknownData01_5[0x3]; // 0x41(0x3) UNKNOWN PROPERTY
		int32_t CellSize; // 0x44(0x4)
		double LoadingRange; // 0x48(0x8)
		UHLODLayer* ParentLayer; // 0x50(0x8)
		UClass* HLODActorClass; // 0x58(0x8)
		UClass* HLODModifierClass; // 0x60(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.HLODLayer");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODModifier
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODModifier : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODModifier");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODProvider
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionHLODProvider : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODProvider");
			return ret;
		}
	};


	// Class Engine.WorldPartitionHLODRuntimeSubsystem
	// Inherited from UWorldSubsystem -> USubsystem -> UObject
	// Size: 0xE8 (0x118 - 0x30)
	class UWorldPartitionHLODRuntimeSubsystem : public UWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0xE8]; // 0x30(0xE8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionHLODRuntimeSubsystem");
			return ret;
		}
	};


	// Class Engine.NavigationDataChunkActor
	// Inherited from APartitionActor -> AActor -> UObject
	// Size: 0x48 (0x2D8 - 0x290)
	class ANavigationDataChunkActor : public APartitionActor	
	{
	public:
		TArray<UNavigationDataChunk*> NavDataChunks; // 0x290(0x10)
		FBox DataChunkActorBounds; // 0x2A0(0x38)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.NavigationDataChunkActor");
			return ret;
		}
	};


	// Class Engine.WorldPartitionActorLoaderInterface
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionActorLoaderInterface : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionActorLoaderInterface");
			return ret;
		}
	};


	// Class Engine.WorldPartitionEditorHash
	// Inherited from UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionEditorHash : public UObject	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionEditorPerProjectUserSettings
	// Inherited from UDeveloperSettings -> UObject
	// Size: 0x0 (0x30 - 0x30)
	class UWorldPartitionEditorPerProjectUserSettings : public UDeveloperSettings	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorPerProjectUserSettings");
			return ret;
		}
	};


	// Class Engine.WorldPartitionEditorSpatialHash
	// Inherited from UWorldPartitionEditorHash -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionEditorSpatialHash : public UWorldPartitionEditorHash	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionEditorSpatialHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionLevelStreamingDynamic
	// Inherited from ULevelStreamingDynamic -> ULevelStreaming -> UObject
	// Size: 0x30 (0x1D0 - 0x1A0)
	class UWorldPartitionLevelStreamingDynamic : public ULevelStreamingDynamic	
	{
	public:
		bool bShouldBeAlwaysLoaded; // 0x1A0(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x1A1(0x3) UNKNOWN PROPERTY
		TWeakObjectPtr<UWorldPartitionRuntimeLevelStreamingCell*> StreamingCell; // 0x1A4(0x8)
		unsigned char UnknownData01_6[0x4]; // 0x1AC(0x4) UNKNOWN PROPERTY
		TWeakObjectPtr<UWorldPartition*> OuterWorldPartition; // 0x1B0(0x20)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionLevelStreamingDynamic");
			return ret;
		}
	};


	// Class Engine.WorldPartitionStreamingPolicy
	// Inherited from UObject
	// Size: 0x3D8 (0x400 - 0x28)
	class UWorldPartitionStreamingPolicy : public UObject	
	{
	public:
		unsigned char UnknownData00_3[0x8]; // 0x28(0x8) UNKNOWN PROPERTY
		FWorldPartitionUpdateStreamingCurrentState CurrentState; // 0x30(0x100)
		EWorldPartitionStreamingPerformance CurrentStreamingPerformance; // 0x130(0x1)
		unsigned char UnknownData01_6[0x7]; // 0x131(0x7) UNKNOWN PROPERTY
		FWorldPartitionUpdateStreamingTargetState TargetState; // 0x138(0x48)
		FWorldPartitionUpdateStreamingCurrentState AsyncTaskCurrentState; // 0x180(0x100)
		FWorldPartitionUpdateStreamingTargetState AsyncTaskTargetState; // 0x280(0x48)
		bool bShouldMergeStreamingSourceInfo; // 0x2C8(0x1)
		unsigned char UnknownData02_7[0x137]; // 0x2C9(0x137) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionStreamingPolicy");
			return ret;
		}
	};


	// Class Engine.WorldPartitionLevelStreamingPolicy
	// Inherited from UWorldPartitionStreamingPolicy -> UObject
	// Size: 0x110 (0x510 - 0x400)
	class UWorldPartitionLevelStreamingPolicy : public UWorldPartitionStreamingPolicy	
	{
	public:
		FTopLevelAssetPath SourceWorldAssetPath; // 0x400(0x8)
		TMap<FName, FName> SubObjectsToCellRemapping; // 0x408(0x50)
		FWorldPartitionRuntimeContainerResolver ContainerResolver; // 0x458(0x58)
		TArray<TWeakObjectPtr> ExternalStreamingObjects; // 0x4B0(0x10)
		TMap<FName, TWeakObjectPtr> SubObjectsToExternalStreamingObjectsRemapping; // 0x4C0(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionLevelStreamingPolicy");
			return ret;
		}
	};


	// Class Engine.WorldPartitionMiniMap
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0xD0 (0x360 - 0x290)
	class AWorldPartitionMiniMap : public AInfo	
	{
	public:
		FBox MiniMapWorldBounds; // 0x290(0x38)
		FBox2D UVOffset; // 0x2C8(0x28)
		UTexture2D* MiniMapTexture; // 0x2F0(0x8)
		TSet<FActorDataLayer> ExcludedDataLayers; // 0x2F8(0x50)
		int32_t WorldUnitsPerPixel; // 0x348(0x4)
		int32_t BuilderCellSize; // 0x34C(0x4)
		TEnumAsByte<ESceneCaptureSource> CaptureSource; // 0x350(0x1)
		unsigned char UnknownData00_6[0x3]; // 0x351(0x3) UNKNOWN PROPERTY
		uint32_t CaptureWarmupFrames; // 0x354(0x4)
		int32_t MiniMapTileSize; // 0x358(0x4)
		unsigned char UnknownData01_7[0x4]; // 0x35C(0x4) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionMiniMap");
			return ret;
		}
	};


	// Class Engine.WorldPartitionMiniMapVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AWorldPartitionMiniMapVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionMiniMapVolume");
			return ret;
		}
	};


	// Class Engine.WorldPartitionReplay
	// Inherited from AActor -> UObject
	// Size: 0x20 (0x2B0 - 0x290)
	class AWorldPartitionReplay : public AActor	
	{
	public:
		TArray<FName> StreamingSourceNames; // 0x290(0x10)
		unsigned char UnknownData00_7[0x10]; // 0x2A0(0x10) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionReplay");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeCellDataSpatialHash
	// Inherited from UWorldPartitionRuntimeCellData -> UObject
	// Size: 0x70 (0x148 - 0xD8)
	class UWorldPartitionRuntimeCellDataSpatialHash : public UWorldPartitionRuntimeCellData	
	{
	public:
		FVector Position; // 0xD8(0x18)
		float Extent; // 0xF0(0x4)
		unsigned char UnknownData00_7[0x54]; // 0xF4(0x54) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeCellDataSpatialHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionCell
	// Inherited from UInterface -> UObject
	// Size: 0x0 (0x28 - 0x28)
	class UWorldPartitionCell : public UInterface	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionCell");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeLevelStreamingCell
	// Inherited from UWorldPartitionRuntimeCell -> UObject
	// Size: 0x8 (0xB8 - 0xB0)
	class UWorldPartitionRuntimeLevelStreamingCell : public UWorldPartitionRuntimeCell	
	{
	public:
		UWorldPartitionLevelStreamingDynamic* LevelStreaming; // 0xB0(0x8)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeLevelStreamingCell");
			return ret;
		}

		void OnLevelShown(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74882FF1C(relative to base address)
		void OnLevelHidden(); // Flags: Final|RequiredAPI|Native|Private, Memory Exec: 0x7FF74882FCF4(relative to base address)
	};


	// Class Engine.SpatialHashRuntimeGridInfo
	// Inherited from AInfo -> AActor -> UObject
	// Size: 0x8 (0x298 - 0x290)
	class ASpatialHashRuntimeGridInfo : public AInfo	
	{
	public:
		FSpatialHashRuntimeGrid GridSettings; // 0x290(0x1)
		unsigned char UnknownData00_7[0x7]; // 0x291(0x7) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.SpatialHashRuntimeGridInfo");
			return ret;
		}
	};


	// Class Engine.RuntimeSpatialHashExternalStreamingObject
	// Inherited from URuntimeHashExternalStreamingObjectBase -> UObject
	// Size: 0x10 (0x1C8 - 0x1B8)
	class URuntimeSpatialHashExternalStreamingObject : public URuntimeHashExternalStreamingObjectBase	
	{
	public:
		TArray<FSpatialHashStreamingGrid> StreamingGrids; // 0x1B8(0x10)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.RuntimeSpatialHashExternalStreamingObject");
			return ret;
		}
	};


	// Class Engine.WorldPartitionRuntimeSpatialHash
	// Inherited from UWorldPartitionRuntimeHash -> UObject
	// Size: 0xC0 (0x138 - 0x78)
	class UWorldPartitionRuntimeSpatialHash : public UWorldPartitionRuntimeHash	
	{
	public:
		bool bEnableZCulling; // 0x78(0x1)
		FSpatialHashSettings Settings; // 0x79(0x2)
		unsigned char UnknownData00_6[0x5]; // 0x7B(0x5) UNKNOWN PROPERTY
		TArray<FSpatialHashStreamingGrid> StreamingGrids; // 0x80(0x10)
		unsigned char UnknownData01_6[0x58]; // 0x90(0x58) UNKNOWN PROPERTY
		TMap<FGuid, URuntimeSpatialHashExternalStreamingObject*> WorldAssetStreamingObjects; // 0xE8(0x50)

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionRuntimeSpatialHash");
			return ret;
		}
	};


	// Class Engine.WorldPartitionSubsystem
	// Inherited from UTickableWorldSubsystem -> UWorldSubsystem -> USubsystem -> UObject
	// Size: 0x2B8 (0x2F8 - 0x40)
	class UWorldPartitionSubsystem : public UTickableWorldSubsystem	
	{
	public:
		unsigned char UnknownData00_1[0x2B8]; // 0x40(0x2B8) UNKNOWN PROPERTY

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionSubsystem");
			return ret;
		}

		bool IsStreamingCompleted(EWorldPartitionRuntimeCellState QueryState, TArray<FWorldPartitionStreamingQuerySource>& QuerySources, bool bExactState); // Flags: Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const, Memory Exec: 0x7FF7482C867C(relative to base address)
		bool IsAllStreamingCompleted(); // Flags: Final|RequiredAPI|Native|Public|BlueprintCallable, Memory Exec: 0x7FF74C931F6C(relative to base address)
	};


	// Class Engine.WorldPartitionVolume
	// Inherited from AVolume -> ABrush -> AActor -> UObject
	// Size: 0x0 (0x2C8 - 0x2C8)
	class AWorldPartitionVolume : public AVolume	
	{
	public:

		static UClass* StaticClass() const {
			static auto ret = SDK::Utils::StaticFindObject<UClass>("/Script/Engine.WorldPartitionVolume");
			return ret;
		}
	};

}
